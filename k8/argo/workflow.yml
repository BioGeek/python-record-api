# https://argoproj.github.io/argo/fields/
apiVersion: argoproj.io/v1alpha1
kind: Workflow
spec:
  podGC:
    strategy: OnWorkflowSuccess
  entrypoint: all
  # Use volume to store temp full output, otherwise run out of ephemeral
  # storage
  # https://argoproj.github.io/argo/examples/#volumes
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 100Gi
  arguments:
    parameters:
      - name: label
        value: "..."
      - name: base-image
        value: "..."
      - name: image
        value: "..."
  templates:
    - name: all
      steps:
        - - name: record-api
            template: record-api
        - - name: groupby-lines
            template: groupby-lines
        - - name: infer-api
            template: infer-api
    - name: record-api
      container:
        image: "{{workflow.parameters.image}}"
        env:
          - name: PYTHON_RECORD_API_OUTPUT_FILE
            value: /tmp/vol/raw.jsonl
          - name: PYTHON_RECORD_API_TO_MODULES
            value: numpy,pandas
        # https://github.com/argoproj/argo/blob/master/docs/resource-duration.md#request-defaults
        # Must override or get defaults which are too low
        resources:
          requests:
            memory: 4Gi
            cpu: 1000m
          limits:
            memory: 8Gi
            cpu: 4000m
        volumeMounts:
          - name: data
            mountPath: /tmp/vol
    - name: groupby-lines
      container:
        image: "{{workflow.parameters.base-image}}"
        command: [python, -m, record_api.line_counts]
        env:
          - name: PYTHON_RECORD_API_INPUT
            value: /tmp/vol/raw.jsonl
          - name: PYTHON_RECORD_API_OUTPUT
            value: /tmp/vol/grouped.jsonl
        resources:
          requests:
            memory: 1Gi
            cpu: 500m
          limits:
            memory: 8Gi
            cpu: 4000m
        volumeMounts:
          - name: data
            mountPath: /tmp/vol
    - name: infer-api
      outputs:
        artifacts:
          - name: api
            path: /tmp/api.json
      container:
        image: "{{workflow.parameters.base-image}}"
        command: [python, -m, record_api.infer_apis]
        env:
          - name: PYTHON_RECORD_API_LABEL
            value: "{{workflow.parameters.label}}"
          - name: PYTHON_RECORD_API_MODULES
            value: pandas,numpy
          - name: PYTHON_RECORD_API_INPUT
            value: /tmp/vol/grouped.jsonl
          - name: PYTHON_RECORD_API_OUTPUT
            value: /tmp/api.json
        resources:
          requests:
            memory: 1Gi
            cpu: 500m
          limits:
            memory: 8Gi
            cpu: 4000m
        volumeMounts:
          - name: data
            mountPath: /tmp/vol
