function,count,library
numpy.nan,1988,pandas
numpy.array,900,pandas
numpy.ndarray.shape,690,skimage
numpy.random,587,pandas
numpy.ndarray.dtype,542,pandas
numpy.arange(int),350,pandas
numpy.ndarray[int],341,matplotlib
numpy.int64,322,pandas
numpy.ndarray[int],297,pandas
*numpy.ndarray,283,matplotlib
numpy.ndarray,252,pandas
numpy.array(list[int]),246,pandas
numpy.ndarray[int],238,skimage
numpy.ndarray.dtype,238,skimage
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int)",228,pandas
numpy.ndarray.ndim,228,skimage
numpy.array(list[builtins.bool]),209,pandas
numpy.ndarray[numpy.ndarray],201,pandas
numpy.ndarray[numpy.ndarray],200,skimage
numpy.arange(int),199,xarray
"numpy.array(list[int], dtype=Type[numpy.int64])",199,pandas
numpy.uint8,198,skimage
numpy.float64,198,pandas
numpy.float64 - numpy.float64,196,matplotlib
numpy.ndarray.shape,193,matplotlib
numpy.ndarray.all(numpy.ndarray),190,pandas
numpy.int64 == int,186,pandas
numpy.dtype(str),184,pandas
numpy.ndarray * numpy.ndarray,184,skimage
numpy.nan,184,xarray
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=numpy.ndarray)",180,skimage
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int, int)",175,pandas
numpy.arange,174,pandas
numpy.dtype == str,170,pandas
numpy.zeros,168,skimage
numpy.ndarray.any(numpy.ndarray),161,pandas
numpy.float64 + numpy.float64,157,matplotlib
numpy.array,151,skimage
*numpy.ndarray,150,pandas
numpy.ndarray + numpy.ndarray,148,matplotlib
numpy.random,145,skimage
numpy.random,145,dask.array
numpy.ndarray == int,145,pandas
numpy.ndarray - numpy.ndarray,145,skimage
numpy.ndarray + numpy.ndarray,145,skimage
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=numpy.ndarray)",143,skimage
numpy.ndarray[numpy.ndarray],142,matplotlib
numpy.ndarray.shape,138,pandas
numpy.ndarray ** int,131,skimage
~numpy.ndarray,131,pandas
numpy.random,130,xarray
float * numpy.ndarray,128,matplotlib
numpy.intp,125,pandas
numpy.ndarray.ndim,122,pandas
"numpy.ndarray.astype(numpy.ndarray, str)",121,pandas
numpy.ndarray.copy(numpy.ndarray),121,pandas
numpy.ndarray * numpy.ndarray,121,matplotlib
numpy.random,120,matplotlib
"numpy.zeros(tuple[int, int])",120,skimage
*numpy.ndarray,114,skimage
numpy.arange(int),114,dask.array
numpy.arange(int),114,matplotlib
float * numpy.ndarray,114,skimage
numpy.ndarray.shape,112,dask.array
numpy.ndarray.all,108,pandas
numpy.object_,107,pandas
numpy.int32,107,pandas
"numpy.arange(int, dtype=str)",107,pandas
numpy.ndarray.dtype,106,dask.array
numpy.ma,103,matplotlib
numpy.pi,101,matplotlib
numpy.ndarray - numpy.ndarray,101,matplotlib
numpy.ndarray.dtype,100,xarray
"numpy.ndarray[tuple[int, int]] = int",99,skimage
"numpy.ndarray[tuple[int, int]]",99,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int]]",99,matplotlib
"numpy.array(list[int], dtype=str)",98,pandas
numpy.dtype.type,97,pandas
"numpy.timedelta64(int, str)",97,pandas
numpy.array(list[list[int]]),95,skimage
"numpy.ndarray.reshape(numpy.ndarray, int, int)",89,pandas
numpy.float64 == numpy.float64,89,pandas
numpy.asarray,87,pandas
numpy.float64 + float,85,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int]]",84,skimage
numpy.empty,83,pandas
numpy.errstate,83,pandas
numpy.dtype.kind,82,pandas
numpy.asarray(a=numpy.ndarray),81,pandas
numpy.errstate(kwargs=dict),81,pandas
numpy.absolute(numpy.ndarray),79,skimage
numpy.arange(int),78,skimage
numpy.timedelta64,76,pandas
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=numpy.ndarray)",76,xarray
int * numpy.ndarray,76,skimage
numpy.float64 - float,74,matplotlib
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, atol=float, desired=numpy.ndarray)",74,matplotlib
numpy.float64 / numpy.float64,73,matplotlib
numpy.float64 * numpy.float64,73,matplotlib
numpy.sum(a=numpy.ndarray),73,skimage
numpy.ndarray & numpy.ndarray,72,pandas
numpy.zeros,72,pandas
numpy.ndarray.ndim,72,dask.array
float * numpy.float64,71,matplotlib
numpy.array(list[str]),71,pandas
numpy.ndarray[numpy.ndarray] = int,70,pandas
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.ndarray, desired=numpy.ndarray)",70,skimage
numpy.ndarray == int,70,skimage
numpy.ndarray / numpy.ndarray,68,skimage
numpy.double,68,skimage
"numpy.ndarray[tuple[int, int]]",68,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=numpy.ndarray)",67,matplotlib
"numpy.ndarray[slice[NoneType, int, NoneType]]",67,pandas
numpy.bool_,67,pandas
numpy.all(a=numpy.ndarray),67,skimage
numpy.array(list[int]),67,skimage
numpy.ndarray.ravel(numpy.ndarray),66,skimage
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType]]]",66,skimage
numpy.dtype.kind,66,xarray
numpy.isnan,65,pandas
numpy.ndarray.T,65,matplotlib
numpy.mean,64,pandas
numpy.pi,64,skimage
numpy.dtype == numpy.dtype,64,pandas
numpy.ndarray.T,64,pandas
numpy.float64 * float,64,matplotlib
numpy.float64 / float,63,matplotlib
numpy.array,63,xarray
numpy.ndarray * int,63,pandas
numpy.array(list[float]),62,pandas
numpy.int64 == numpy.int64,61,pandas
float * numpy.float64,61,skimage
int * numpy.ndarray,61,matplotlib
numpy.dtype == Type[numpy.float64],61,pandas
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int, int)",61,xarray
"numpy.ndarray[tuple[builtins.ellipsis, int]]",61,skimage
-numpy.float64,60,matplotlib
numpy.ndarray.T,60,skimage
numpy.ndarray.ravel(numpy.ndarray),60,pandas
numpy.ndarray.ndim,60,matplotlib
numpy.inf,60,pandas
numpy.ndarray == numpy.ndarray,59,pandas
numpy.ones,58,skimage
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]] = int",58,skimage
numpy.bool,57,skimage
numpy.ndarray + int,57,matplotlib
numpy.ndarray.shape,56,xarray
numpy.float64 - numpy.float64,56,skimage
numpy.array(list[int]),56,dask.array
numpy.ndarray.copy(numpy.ndarray),56,skimage
"numpy.ndarray.view(numpy.ndarray, str)",56,pandas
numpy.ndarray[numpy.ndarray] = numpy.ndarray,55,pandas
numpy.ndarray.size,55,skimage
"numpy.ndarray[slice[int, NoneType, NoneType]]",55,pandas
numpy.sin(numpy.ndarray),54,matplotlib
numpy.ndarray += numpy.ndarray,54,skimage
numpy.ndarray * float,54,matplotlib
numpy.datetime64,54,pandas
numpy.ndarray ** int,54,matplotlib
numpy.ndarray,53,dask.array
numpy.ndarray * int,52,skimage
numpy.ndarray,52,xarray
numpy.ndarray > int,52,skimage
numpy.ndarray.max(numpy.ndarray),52,skimage
numpy.asarray(a=numpy.ndarray),52,matplotlib
numpy.all,52,skimage
numpy.float64 == int,52,matplotlib
numpy.ndarray - int,51,skimage
numpy.NaN,51,pandas
numpy.ma,50,dask.array
numpy.ndarray | numpy.ndarray,50,pandas
"numpy.arange(int, int)",50,pandas
numpy.float64,49,skimage
numpy.nan,49,dask.array
"numpy.linspace(num=int, start=int, stop=int)",48,matplotlib
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int])",48,pandas
numpy.ma.core.MaskedArray.shape,48,matplotlib
not numpy.bool_,48,pandas
numpy.ndarray.sum(numpy.ndarray),48,skimage
numpy.ndarray.astype,48,pandas
numpy.ndarray[numpy.ndarray] = numpy.ndarray,48,skimage
numpy.newaxis,47,skimage
numpy.int8,47,pandas
numpy.testing,47,xarray
numpy.sum,46,pandas
-numpy.ndarray,46,matplotlib
numpy.vstack(tup=list[numpy.ndarray]),46,matplotlib
numpy.array(list[float]),46,matplotlib
"numpy.ndarray[slice[NoneType, int, NoneType]]",46,skimage
"numpy.ones(shape=tuple[int, int])",46,skimage
numpy.float64,46,matplotlib
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int)",46,xarray
numpy.datetime64(str),46,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, int]]",46,matplotlib
int * numpy.float64,45,skimage
numpy.ndarray[numpy.ndarray] = int,45,skimage
numpy.isnan(float),45,pandas
"numpy.linspace(num=int, start=int, stop=int)",45,xarray
numpy.ndarray.ndim,45,xarray
"numpy.ndarray.take(numpy.ndarray, numpy.ndarray)",45,pandas
numpy.float64 / numpy.float64,44,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint8])",44,skimage
numpy.absolute(numpy.ndarray),44,matplotlib
numpy.ndarray.size,44,matplotlib
numpy.ndarray.min(numpy.ndarray),44,skimage
numpy.sqrt(numpy.ndarray),44,skimage
"numpy.testing._private.utils.assert_equal(actual=int, desired=int)",44,skimage
"numpy.ndarray.reshape(numpy.ndarray, int, int)",44,skimage
numpy.testing._private.utils.assert_(val=numpy.bool_),43,skimage
numpy.dtype,43,pandas
numpy.ndarray[int],43,xarray
"numpy.ndarray.astype(numpy.ndarray, numpy.dtype)",43,pandas
numpy.ndarray + int,43,dask.array
numpy.nan,43,matplotlib
numpy.random.randint,43,pandas
numpy.ndarray * int,43,matplotlib
numpy.ndarray[numpy.ndarray] = numpy.ndarray,43,matplotlib
"numpy.zeros(tuple[int, int, int])",42,skimage
numpy.ndarray / int,42,matplotlib
numpy.float32,41,skimage
numpy.ndarray / int,41,skimage
"numpy.random.mtrand.RandomState.seed(numpy.random.mtrand.RandomState, int)",41,matplotlib
numpy.ndarray.max(numpy.ndarray),41,matplotlib
numpy.ndarray / float,41,skimage
numpy.bool,41,pandas
"numpy.array(list[str], dtype=Type[builtins.object])",40,pandas
numpy.ndarray + float,40,matplotlib
numpy.pad,40,skimage
"numpy.ndarray[slice[int, NoneType, NoneType]]",40,matplotlib
numpy.ndarray.size,40,pandas
"numpy.ndarray[slice[NoneType, int, NoneType]]",40,matplotlib
"numpy.array(list[int], dtype=numpy.dtype)",40,pandas
numpy.float32,40,pandas
numpy.testing,40,skimage
numpy.dtype == Type[numpy.object_],39,pandas
numpy.mgrid,39,skimage
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int])",39,dask.array
numpy.float64 == int,39,pandas
numpy.array,39,matplotlib
numpy.dtype == Type[builtins.object],39,pandas
"numpy.meshgrid(xi=tuple[numpy.ndarray, numpy.ndarray])",39,matplotlib
numpy.ndarray @ numpy.ndarray,39,skimage
numpy.dtype.name,38,pandas
numpy.concatenate(list[numpy.ndarray]),38,pandas
numpy.ndarray != int,38,pandas
numpy.float64 / int,38,matplotlib
numpy.float64 == float,38,pandas
numpy.ndarray + int,38,pandas
numpy.dtype(Type[builtins.object]),38,pandas
numpy.dtype == numpy.dtype,38,xarray
numpy.ndarray & numpy.ndarray,37,matplotlib
"numpy.ndarray[tuple[sliinte[int, int, NoneType], sliinte[int, int, NoneType]]] = int",37,skimage
numpy.ndarray == numpy.ndarray,37,skimage
"numpy.ndarray[slice[NoneType, NoneType, int]]",37,pandas
numpy.amax(a=numpy.ndarray),37,skimage
float / numpy.float64,36,matplotlib
"numpy.ndarray[slice[int, int, NoneType]]",36,pandas
numpy.ndarray.all(numpy.ndarray),36,dask.array
"numpy.array(list[int], dtype=Type[numpy.int32])",36,pandas
numpy.ndarray[numpy.ndarray] = float,36,pandas
numpy.ndarray.ravel(numpy.ndarray),36,matplotlib
"numpy.array(list[list[int]], dtype=Type[numpy.uint8])",35,skimage
numpy.object,35,pandas
numpy.float,35,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.float64])",35,skimage
numpy.array(numpy.ndarray),35,pandas
-numpy.ndarray,35,skimage
numpy.ndarray + numpy.ndarray,35,dask.array
numpy.ndarray + int,35,skimage
numpy.float64 > numpy.float64,35,matplotlib
numpy.random.randint,35,dask.array
numpy.ndarray / numpy.ndarray,35,matplotlib
"numpy.array(list[Union[float, int]])",34,pandas
"numpy.ndarray.astype(numpy.ndarray, str)",34,skimage
numpy.cos(numpy.ndarray),34,matplotlib
"numpy.ndarray[slice[int, int, NoneType]]",34,matplotlib
numpy.testing,34,matplotlib
numpy.float64 + numpy.float64,34,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.float])",34,skimage
numpy.ndarray.all,33,dask.array
numpy.float64 + int,33,matplotlib
numpy.ndarray.std(numpy.ndarray),33,skimage
numpy.ndarray.min(numpy.ndarray),33,matplotlib
numpy.float64 == int,33,skimage
numpy.ndarray / float,33,matplotlib
numpy.zeros_like(a=numpy.ndarray),32,skimage
numpy.asarray(a=numpy.ndarray),32,xarray
numpy.ndarray.sum(numpy.ndarray),32,pandas
numpy.ndarray.nonzero(numpy.ndarray),32,pandas
numpy.ndarray[int] = int,32,skimage
numpy.dtype == Type[numpy.int64],32,pandas
"numpy.linspace(num=int, start=float, stop=float)",32,matplotlib
numpy.iterable(y=numpy.ndarray),32,matplotlib
int == numpy.int64,32,pandas
numpy.float64 * int,32,matplotlib
"numpy.array(list[builtins.bool], dtype=Type[builtins.bool])",31,pandas
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, size=int)",31,pandas
numpy.zeros(int),31,matplotlib
numpy.asarray,31,xarray
numpy.dtype(str),31,xarray
"numpy.ndarray[slice[NoneType, NoneType, int]]",31,matplotlib
float + numpy.float64,31,matplotlib
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, desired=numpy.ndarray)",31,skimage
numpy.ndarray += numpy.ndarray,31,matplotlib
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int])",31,matplotlib
numpy.sum,31,skimage
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=numpy.ndarray)",31,skimage
numpy.ndarray >= int,31,skimage
numpy.float64 > numpy.float64,31,skimage
numpy.inf,31,matplotlib
int * numpy.float64,31,matplotlib
numpy.dtype == numpy.dtype,30,skimage
"numpy.array(tuple[int, int])",30,skimage
numpy.all(a=numpy.ndarray),30,pandas
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int)",30,skimage
numpy.ndarray - numpy.float64,30,skimage
numpy.ndarray[int] = int,30,pandas
numpy.int32,30,matplotlib
numpy.dtype != numpy.dtype,30,pandas
numpy.float64 * numpy.ndarray,30,matplotlib
"numpy.zeros(tuple[int, int], dtype=Type[numpy.uint8])",30,skimage
numpy.any(a=numpy.ndarray),30,skimage
numpy.uint8,30,pandas
numpy.ndarray[str],30,pandas
numpy.ndarray / numpy.float64,30,skimage
"numpy.zeros(int, dtype=Type[builtins.bool])",29,pandas
numpy.float64 * numpy.float64,29,skimage
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta == numpy.timedelta64,29,pandas
int - numpy.float64,29,matplotlib
numpy.integer,29,pandas
numpy.uint64,29,pandas
numpy.int64 == int,29,skimage
numpy.isnan(numpy.float64),29,pandas
numpy.ma.core.MaskedArray.ndim,29,matplotlib
numpy.ndarray & numpy.ndarray,29,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.object])",28,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], int]] = numpy.ndarray",28,matplotlib
numpy.asarray(a=pandas.core.series.Series),28,pandas
float - numpy.float64,28,matplotlib
numpy.ndarray.tolist(numpy.ndarray),28,pandas
*numpy.ndarray,28,xarray
numpy.array,28,dask.array
numpy.int8,28,skimage
numpy.newaxis,28,matplotlib
numpy.float64 - int,28,skimage
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.variable.Variable, y=numpy.ndarray)",28,xarray
numpy.ones,28,dask.array
numpy.arange,27,matplotlib
numpy.array(list[int]),27,xarray
numpy.ndarray.base,27,pandas
numpy.ndarray.all,27,skimage
numpy.float64 - int,27,matplotlib
"numpy.ones(shape=tuple[int, int])",27,dask.array
numpy.dtype(Type[numpy.object_]),27,pandas
numpy.float64 == numpy.float64,27,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int64])",27,pandas
numpy.int64(int),27,pandas
numpy.ones,27,pandas
numpy.int16,27,pandas
int - numpy.ndarray,27,skimage
numpy.ndarray - float,27,matplotlib
int + numpy.ndarray,26,skimage
numpy.ndarray * float,26,skimage
"numpy.zeros(tuple[int, int], dtype=Type[numpy.float64])",26,skimage
numpy.int32,26,skimage
numpy.uint16,26,skimage
"numpy.zeros(tuple[int, int], str)",26,skimage
numpy.iterable(y=list[int]),26,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.float])",26,pandas
numpy.float64 ** int,26,skimage
numpy.linalg,25,skimage
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int)",25,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int]] = numpy.ndarray",25,skimage
numpy.inf,25,skimage
numpy.ndarray.sum,25,dask.array
"numpy.array(list[str], dtype=str)",25,pandas
numpy.zeros,25,matplotlib
numpy.int64 + int,25,skimage
numpy.arange,25,xarray
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int])",25,dask.array
"numpy.ndarray.reshape(numpy.ndarray, tuple[int])",25,pandas
numpy.ndarray.flatten(numpy.ndarray),25,matplotlib
numpy.ones(shape=int),25,matplotlib
numpy.random.mtrand.RandomState(int),25,skimage
numpy.dtype == Type[numpy.bool_],25,pandas
"numpy.testing._private.utils.assert_equal(actual=tuple[int, int], desired=tuple[int, int])",25,skimage
numpy.dtype == numpy.dtype,25,dask.array
"numpy.ndarray[slice[int, int, int]]",25,pandas
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=int)",25,skimage
numpy.ndarray[numpy.ndarray] = builtins.bool,24,pandas
"numpy.ndarray.repeat(numpy.ndarray, int)",24,pandas
numpy.std,24,pandas
numpy.int64 + int,24,matplotlib
numpy.ndarray - numpy.ndarray,24,pandas
numpy.ndarray - int,24,pandas
numpy.all,24,pandas
numpy.ndarray >= int,24,pandas
~numpy.ndarray,24,matplotlib
numpy.zeros,24,dask.array
"numpy.ndarray[tuple[int, sliinte[NoneType, NoneType, NoneType]]] = int",24,skimage
numpy.ndarray.dtype,24,matplotlib
numpy.ndarray + float,24,skimage
numpy.ndarray == int,24,dask.array
numpy.ndarray == int,24,matplotlib
"numpy.ndarray[tuple[builtins.ellipsis, NoneType]]",24,skimage
numpy.ndarray - int,24,matplotlib
"numpy.ones(dtype=Type[numpy.uint8], shape=tuple[int, int])",24,skimage
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int])",24,skimage
numpy.asarray(a=list[int]),24,pandas
numpy.ndarray.size,24,xarray
numpy.ndarray == numpy.ndarray,23,dask.array
numpy.ndarray.all(numpy.ndarray),23,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType]]]",23,skimage
numpy.empty,23,skimage
"numpy.arange(int, int, int)",23,pandas
numpy.ndarray * numpy.float64,23,matplotlib
numpy.eye(N=int),23,skimage
numpy.linalg,23,dask.array
int - numpy.ndarray,23,matplotlib
numpy.asarray,23,skimage
"numpy.arange(int, dtype=Type[numpy.int64])",23,pandas
numpy.ma.core.MaskedArray.mask,23,matplotlib
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",23,skimage
~numpy.ndarray,23,skimage
numpy.ascontiguousarray(a=numpy.ndarray),23,skimage
numpy.sort(a=numpy.ndarray),23,pandas
"numpy.ndarray.astype(numpy.ndarray, str, copy=builtins.bool)",23,pandas
numpy.array(list[int]),23,matplotlib
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int)",23,pandas
numpy.float64 * numpy.ndarray,23,skimage
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.float64, decimal=int, desired=float)",22,skimage
numpy.array(list[list[float]]),22,skimage
numpy.ndarray[int] = numpy.float64,22,matplotlib
numpy.ma.core.MaskedArray[int],22,matplotlib
numpy.ndarray / numpy.float64,22,matplotlib
numpy.array(list[list[int]]),22,matplotlib
numpy.sqrt(numpy.float64),22,skimage
"numpy.ndarray.astype(numpy.ndarray, str)",22,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, int)",22,pandas
numpy.mean(a=numpy.ndarray),22,skimage
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int, int])",22,dask.array
numpy.ndarray.take,22,pandas
"numpy.ndarray[tuple[int, int, int]]",22,skimage
numpy.ndarray * numpy.float64,22,skimage
numpy.amin(a=numpy.ndarray),22,matplotlib
numpy.asarray,22,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.float64])",22,pandas
-numpy.float64,22,skimage
int * numpy.ndarray,22,dask.array
numpy.dtype(Type[builtins.bool]),22,pandas
numpy.empty,22,dask.array
numpy.dtype == Type[builtins.bool],22,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int]]",22,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType]]]",22,skimage
numpy.int32 == numpy.int32,22,pandas
numpy.numpy.bool_ool_ == numpy.bool_,22,pandas
numpy.uint8 == numpy.uint8,22,pandas
numpy.uint32 == numpy.uint32,22,pandas
"numpy.array(list[str], dtype=Type[numpy.object_])",22,pandas
numpy.int8 == numpy.int8,22,pandas
numpy.uint64 == numpy.uint64,21,pandas
numpy.float64 > int,21,matplotlib
numpy.ndarray.max(numpy.ndarray),21,pandas
numpy.asarray(a=numpy.ndarray),21,skimage
numpy.asarray(a=pandas.core.arrays.sparse.array.SparseArray),21,pandas
numpy.ndarray.ravel(numpy.ndarray),21,xarray
numpy.ndarray[int] = numpy.ndarray,21,skimage
numpy.int64 + int,21,pandas
numpy.int64 > int,21,pandas
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]]",21,skimage
numpy.ndarray[numpy.ndarray] = str,21,pandas
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, tuple[int, int])",21,dask.array
numpy.ndarray % int,21,pandas
"numpy.ndarray[tuple[int, int]]",21,pandas
numpy.dtype == Type[numpy.int32],21,pandas
numpy.ones(shape=int),21,pandas
numpy.max,21,skimage
"numpy.tile(A=numpy.ndarray, reps=int)",21,pandas
numpy.ndarray[int],21,dask.array
"numpy.arange(int, int)",21,xarray
numpy.unique(ar=numpy.ndarray),21,skimage
numpy.array(list[list[int]]),21,pandas
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int])",20,dask.array
numpy.intp,20,dask.array
numpy.ndarray.any(numpy.ndarray),20,matplotlib
numpy.ndarray[int] = float,20,pandas
numpy.array(list[float]),20,skimage
numpy.asarray(a=pandas.core.arrays.categorical.Categorical),20,pandas
numpy.ndarray.T,20,xarray
numpy.timedelta64(str),20,pandas
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.float64, desired=float)",20,skimage
numpy.number,20,pandas
"numpy.ndarray.reshape(numpy.ndarray, int, int)",20,matplotlib
numpy.exp(numpy.ndarray),20,skimage
numpy.int64,20,xarray
numpy.sin(numpy.float64),20,matplotlib
numpy.isnan(float),20,dask.array
"numpy.lituple[slice[int, int, NoneType], slice[int, int, NoneType]].index_tricks.MGridClass[tuple[slice[int, int, NoneType], slice[int, int, NoneType]]]",20,skimage
"numpy.array(list[builtins.bool], dtype=str)",20,pandas
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int])",20,xarray
numpy.array(int),20,pandas
"numpy.ones(dtype=Type[builtins.bool], shape=tuple[int, int])",20,skimage
float + numpy.ndarray,20,matplotlib
numpy.iinfo.max,20,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, slice[NoneType, NoneType, NoneType]]]",20,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.float32])",20,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType]]]",20,skimage
numpy.ma.core.MaskedArray.ndim,20,dask.array
numpy.dtype(Type[numpy.int64]),20,pandas
numpy.ravel(a=numpy.ndarray),19,matplotlib
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, size=int)",19,matplotlib
numpy.all(a=numpy.ndarray),19,matplotlib
numpy.ndarray + numpy.ndarray,19,pandas
numpy.ndarray + float,19,pandas
"numpy.ones(shape=tuple[int, int])",19,pandas
numpy.isfinite(numpy.float64),19,matplotlib
int + numpy.ndarray,19,pandas
numpy.ndarray - float,19,skimage
"numpy.dot(numpy.ndarray, numpy.ndarray)",19,matplotlib
numpy.absolute(numpy.float64),19,matplotlib
"numpy.ndarray[tuple[int, int, int]] = int",19,skimage
numpy.arange,19,skimage
numpy.amax(a=numpy.ndarray),19,matplotlib
numpy.random.normal,19,matplotlib
"numpy.arange(int, int)",19,matplotlib
numpy.ndarray[numpy.int64],19,pandas
numpy.ma.core.MaskedArray.dtype,19,pandas
numpy.ndarray += int,19,skimage
numpy.ndarray == numpy.ndarray,19,matplotlib
numpy.isnan(int),19,dask.array
"numpy.arange(int, int, int)",19,matplotlib
numpy.array(list[numpy.ndarray]),19,skimage
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType]]]",19,skimage
numpy.ndarray * int,19,dask.array
-numpy.ndarray,19,pandas
numpy.nan,19,skimage
"numpy.hypot(numpy.ndarray, numpy.ndarray)",19,matplotlib
numpy.ndarray,18,skimage
"numpy.ndarray[slice[NoneType, int, NoneType]]",18,dask.array
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=numpy.ndarray)",18,matplotlib
numpy.ndarray == numpy.ndarray,18,xarray
numpy.float32,18,xarray
numpy.exp(numpy.ndarray),18,matplotlib
"numpy.zeros(tuple[int, int], dtype=Type[builtins.int])",18,skimage
pandas.core.series.Series - numpy.float64,18,pandas
numpy.uint8,18,matplotlib
numpy.asarray(a=pandas.core.indexes.numeric.Int64Index),18,pandas
numpy.cos(numpy.float64),18,matplotlib
numpy.dtype(Type[builtins.bytes]),18,pandas
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int])",18,dask.array
"numpy.ndarray[slice[int, NoneType, NoneType]]",18,skimage
numpy.asarray(a=list[int]),18,matplotlib
"numpy.ndarray.reshape(numpy.ndarray, tuple[int])",18,xarray
numpy.ndarray.copy(numpy.ndarray),18,matplotlib
numpy.amin(a=numpy.ndarray),18,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.int])",18,skimage
"numpy.zeros(tuple[int, int])",18,matplotlib
numpy.uint16 == numpy.uint16,18,pandas
numpy.dtype == str,18,xarray
numpy.ma.masked_array,18,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], int]] = numpy.ndarray",18,skimage
numpy.ndarray.mean(numpy.ndarray),18,skimage
numpy.ndarray[numpy.ndarray],18,dask.array
numpy.array(list),18,pandas
numpy.sqrt(int),18,skimage
numpy.iterable(y=list),18,matplotlib
numpy.float64 * int,17,pandas
numpy.asarray(a=list[float]),17,matplotlib
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType]]]",17,skimage
"numpy.arange(int, int)",17,skimage
numpy.ndarray.flat,17,matplotlib
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int, int])",17,skimage
numpy.iterable(y=int),17,matplotlib
numpy.array(numpy.ndarray),17,matplotlib
numpy.float64 > int,17,pandas
numpy.ndarray[str],17,skimage
numpy.ceil(numpy.float64),17,matplotlib
int * numpy.ndarray,17,pandas
"numpy.ndarray.take(numpy.ndarray, list[int], axis=int)",17,pandas
float - numpy.ndarray,17,matplotlib
numpy.ndarray.sum,17,skimage
numpy.array(list[list[float]]),17,matplotlib
numpy.float64 - numpy.float64,17,pandas
"numpy.ndarray.astype(numpy.ndarray, numpy.dtype, copy=builtins.bool)",17,pandas
numpy.zeros(int),17,pandas
numpy.uint64(int),17,pandas
int + numpy.float64,17,matplotlib
numpy.random.mtrand.RandomState(int),17,pandas
numpy.dtype,17,xarray
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, size=tuple[int, int])",17,dask.array
numpy.ndarray.mean,17,skimage
"numpy.ndarray[slice[NoneType, NoneType, int]]",17,skimage
numpy.ndarray + numpy.float64,17,skimage
"numpy.array(list, dtype=str)",17,pandas
"numpy.ones(shape=tuple[int, int, int])",16,skimage
numpy.ndarray.sum,16,pandas
"numpy.ndarray.reshape(numpy.ndarray, int, int)",16,xarray
numpy.ma,16,skimage
"numpy.ndarray.reshape(numpy.ndarray, int, int, int)",16,xarray
numpy.int16 == numpy.int16,16,pandas
numpy.ndarray * numpy.ndarray,16,dask.array
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int])",16,xarray
numpy.ma.array,16,matplotlib
numpy.ndarray > int,16,matplotlib
"numpy.ndarray.view(numpy.ndarray, numpy.dtype)",16,pandas
numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray),16,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",16,skimage
numpy.sin(numpy.ndarray),16,skimage
numpy.asarray(a=pandas.core.indexes.base.Index),16,pandas
numpy.ones(shape=int),16,dask.array
numpy.concatenate(list[numpy.ndarray]),16,matplotlib
numpy.ones(shape=int),16,skimage
numpy.dtype.type,16,skimage
numpy.dtype == Type[numpy.int8],16,pandas
numpy.dtype == Type[numpy.complex128],16,pandas
numpy.float64 * float,16,pandas
numpy.ndarray.searchsorted,16,pandas
"numpy.array(list[pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",16,pandas
numpy.dtype(Type[numpy.float64]),16,pandas
numpy.ndarray[numpy.int64],16,skimage
int - numpy.ndarray,16,pandas
numpy.bool_,16,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.bool])",16,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], int, int]] = numpy.ndarray",16,matplotlib
"numpy.array(list, dtype=Type[numpy.int64])",16,pandas
"numpy.ndarray.astype(numpy.ndarray, numpy.dtype)",16,skimage
numpy.int64 == int,16,matplotlib
numpy.ndarray.all(numpy.ndarray),16,xarray
"numpy.putmask(numpy.ndarray, numpy.ndarray, int)",16,pandas
numpy.void[int],15,skimage
numpy.dtype(Type[builtins.str]),15,pandas
numpy.arange(float),15,pandas
float == numpy.float64,15,pandas
numpy.random.mtrand.RandomState.normal,15,skimage
numpy.ndarray > int,15,pandas
numpy.float64 / float,15,skimage
numpy.array(pandas.core.indexes.base.Index),15,pandas
numpy.ndarray.flags,15,pandas
"numpy.ndarray[slice[numpy.int64, numpy.int64, NoneType]]",15,pandas
numpy.array(list[list[int]]),15,dask.array
numpy.array(pandas.core.series.Series),15,pandas
"numpy.datetime64(str, str)",15,pandas
"numpy.linspace(num=int, start=int, stop=int)",15,skimage
"numpy.random.mtrand.RandomState.seed(numpy.random.mtrand.RandomState, int)",15,skimage
numpy.intp,15,skimage
numpy.uint32,15,skimage
numpy.mean(a=pandas.core.series.Series),15,pandas
numpy.ndarray / numpy.ndarray,15,pandas
numpy.dot,15,dask.array
numpy.array(float),15,pandas
"numpy.ndarray.fill(numpy.ndarray, float)",15,pandas
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, atol=float, desired=numpy.ndarray)",15,skimage
numpy.ndarray,15,matplotlib
numpy.float64 / int,15,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], int]]",15,skimage
numpy.float64 > float,15,matplotlib
numpy.iterable(y=list[numpy.float64]),15,matplotlib
numpy.diff(a=numpy.ndarray),15,matplotlib
str % numpy.float64,15,matplotlib
"numpy.zeros(tuple[int, int], dtype=Type[builtins.bool])",15,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[NoneType, NoneType, int]]]",15,skimage
numpy.float64 == float,15,matplotlib
numpy.ma.core.MaskedArray.shape,15,dask.array
numpy.ndarray.all(numpy.ndarray),15,matplotlib
numpy.ma.MaskedArray,15,matplotlib
"numpy.testing._private.utils.assert_equal(actual=numpy.float64, desired=int)",15,skimage
numpy.zeros_like(a=numpy.ndarray),15,matplotlib
numpy.nonzero(a=numpy.ndarray),15,skimage
"numpy.linspace(num=int, start=float, stop=float)",15,xarray
"numpy.random.mtrand.RandomState.seed(numpy.random.mtrand.RandomState, int)",15,dask.array
numpy.array(list[numpy.float64]),15,matplotlib
numpy.float64 > float,15,skimage
"numpy.clip(a=numpy.ndarray, a_max=int, a_min=int)",14,skimage
numpy.any(a=numpy.ndarray),14,pandas
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=list[int])",14,skimage
numpy.ndarray[numpy.ndarray] = float,14,skimage
"numpy.timedelta64(int, str)",14,xarray
numpy.empty,14,matplotlib
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int)",14,dask.array
numpy.iterable(y=list[float]),14,matplotlib
float + numpy.ndarray,14,skimage
*numpy.flatiter,14,matplotlib
numpy.empty_like(numpy.ndarray),14,skimage
"numpy.ones(shape=tuple[int, int])",14,xarray
"numpy.ndarray[tuple[int, sliinte[int, int, NoneType], sliinte[int, int, NoneType]]] = int",14,skimage
numpy.dtype == Type[builtins.bool],14,pandas
numpy.float64 + int,14,skimage
numpy.errstate(kwargs=dict),14,matplotlib
numpy.int64 + numpy.int64,14,pandas
numpy.where(numpy.ndarray),14,pandas
numpy.ndarray.tolist(numpy.ndarray),14,dask.array
numpy.random.uniform,14,skimage
numpy.errstate,14,matplotlib
numpy.asarray(a=pandas.core.indexes.datetimes.DatetimeIndex),14,pandas
int ** numpy.float64,14,matplotlib
numpy.float64 += numpy.float64,14,matplotlib
numpy.cos(float),14,skimage
numpy.ndarray *= numpy.ndarray,14,skimage
"numpy.ndarray.astype(numpy.ndarray, str)",14,xarray
numpy.ndarray[list[int]],14,pandas
numpy.r_,14,pandas
numpy.ma.core.MaskedArray.dtype,14,matplotlib
numpy.ceil(numpy.float64),14,skimage
numpy.int64 == float,14,pandas
numpy.cos(numpy.ndarray),14,skimage
"numpy.dot(numpy.ndarray, numpy.ndarray)",14,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.int])",14,matplotlib
numpy.log10(numpy.float64),14,matplotlib
numpy.load(file=str),14,skimage
"numpy.iterable(y=list[Union[float, int]])",14,matplotlib
"numpy.sum(a=numpy.ndarray, axis=int)",14,skimage
numpy.einsum,14,xarray
numpy.percentile,14,pandas
numpy.ndarray.T,13,dask.array
numpy.int,13,skimage
numpy.isscalar(element=int),13,skimage
numpy.array(list[pandas._libs.tslibs.timestamps.Timestamp]),13,pandas
numpy.ndarray[int] = numpy.uint8,13,matplotlib
numpy.ndarray /= numpy.float64,13,skimage
numpy.ndarray.sum(numpy.ndarray),13,matplotlib
numpy.ndarray[numpy.int64],13,matplotlib
numpy.float64 / numpy.float64,13,pandas
"numpy.ndarray[tuple[int, int]] = float",13,skimage
numpy.stack,13,skimage
"numpy.repeat(a=numpy.ndarray, repeats=int)",13,pandas
numpy.sum,13,dask.array
numpy.dtype(Type[builtins.float]),13,pandas
numpy.ma.core.masked_invalid(a=numpy.ndarray),13,matplotlib
numpy.ndarray * float,13,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int16])",13,skimage
numpy.concatenate,13,skimage
"numpy.eye(M=int, N=int)",13,dask.array
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, desired=numpy.ndarray)",13,matplotlib
"numpy.linspace(num=int, start=int, stop=int)",13,pandas
numpy.ndarray.min(numpy.ndarray),13,pandas
numpy.isnan(numpy.ndarray),13,pandas
numpy.iterable(y=list[numpy.int64]),13,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.int])",13,pandas
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int])",13,skimage
numpy.ndarray -= numpy.ndarray,13,skimage
numpy.ndarray ** int,13,pandas
"numpy.zeros(int, dtype=str)",13,pandas
numpy.clip,13,skimage
numpy.float_,13,pandas
"numpy.asarray(a=tuple[int, int])",13,skimage
numpy.int64 - int,13,skimage
float * numpy.ndarray,13,xarray
numpy.str_(str),13,xarray
float - numpy.ndarray,13,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType]]",13,matplotlib
numpy.ma.core.MaskedArray.size,13,matplotlib
numpy.column_stack(tup=list[numpy.ndarray]),13,matplotlib
numpy.ndarray.flat,13,pandas
-numpy.ndarray,13,xarray
numpy.dtype.itemsize,13,pandas
numpy.ndarray / int,13,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint16])",13,skimage
numpy.array(tuple[int]),13,skimage
numpy.mean,13,skimage
numpy.int64,13,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int32])",13,skimage
dask.array.core.Array == numpy.ndarray,13,xarray
numpy.random.rand,13,skimage
"numpy.testing._private.utils.assert_equal(actual=tuple[int, int, int], desired=tuple[int, int, int])",13,skimage
numpy.dtype(Type[builtins.int]),12,pandas
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]] = numpy.ndarray",12,skimage
numpy.ndarray.tolist(numpy.ndarray),12,matplotlib
numpy.array(list[numpy.timedelta64]),12,pandas
numpy.asarray(a=pandas.core.indexes.range.RangeIndex),12,pandas
int + numpy.ndarray,12,matplotlib
"numpy.zeros(tuple[int, int])",12,xarray
numpy.asarray(a=int),12,pandas
numpy.newaxis,12,xarray
"numpy.random.mtrand.RandomState.seed(numpy.random.mtrand.RandomState, int)",12,pandas
numpy.ma.core.MaskedArray.data,12,matplotlib
numpy.float64(x=int),12,pandas
numpy.testing._private.utils.assert_(val=builtins.bool),12,skimage
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int, int)",12,skimage
numpy.float64 != int,12,matplotlib
numpy.str_ in dict,12,xarray
numpy.allclose,12,pandas
numpy.take,12,pandas
numpy.vstack(tup=list[numpy.ndarray]),12,skimage
"numpy.array(tuple[int, int, int])",12,skimage
numpy.dtype.kind,12,skimage
numpy.arange(float),12,xarray
numpy.ones(shape=int),12,xarray
numpy.float64 != float,12,matplotlib
"numpy.random.mtrand.RandomState.permutation(numpy.random.mtrand.RandomState, int)",12,pandas
numpy.array(list[numpy.datetime64]),12,pandas
"numpy.expand_dims(a=numpy.ndarray, axis=int)",12,matplotlib
numpy.asarray(a=builtins.range),12,xarray
"numpy.where(numpy.ndarray, int, int)",12,pandas
numpy.float32(float),12,xarray
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int, int, int)",12,xarray
numpy.ndarray[int] = builtins.bool,12,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.float])",12,dask.array
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.ndarray, desired=numpy.ndarray)",12,matplotlib
"numpy.array(list[list[int]], dtype=str)",12,pandas
numpy.ndarray[numpy.ndarray],12,xarray
"numpy.tile(A=numpy.ndarray, reps=tuple[int, int])",12,matplotlib
numpy.allclose,12,skimage
"numpy.array(list[list[int]], Type[numpy.uint8])",12,skimage
numpy.generic.item(numpy.bool_),12,pandas
numpy.ndarray.argsort,12,pandas
numpy.timedelta64,12,xarray
numpy.zeros_like,12,skimage
numpy.cumsum(a=numpy.ndarray),12,skimage
numpy.ndarray.any,12,pandas
numpy.integer,12,xarray
"numpy.ndarray.setflags(numpy.ndarray, write=builtins.bool)",12,pandas
numpy.int64 - int,12,matplotlib
"numpy.ndarray.sum(numpy.ndarray, axis=int)",12,dask.array
numpy.float64,12,dask.array
"numpy.empty(tuple[int, int])",12,skimage
numpy.int64 != int,12,matplotlib
numpy.floating,12,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int]]",12,matplotlib
numpy.ndarray.any(numpy.ndarray),12,skimage
Type[numpy.ndarray].__name__,12,pandas
numpy.ndarray / float,12,pandas
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, desired=int)",12,skimage
numpy.asarray(a=pandas.core.indexes.numeric.Float64Index),12,pandas
numpy.ndarray[numpy.ndarray] = int,12,matplotlib
"numpy.array(list[int], dtype=Type[numpy.uint64])",11,pandas
numpy.ndarray ** float,11,matplotlib
numpy.ascontiguousarray,11,skimage
numpy.array(pandas.core.indexes.numeric.Int64Index),11,pandas
numpy.ndarray - numpy.float64,11,matplotlib
numpy.float64(x=float),11,pandas
numpy.array(pandas.core.indexes.numeric.Float64Index),11,pandas
"numpy.mean(a=numpy.ndarray, axis=int)",11,dask.array
numpy.isnan(pandas.core.series.Series),11,pandas
"numpy.sum(a=numpy.ndarray, axis=int)",11,matplotlib
"numpy.take(a=numpy.ndarray, axis=int, indices=int)",11,pandas
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int, int)",11,skimage
numpy.ndarray.setflags,11,pandas
numpy.dtype == Type[numpy.float32],11,pandas
"numpy.empty(int, dtype=Type[numpy.int64])",11,pandas
numpy.iterable(y=numpy.ma.core.MaskedArray),11,matplotlib
"numpy.logical_and(numpy.ndarray, numpy.ndarray)",11,skimage
numpy.generic.any(numpy.bool_),11,pandas
numpy.mean,11,dask.array
numpy.ndarray.all,11,xarray
numpy.dtype(numpy.dtype),11,pandas
"numpy.testing._private.utils.assert_array_less(x=numpy.float64, y=numpy.float64)",11,skimage
numpy.int64 - numpy.int64,11,skimage
"numpy.ndarray[slinumpy.ndarraye[int, int, NoneType]] = numpy.ndarray",11,matplotlib
numpy.float64 > float,11,pandas
numpy.full,11,skimage
numpy.ma.core.MaskedArray.max(self=numpy.ma.core.MaskedArray),11,matplotlib
numpy.int64 - numpy.int64,11,pandas
numpy.zeros(int),11,skimage
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int, int])",11,dask.array
numpy.float64 == float,11,skimage
"numpy.ndarray.sum(numpy.ndarray, axis=int)",11,skimage
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int)",11,matplotlib
numpy.recarray.dtype,11,pandas
"numpy.asarray(a=tuple[int, int, int])",11,skimage
int + numpy.float64,11,skimage
numpy.ndarray > float,11,skimage
numpy.var(a=numpy.ndarray),11,dask.array
"numpy.arange(int, dtype=Type[numpy.int32])",11,matplotlib
numpy.datetime64,11,xarray
numpy.sqrt,11,pandas
numpy.array(pandas.core.arrays.categorical.Categorical),11,pandas
numpy.rad2deg(numpy.float64),11,matplotlib
numpy.ma,11,xarray
numpy.isscalar(element=numpy.ndarray),11,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, tuple[int, int])",11,pandas
"numpy.array(list[float], dtype=Type[builtins.object])",11,pandas
"numpy.rollaxis(a=numpy.ndarray, axis=int)",11,skimage
numpy.ndarray.squeeze(numpy.ndarray),11,pandas
numpy.dtype.itemsize,11,dask.array
numpy.sum(a=numpy.ndarray),11,matplotlib
"numpy.array(list[int], dtype=Type[numpy.int8])",11,pandas
"numpy.ndarray[slice[NoneType, NoneType, NoneType]]",11,pandas
"numpy.ndarray[slinumpy.ndarraye[NoneType, NoneType, NoneType]] = numpy.ndarray",11,pandas
numpy.float64 >= int,11,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.str])",11,pandas
numpy.ndarray.flat,11,skimage
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, size=tuple[int, int])",11,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], int, int]]",11,skimage
"numpy.ndarray[tuple[NoneType, slice[NoneType, NoneType, NoneType]]]",11,dask.array
"numpy.generic.astype(numpy.datetime64, str)",11,pandas
numpy.int64 >= int,11,pandas
"numpy.ndarray.view(numpy.ndarray, Type[numpy.uint8])",11,pandas
"numpy.arange(int, int, float)",11,matplotlib
numpy.ndarray[int] = numpy.float64,11,pandas
numpy.argmax(a=numpy.ndarray),11,skimage
numpy.float64 / int,11,dask.array
numpy.int16,11,skimage
"numpy.arange(int, int, int, dtype=Type[numpy.int64])",11,pandas
numpy.int64 / int,11,pandas
numpy.deg2rad(int),11,skimage
numpy.sqrt(numpy.ndarray),11,matplotlib
int + numpy.ndarray,11,xarray
numpy.deg2rad(float),11,matplotlib
numpy.ndarray /= numpy.ndarray,11,skimage
numpy.complex128,11,pandas
numpy.sin(float),11,matplotlib
numpy.float64,11,xarray
"numpy.ndarray.sum(numpy.ndarray, int)",11,skimage
numpy.floating,11,skimage
numpy.ndarray.any(numpy.ndarray),11,dask.array
"numpy.array(list[Union[float, str]], dtype=Type[builtins.object])",11,pandas
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int)",11,matplotlib
numpy.array(int),11,dask.array
numpy.ndarray != numpy.ndarray,10,pandas
numpy.float64.shape,10,dask.array
"numpy.einsum(operands=tuple[str, numpy.ndarray, numpy.ndarray])",10,xarray
"numpy.array(list[Union[float, int]])",10,matplotlib
numpy.ndarray * numpy.ndarray,10,xarray
numpy.allclose,10,dask.array
pandas.core.series.Series / numpy.float64,10,pandas
numpy.multiply,10,skimage
numpy.mean(a=numpy.ndarray),10,dask.array
numpy.atleast_1d(arys=tuple[numpy.ndarray]),10,matplotlib
numpy.ndarray.nbytes,10,pandas
"numpy.apply_over_axes(a=numpy.ndarray, axes=tuple[int, int], func=builtins.function)",10,skimage
numpy.copy(a=numpy.ndarray),10,skimage
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int])",10,matplotlib
numpy.ndarray != numpy.ndarray,10,skimage
numpy.log(float),10,matplotlib
pandas.core.arrays.timedeltas.TimedeltaArray - numpy.ndarray,10,pandas
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray)",10,skimage
Type[numpy.oType[numpy.object_]ject_] == Type[numpy.object_],10,pandas
"numpy.ndarray[sliinte[int, int, NoneType]] = int",10,pandas
numpy.iterable(y=float),10,matplotlib
numpy.ndarray.max,10,skimage
numpy.empty_like(numpy.ndarray),10,matplotlib
"numpy.testing._private.utils.assert_almost_equal(actual=float, desired=float)",10,skimage
numpy.ndarray[int] = str,10,pandas
numpy.ndarray /= numpy.float64,10,matplotlib
numpy.ndarray[int] = numpy.float64,10,skimage
"numpy.std(a=pandas.core.series.Series, ddof=int)",10,pandas
numpy.log10(numpy.ndarray),10,matplotlib
numpy.int64 == int,10,dask.array
numpy.float32,10,dask.array
numpy.float32,10,matplotlib
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], int]] = numpy.ndarray",10,skimage
numpy.ndarray.size,10,dask.array
pandas.core.series.Series + numpy.ndarray,10,pandas
numpy.ndarray.sum(numpy.ndarray),10,dask.array
numpy.roll,10,skimage
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int, int, int)",10,skimage
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, size=tuple[int, int])",10,skimage
"numpy.asarray(a=list[Union[float, int]])",10,matplotlib
numpy.asanyarray(a=numpy.ndarray),10,matplotlib
numpy.arange,10,dask.array
numpy.sum(a=numpy.ndarray),10,dask.array
"numpy.testing._private.utils.assert_array_almost_equal(decimal=int, x=numpy.ndarray, y=numpy.ndarray)",10,skimage
numpy.sort(a=numpy.ndarray),10,skimage
numpy.integer,10,skimage
"numpy.ndarray.fill(numpy.ndarray, int)",10,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.bool])",10,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, int], int]] = numpy.ndarray",10,matplotlib
"numpy.ndarray.mean(numpy.ndarray, axis=int)",10,skimage
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=int)",10,skimage
numpy.int64 != int,10,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType]]]",10,matplotlib
"numpy.repeat(a=numpy.ndarray, axis=int, repeats=int)",10,matplotlib
"numpy.arange(int, int, int)",10,xarray
numpy.asarray(a=list[numpy.float64]),10,matplotlib
"numpy.ndarray[slice[int, int, NoneType]]",10,skimage
"numpy.empty(int, dtype=numpy.dtype)",10,pandas
numpy.asarray(a=pandas.core.arrays.interval.IntervalArray),10,pandas
numpy.asarray(a=list),10,pandas
numpy.ones_like(a=numpy.ndarray),10,skimage
numpy.iterable(y=list[numpy.ndarray]),10,matplotlib
numpy.array(numpy.ndarray),10,xarray
numpy.all,10,dask.array
numpy.ndarray >= numpy.ndarray,10,skimage
numpy.ndarray + int,10,xarray
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.float32])",10,pandas
"numpy.array(list[Union[float, int]], dtype=str)",10,pandas
numpy.ndarray[int] = float,10,matplotlib
numpy.all(a=numpy.ndarray),10,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",10,skimage
"numpy.linspace(num=int, start=int, stop=float)",10,matplotlib
numpy.float64 + int,10,dask.array
numpy.isnan(numpy.ndarray),10,dask.array
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]]",10,matplotlib
numpy.float64 + numpy.float64,10,pandas
numpy.repeat,10,matplotlib
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType]]]",10,matplotlib
numpy.asarray(a=pandas.core.arrays.numpy_.PandasArray),10,pandas
"numpy.concatenate(list[numpy.ndarray], axis=int)",10,skimage
"numpy.array(list[int], dtype=str)",10,xarray
numpy.ndarray > numpy.ndarray,10,pandas
numpy.ndarray.flatten(numpy.ndarray),10,skimage
numpy.floating,10,xarray
numpy.ndarray // int,10,pandas
kiwisolver.Varianumpy.float64le * numpy.float64,10,matplotlib
numpy.random.random,10,dask.array
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], int]] = int",10,skimage
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.ndarray, decimal=int, desired=numpy.ndarray)",10,skimage
numpy.argsort(a=numpy.ndarray),10,skimage
numpy.hstack(tup=list[numpy.ndarray]),10,skimage
numpy.iinfo(int_type=Type[numpy.int64]),10,pandas
numpy.sin(float),10,skimage
numpy.cos(numpy.float64),10,skimage
numpy.diagonal,10,dask.array
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int, int, int])",10,dask.array
numpy.array(pandas.core.indexes.period.PeriodIndex),9,pandas
numpy.asarray(a=xarray.core.variable.Variable),9,xarray
numpy.ndarray > numpy.float64,9,skimage
numpy.int64 == numpy.int64,9,matplotlib
"numpy.ndarray[slinumpy.ndarraye[NoneType, NoneType, NoneType]] = numpy.ndarray",9,skimage
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]]",9,skimage
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",9,matplotlib
numpy.ndarray + numpy.float64,9,dask.array
"numpy.isnan(tuple[float, float])",9,dask.array
numpy.ma.core.filled(a=numpy.ma.core.MaskedArray),9,matplotlib
numpy.any(a=numpy.ndarray),9,matplotlib
numpy.bincount,9,matplotlib
numpy.ndarray - pandas.core.series.Series,9,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType]]",9,dask.array
numpy.round_(a=numpy.ndarray),9,skimage
"numpy.ndarray[tuple[builtins.ellipsis, int]] = numpy.ndarray",9,matplotlib
numpy.apply_over_axes,9,skimage
numpy.e,9,matplotlib
numpy.ma.core.MaskedArray.sum,9,dask.array
numpy.r_,9,skimage
"numpy.ndarray[tuple[slifloate[int, int, NoneType], slifloate[int, int, NoneType]]] = float",9,skimage
numpy.floor(numpy.float64),9,matplotlib
float * numpy.ndarray,9,pandas
"numpy.ndarray[tuple[numpy.int64, numpy.int64]]",9,skimage
"numpy.ma.core.MaskedArray[tuple[int, int]]",9,matplotlib
pandas.core.frame.DataFrame + numpy.ndarray,9,pandas
"numpy.empty(int, dtype=Type[builtins.object])",9,pandas
numpy.float64 == float,9,xarray
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.float64, desired=numpy.float64)",9,skimage
int / numpy.float64,9,skimage
"numpy.ndarray.reshape(numpy.ndarray, tuple[int])",9,dask.array
pandas.core.arrays.timedeltas.TimedeltaArray + numpy.ndarray,9,pandas
"numpy.ndarray[tuple[sliinte[int, int, NoneType], sliinte[int, int, NoneType], sliinte[int, int, NoneType]]] = int",9,skimage
int - numpy.int64,9,pandas
"numpy.timedelta64(str, str)",9,pandas
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.float64])",9,matplotlib
"numpy.ndarray.astype(numpy.ndarray, str)",9,matplotlib
numpy.ndarray - int,9,dask.array
numpy.timedelta64(int),9,pandas
"numpy.ndarray[tuple[int, int]] = numpy.float64",9,skimage
numpy.ndarray.ravel(numpy.ndarray),9,dask.array
numpy.array(pandas.core.indexes.numeric.UInt64Index),9,pandas
numpy.flagsobj.writeable = builtins.bool,9,pandas
pandas.core.arrays.datetimes.DatetimeArray - numpy.ndarray,9,pandas
builtins.function.__name__,9,dask.array
pandas.core.arrays.datetimes.DatetimeArray + numpy.ndarray,9,pandas
numpy.ndarray - pandas.core.frame.DataFrame,9,pandas
numpy.asarray(a=list[int]),9,xarray
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int64])",9,skimage
"numpy.testing._private.utils.assert_equal(actual=numpy.int64, desired=int)",9,skimage
numpy.testing,9,dask.array
"numpy.tile(A=numpy.ndarray, reps=int)",9,matplotlib
numpy.linspace,9,dask.array
"numpy.asarray(a=list[Union[float, int]])",9,pandas
numpy.log10(float),9,matplotlib
numpy.ma.core.MaskedArray.min(self=numpy.ma.core.MaskedArray),9,matplotlib
numpy.dtype.itemsize,9,xarray
numpy.array(numpy.ndarray),9,skimage
"numpy.apply_along_axis(arr=numpy.ndarray, axis=int, func1d=builtins.function)",9,pandas
numpy.ndarray / numpy.float64,9,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[NoneType, int, NoneType]]]",9,skimage
numpy.deg2rad(numpy.float64),9,matplotlib
numpy.dtype(Type[numpy.uint8]),9,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType]]",9,pandas
numpy.ndarray[str],9,dask.array
"numpy.array(list[list[Union[float, int]]])",9,skimage
numpy.ndarray + numpy.ndarray,9,xarray
numpy.uint64 == int,9,skimage
"numpy.array(list[int], dtype=Type[builtins.object])",9,pandas
numpy.absolute(pandas.core.series.Series),9,pandas
numpy.finfo.eps,9,skimage
"numpy.arange(float, float, float)",9,matplotlib
numpy.float64.dtype,9,pandas
numpy.ma.core.isMaskedArray(x=numpy.ma.core.MaskedArray),9,skimage
int + numpy.int64,9,pandas
"numpy.array(list[float], dtype=str)",9,pandas
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, size=int)",9,pandas
numpy.ndarray.argsort(numpy.ndarray),9,pandas
numpy.int64 + numpy.int64,9,matplotlib
"numpy.empty(tuple[int, int], dtype=Type[numpy.float64])",9,pandas
"numpy.prod(a=tuple[int, int])",9,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, int, side=str)",9,pandas
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple)",9,dask.array
numpy.mean,9,xarray
numpy.nansum(a=numpy.ndarray),9,dask.array
numpy.ndarray * numpy.ndarray,9,pandas
"numpy.array(list[int], dtype=Type[numpy.float64])",9,pandas
"numpy.zeros(tuple[int, int], dtype=str)",9,skimage
numpy.asarray(a=list[int]),9,skimage
numpy.asarray(a=pandas.core.indexes.datetimes.DatetimeIndex),9,xarray
"numpy.asarray(a=numpy.ndarray, dtype=Type[builtins.object])",9,pandas
numpy.dtype == Type[numpy.int16],9,pandas
"numpy.ndarray[tuple[numpy.ndarray, int, int]]",9,matplotlib
not numpy.bool_,9,skimage
numpy.ma.masked_invalid,9,matplotlib
numpy.bool_(builtins.bool),9,pandas
int - numpy.int64,9,skimage
numpy.random.choice,9,pandas
"numpy.array(numpy.ndarray, dtype=str)",9,pandas
numpy.dtype.kind,9,matplotlib
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, desired=numpy.ndarray)",9,xarray
numpy.ndarray == str,9,pandas
"numpy.ndarray[slice[NoneType, int, NoneType]]",9,xarray
numpy.ndarray += int,9,pandas
numpy.isnan,9,dask.array
"numpy.asarray(a=list[int], dtype=Type[numpy.int64])",9,pandas
numpy.asarray(a=list),9,matplotlib
int * numpy.ndarray,9,xarray
numpy.int64,9,dask.array
"numpy.datetime64(str, str)",9,xarray
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.float])",9,matplotlib
numpy.dtype(Type[numpy.int32]),9,pandas
"numpy.ndarray[tuple[int, int]] = float",9,matplotlib
numpy.ndarray -= numpy.float64,9,matplotlib
numpy.amin(a=numpy.ndarray),9,pandas
"numpy.empty(tuple[int, int], dtype=numpy.dtype)",9,pandas
"numpy.arange(int, int, dtype=str)",9,pandas
numpy.sum(a=pandas.core.series.Series),9,pandas
"numpy.zeros(tuple[int, int, int, int])",9,skimage
"numpy.empty(tuple[int], dtype=numpy.dtype)",9,dask.array
"numpy.empty(int, dtype=str)",9,pandas
"numpy.linspace(num=int, start=int, stop=float)",9,skimage
numpy.isfinite(float),9,matplotlib
"numpy.ndarray[slinumpy.ndarraye[int, NoneType, NoneType]] = numpy.ndarray",9,matplotlib
"numpy.ones(dtype=Type[builtins.bool], shape=int)",9,pandas
"numpy.array(list, dtype=Type[numpy.int32])",8,pandas
"numpy.asarray(a=numpy.ndarray, dtype=NoneType)",8,pandas
"numpy.array(list[float], dtype=Type[numpy.float64])",8,pandas
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=list[list[int]])",8,matplotlib
"numpy.array(list[float], dtype=Type[builtins.float])",8,pandas
numpy.ndarray.astype,8,skimage
numpy.where(numpy.ndarray),8,skimage
numpy.array(pandas.core.indexes.interval.IntervalIndex),8,pandas
numpy.prod(a=tuple[int]),8,pandas
"numpy.arange(float, float, dtype=str)",8,pandas
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, size=tuple[int, int])",8,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int8])",8,skimage
"numpy.array(list[str], dtype=str)",8,xarray
"numpy.array(numpy.ndarray, copy=builtins.bool)",8,pandas
"numpy.ndarray[tuple[numpy.ndarray, int, int]] = numpy.ndarray",8,matplotlib
numpy.expand_dims,8,matplotlib
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int])",8,pandas
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=list[list[int]])",8,skimage
numpy.float64 != numpy.float64,8,pandas
numpy.asarray(a=list[float]),8,pandas
"numpy.asarray(a=numpy.ndarray, dtype=Type[builtins.float])",8,matplotlib
numpy.int_,8,pandas
numpy.all(a=numpy.ndarray),8,xarray
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int)",8,matplotlib
numpy.dtype == Type[builtins.bool],8,xarray
numpy.ndarray.mean(numpy.ndarray),8,pandas
numpy.vstack(tup=list[numpy.ndarray]),8,pandas
numpy.float64 - numpy.ndarray,8,matplotlib
numpy.ndarray[list[int]],8,matplotlib
int / numpy.float64,8,matplotlib
numpy.mgrid,8,matplotlib
numpy.shape(a=numpy.ndarray),8,matplotlib
numpy.ndarray += int,8,matplotlib
numpy.sum,8,matplotlib
numpy.amax(a=pandas.core.series.Series),8,pandas
numpy.amin(a=pandas.core.series.Series),8,pandas
numpy.int64 > numpy.int64,8,matplotlib
numpy.pad,8,xarray
numpy.dtype(Type[numpy.int16]),8,pandas
numpy.ndarray.ravel,8,pandas
numpy.str_ in builtins.set,8,xarray
numpy.atleast_2d(arys=tuple[numpy.ndarray]),8,pandas
"numpy.ndarray[slice[int, NoneType, int]]",8,pandas
numpy.float64 ** int,8,matplotlib
"numpy.ndarray.sum(numpy.ndarray, int, dtype=Type[numpy.float64])",8,pandas
numpy.sqrt(pandas.core.series.Series),8,pandas
"numpy.hypot(numpy.float64, numpy.float64)",8,matplotlib
numpy.float64 % int,8,matplotlib
"numpy.ndarray.sum(numpy.ndarray, NoneType, dtype=Type[numpy.float64])",8,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, float)",8,pandas
numpy.ndarray += float,8,matplotlib
numpy.int64 + numpy.float64,8,matplotlib
"numpy.where(numpy.ndarray, int, numpy.ndarray)",8,pandas
numpy.ma.core.MaskedArray.ndim,8,skimage
numpy.cos(float),8,matplotlib
numpy.ndarray[list[int]],8,xarray
numpy.dtype(Type[numpy.int8]),8,pandas
"numpy.ndarray[tuple[slibuiltins.boole[int, int, NoneType], slibuiltins.boole[int, int, NoneType]]] = builtins.bool",8,skimage
numpy.asarray(a=pandas.core.arrays.timedeltas.TimedeltaArray),8,pandas
numpy.asarray(a=list[str]),8,pandas
"numpy.add(numpy.ndarray, numpy.ndarray)",8,pandas
"numpy.ndarray[tuple[int, int]] = numpy.float64",8,matplotlib
numpy.ndarray >= float,8,matplotlib
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[NoneType, NoneType, NoneType]]]",8,matplotlib
numpy.ceil(float),8,matplotlib
numpy.ndarray + numpy.float64,8,matplotlib
numpy.ndarray * int,8,xarray
"numpy.ndarray.reshape(numpy.ndarray, tuple)",8,xarray
numpy.ndarray.item(numpy.ndarray),8,pandas
numpy.ptp(a=numpy.ndarray),8,matplotlib
numpy.random.randn,8,skimage
numpy.hstack(tup=list[numpy.ndarray]),8,matplotlib
numpy.newaxis,8,pandas
numpy.asarray(a=pandas.core.indexes.numeric.UInt64Index),8,pandas
numpy.ndarray - int,8,xarray
"numpy.ndarray[tuple[NoneType, slice[NoneType, NoneType, NoneType]]]",8,matplotlib
pandas.core.indexes.datetimes.DatetimeIndex + numpy.ndarray,8,pandas
numpy.ndarray[NoneType],8,matplotlib
pandas.core.frame.DataFrame - numpy.ndarray,8,pandas
numpy.ndarray + pandas.core.series.Series,8,pandas
"numpy.generic.astype(numpy.timedelta64, str)",8,pandas
numpy.ndarray > float,8,matplotlib
numpy.log(numpy.ndarray),8,matplotlib
"numpy.repeat(a=numpy.ndarray, repeats=int)",8,matplotlib
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int])",8,xarray
numpy.pi,8,xarray
numpy.ndarray *= float,8,matplotlib
numpy.linspace,8,skimage
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, desired=numpy.ndarray, rtol=float)",8,skimage
numpy.meshgrid,8,skimage
numpy.absolute(numpy.float64),8,skimage
not numpy.bool_,8,dask.array
"numpy.zeros(shape=tuple[int, int])",8,dask.array
numpy.absolute(numpy.ndarray),8,dask.array
numpy.ceil(float),8,skimage
"numpy.clip(a=numpy.ndarray, a_max=int, a_min=int, out=numpy.ndarray)",8,skimage
numpy.finfo(dtype=Type[builtins.float]),8,skimage
"numpy.unravel_index(numpy.int64, tuple[int, int])",8,skimage
numpy.amin(a=numpy.ndarray),8,dask.array
numpy.dtype(Type[numpy.float64]),8,skimage
numpy.nanmax(a=numpy.ndarray),8,pandas
numpy.float64 > int,8,skimage
numpy.empty_like,8,skimage
"numpy.roll(a=numpy.ndarray, axis=int, shift=int)",8,skimage
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",8,skimage
numpy.asanyarray(a=numpy.ndarray),8,skimage
numpy.newaxis,8,dask.array
numpy.isscalar(element=numpy.ma.core.MaskedArray),8,dask.array
numpy.ndarray + float,8,dask.array
"numpy.std(a=numpy.ndarray, axis=int)",8,dask.array
numpy.fft,8,dask.array
"numpy.ndarray.astype(numpy.ndarray, numpy.dtype)",8,dask.array
"numpy.argmax(a=numpy.ndarray, axis=int)",8,dask.array
"numpy.array(numpy.ndarray, dtype=Type[numpy.int32])",8,skimage
"numpy.array(list[int], dtype=Type[numpy.int8])",8,skimage
"numpy.nansum(a=numpy.ndarray, axis=int)",8,dask.array
"numpy.hypot(numpy.ndarray, numpy.ndarray)",8,skimage
"numpy.stack(arrays=list[numpy.ndarray], axis=int)",8,skimage
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int)",8,skimage
"numpy.nanargmin(a=numpy.ndarray, axis=int)",8,dask.array
"numpy.ndarray.reshape(numpy.ndarray, int, int)",8,dask.array
float / numpy.ndarray,8,skimage
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timestamps.Timestamp + numpy.timedelta64,8,pandas
numpy.ndarray.min,8,skimage
numpy.ndarray *= float,8,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType]]",8,skimage
"numpy.ndarray[tuple[NoneType, builtins.ellipsis]]",8,skimage
numpy.ndarray - numpy.ndarray,8,dask.array
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.integer])",8,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, int, NoneType], int]] = numpy.ndarray",8,skimage
numpy.sin(numpy.float64),8,skimage
numpy.ndarray // int,8,skimage
numpy.ndarray -= int,8,skimage
numpy.ndarray ** float,8,skimage
numpy.ndarray > numpy.ndarray,8,skimage
numpy.nanmin(a=numpy.ndarray),8,pandas
numpy.amax(a=numpy.ndarray),8,dask.array
"numpy.where(numpy.ndarray, numpy.ndarray, numpy.ndarray)",8,dask.array
"numpy.nanargmax(a=numpy.ndarray, axis=int)",8,dask.array
numpy.any(a=numpy.ndarray),8,dask.array
numpy.dtype(Type[numpy.float32]),8,skimage
numpy.ndarray - numpy.int64,8,skimage
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",8,skimage
numpy.dtype == Type[builtins.bool],8,dask.array
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[NoneType, int, NoneType]]]",8,skimage
numpy.dtype(str),8,dask.array
"numpy.random.mtrand.RandomState.uniform(numpy.random.mtrand.RandomState, size=tuple[int, int])",8,skimage
numpy.log(numpy.ndarray),8,dask.array
numpy.ndarray.any(numpy.ndarray),7,xarray
numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState),7,pandas
"numpy.array(list[Union[int, str]], dtype=Type[builtins.object])",7,pandas
numpy.all,7,matplotlib
numpy.min,7,pandas
"numpy.amin(a=numpy.ndarray, axis=int)",7,dask.array
numpy.dtype(Type[numpy.float32]),7,pandas
numpy.int64.dtype,7,pandas
"numpy.amax(a=numpy.ndarray, axis=int)",7,dask.array
"numpy.random.mtrand.RandomState.standard_normal(numpy.random.mtrand.RandomState, int)",7,matplotlib
numpy.ma.core.MaskedArray.dtype,7,dask.array
numpy.ndarray == float,7,skimage
int in numpy.ndarray,7,pandas
*numpy.ma.core.MaskedArray,7,matplotlib
"numpy.dot(numpy.ndarray, numpy.ndarray)",7,dask.array
numpy.int64 == numpy.int64,7,dask.array
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=list[int])",7,skimage
numpy.ndarray += numpy.ndarray,7,dask.array
"numpy.array(list[Union[float, int]])",7,skimage
numpy.ogrid,7,skimage
numpy.allclose,7,xarray
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, tuple[int, int, int])",7,dask.array
numpy.ndarray >= int,7,dask.array
numpy.dtype.itemsize,7,skimage
numpy.ndarray |= numpy.ndarray,7,pandas
not numpy.bool_,7,matplotlib
numpy.iinfo.min,7,pandas
numpy.ndarray % int,7,matplotlib
"numpy.lituple[int, numpy.ndarray].index_tricks.RClass[tuple[int, numpy.ndarray]]",7,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], int]]",7,matplotlib
"numpy.ndarray.view(numpy.ndarray, Type[numpy.int64])",7,pandas
numpy.diff(a=numpy.ndarray),7,pandas
"numpy.repeat(a=numpy.ndarray, repeats=numpy.ndarray)",7,pandas
"numpy.concatenate(list[numpy.ndarray], axis=int)",7,pandas
"numpy.empty(tuple[int, int], dtype=Type[numpy.int64])",7,pandas
kiwisolver.Term / numpy.float64,7,matplotlib
numpy.logical_not(numpy.ndarray),7,skimage
numpy.generic.all(numpy.bool_),7,xarray
numpy.sum(a=numpy.ndarray),7,pandas
"numpy.maximum(numpy.ndarray, numpy.ndarray)",7,dask.array
numpy.real(val=numpy.ndarray),7,skimage
numpy.ndarray - numpy.float64,7,pandas
numpy.empty_like(numpy.ndarray),7,pandas
numpy.sqrt(int),7,matplotlib
numpy.int64.ndim,7,dask.array
"numpy.ma.core.masked_invalid(a=numpy.ndarray, copy=builtins.bool)",7,matplotlib
numpy.ndarray / pandas.core.arrays.timedeltas.TimedeltaArray,7,pandas
numpy.ndarray == numpy.int64,7,xarray
numpy.ndarray[int] = numpy.bool_,7,pandas
"numpy.array(list[Union[float, int]])",7,dask.array
numpy.array(pandas.core.indexes.timedeltas.TimedeltaIndex),7,pandas
"numpy.ndarray[tuple[slice[int, int, NoneType]]]",7,dask.array
"numpy.ndarray[slifloate[int, int, NoneType]] = float",7,pandas
numpy.asarray(a=numpy.ndarray),7,dask.array
numpy.transpose,7,dask.array
"numpy.ndarray[slinumpy.ndarraye[NoneType, int, NoneType]] = numpy.ndarray",7,pandas
numpy.ndarray == int,7,xarray
numpy.prod(a=numpy.ndarray),7,dask.array
numpy.add,7,pandas
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int])",7,skimage
"numpy.shares_memory(numpy.ndarray, numpy.ndarray)",7,pandas
numpy.array(list[list[int]]),7,xarray
numpy.array(numpy.float64),7,dask.array
numpy.dtype == Type[numpy.float32],7,xarray
pandas.core.indexes.period.PeriodIndex + numpy.ndarray,7,pandas
pandas.core.indexes.period.PeriodIndex + numpy.timedelta64,7,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.float])",7,xarray
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.period.Period + numpy.timedelta64,7,pandas
"numpy.sum(a=numpy.ndarray, axis=tuple[int], dtype=str, keepdims=builtins.bool)",7,dask.array
numpy.float64 *= float,7,matplotlib
-numpy.int64,7,skimage
"numpy.ndarray.sum(numpy.ndarray, axis=tuple[int], dtype=str, keepdims=builtins.bool)",7,dask.array
numpy.random.randint,7,skimage
numpy.array(list[float]),7,xarray
int - numpy.float64,7,skimage
int + numpy.int64,7,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int32])",7,pandas
numpy.linspace,7,matplotlib
numpy.float64 -= float,7,matplotlib
numpy.int32(int),7,pandas
numpy.array(int),7,xarray
numpy.stack,7,matplotlib
numpy.unique,7,skimage
"numpy.ndarray[tuple[int, int]]",7,dask.array
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.ndarray, desired=tuple[int, int])",7,skimage
numpy.any(a=builtins.bool),7,pandas
"numpy.argmin(a=numpy.ndarray, axis=int)",7,dask.array
numpy.array(pandas.core.indexes.datetimes.DatetimeIndex),7,pandas
"numpy.column_stack(tup=tuple[numpy.ndarray, numpy.ndarray])",7,matplotlib
numpy.all(a=pandas.core.series.Series),7,pandas
pandas.core.series.Series == numpy.ndarray,7,pandas
numpy.full,7,matplotlib
pandas.core.frame.DataFrame + numpy.timedelta64,7,pandas
numpy.isscalar(element=numpy.float64),7,dask.array
numpy.dtype(Type[numpy.uint32]),7,pandas
pandas.core.series.Series - numpy.timedelta64,7,pandas
numpy.timedelta64 + pandas.core.series.Series,7,pandas
numpy.ndarray.argmax(numpy.ndarray),7,pandas
Type[numpy.ndarray].__module__,7,dask.array
numpy.ndarray + pandas.core.frame.DataFrame,7,pandas
numpy.isscalar(element=numpy.int64),7,dask.array
numpy.isscalar(element=int),7,dask.array
numpy.datetime64.dtype,7,pandas
numpy.errstate,7,dask.array
numpy.isnan(numpy.ndarray),7,matplotlib
pandas.core.series.Series / numpy.ndarray,7,pandas
numpy.datetime64 + pandas.core.series.Series,7,pandas
numpy.ndarray.tolist(numpy.ndarray),7,xarray
numpy.timedelta64.dtype,7,xarray
"numpy.zeros(int, dtype=Type[numpy.float64])",7,matplotlib
"numpy.zeros(tuple[int, int, int], dtype=Type[numpy.float64])",7,skimage
numpy.float64 != numpy.float64,7,matplotlib
numpy.nonzero(a=numpy.ndarray),7,pandas
numpy.uint8 == int,7,skimage
numpy.sort,7,skimage
float * numpy.float64,7,pandas
numpy.asarray(a=list[str]),7,xarray
numpy.ndarray & int,7,pandas
numpy.conjugate(numpy.ndarray),7,dask.array
"numpy.nancumsum(a=numpy.ndarray, axis=int)",7,dask.array
numpy.ndarray == numpy.float64,7,skimage
"numpy.delete(arr=numpy.ndarray, obj=int)",7,pandas
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray)",7,dask.array
numpy.ndarray | numpy.ndarray,7,skimage
numpy.int64 > int,7,skimage
numpy.count_nonzero(a=numpy.ndarray),7,skimage
numpy.zeros_like(a=numpy.ndarray),7,pandas
pandas.core.series.Series == numpy.float64,7,pandas
"numpy.vstack(tup=tuple[numpy.ndarray, numpy.ndarray])",7,skimage
"numpy.sum(a=numpy.ndarray, axis=tuple[int, int], dtype=numpy.dtype, keepdims=builtins.bool)",7,dask.array
numpy.ma,7,pandas
numpy.dtype.type,7,xarray
"numpy.array_equal(a1=numpy.ndarray, a2=numpy.ndarray)",7,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.timedelta64])",7,xarray
numpy.typecodes,7,pandas
numpy.int8 == int,7,pandas
"numpy.array(list[list[Union[float, float, numpy.float64]]], Type[builtins.float])",7,matplotlib
numpy.array(list[list[numpy.float64]]),7,matplotlib
numpy.float64 + float,7,skimage
"numpy.true_divide(numpy.ndarray, numpy.ndarray)",7,dask.array
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.datetime64])",7,xarray
numpy.ndim(a=numpy.ndarray),7,pandas
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=int)",7,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, int, NoneType], int]] = numpy.ndarray",7,matplotlib
numpy.concatenate,7,pandas
numpy.ndarray.sort,7,skimage
numpy.sin(numpy.ndarray),7,xarray
"numpy.array(list[int], dtype=Type[numpy.uint8])",7,skimage
numpy.eye,7,skimage
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",7,skimage
numpy.ndarray > int,7,dask.array
numpy.asarray(a=float),7,matplotlib
numpy.float64 == numpy.float64,7,xarray
numpy.isnan,7,xarray
numpy.asarray(a=pandas.core.indexes.category.CategoricalIndex),7,pandas
"numpy.asarray(a=numpy.ndarray, dtype=Type[builtins.bool])",7,pandas
"numpy.arange(int, dtype=Type[builtins.float])",7,matplotlib
numpy.asarray(a=pandas.core.indexes.multi.MultiIndex),7,pandas
"numpy.where(numpy.ndarray, numpy.ndarray, int)",7,pandas
numpy.radians(int),7,matplotlib
"numpy.sum(a=numpy.ndarray, axis=tuple[int], dtype=numpy.dtype, keepdims=builtins.bool)",7,dask.array
numpy.ndarray ** int,7,xarray
numpy.sqrt(int),7,pandas
"numpy.array(list[list[int]], dtype=Type[builtins.bool])",7,skimage
"numpy.percentile(a=pandas.core.series.Series, q=int)",7,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int64])",7,dask.array
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, int)",7,pandas
numpy.ndarray > numpy.int64,7,skimage
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.variable.Variable, y=xarray.core.variable.Variable)",7,xarray
numpy.ones,7,matplotlib
numpy.ndarray.max(numpy.ndarray),7,dask.array
numpy.log(numpy.float64),7,matplotlib
numpy.datetime64(str),7,xarray
numpy.sin(numpy.ndarray),7,dask.array
numpy.random.mtrand.RandomState(int),7,dask.array
numpy.array(list),7,matplotlib
"numpy.nancumprod(a=numpy.ndarray, axis=int)",7,dask.array
numpy.int64 / int,7,skimage
numpy.empty,7,xarray
numpy.asarray(a=list[list[int]]),6,skimage
"numpy.asarray(a=numpy.ndarray, dtype=numpy.dtype)",6,pandas
numpy.deg2rad(numpy.ndarray),6,matplotlib
numpy.asarray(a=pandas.core.arrays.period.PeriodArray),6,pandas
numpy.float64 != int,6,pandas
"numpy.arange(int, float, float)",6,matplotlib
pandas.core.indexes.datetimes.DatetimeIndex - numpy.ndarray,6,pandas
pandas.core.frame.DataFrame == numpy.ndarray,6,pandas
numpy.all(a=pandas.core.frame.DataFrame),6,pandas
numpy.iterable(y=NoneType),6,matplotlib
numpy.timedelta64.dtype,6,pandas
numpy.bincount,6,pandas
"numpy.ndarray[slice[int, NoneType, NoneType]]",6,dask.array
numpy.asarray(a=pandas.core.indexes.interval.IntervalIndex),6,pandas
numpy.array(pandas.core.arrays.interval.IntervalArray),6,pandas
"numpy.empty(tuple[int], dtype=str)",6,pandas
numpy.tril(m=numpy.ndarray),6,dask.array
"numpy.array(list[list[int]], Type[numpy.int8])",6,skimage
numpy.array(pandas.core.indexes.category.CategoricalIndex),6,pandas
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, NoneType, NoneType]]]",6,skimage
numpy.ma.core.asarray(a=numpy.ndarray),6,matplotlib
pandas.core.series.Series + numpy.timedelta64,6,pandas
"numpy.ndarray[tuple[numpy.ndarray, int]]",6,matplotlib
numpy.asarray(a=list[numpy.float64]),6,pandas
"numpy.meshgrid(kwargs=dict, xi=tuple[numpy.ndarray, numpy.ndarray])",6,skimage
"numpy.ndarray[slice[int, int, NoneType]]",6,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, NoneType]]]",6,skimage
"numpy.asarray(a=list[str], dtype=Type[builtins.object])",6,pandas
numpy.ndarray | numpy.ndarray,6,matplotlib
"numpy.concatenate(tuple[numpy.ndarray, numpy.ndarray])",6,matplotlib
"numpy.linspace(num=int, start=numpy.float64, stop=numpy.float64)",6,matplotlib
numpy.int8(int),6,pandas
numpy.cumsum(a=numpy.ndarray),6,dask.array
"numpy.ndarray[slice[int, NoneType, int]]",6,matplotlib
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int, int])",6,skimage
numpy.uint64,6,skimage
numpy.abs,6,skimage
numpy.ndarray.squeeze(numpy.ndarray),6,matplotlib
pandas.core.indexes.timedeltas.TimedeltaIndex + numpy.ndarray,6,pandas
numpy.std(a=numpy.ndarray),6,dask.array
numpy.float64 + numpy.float64,6,dask.array
numpy.asarray(a=builtins.range),6,matplotlib
"numpy.concatenate(list[numpy.ndarray], axis=int)",6,dask.array
"numpy.sum(a=numpy.ndarray, axis=tuple, dtype=numpy.dtype, keepdims=builtins.bool)",6,dask.array
numpy.ndarray *= int,6,matplotlib
"numpy.testing._private.utils.assert_allclose(actual=tuple[numpy.float64, numpy.float64], desired=tuple[float, float])",6,matplotlib
numpy.float64 - float,6,skimage
numpy.array(numpy.int64),6,dask.array
numpy.ndarray / pandas.core.series.Series,6,pandas
numpy.float64 * int,6,skimage
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=list[int])",6,skimage
numpy.isnan,6,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint32])",6,skimage
numpy.float64 * float,6,skimage
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=tuple[int, int])",6,skimage
numpy.ma.core.getmask(a=numpy.ma.core.MaskedArray),6,matplotlib
numpy.ma.core.is_masked(x=numpy.float64),6,matplotlib
"numpy.arange(int, int, int)",6,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint64])",6,skimage
numpy.timedelta64 / pandas.core.series.Series,6,pandas
numpy.array(list),6,skimage
numpy.dtype == Type[numpy.float64],6,skimage
numpy.int64 + int,6,xarray
"numpy.ndarray[tuple[numpy.ndarray, slice[NoneType, NoneType, NoneType]]]",6,skimage
numpy.isscalar(element=numpy.bool_),6,dask.array
"numpy.zeros_like(a=numpy.ndarray, dtype=Type[numpy.float64])",6,skimage
numpy.ndarray += numpy.ndarray,6,pandas
numpy.prod,6,pandas
numpy.ravel(a=numpy.ndarray),6,xarray
numpy.array(list[numpy.float64]),6,pandas
"numpy.arctan2(numpy.ndarray, numpy.ndarray)",6,dask.array
numpy.atleast_2d(arys=tuple[numpy.ndarray]),6,skimage
"numpy.insert(arr=numpy.ndarray, obj=int, values=int)",6,pandas
"numpy.amax(a=numpy.ndarray, axis=int)",6,skimage
int ** numpy.ndarray,6,matplotlib
int == numpy.int64,6,dask.array
numpy.int16.dtype,6,pandas
numpy.dtype.names,6,pandas
numpy.ndarray.cumsum(numpy.ndarray),6,pandas
numpy.sqrt(numpy.ndarray),6,pandas
numpy.std,6,dask.array
numpy.int8 + int,6,matplotlib
numpy.cosh(numpy.ndarray),6,dask.array
numpy.ndarray ** int,6,dask.array
int / numpy.ndarray,6,matplotlib
numpy.tanh(numpy.ndarray),6,dask.array
numpy.complex128.dtype,6,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, int, NoneType]]]",6,skimage
numpy.ndarray / int,6,dask.array
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",6,matplotlib
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, int)",6,dask.array
numpy.array(list[numpy.ndarray]),6,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int]]",6,dask.array
numpy.array(list[builtins.bool]),6,dask.array
numpy.ndarray > float,6,dask.array
"numpy.ndarray.sum(numpy.ndarray, axis=tuple[int, int], dtype=numpy.dtype, keepdims=builtins.bool)",6,dask.array
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.float64, desired=int)",6,skimage
numpy.sqrt(numpy.ndarray),6,dask.array
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.int])",6,xarray
numpy.int64 - int,6,pandas
numpy.diff,6,skimage
numpy.int64 - int,6,dask.array
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.floating])",6,xarray
numpy.absolute(numpy.ndarray),6,pandas
numpy.log1p(numpy.ndarray),6,dask.array
numpy.square(numpy.ndarray),6,dask.array
numpy.array(list[numpy.float64]),6,skimage
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int]]",6,skimage
numpy.asanyarray(a=numpy.ndarray),6,dask.array
numpy.int64 * int,6,matplotlib
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.integer])",6,xarray
numpy.bytes_(str),6,xarray
numpy.float64 + int,6,pandas
numpy.array(list[numpy.int64]),6,skimage
"numpy.array(list[list[int]], Type[builtins.float])",6,skimage
"numpy.asarray(a=numpy.ndarray, dtype=numpy.dtype)",6,xarray
"numpy.array(list, dtype=Type[builtins.object])",6,pandas
"numpy.sum(a=numpy.ma.core.MaskedArray, axis=tuple[int, int], dtype=numpy.dtype, keepdims=builtins.bool)",6,dask.array
numpy.degrees(numpy.ndarray),6,dask.array
"numpy.sum(a=numpy.ma.core.MaskedArray, axis=tuple[int], dtype=numpy.dtype, keepdims=builtins.bool)",6,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType], int]] = numpy.ndarray",6,skimage
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]]",6,xarray
numpy.ndarray >= float,6,skimage
numpy.asarray(a=float),6,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int8])",6,pandas
numpy.sqrt(float),6,matplotlib
"numpy.mean(a=numpy.ndarray, axis=int)",6,skimage
numpy.linalg.inv(a=numpy.ndarray),6,skimage
numpy.float64 % int,6,skimage
"numpy.zeros(shape=tuple[int, int, int])",6,dask.array
numpy.asarray(a=pandas.core.indexes.timedeltas.TimedeltaIndex),6,pandas
numpy.ndarray == numpy.int64,6,skimage
numpy.unique(ar=numpy.ndarray),6,matplotlib
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.float64])",6,pandas
numpy.ndarray[str] = numpy.ndarray,6,dask.array
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.object_])",6,pandas
numpy.sign(numpy.ndarray),6,dask.array
"numpy.asarray(a=list[float], dtype=Type[numpy.float64])",6,matplotlib
"numpy.asarray(a=list, dtype=Type[builtins.object])",6,pandas
"numpy.fmod(numpy.ndarray, numpy.ndarray)",6,dask.array
"numpy.ldexp(numpy.ndarray, numpy.ndarray)",6,dask.array
numpy.ndarray > int,6,xarray
numpy.dtype(Type[numpy.uint64]),6,pandas
numpy.ndarray.view,6,pandas
numpy.rad2deg(numpy.ndarray),6,dask.array
"numpy.logical_or(numpy.ndarray, numpy.ndarray)",6,dask.array
numpy.logical_not(numpy.ndarray),6,dask.array
numpy.diff,6,matplotlib
numpy.gradient(f=numpy.ndarray),6,skimage
numpy.ndarray += float,6,skimage
numpy.atleast_3d(arys=tuple[numpy.ndarray]),6,skimage
numpy.ndarray.mean,6,matplotlib
numpy.log2(int),6,matplotlib
numpy.amax(a=numpy.ndarray),6,pandas
"numpy.lexsort(tuple[numpy.ndarray, numpy.ndarray])",6,pandas
"numpy.empty(tuple[int, int])",6,pandas
numpy.mean,6,matplotlib
numpy.ma.core.MaskedArray[numpy.ndarray],6,matplotlib
numpy.float64 * numpy.float64,6,pandas
"numpy.ma.core.masked_equal(value=int, x=list[int])",6,matplotlib
numpy.float64 % int,6,pandas
numpy.dtype(numpy.dtype),6,xarray
numpy.ones_like,6,skimage
numpy.ndarray / numpy.int64,6,skimage
"numpy.asarray(a=list[int], dtype=Type[builtins.object])",6,pandas
"numpy.ndarray.sum(numpy.ndarray, axis=tuple[int], dtype=numpy.dtype, keepdims=builtins.bool)",6,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, int]] = numpy.float64",6,skimage
numpy.asarray(a=pandas.core.frame.DataFrame),6,pandas
numpy.ndarray - numpy.ndarray,6,xarray
numpy.nanmax(a=numpy.ndarray),6,dask.array
numpy.array(list[list[float]]),6,pandas
numpy.ma.masked_all,6,pandas
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int, int])",6,xarray
"numpy.ndarray[tuple[int, int, slice[NoneType, NoneType, NoneType]]]",6,skimage
"numpy.asarray(a=tuple[int, int, int, int])",6,skimage
numpy.einsum,6,dask.array
"numpy.einsum(operands=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, str])",6,dask.array
numpy.asarray(a=numpy.ma.core.MaskedArray),6,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType]]",6,xarray
numpy.dtype(Type[numpy.uint16]),6,pandas
"numpy.where(numpy.ndarray, builtins.bool, numpy.ndarray)",6,pandas
"numpy.subtract(numpy.ndarray, numpy.ndarray)",6,dask.array
numpy.float64 += int,6,matplotlib
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[str], size=int)",6,pandas
float // numpy.float64,6,matplotlib
"numpy.zeros(tuple[int, int])",6,pandas
"numpy.isnan(tuple[int, int])",6,dask.array
numpy.invert(numpy.ndarray),6,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType]]]",6,pandas
numpy.prod(a=list[int]),6,dask.array
numpy.dtype,6,dask.array
numpy.ma.core.asarray(a=numpy.ma.core.MaskedArray),6,matplotlib
numpy.int64 + float,6,matplotlib
numpy.ndarray.item(numpy.ndarray),6,xarray
"numpy.array(list[Union[int, str]], dtype=str)",6,pandas
"numpy.empty(tuple[int, int], dtype=numpy.dtype)",6,dask.array
numpy.ndarray[str] = numpy.ndarray,6,pandas
"numpy.generic.view(numpy.timedelta64, str)",6,pandas
numpy.ones(shape=list[int]),6,xarray
numpy.minimum,6,pandas
"numpy.sum(a=numpy.ndarray, axis=int)",6,dask.array
"numpy.array(list[tuple[int, int]], dtype=list[tuple[str, Type[Union[builtins.float, builtins.int]]]])",6,pandas
numpy.ndarrayuiltins.complex * numpy.ndarray,6,skimage
"numpy.all(a=numpy.ndarray, axis=int)",6,dask.array
"numpy.any(a=numpy.ndarray, axis=int)",6,dask.array
numpy.ma.core.MaskedArray.ravel(self=numpy.ma.core.MaskedArray),6,matplotlib
"numpy.nanvar(a=numpy.ndarray, axis=int)",6,dask.array
numpy.ndarray.strides,6,skimage
"numpy.array(list[Union[float, numpy.float64]])",6,matplotlib
"numpy.stack(arrays=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], axis=int)",6,skimage
numpy.r_,6,matplotlib
numpy.asarray(a=xarray.core.dataarray.DataArray),6,xarray
numpy.asarray(a=list[builtins.bool]),6,pandas
numpy.float64 != int,6,skimage
pandas.core.series.Series == numpy.int64,6,pandas
numpy.ndarray[numpy.ndarray] = numpy.float64,6,pandas
numpy.floor(float),6,matplotlib
"numpy.arange(float, float)",6,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, slice[NoneType, NoneType, NoneType]]]",6,skimage
numpy.uint8(int),6,pandas
numpy.uint64 + numpy.uint64,6,pandas
numpy.int16(int),6,pandas
numpy.iterable(y=numpy.float64),6,matplotlib
numpy.timedelta64 + pandas._libs.tslibs.period.Period,6,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType], int]] = numpy.ndarray",6,matplotlib
"numpy.argsort(a=numpy.ndarray, axis=int)",6,dask.array
numpy.int64(pandas.core.series.Series),6,pandas
numpy.dtype(Type[numpy.uint8]),6,skimage
"numpy.ndarray.round(numpy.ndarray, int)",6,pandas
numpy.ndarray >= numpy.float64,6,matplotlib
numpy.concatenate,6,dask.array
"numpy.ndarray[slinumpy.uint8e[int, NoneType, int]] = numpy.uint8",6,matplotlib
numpy.cos(numpy.ndarray),6,xarray
numpy.amin(a=numpy.ndarray),6,xarray
numpy.ndarray[int] = numpy.int64,6,pandas
numpy.ma.masked,6,matplotlib
numpy.ndarray.flags,6,skimage
numpy.float64.ndim,6,dask.array
numpy.float32(float),6,pandas
"numpy.remainder(numpy.ndarray, numpy.ndarray)",6,dask.array
int + numpy.int64,6,skimage
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, atol=float, desired=int)",6,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, int], int]] = numpy.ndarray",6,matplotlib
numpy.sqrt(numpy.float64),6,matplotlib
"numpy.ufunc.outer(numpy.ufunc, numpy.ndarray, numpy.ndarray)",6,dask.array
Type[numpy.dtypeuiltins.float] == numpy.dtype,6,xarray
numpy.int64 + numpy.int64,6,skimage
numpy.array(dask.array.core.Array),6,dask.array
"numpy.testing._private.utils.assert_allclose(actual=pandas.core.indexes.range.RangeIndex, desired=xarray.core.dataarray.DataArray)",6,xarray
numpy.ndarray >= int,6,matplotlib
numpy.ndarray.mean,5,dask.array
"numpy.linspace(num=int, start=int, stop=int)",5,dask.array
int / numpy.ndarray,5,skimage
numpy.int64 == numpy.int64,5,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], numpy.ndarray]]",5,dask.array
numpy.ma.array,5,skimage
float ** numpy.ndarray,5,matplotlib
numpy.isnan(xarray.core.dataarray.DataArray),5,xarray
numpy.float64 /= numpy.float64,5,skimage
numpy.product(args=tuple[list[int]]),5,skimage
numpy.bool_.shape,5,dask.array
"numpy.zeros(tuple[int, int], dtype=Type[builtins.bool])",5,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.object])",5,dask.array
numpy.isinf(float),5,matplotlib
int * numpy.float64,5,pandas
numpy.arange(numpy.int64),5,skimage
numpy.ma.core.is_masked(x=numpy.ndarray),5,matplotlib
numpy.any,5,skimage
numpy.array(list[numpy.int64]),5,pandas
numpy.asanyarray(a=list[float]),5,matplotlib
numpy.unique(ar=numpy.ndarray),5,xarray
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.int64])",5,pandas
"numpy.logaddexp2(numpy.ndarray, numpy.ndarray)",5,dask.array
"numpy.ndarray.astype(numpy.ndarray, numpy.dtype, copy=builtins.bool)",5,skimage
numpy.array(list[datetime.datetime]),5,pandas
"numpy.tensordot(a=numpy.ndarray, axes=int, b=numpy.ndarray)",5,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, size=tuple[int, int])",5,pandas
"numpy.clip(a=numpy.ndarray, a_max=int, a_min=int)",5,matplotlib
numpy.ndarray > float,5,pandas
numpy.isnan(numpy.int64),5,dask.array
"numpy.zeros(tuple[int, int], Type[builtins.float])",5,matplotlib
numpy.isscalar(element=numpy.float32),5,dask.array
"numpy.maximum(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",5,xarray
numpy.isnan(tuple[int]),5,dask.array
"numpy.array(list, dtype=Type[builtins.bool])",5,pandas
"numpy.ndarray.fill(numpy.ndarray, str)",5,pandas
"numpy.empty(tuple[int, int], dtype=Type[numpy.object_])",5,pandas
numpy.array(list[numpy.ndarray]),5,matplotlib
numpy.int64 == int,5,xarray
Type[numpy.float64] == Type[numpy.object_],5,pandas
"numpy.arange(int, dtype=Type[builtins.float])",5,skimage
numpy.int64 != numpy.int64,5,pandas
numpy.float64 == int,5,xarray
"numpy.ndarray.any(numpy.ndarray, int)",5,pandas
Type[numpy.ndarray].__name__,5,dask.array
"numpy.ma.core.array(data=numpy.ndarray, mask=numpy.ndarray)",5,matplotlib
"numpy.ndarray[tuple[list[list[int]], slice[NoneType, NoneType, NoneType]]]",5,xarray
numpy.iinfo.max,5,skimage
numpy.zeros(tuple[int]),5,skimage
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]] = int",5,skimage
"numpy.ndarray.dot(numpy.ndarray, numpy.ndarray)",5,dask.array
numpy.uint16.dtype,5,pandas
numpy.array(list[list[builtins.bool]]),5,skimage
numpy.sqrt(pandas.core.frame.DataFrame),5,pandas
numpy.frombuffer,5,pandas
numpy.ndarray.min(numpy.ndarray),5,dask.array
numpy.dtype(Type[numpy.int16]),5,skimage
numpy.exp(numpy.ndarray),5,dask.array
"numpy.empty(tuple[int, int], dtype=Type[builtins.object])",5,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, builtins.bool)",5,pandas
numpy.ndarray[tuple[int]],5,matplotlib
numpy.max,5,matplotlib
"numpy.ndarray[tuple[numpy.ndarray, int]]",5,skimage
numpy.cumsum,5,skimage
numpy.mean(a=numpy.ndarray),5,pandas
"numpy.array(list[list[Union[float, int]]])",5,xarray
numpy.random.mtrand.RandomState.randn,5,skimage
numpy.ndarray.view(numpy.ndarray),5,pandas
numpy.int64 - numpy.int64,5,matplotlib
numpy.ones_like(a=numpy.ndarray),5,matplotlib
numpy.linalg.svd(a=numpy.ndarray),5,skimage
numpy.array(builtins.bool),5,pandas
numpy.dtype(str),5,skimage
numpy.float64 / float,5,pandas
numpy.ndarray.min(numpy.ndarray),5,xarray
"numpy.testing._private.utils.assert_allclose(actual=tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64], atol=float, desired=tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64])",5,matplotlib
numpy.iinfo(int_type=Type[numpy.uint8]),5,skimage
numpy.repeat,5,pandas
numpy.ma.core.MaskedArray * numpy.ndarray,5,matplotlib
"numpy.zeros(tuple[int, int], dtype=Type[numpy.float32])",5,skimage
numpy.ndarray[numpy.bool_] = int,5,matplotlib
"numpy.asarray(a=list[int], dtype=str)",5,matplotlib
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int, int])",5,skimage
"numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray, dtype=numpy.dtype)",5,pandas
"numpy.ndarray.repeat(numpy.ndarray, list[int])",5,pandas
"numpy.nanstd(a=numpy.ndarray, axis=int)",5,dask.array
"numpy.moveaxis(a=numpy.ndarray, destination=int, source=int)",5,skimage
numpy.isnan(tuple[float]),5,dask.array
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int, int, int])",5,dask.array
"numpy.array(list[int], dtype=Type[builtins.int])",5,pandas
int += numpy.float64,5,matplotlib
"numpy.empty(tuple[int, int], dtype=Type[builtins.bool])",5,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",5,skimage
numpy.ndarray.max(numpy.ndarray),5,xarray
"numpy.ndarray[tuple[int, int]] = builtins.bool",5,matplotlib
"numpy.zeros(tuple[int, int], dtype=Type[builtins.float])",5,skimage
"numpy.issubdtype(arg1=Type[numpy.float64], arg2=Type[numpy.floating])",5,skimage
"numpy.nanmax(a=numpy.ndarray, axis=int)",5,dask.array
"numpy.nanmin(a=numpy.ndarray, axis=int)",5,dask.array
"numpy.array(list[int], copy=builtins.bool)",5,pandas
numpy.float64 - int,5,pandas
"numpy.empty(tuple[int, int], dtype=str)",5,pandas
"numpy.ndarray[slice[int, int, NoneType]]",5,dask.array
"numpy.array(list[float], copy=builtins.bool)",5,pandas
numpy.real(val=numpy.ndarray),5,dask.array
"numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray, dtype=NoneType)",5,pandas
numpy.floor(numpy.float64),5,skimage
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=list[tuple[int, int]])",5,skimage
"numpy.testing._private.utils.assert_almost_equal(actual=float, desired=int)",5,skimage
"numpy.zeros(tuple[int, int], Type[builtins.bool])",5,skimage
numpy.spacing(numpy.ndarray),5,dask.array
"numpy.asarray(a=pandas.core.arrays.timedeltas.TimedeltaArray, dtype=NoneType)",5,pandas
numpy.reciprocal(numpy.ndarray),5,dask.array
numpy.exp2(numpy.ndarray),5,dask.array
numpy.iinfo(int_type=Type[numpy.int16]),5,skimage
numpy.ndarray[numpy.ndarray] = builtins.bool,5,skimage
numpy.cbrt(numpy.ndarray),5,dask.array
"numpy.expand_dims(a=numpy.ndarray, axis=int)",5,xarray
"numpy.ndarray.reshape(numpy.ndarray, int, int, int)",5,pandas
numpy.column_stack(tup=list[numpy.ndarray]),5,skimage
"numpy.arctan2(numpy.ndarray, numpy.ndarray)",5,matplotlib
"numpy.remainder(numpy.ndarray, int)",5,dask.array
numpy.arctanh(numpy.ndarray),5,dask.array
"numpy.remainder(int, numpy.ndarray)",5,dask.array
numpy.arcsinh(numpy.ndarray),5,dask.array
"numpy.ndarray[tuple[int, slice[int, int, NoneType], slice[int, int, NoneType]]]",5,skimage
numpy.arccosh(numpy.ndarray),5,dask.array
"numpy.nextafter(numpy.ndarray, numpy.ndarray)",5,dask.array
numpy.iinfo(int_type=Type[numpy.int32]),5,skimage
numpy.fabs(numpy.ndarray),5,dask.array
"numpy.array(list[list[int]], dtype=Type[numpy.int32])",5,matplotlib
"numpy.true_divide(numpy.ndarray, int)",5,dask.array
"numpy.true_divide(int, numpy.ndarray)",5,dask.array
"numpy.putmask(numpy.ndarray, pandas.core.series.Series, int)",5,pandas
numpy.asarray(a=list[numpy.int64]),5,pandas
"numpy.greater_equal(numpy.ndarray, numpy.ndarray)",5,dask.array
pandas.core.series.Series / numpy.int64,5,pandas
numpy.int64 > int,5,matplotlib
"numpy.fmax(numpy.ndarray, numpy.ndarray)",5,dask.array
"numpy.ndarray[slice[NoneType, NoneType, int]]",5,dask.array
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int)",5,skimage
numpy.ndarray * float,5,xarray
numpy.isfinite(int),5,matplotlib
"numpy.less_equal(numpy.ndarray, numpy.ndarray)",5,dask.array
"numpy.percentile(a=pandas.core.series.Series, axis=int, q=int)",5,pandas
numpy.iinfo(int_type=str),5,pandas
numpy.ndarray[int] = numpy.ndarray,5,pandas
"numpy.bitwise_xor(numpy.ndarray, numpy.ndarray)",5,dask.array
"numpy.bincount(numpy.ndarray, weights=numpy.ndarray)",5,matplotlib
"numpy.bitwise_and(numpy.ndarray, numpy.ndarray)",5,dask.array
numpy.vectorize(pyfunc=builtins.function),5,pandas
"numpy.ix_(args=tuple[numpy.ndarray, list[int], list[int]])",5,matplotlib
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]]",5,matplotlib
"numpy.zeros(list[int], dtype=Type[numpy.float64])",5,matplotlib
"numpy.arange(float, float)",5,pandas
"numpy.iterable(y=tuple[int, int])",5,matplotlib
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, size=tuple[int, int, int])",5,skimage
"numpy.ndarray[tuple[slifloate[int, NoneType, NoneType], slifloate[NoneType, int, NoneType]]] = float",5,skimage
int != numpy.int64,5,pandas
numpy.isscalar(element=float),5,skimage
numpy.ma.core.MaskedConstant + numpy.float64,5,matplotlib
"numpy.asarray(a=list[float], dtype=Type[builtins.object])",5,pandas
"numpy.array(list[list[float]], Type[builtins.float])",5,matplotlib
"numpy.ndarray[slifloate[NoneType, int, NoneType]] = float",5,pandas
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, size=int)",5,dask.array
"numpy.maximum(numpy.ndarray, numpy.ndarray)",5,xarray
numpy.ndarray != numpy.ndarray,5,matplotlib
numpy.array(list[str]),5,xarray
"numpy.ones(shape=tuple[int, int, int, int])",5,skimage
"numpy.ndarray.astype(numpy.ndarray, str, copy=builtins.bool, subok=builtins.bool)",5,pandas
"numpy.testing._private.utils.assert_equal(actual=numpy.float64, desired=float)",5,skimage
numpy.linalg.norm(x=numpy.ndarray),5,skimage
"numpy.ndarray[tuple[slice[numpy.int64, numpy.int64, NoneType], slice[numpy.int64, numpy.int64, NoneType]]]",5,skimage
numpy.ndarray * numpy.int64,5,pandas
"numpy.asarray(a=numpy.ndarray, dtype=NoneType)",5,xarray
numpy.uint8 + int,5,skimage
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, int, NoneType]]]",5,skimage
"numpy.ndarray.argsort(numpy.ndarray, kind=str)",5,pandas
"numpy.array(tuple[float, float])",5,matplotlib
numpy.invert(numpy.ndarray),5,skimage
numpy.maximum,5,pandas
numpy.complex128.shape,5,dask.array
"numpy.diff(a=numpy.ndarray, axis=int)",5,matplotlib
numpy.ndarray == str,5,xarray
"numpy.ndarray[tuple[NoneType, slice[NoneType, NoneType, NoneType]]]",5,xarray
"numpy.ndarray[slice[NoneType, NoneType, int]]",5,xarray
"numpy.float_power(numpy.ndarray, numpy.ndarray)",5,dask.array
numpy.uint32,5,pandas
numpy.float,5,pandas
"numpy.bincount(numpy.ndarray, minlength=int)",5,pandas
numpy.isinf(numpy.ndarray),5,dask.array
numpy.dtype == str,5,skimage
numpy.bool_,5,xarray
numpy.complex128.ndim,5,dask.array
numpy.asarray(a=list[float]),5,skimage
numpy.ndarrayuiltins.complex * numpy.ndarray,5,dask.array
"numpy.mean(a=numpy.ndarray, axis=int)",5,matplotlib
numpy.float64 >= numpy.float64,5,pandas
"numpy.prod(a=tuple[int, int, int])",5,dask.array
numpy.argsort,5,pandas
numpy.rec,5,pandas
"numpy.pad(array=list[int], mode=str, pad_width=int)",5,skimage
"numpy.ndarray.fill(numpy.ndarray, builtins.bool)",5,pandas
"numpy.power(numpy.ndarray, numpy.ndarray)",5,dask.array
numpy.logical_not(numpy.ndarray),5,pandas
"numpy.einsum(kwargs=dict, operands=tuple[str, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray])",5,dask.array
numpy.float64 + float,5,pandas
"numpy.ndarray.view(numpy.ndarray, dtype=str)",5,pandas
numpy.recarray[int],5,pandas
"numpy.intersect1d(ar1=numpy.ndarray, ar2=numpy.ndarray)",5,pandas
"numpy.array(list[datetime.datetime], dtype=Type[builtins.object])",5,pandas
"numpy.array(list[Union[float, int]])",5,xarray
numpy.int64 % int,5,pandas
numpy.min,5,matplotlib
numpy.ndarray == float,5,pandas
"numpy.empty(tuple[int, int, int], dtype=numpy.dtype)",5,skimage
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int)",5,xarray
numpy.ndarray == builtins.complex,5,pandas
numpy.ndarray == builtins.bool,5,pandas
numpy.cumsum,5,pandas
numpy.asarray(a=xarray.core.variable.IndexVariable),5,xarray
"numpy.stack(arrays=list[numpy.ndarray], axis=int)",5,dask.array
numpy.uint64.dtype,5,pandas
numpy.concatenate(list[numpy.ndarray]),5,dask.array
numpy.float32.shape,5,dask.array
"numpy.stack(arrays=list[numpy.ndarray], axis=int)",5,matplotlib
numpy.prod,5,dask.array
"numpy.ndarray[slifloate[NoneType, NoneType, int]] = float",5,pandas
int > numpy.float64,5,matplotlib
numpy.listr.npyio.NpzFile[str],5,skimage
numpy.ndarray > numpy.ndarray,5,matplotlib
numpy.ma.numpy.ma.core.MaskedConstantore.MaskedArray[int] = numpy.ma.core.MaskedConstant,5,matplotlib
numpy.array(numpy.datetime64),5,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], list[int]]]",5,pandas
numpy.ndarray == numpy.int16,5,pandas
numpy.sum,5,xarray
numpy.float64 >= int,5,skimage
"numpy.ma.core.MaskedArray.sum(axis=tuple[int], dtype=numpy.dtype, keepdims=builtins.bool)",5,dask.array
"numpy.ma.core.MaskedArray.sum(axis=tuple[int, int], dtype=numpy.dtype, keepdims=builtins.bool)",5,dask.array
"numpy.ndarray.take(numpy.ndarray, list[int])",5,pandas
numpy.int64 - numpy.float64,5,matplotlib
"numpy.ndarray[tuple[int, int]] = int",5,matplotlib
"numpy.ndarray[sliNoneTypee[int, int, NoneType]] = NoneType",5,pandas
"numpy.ma.core.MaskedArray.filled(fill_value=float, self=numpy.ma.core.MaskedArray)",5,matplotlib
numpy.iterable(y=builtins.range),5,matplotlib
numpy.iterable(y=list[str]),5,matplotlib
numpy.array(pandas.core.indexes.range.RangeIndex),5,pandas
numpy.size(a=numpy.ndarray),5,matplotlib
float / numpy.float64,5,dask.array
pandas.core.frame.DataFrame / numpy.ndarray,5,pandas
"numpy.ndarray[tuple[int, int]]",5,xarray
"numpy.empty(tuple[int, int], dtype=Type[numpy.uint64])",5,pandas
"numpy.ndarray[slice[int, int, int]]",5,xarray
numpy.ma.nomask,5,matplotlib
numpy.linalg,5,matplotlib
"numpy.ndarray.astype(numpy.ndarray, numpy.dtype)",5,xarray
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int, int, int, int)",5,skimage
numpy.empty_like,5,pandas
"numpy.vstack(tup=tuple[numpy.ndarray, numpy.ndarray])",5,matplotlib
numpy.timedelta64 + pandas.core.frame.DataFrame,5,pandas
numpy.unique(ar=numpy.ndarray),5,dask.array
numpy.array(str),5,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",5,skimage
numpy.ndarray[numpy.ndarray] = float,5,matplotlib
numpy.stack,5,xarray
numpy.ndarray + pandas.core.indexes.datetimes.DatetimeIndex,5,pandas
*numpy.ndindex,5,dask.array
numpy.int64.shape,5,dask.array
numpy.dtype != numpy.dtype,5,dask.array
pandas.core.series.Series - numpy.ndarray,5,pandas
"numpy.arange(int, dtype=str)",5,dask.array
"numpy.stack(arrays=list[numpy.ndarray], axis=int)",5,xarray
numpy.float64 += float,5,matplotlib
numpy.ndarray.mean(numpy.ndarray),5,dask.array
pandas.core.indexes.datetimes.DatetimeIndex - numpy.datetime64,5,pandas
numpy.ndarray - pandas.core.arrays.datetimes.DatetimeArray,5,pandas
numpy.iterable(y=list[datetime.datetime]),5,matplotlib
"numpy.array(list[list[int]], dtype=Type[numpy.uint32])",5,skimage
numpy.ndarray[numpy.ndarray] = numpy.int64,5,pandas
Type[numpy.ndarray] == Type[numpy.ndarray],5,dask.array
numpy.floor(numpy.ndarray),5,matplotlib
numpy.zeros,5,xarray
int in numpy.ndarray,5,skimage
numpy.dtype == str,5,dask.array
numpy.ndarray * pandas.core.arrays.timedeltas.TimedeltaArray,5,pandas
"numpy.ma.core.masked_invalid(a=numpy.ma.core.MaskedArray, copy=builtins.bool)",5,matplotlib
pandas.core.arrays.timedeltas.TimedeltaArray * numpy.ndarray,5,pandas
pandas.core.indexes.datetimes.DatetimeIndex == numpy.ndarray,5,pandas
numpy.array(list[str]),5,matplotlib
numpy.asarray(a=list[pandas._libs.tslibs.timestamps.Timestamp]),5,pandas
"numpy.ndarray.ravel(numpy.ndarray, str)",5,skimage
"numpy.ndarray[tuple[numpy.ndarray, slice[NoneType, NoneType, NoneType]]]",5,matplotlib
numpy.exp(numpy.ndarray),5,pandas
pandas.core.indexes.datetimes.DatetimeIndex + numpy.timedelta64,5,pandas
numpy.ndarray ^ numpy.ndarray,5,pandas
numpy.ndarray[int] = builtins.bool,5,skimage
numpy.square(numpy.ndarray),5,skimage
pandas.core.frame.DataFrame + numpy.datetime64,5,pandas
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType]]]",5,dask.array
"numpy.zeros(tuple[int], dtype=str)",5,pandas
"numpy.ndarray.sum(numpy.ndarray, axis=tuple, dtype=numpy.dtype, keepdims=builtins.bool)",5,dask.array
numpy.ndarray + pandas.core.arrays.datetimes.DatetimeArray,5,pandas
numpy.uint32(int),5,pandas
numpy.asarray(a=list),5,xarray
numpy.max,5,pandas
pandas.core.series.Series * numpy.int64,5,pandas
numpy.clip,5,matplotlib
numpy.array(float),5,xarray
numpy.ndarray[tuple[numpy.ndarray]],5,skimage
pandas.core.indexes.period.PeriodIndex - numpy.timedelta64,5,pandas
"numpy.ndarray[tuple[int, slinumpy.ndarraye[int, NoneType, int]]] = numpy.ndarray",5,matplotlib
numpy.random.mtrand.RandomState(int),5,xarray
numpy.argmax,5,pandas
numpy.ndarray[int] = int,5,matplotlib
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, int, int)",5,pandas
numpy.int64.dtype,5,dask.array
"numpy.repeat(a=numpy.ndarray, repeats=builtins.range)",5,pandas
numpy.array(list[numpy.ndarray]),5,xarray
pandas.core.indexes.period.PeriodIndex - numpy.ndarray,5,pandas
numpy.ndim(a=numpy.ndarray),5,matplotlib
numpy.argmin,5,pandas
numpy.array(list[list[list[int]]]),5,skimage
numpy.full,5,pandas
"numpy.interp(fp=numpy.ndarray, x=numpy.ndarray, xp=numpy.ndarray)",5,matplotlib
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]])",5,pandas
numpy.log(int),5,skimage
numpy.ndarray - pandas.core.arrays.timedeltas.TimedeltaArray,5,pandas
numpy.float32.dtype,5,pandas
numpy.float32(int),5,pandas
"numpy.array(list[Union[builtins.complex, float]], dtype=str)",5,pandas
"numpy.asarray(a=tuple[float, float, float])",5,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, int, NoneType], slinumpy.ndarraye[NoneType, int, NoneType]]] = numpy.ndarray",5,skimage
pandas.core.indexes.timedeltas.TimedeltaIndex / numpy.ndarray,5,pandas
numpy.ndarray + pandas.core.arrays.timedeltas.TimedeltaArray,5,pandas
pandas.core.indexes.timedeltas.TimedeltaIndex - numpy.ndarray,5,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.complex128])",5,pandas
"numpy.ones(dtype=Type[builtins.bool], shape=tuple[int, int, int])",5,skimage
numpy.squeeze,5,skimage
numpy.finfo(dtype=numpy.dtype),5,skimage
numpy.ndarray / pandas._libs.tslibs.timedeltas.Timedelta,5,pandas
numpy.ndarray + pandas.core.indexes.period.PeriodIndex,5,pandas
"numpy.var(a=numpy.ndarray, axis=int)",5,dask.array
"numpy.isnan(tuple[int, int, int])",5,dask.array
numpy.concatenate,5,matplotlib
"numpy.asarray(a=numpy.ndarray, dtype=numpy.dtype)",5,skimage
numpy.ndarray.mean(numpy.ndarray),5,matplotlib
"numpy.zeros(tuple[int], dtype=Type[builtins.bool])",5,pandas
numpy.ndarray.astype,5,xarray
numpy.int16,5,matplotlib
numpy.shares_memory,5,pandas
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]]",5,xarray
numpy.int64 - float,5,matplotlib
"numpy.ndarray[tuple[int, sliinte[int, int, NoneType]]] = int",5,skimage
"numpy.size(a=numpy.ndarray, axis=int)",4,matplotlib
numpy.ndarray[tuple[numpy.ndarray]],4,dask.array
"numpy.fft.fft(a=numpy.ndarray, axis=int, n=int)",4,dask.array
numpy.isfinite(numpy.ndarray),4,matplotlib
"numpy.ndarray[tuple[int, int]] = float",4,xarray
numpy.amax(a=numpy.ndarray),4,xarray
numpy.array(list[list[list[float]]]),4,skimage
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, int)",4,xarray
"numpy.amax(a=numpy.ndarray, keepdims=builtins.bool)",4,dask.array
numpy.round_(a=numpy.ndarray),4,matplotlib
numpy.float_,4,skimage
numpy.sort(a=numpy.ndarray),4,matplotlib
numpy.unique,4,dask.array
"numpy.std(a=numpy.ndarray, keepdims=builtins.bool)",4,dask.array
numpy.ndarray == numpy.float64,4,xarray
"numpy.argmin(a=numpy.ndarray, axis=int)",4,matplotlib
numpy.ndarray *= numpy.float64,4,skimage
"numpy.iterable(y=tuple[float, float])",4,matplotlib
"numpy.nanprod(a=numpy.ndarray, keepdims=builtins.bool)",4,dask.array
"numpy.clip(a=numpy.ndarray, a_max=int, a_min=int, out=numpy.ndarray)",4,matplotlib
"numpy.ndarray[slice[NoneType, int, int]]",4,xarray
"numpy.ndarray.sum(numpy.ndarray, int)",4,xarray
"numpy.ndarray[tuple[int, int]] = NoneType",4,matplotlib
numpy.int64 / int,4,matplotlib
"numpy.mean(a=numpy.ndarray, dtype=str)",4,dask.array
"numpy.testing._private.utils.assert_equal(actual=numpy.float64, desired=numpy.float64)",4,skimage
numpy.ndarray *= numpy.float64,4,matplotlib
numpy.ma.core.MaskedArray + numpy.ma.core.MaskedArray,4,matplotlib
numpy.deg2rad(list[int]),4,matplotlib
numpy.dtype == Type[numpy.uint16],4,skimage
"numpy.copyto(numpy.ndarray, numpy.ndarray, where=numpy.ndarray)",4,matplotlib
numpy.ndarray.clip,4,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType]]]",4,xarray
"numpy.prod(a=numpy.ndarray, dtype=str)",4,dask.array
numpy.array(list[numpy.float64]),4,xarray
"numpy.ma.core.MaskedArray[tuple[numpy.ndarray, numpy.ndarray]]",4,matplotlib
"numpy.prod(a=numpy.ndarray, keepdims=builtins.bool)",4,dask.array
numpy.sin(dask.array.core.Array),4,dask.array
"numpy.testing._private.utils.assert_array_equal(x=dask.array.core.Array, y=numpy.ndarray)",4,xarray
numpy.float64 - int,4,dask.array
"numpy.iterable(y=tuple[int, int, int, int])",4,matplotlib
numpy.testing.assert_allclose,4,skimage
numpy.dtype == Type[numpy.uint8],4,skimage
numpy.int64(int),4,xarray
"numpy.resize(a=numpy.ndarray, new_shape=tuple[int])",4,matplotlib
numpy.squeeze(a=numpy.ndarray),4,skimage
numpy.float16,4,skimage
numpy.inf,4,xarray
numpy.nanprod(a=numpy.ndarray),4,dask.array
numpy.ndarray.any,4,skimage
"numpy.broadcast_to(array=builtins.bool, shape=int)",4,matplotlib
numpy.cumsum(a=numpy.flatiter),4,matplotlib
numpy.nansum,4,dask.array
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.float32])",4,xarray
"numpy.all(a=numpy.ndarray, keepdims=builtins.bool)",4,dask.array
numpy.asarray(a=numpy.int64),4,xarray
numpy.complexfloating,4,pandas
numpy.dtype != numpy.dtype,4,skimage
numpy.int32.shape,4,dask.array
numpy.empty_like(numpy.ndarray),4,dask.array
"numpy.arange(int, int, float)",4,dask.array
"numpy.arange(int, int)",4,dask.array
numpy.int64 // int,4,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.bool])",4,matplotlib
numpy.add,4,xarray
"numpy.ndarray[tuple[numpy.ndarray, slice[NoneType, NoneType, NoneType]]]",4,dask.array
"numpy.asarray(a=numpy.ndarray, dtype=Type[builtins.bool])",4,matplotlib
numpy.asarray(a=list[pandas._libs.tslibs.period.Period]),4,pandas
"numpy.testing._private.utils.assert_equal(actual=numpy.float32, desired=float)",4,skimage
numpy.zeros_like(a=numpy.ndarray),4,dask.array
numpy.ufunc.outer,4,dask.array
numpy.apply_along_axis,4,skimage
numpy.asarray,4,dask.array
"numpy.arange(int, dtype=str)",4,xarray
"numpy.cumsum(a=numpy.ndarray, axis=int)",4,skimage
"numpy.amin(a=numpy.ndarray, keepdims=builtins.bool)",4,dask.array
numpy.histogram,4,skimage
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.variable.IndexVariable, y=numpy.ndarray)",4,xarray
numpy.argmin,4,matplotlib
numpy.asarray(a=list[numpy.ndarray]),4,matplotlib
numpy.logical_not(numpy.ndarray),4,xarray
numpy.float64 + numpy.ndarray,4,skimage
"numpy.arctan2(numpy.ndarray, numpy.ndarray)",4,skimage
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.variable.Variable, y=numpy.int64)",4,xarray
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.dataarray.DataArray, y=list[str])",4,xarray
numpy.shape(a=list[numpy.ndarray]),4,matplotlib
"numpy.fft.fft2(a=numpy.ndarray, axes=tuple[int, int])",4,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, int], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",4,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=pandas.core.indexes.numeric.Int64Index, y=list[int])",4,xarray
numpy.random.randn,4,xarray
"numpy.maximum(int, int)",4,xarray
"numpy.maximum(xarray.core.variable.Variable, xarray.core.variable.Variable)",4,xarray
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int, int, int)",4,skimage
numpy.argsort(a=numpy.ndarray),4,dask.array
"numpy.ndarray[int] = tuple[numpy.float64, numpy.float64]",4,matplotlib
"numpy.random.mtrand.RandomState.uniform(numpy.random.mtrand.RandomState, int, int, int)",4,dask.array
numpy.sqrt(float),4,skimage
"numpy.any(a=numpy.ndarray, keepdims=builtins.bool)",4,dask.array
"numpy.eye(M=int, N=int, k=int)",4,dask.array
numpy.sort(a=numpy.ndarray),4,dask.array
"numpy.asarray(a=tuple[int, int])",4,matplotlib
"numpy.fft.ifft(a=numpy.ndarray, axis=int)",4,dask.array
"numpy.broadcast_to(array=numpy.ndarray, shape=int)",4,matplotlib
"numpy.maximum(int, numpy.ndarray)",4,xarray
numpy.ndarray /= float,4,skimage
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[NoneType, NoneType, NoneType]]]",4,skimage
numpy.nanargmax(a=numpy.ndarray),4,dask.array
"numpy.hstack(tup=list[Union[int, numpy.ndarray]])",4,matplotlib
numpy.ma.numpy.float64ore.MaskedArray[int] = numpy.float64,4,matplotlib
numpy.float64 += numpy.float64,4,skimage
numpy.nanargmin(a=numpy.ndarray),4,dask.array
float * numpy.float64,4,dask.array
numpy.float64 ** float,4,matplotlib
"numpy.power(numpy.ndarray, float)",4,skimage
numpy.ndarray.flat,4,xarray
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.float64, y=float)",4,matplotlib
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, int)",4,matplotlib
numpy.sign(numpy.ndarray),4,matplotlib
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], int]] = numpy.ndarray",4,matplotlib
"numpy.arctan2(numpy.float64, numpy.float64)",4,matplotlib
numpy.cumsum(a=numpy.ndarray),4,matplotlib
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], int]] = numpy.ndarray",4,matplotlib
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int])",4,matplotlib
numpy.absolute(numpy.ma.core.MaskedArray),4,matplotlib
"numpy.sum(a=numpy.ndarray, axis=tuple[int, int], dtype=str, keepdims=builtins.bool)",4,dask.array
numpy.log(int),4,matplotlib
numpy.int64 != int,4,xarray
numpy.all,4,xarray
numpy.asanyarray(a=numpy.ma.core.MaskedArray),4,matplotlib
"numpy.ndarray[slinumpy.uint8e[int, int, NoneType]] = numpy.uint8",4,matplotlib
numpy.ndarray.flags,4,xarray
numpy.broadcast,4,xarray
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.dataarray.DataArray, y=xarray.core.variable.Variable)",4,xarray
numpy.ma.core.ravel(a=numpy.ndarray),4,matplotlib
"numpy.ndarray.fill(numpy.ndarray, int)",4,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType]]]",4,matplotlib
numpy.absolute(float),4,matplotlib
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], int]] = float",4,matplotlib
numpy.broadcast.shape,4,xarray
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.float64])",4,skimage
numpy.iterable(y=list[list[int]]),4,matplotlib
"numpy.ndarray[tuple[builtins.ellipsis, NoneType]]",4,matplotlib
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, size=tuple[int, int])",4,dask.array
numpy.conjugate(numpy.ndarray),4,matplotlib
"numpy.zeros(int, dtype=Type[numpy.int8])",4,matplotlib
"numpy.nansum(a=numpy.ndarray, axis=tuple[int, int], dtype=numpy.dtype, keepdims=builtins.bool)",4,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType]]]",4,xarray
numpy.ones,4,xarray
"numpy.amin(a=numpy.ndarray, axis=int)",4,matplotlib
numpy.testing.assert_allclose,4,matplotlib
numpy.angle(z=numpy.ndarray),4,matplotlib
numpy.inf,4,dask.array
"numpy.ma.core.MaskedArray.filled(fill_value=int, self=numpy.ma.core.MaskedArray)",4,matplotlib
"numpy.amax(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",4,dask.array
"numpy.ndarray.mean(numpy.ndarray, axis=int)",4,matplotlib
Type[numpy.ma.core.MaskedArray] == Type[numpy.ma.core.MaskedArray],4,dask.array
numpy.integer,4,matplotlib
"numpy.ndarray[slice[numpy.int64, numpy.int64, NoneType]]",4,matplotlib
"numpy.nanprod(a=numpy.ndarray, axis=int)",4,dask.array
"numpy.prod(a=tuple[int, int])",4,xarray
numpy.int8,4,matplotlib
numpy.ndarray.real,4,matplotlib
numpy.isnan(numpy.ndarray),4,skimage
"numpy.ndarray.sum(numpy.ndarray, axis=tuple[int, int], dtype=str, keepdims=builtins.bool)",4,dask.array
numpy.iinfo(int_type=Type[numpy.uint16]),4,skimage
~numpy.ndarray,4,xarray
numpy.asarray(a=xarray.core.indexing.LazilyOuterIndexedArray),4,xarray
"numpy.ndarray[slinumpy.ndarraye[NoneType, int, NoneType]] = numpy.ndarray",4,matplotlib
"numpy.ndarray.reshape(numpy.ndarray, int)",4,xarray
numpy.ndarray.strides,4,matplotlib
"numpy.amin(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",4,dask.array
numpy.linalg.norm,4,dask.array
"numpy.array(list[Union[float, str]], dtype=Type[builtins.object])",4,xarray
numpy.fft,4,matplotlib
numpy.ma.core.is_masked(x=numpy.ma.core.MaskedArray),4,matplotlib
"numpy.array(list[str], dtype=Type[builtins.object])",4,xarray
numpy.int8 - numpy.int8,4,matplotlib
numpy.int8 == numpy.int8,4,matplotlib
numpy.ma.core.MaskedArray.filled(self=numpy.ma.core.MaskedArray),4,matplotlib
numpy.ndarray != int,4,skimage
"numpy.fft.rfft(a=numpy.ndarray, axis=int, n=int)",4,dask.array
"numpy.ndarray + tuple[numpy.float64, numpy.float64]",4,matplotlib
"numpy.fft.rfft2(a=numpy.ndarray, axes=tuple[int, int])",4,dask.array
"numpy.promote_types(numpy.dtype, Type[numpy.float32])",4,matplotlib
"numpy.argmax(a=numpy.ma.core.MaskedArray, axis=int)",4,dask.array
numpy.float64 >= numpy.float64,4,matplotlib
"numpy.fft.rfftn(a=numpy.ndarray, axes=tuple[int, int])",4,dask.array
numpy.arange(numpy.int64),4,dask.array
"numpy.random.mtrand.RandomState.standard_normal(numpy.random.mtrand.RandomState, list[int])",4,matplotlib
"numpy.ndarray[slice[NoneType, NoneType, NoneType]]",4,xarray
"numpy.equal(numpy.ndarray, numpy.ndarray)",4,dask.array
numpy.insert,4,dask.array
"numpy.where(numpy.ndarray, numpy.ndarray, int)",4,dask.array
"numpy.meshgrid(xi=tuple[numpy.ndarray, numpy.ndarray])",4,skimage
numpy.histogram,4,dask.array
numpy.errstate,4,xarray
"numpy.nanmax(a=numpy.ndarray, keepdims=builtins.bool)",4,dask.array
numpy.dtype.type,4,dask.array
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.float64, desired=float)",4,matplotlib
"numpy.fft.fftn(a=numpy.ndarray, axes=tuple[int, int])",4,dask.array
numpy.datetime64(str),4,matplotlib
"numpy.mean(a=numpy.ndarray, keepdims=builtins.bool)",4,dask.array
numpy.nonzero(a=numpy.ndarray),4,matplotlib
numpy.ndarray /= float,4,matplotlib
"numpy.testing._private.utils.assert_allclose(actual=numpy.float64, atol=float, desired=int)",4,matplotlib
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int, int, int, int])",4,skimage
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, int)",4,skimage
"numpy.nansum(a=numpy.ndarray, axis=tuple[int], dtype=numpy.dtype, keepdims=builtins.bool)",4,dask.array
numpy.int64 > float,4,dask.array
"numpy.fft.hfft(a=numpy.ndarray, axis=int, n=int)",4,dask.array
numpy.dtype == Type[numpy.float64],4,xarray
"numpy.nansum(a=numpy.ndarray, axis=tuple, dtype=numpy.dtype, keepdims=builtins.bool)",4,dask.array
numpy.asarray(a=list[float]),4,xarray
numpy.ma.core.getdata(a=numpy.ma.core.MaskedArray),4,dask.array
"numpy.nansum(a=numpy.ndarray, axis=tuple[int], dtype=str, keepdims=builtins.bool)",4,dask.array
numpy.nanmin,4,dask.array
numpy.absolute(dask.array.core.Array),4,dask.array
"numpy.zeros(tuple[int, int, int], dtype=Type[numpy.uint8])",4,skimage
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int, int)",4,dask.array
"numpy.array(list[float], dtype=Type[numpy.float32])",4,xarray
numpy.ma.core.masked_invalid(a=int),4,matplotlib
"numpy.ones(dtype=tuple[int, int], shape=numpy.dtype)",4,dask.array
numpy.argmin(a=numpy.ndarray),4,dask.array
numpy.flagsostrj[str],4,xarray
float ** numpy.float64,4,matplotlib
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, size=tuple[int, int])",4,skimage
"numpy.einsum(operands=tuple[str, numpy.ndarray, numpy.ndarray])",4,dask.array
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], int]] = int",4,matplotlib
numpy.tensordot,4,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, slice[NoneType, int, NoneType]]]",4,matplotlib
"numpy.zeros(tuple[int, int, int])",4,matplotlib
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.ndarray)",4,matplotlib
"numpy.clip(a=numpy.ndarray, a_max=float, a_min=float)",4,skimage
float / numpy.int64,4,matplotlib
"numpy.array(list[int], str)",4,xarray
numpy.dtype(Type[numpy.int64]),4,dask.array
"numpy.ndarray.reshape(numpy.ndarray, tuple[int])",4,matplotlib
numpy.NaN,4,xarray
numpy.ma.core.MaskedArray.compressed(self=numpy.ma.core.MaskedArray),4,matplotlib
numpy.bincount,4,dask.array
numpy.deg2rad(int),4,matplotlib
numpy.ma.core.getmaskarray(arr=numpy.ma.core.MaskedArray),4,matplotlib
numpy.ndarray.argsort(numpy.ndarray),4,matplotlib
"numpy.interp(fp=numpy.ndarray, x=numpy.float64, xp=numpy.ndarray)",4,matplotlib
"numpy.digitize(bins=numpy.ndarray, right=builtins.bool, x=numpy.ndarray)",4,dask.array
numpy.float64 - numpy.ndarray,4,skimage
numpy.diag(v=numpy.ndarray),4,skimage
"numpy.amax(a=numpy.ndarray, axis=tuple)",4,dask.array
numpy.ndarray.copy(numpy.ndarray),4,xarray
numpy.asarray(a=int),4,matplotlib
numpy.errstate(kwargs=dict),4,xarray
numpy.digitize,4,dask.array
"numpy.argmin(a=numpy.ma.core.MaskedArray, axis=int)",4,dask.array
numpy.ndarray -= int,4,matplotlib
"numpy.eye(N=int, dtype=Type[builtins.int])",4,skimage
"numpy.linspace(start=int, stop=int)",4,matplotlib
"numpy.iterable(y=tuple[float, float, float, float])",4,matplotlib
numpy.dtype(Type[builtins.object]),4,xarray
"numpy.where(numpy.ndarray, numpy.ndarray, int)",4,skimage
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int, int])",4,pandas
"numpy.std(a=numpy.ndarray, ddof=int)",4,pandas
numpy.dtype.kind,4,dask.array
"numpy.isscalar(element=tuple[int, int, int, int])",4,skimage
numpy.ndarray -= numpy.float64,4,skimage
int == numpy.float64,4,pandas
numpy.ndarray[numpy.int64],4,dask.array
int * numpy.int64,4,pandas
numpy.ma.core.isMaskedArray(x=numpy.ndarray),4,skimage
"numpy.asarray(a=list[int], dtype=str)",4,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], numpy.ndarray]]",4,skimage
numpy.float64 ** float,4,skimage
numpy.ndindex(shape=tuple[tuple[int]]),4,dask.array
numpy.bool_.dtype,4,pandas
numpy.int64 > int,4,dask.array
"numpy.meshgrid(kwargs=dict, xi=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",4,skimage
"numpy.array(numpy.ndarray, dtype=Type[numpy.uint8])",4,skimage
"numpy.empty(tuple[int, int, int])",4,skimage
"numpy.isscalar(element=tuple[int, int])",4,skimage
numpy.ma.core.MaskedArray.mask,4,skimage
float + numpy.float64,4,pandas
numpy.float64 /= float,4,skimage
"numpy.ndarray[slice[int, numpy.int64, NoneType]]",4,pandas
numpy.int64 > numpy.int64,4,pandas
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.float64, decimal=int, desired=int)",4,skimage
numpy.ufunc.accumulate,4,pandas
"numpy.array(list[Union[float, pandas._libs.tslibs.nattype.NaTType]])",4,pandas
numpy.uint8(pandas.core.series.Series),4,pandas
"numpy.ndarray[tuple[int, int, int, int]]",4,dask.array
numpy.random.mtrand.RandomState.choice,4,skimage
"numpy.ones(dtype=numpy.dtype, shape=tuple[int, int])",4,dask.array
"numpy.ndarray[slice[numpy.int64, NoneType, NoneType]]",4,pandas
numpy.flatnonzero(a=numpy.ndarray),4,skimage
numpy.dtype(Type[numpy.float16]),4,pandas
"numpy.array(list[pandas._libs.tslibs.period.Period], dtype=Type[builtins.object])",4,pandas
numpy.float64 > numpy.float64,4,pandas
numpy.asarray(a=pandas.core.indexes.period.PeriodIndex),4,pandas
numpy.float32.ndim,4,dask.array
numpy.float32(pandas.core.series.Series),4,pandas
numpy.array(numpy.float32),4,dask.array
numpy.dtype != str,4,pandas
numpy.random.normal,4,skimage
pandas.core.frame.DataFrame - numpy.timedelta64,4,pandas
numpy.ndarray[tuple[int]],4,dask.array
"numpy.ndarray[sliinte[NoneType, NoneType, NoneType]] = int",4,pandas
"numpy.compress(a=numpy.ndarray, condition=numpy.ndarray)",4,pandas
numpy.datetime64 - pandas.core.series.Series,4,pandas
numpy.datetime64 - pandas.core.frame.DataFrame,4,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.floating])",4,skimage
numpy.argsort(a=numpy.ndarray),4,pandas
"numpy.asarray(a=list[str], dtype=str)",4,pandas
"numpy.ndarray.ravel(numpy.ndarray, order=str)",4,pandas
"numpy.zeros(tuple[int], dtype=Type[numpy.float64])",4,skimage
numpy.int64 * numpy.ndarray,4,pandas
numpy.ufunc.reduce,4,pandas
numpy.ufunc,4,pandas
Type[numpy.datetime64].__name__,4,pandas
numpy.cumsum(a=numpy.ndarray),4,pandas
"numpy.testing._private.utils.assert_array_equal(x=skimage.util._map_array.ArrayMap, y=numpy.ndarray)",4,skimage
numpy.sinh(numpy.ndarray),4,dask.array
numpy.asarray(a=numpy.int64),4,pandas
pandas.core.indexes.numeric.Float64Index == numpy.float64,4,pandas
pandas.core.indexes.numeric.Int64Index == numpy.int64,4,pandas
"numpy.arange(int, dtype=numpy.dtype)",4,pandas
numpy.bitwise_or,4,pandas
numpy.tan(numpy.ndarray),4,dask.array
numpy.dtype.shape,4,dask.array
numpy.cos(numpy.ndarray),4,dask.array
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",4,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, int, NoneType]]] = numpy.ndarray",4,skimage
-numpy.ndarray,4,dask.array
numpy.ndarray.flat,4,dask.array
numpy.timedelta64 - pandas.core.series.Series,4,pandas
numpy.log10(numpy.ndarray),4,dask.array
"numpy.where(numpy.ndarray, numpy.ndarray, float)",4,pandas
"numpy.ndarray.swapaxes(numpy.ndarray, int, int)",4,pandas
numpy.timedelta64 - pandas.core.frame.DataFrame,4,pandas
numpy.asarray(a=builtins.range),4,pandas
numpy.expm1(numpy.ndarray),4,dask.array
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=int)",4,skimage
numpy.ndarray[tuple[numpy.ndarray]] = int,4,pandas
numpy.ndarray - pandas.core.indexes.datetimes.DatetimeIndex,4,pandas
numpy.iinfo(int_type=Type[numpy.uint32]),4,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType]]]",4,pandas
numpy.unique(ar=numpy.ndarray),4,pandas
"numpy.repeat(a=str, repeats=int)",4,pandas
numpy.uint32(pandas.core.series.Series),4,pandas
numpy.array(numpy.bool_),4,dask.array
"numpy.empty(tuple[int, int], dtype=Type[numpy.uint16])",4,pandas
numpy.int32 + numpy.int32,4,pandas
"numpy.ndarray[tuple[int, int, int, int]] = int",4,skimage
"numpy.array(numpy.ndarray, dtype=Type[builtins.object])",4,pandas
"numpy.array(list, copy=builtins.bool)",4,pandas
numpy.uint8 + numpy.uint8,4,pandas
numpy.uint16 + numpy.uint16,4,pandas
numpy.uint32 + numpy.uint32,4,pandas
"numpy.empty(tuple[int, int], dtype=Type[numpy.uint32])",4,pandas
"numpy.empty(tuple[int, int], dtype=Type[numpy.uint8])",4,pandas
numpy.array(pandas.core.arrays.sparse.array.SparseArray),4,pandas
"numpy.empty(tuple[int, int], dtype=Type[numpy.int32])",4,pandas
numpy.dtype.char,4,skimage
"numpy.array(list[Union[float, int]], copy=builtins.bool)",4,pandas
numpy.ndarray == tuple[int],4,pandas
numpy.int32,4,dask.array
"numpy.empty(tuple[int, int], dtype=Type[numpy.int16])",4,pandas
numpy.median(a=pandas.core.series.Series),4,pandas
"numpy.add(numpy.ndarray, numpy.ndarray)",4,dask.array
numpy.int16 + numpy.int16,4,pandas
"numpy.diff(a=numpy.ndarray, axis=int)",4,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType]]]",4,dask.array
numpy.ndarray[numpy.ndarray] = pandas._libs.missing.NAType,4,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.object_])",4,pandas
numpy.numpy.bool_ool_ + numpy.bool_,4,pandas
"numpy.where(numpy.ndarray, numpy.ndarray, numpy.ndarray)",4,pandas
numpy.timedelta64.astype,4,pandas
numpy.numpy.bool_ool_ != numpy.bool_,4,pandas
numpy.complex128(real=builtins.complex),4,pandas
numpy.str_.dtype,4,pandas
"numpy.testing._private.utils.assert_equal(actual=tuple[int, int, int, int], desired=tuple[int, int, int, int])",4,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int64], copy=builtins.bool)",4,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.integer])",4,pandas
"numpy.asarray(a=numpy.ndarray, dtype=str)",4,pandas
numpy.dtype(Type[numpy.bool_]),4,pandas
"numpy.ndarray[tuple[builtins.ellipsis, NoneType]]",4,dask.array
"numpy.empty(tuple[int, int], dtype=Type[numpy.float32])",4,pandas
numpy.str_,4,pandas
numpy.int64(numpy.int64),4,pandas
numpy.int8 + numpy.int8,4,pandas
numpy.ndarray[NoneType],4,skimage
numpy.ndarray.conj(numpy.ndarray),4,skimage
"tuple[builtins.function, builtins.function, builtins.function, builtins.builtin_function_or_method]uiltins.function in tuple[builtins.function, builtins.function, builtins.function, builtins.builtin_function_or_method]",4,dask.array
"numpy.datetime64(int, str)",4,pandas
numpy.float64 / numpy.float32,4,pandas
numpy.int32.dtype,4,pandas
"numpy.maximum(numpy.ndarray, int)",4,dask.array
"numpy.maximum(numpy.ndarray, float)",4,dask.array
"numpy.maximum(int, numpy.ndarray)",4,dask.array
"numpy.array(list[numpy.datetime64], dtype=str)",4,pandas
"numpy.maximum(float, numpy.ndarray)",4,dask.array
"numpy.ndarray.view(numpy.ndarray, Type[builtins.bool])",4,skimage
"numpy.asarray(a=tuple[int, int], dtype=Type[builtins.float])",4,skimage
"numpy.empty(tuple[int, int], dtype=Type[numpy.int8])",4,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.bool_])",4,pandas
numpy.float64 * numpy.ndarray,4,pandas
numpy.asanyarray(a=list[int]),4,dask.array
numpy.complex_,4,pandas
numpy.ndarray[int] = pandas._libs.tslibs.timestamps.Timestamp,4,pandas
"numpy.expand_dims(a=numpy.ndarray, axis=int)",4,pandas
numpy.int64 / float,4,skimage
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, size=tuple[int, int, int])",4,dask.array
numpy.int8(pandas.core.series.Series),4,pandas
numpy.int32(pandas.core.series.Series),4,pandas
numpy.float32 - int,4,pandas
numpy.float64 / numpy.float128,4,pandas
"numpy.full(fill_value=float, shape=tuple[int, int])",4,skimage
numpy.ndarray.tolist,4,skimage
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], int]] = float",4,pandas
numpy.isinf(numpy.ndarray),4,pandas
"numpy.ndarray * tuple[int, int]",4,skimage
"numpy.corrcoef(x=numpy.ndarray, y=numpy.ndarray)",4,pandas
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=list[list[float]])",4,skimage
"numpy.ndarray[tuple[list[int], slice[NoneType, NoneType, NoneType]]]",4,pandas
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType]]]",4,pandas
numpy.isscalar(element=float),4,dask.array
numpy.var,4,pandas
numpy.dtype(Type[builtins.float]),4,skimage
"numpy.testing._private.utils.assert_equal(actual=NoneType, desired=NoneType)",4,skimage
"numpy.testing._private.utils.assert_array_equal(x=list[tuple[int, int]], y=list[tuple[int, int]])",4,skimage
"numpy.var(a=pandas.core.series.Series, ddof=int)",4,pandas
numpy.prod(a=list),4,dask.array
numpy.float128 - int,4,pandas
numpy.linalg.det(a=numpy.ndarray),4,skimage
numpy.asanyarray,4,pandas
numpy.deg2rad(numpy.ndarray),4,dask.array
"numpy.lituple[slice[int, int, NoneType], slice[int, int, NoneType]].index_tricks.OGridClass[tuple[slice[int, int, NoneType], slice[int, int, NoneType]]]",4,skimage
"numpy.array(list[int], dtype=Type[numpy.uint32])",4,pandas
numpy.ndarray.argmin(numpy.ndarray),4,pandas
numpy.ndarray * pandas._libs.tslibs.timedeltas.Timedelta,4,pandas
pandas.core.indexes.period.PeriodIndex == numpy.ndarray,4,pandas
"numpy.repeat(a=int, repeats=int)",4,pandas
int / numpy.float64,4,pandas
numpy.floor,4,skimage
"numpy.array(list[str], copy=builtins.bool)",4,pandas
numpy.array(pandas.core.indexes.multi.MultiIndex),4,pandas
numpy.float64 / numpy.float64,4,dask.array
Type[numpy.int8] == Type[numpy.object_],4,pandas
pandas.core.indexes.timedeltas.TimedeltaIndex / numpy.timedelta64,4,pandas
pandas.core.arrays.timedeltas.TimedeltaArray / numpy.timedelta64,4,pandas
numpy.ndarray == builtins.bool,4,skimage
numpy.isscalar(element=list[int]),4,skimage
numpy.frexp(numpy.ndarray),4,dask.array
"numpy.take(a=numpy.ndarray, indices=list[int])",4,pandas
"numpy.zeros(tuple[int, int], dtype=Type[numpy.uint16])",4,skimage
numpy.stack,4,dask.array
numpy.ndarray[tuple],4,dask.array
"numpy.array(int, dtype=str)",4,pandas
"numpy.repeat(a=list[str], repeats=int)",4,pandas
numpy.asarray(a=list[int]),4,dask.array
numpy.uint8,4,dask.array
numpy.ndarray / pandas.core.frame.DataFrame,4,pandas
numpy.array(numpy.int64),4,pandas
numpy.modf(numpy.ndarray),4,dask.array
numpy.ndarray / pandas.core.indexes.timedeltas.TimedeltaIndex,4,pandas
Type[numpy.int32] == numpy.dtype,4,pandas
Type[numpy.int64] == numpy.dtype,4,pandas
numpy.ndarray.copy(numpy.ndarray),4,dask.array
numpy.matrix.ndim,4,dask.array
numpy.array(float),4,dask.array
"numpy.array(list[int], dtype=Type[numpy.uint8])",4,pandas
numpy.log(pandas.core.series.Series),4,pandas
"numpy.concatenate(tuple[numpy.ndarray, numpy.ndarray])",4,pandas
numpy.array(numpy.int32),4,dask.array
numpy.float64 - float,4,pandas
"numpy.array(list[pandas._libs.tslibs.nattype.NaTType], dtype=Type[builtins.object])",4,pandas
numpy.errstate(kwargs=dict),4,dask.array
numpy.array(list[pandas._libs.interval.Interval]),4,pandas
"numpy.repeat(a=pandas.core.indexes.datetimes.DatetimeIndex, repeats=int)",4,pandas
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[str], int)",4,pandas
"numpy.linspace(num=int, start=float, stop=float)",4,skimage
numpy.ndarray.var,4,skimage
numpy.asarray(a=pandas._libs.tslibs.timestamps.Timestamp),4,pandas
numpy.array(pandas.core.arrays.integer.IntegerArray),4,pandas
numpy.datetime64(pandas._libs.tslibs.timestamps.Timestamp),4,pandas
numpy.linspace,4,pandas
numpy.asarray(a=pandas.core.arrays.integer.IntegerArray),4,pandas
pandas.core.indexes.category.CategoricalIndex == numpy.ndarray,4,pandas
numpy.isfinite,4,pandas
float / numpy.float64,4,skimage
"numpy.linspace(num=int, start=numpy.float64, stop=numpy.float64)",4,skimage
"numpy.tile(A=numpy.ndarray, reps=tuple[int, int])",4,skimage
numpy.asarray(a=pandas.core.arrays.boolean.BooleanArray),4,pandas
numpy.ones(shape=tuple[int]),4,skimage
numpy.isscalar(element=numpy.complex128),4,dask.array
numpy.ndarray & builtins.bool,4,pandas
numpy.ndarray - pandas.core.indexes.timedeltas.TimedeltaIndex,4,pandas
"numpy.ndarray[tuple[numpy.int64, numpy.int64, numpy.int64]]",4,skimage
numpy.random.mtrand.RandomState.uniform(numpy.random.mtrand.RandomState),4,pandas
"numpy.array(list[int], dtype=Type[numpy.float32])",4,pandas
"numpy.asarray(a=numpy.ndarray, dtype=Type[builtins.float])",4,skimage
numpy.numpy.ndarrayool_ & numpy.ndarray,4,pandas
pandas._linumpy.float64s.tslinumpy.float64s.timedeltas.Timedelta / numpy.float64,4,pandas
pandas.core.series.Series * numpy.ndarray,4,pandas
numpy.float64 >= int,4,pandas
numpy.radians(numpy.ndarray),4,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType]]]",4,pandas
"numpy.full(dtype=Type[builtins.float], fill_value=int, shape=int)",4,skimage
numpy.ceil(numpy.ndarray),4,dask.array
numpy.dtype != str,4,dask.array
numpy.fliplr(m=numpy.ndarray),4,skimage
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int)",4,pandas
"numpy.array(pandas.core.arrays.datetimes.DatetimeArray, copy=str, dtype=builtins.bool)",4,pandas
"numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray, dtype=str)",4,pandas
"numpy.array(pandas.core.arrays.datetimes.DatetimeArray, dtype=str)",4,pandas
pandas.core.arrays.timedeltas.TimedeltaArray / numpy.ndarray,4,pandas
numpy.signbit(numpy.ndarray),4,dask.array
"numpy.ones(shape=tuple[int, int, int])",4,dask.array
numpy.ndarray[numpy.ndarray] = numpy.bool_,4,pandas
numpy.ndarray * pandas.core.series.Series,4,pandas
Type[numpy.int32] == Type[numpy.object_],4,pandas
numpy.iscomplex(x=numpy.ndarray),4,dask.array
numpy.asarray(a=str),4,pandas
numpy.float64 / int,4,pandas
numpy.isfinite(numpy.ndarray),4,pandas
"numpy.ascontiguousarray(a=numpy.ndarray, dtype=Type[numpy.uint8])",4,skimage
numpy.isreal(x=numpy.ndarray),4,dask.array
numpy.sin(int),4,skimage
numpy.flagsobj.writeable,4,pandas
"numpy.asarray(a=pandas.core.arrays.period.PeriodArray, dtype=str)",4,pandas
numpy.flatnonzero(a=numpy.ndarray),4,pandas
"numpy.array(list[int], dtype=Type[numpy.int64])",4,skimage
numpy.generic.all(numpy.bool_),4,pandas
pandas.core.indexes.period.PeriodIndex += numpy.timedelta64,4,pandas
numpy.cos(int),4,skimage
numpy.ndarray >> int,4,pandas
pandas.core.frame.DataFrame / numpy.timedelta64,4,pandas
numpy.timedelta64 / pandas.core.frame.DataFrame,4,pandas
"numpy.lituple[builtins.bool, numpy.ndarray].index_tricks.RClass[tuple[builtins.bool, numpy.ndarray]]",4,pandas
dask.array.core.Array * numpy.ndarray,4,skimage
pandas.core.series.Series / numpy.timedelta64,4,pandas
"numpy.ufunc.reduce(numpy.ufunc, numpy.ndarray)",4,pandas
numpy.uint16(int),4,pandas
"numpy.cumprod(a=numpy.ndarray, axis=int)",4,dask.array
numpy.imag(val=numpy.ndarray),4,dask.array
numpy.ndarray ^= numpy.ndarray,4,pandas
Type[numpy.float32] == Type[numpy.object_],4,pandas
"numpy.ndarray[slinumpy.ndarraye[int, NoneType, NoneType]] = numpy.ndarray",4,skimage
Type[numpy.int16] == Type[numpy.object_],4,pandas
numpy.ndarray[numpy.ndarray] = float,4,dask.array
numpy.all(a=pandas.core.arrays.sparse.array.SparseArray),4,pandas
numpy.ndarray + builtins.complex,4,dask.array
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, int)",4,dask.array
numpy.ndarray.item,4,pandas
numpy.eye(N=int),4,dask.array
numpy.ndarray[numpy.ndarray] = NoneType,3,pandas
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.uint8])",3,matplotlib
"numpy.ndarray[slinumpy.bool_e[int, int, NoneType]] = numpy.bool_",3,pandas
"numpy.array(list[NoneType], copy=builtins.bool)",3,pandas
numpy.hanning(M=int),3,matplotlib
numpy.str_(str),3,pandas
numpy.ndarray[tuple[numpy.ndarray]] = numpy.ndarray,3,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType]]]",3,matplotlib
numpy.array(pandas.core.arrays.boolean.BooleanArray),3,pandas
numpy.array(pandas.core.arrays.period.PeriodArray),3,pandas
numpy.uint32.dtype,3,pandas
"numpy.ndarray[slinumpy.bool_e[NoneType, int, NoneType]] = numpy.bool_",3,pandas
"numpy.logical_or(numpy.ndarray, numpy.ndarray)",3,pandas
"numpy.nanmin(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",3,dask.array
"numpy.add(numpy.ndarray, int)",3,pandas
"numpy.nanprod(a=numpy.ndarray, dtype=str)",3,dask.array
numpy.ones_like(a=numpy.ndarray),3,pandas
"numpy.array(list[numpy.int64], dtype=numpy.dtype)",3,pandas
"numpy.amax(a=numpy.ndarray, axis=int)",3,matplotlib
numpy.float64 - numpy.int64,3,matplotlib
numpy.dtype != Type[builtins.bool],3,pandas
"numpy.asarray(a=list[builtins.bool], dtype=str)",3,pandas
numpy.any,3,pandas
numpy.any(a=numpy.bool_),3,pandas
numpy.isclose,3,matplotlib
"numpy.roll(a=numpy.ndarray, axis=int, shift=int)",3,matplotlib
"numpy.nansum(a=numpy.ndarray, axis=tuple)",3,dask.array
"numpy.logical_xor(numpy.ndarray, numpy.ndarray)",3,pandas
"numpy.result_type(numpy.dtype, Type[builtins.int])",3,pandas
numpy.nanstd,3,dask.array
numpy.random.randn,3,pandas
"numpy.mean(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",3,dask.array
numpy.ndarray + list[numpy.float64],3,matplotlib
"numpy.prod(a=numpy.ndarray, axis=int)",3,dask.array
"numpy.sum(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",3,dask.array
"numpy.column_stack(tup=list[list[Union[float, float, int]]])",3,matplotlib
"numpy.clip(a=int, a_max=int, a_min=int)",3,matplotlib
numpy.isscalar(element=NoneType),3,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int)",3,pandas
numpy.empty(int),3,pandas
"numpy.asarray(a=pandas.core.arrays.sparse.array.SparseArray, dtype=Type[builtins.bool])",3,pandas
"numpy.std(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",3,dask.array
numpy.absolute(pandas.core.arrays.sparse.array.SparseArray),3,pandas
numpy.sum(a=pandas.core.arrays.sparse.array.SparseArray),3,pandas
numpy.any(a=pandas.core.arrays.sparse.array.SparseArray),3,pandas
numpy.dtype == Type[builtins.float],3,pandas
"numpy.array(list, dtype=Type[builtins.int])",3,pandas
numpy.dtype(Type[builtins.complex]),3,pandas
numpy.argsort(a=pandas.core.series.Series),3,pandas
numpy.numpy.bool_ool_ == numpy.bool_,3,matplotlib
"numpy.repeat(a=pandas.core.series.Series, repeats=builtins.range)",3,pandas
"numpy.repeat(a=pandas.core.indexes.datetimes.DatetimeIndex, repeats=builtins.range)",3,pandas
numpy.asarray(a=list[numpy.datetime64]),3,pandas
"numpy.repeat(a=pandas.core.indexes.base.Index, repeats=builtins.range)",3,pandas
"numpy.repeat(a=pandas.core.indexes.period.PeriodIndex, repeats=builtins.range)",3,pandas
numpy.iterable(y=builtins.bool),3,matplotlib
"numpy.repeat(a=pandas.core.indexes.category.CategoricalIndex, repeats=builtins.range)",3,pandas
"numpy.asarray(a=list[tuple[numpy.float64, numpy.float64]])",3,matplotlib
numpy.searchsorted,3,pandas
"numpy.concatenate(list[Union[list[numpy.uint8], numpy.ndarray]])",3,matplotlib
"numpy.concatenate(list[Union[list[numpy.ndarray], numpy.ndarray]])",3,matplotlib
"numpy.ndarray[slinumpy.float64e[int, int, NoneType]] = numpy.float64",3,pandas
"numpy.nanmax(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",3,dask.array
"numpy.repeat(a=pandas.core.indexes.interval.IntervalIndex, repeats=builtins.range)",3,pandas
numpy.numpy.bool_ool_ ^ numpy.bool_,3,matplotlib
"numpy.repeat(a=pandas.core.indexes.multi.MultiIndex, repeats=builtins.range)",3,pandas
"numpy.ndarray[sliinte[NoneType, NoneType, int]] = int",3,pandas
"numpy.array(list, dtype=Type[numpy.datetime64])",3,pandas
"numpy.std(a=numpy.ndarray, axis=tuple)",3,dask.array
"numpy.result_type(numpy.dtype, Type[builtins.float])",3,pandas
numpy.int32 >= int,3,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.integer])",3,matplotlib
numpy.nanmax,3,dask.array
"numpy.nanmin(a=numpy.ndarray, keepdims=builtins.bool)",3,dask.array
numpy.eye,3,pandas
"numpy.array(list[list[int]], dtype=Type[builtins.object])",3,pandas
"numpy.array(list[numpy.ndarray], dtype=Type[builtins.object])",3,pandas
numpy.dtype == Type[numpy.uint64],3,pandas
"numpy.subtract(numpy.ndarray, numpy.ndarray)",3,pandas
numpy.dtype(Type[numpy.complex128]),3,pandas
numpy.int8.dtype,3,pandas
"numpy.logaddexp(pandas.core.arrays.sparse.array.SparseArray, pandas.core.arrays.sparse.array.SparseArray)",3,pandas
numpy.cumprod(a=numpy.ndarray),3,pandas
numpy.uint8.dtype,3,pandas
"numpy.nanvar(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",3,dask.array
"numpy.nansum(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",3,dask.array
numpy.iterable(y=numpy.int64),3,matplotlib
numpy.dtype(Type[numpy.datetime64]),3,pandas
numpy.array(list[pandas._libs.tslibs.period.Period]),3,pandas
"numpy.logaddexp(numpy.ndarray, numpy.ndarray)",3,pandas
"numpy.ndarray[sliinte[NoneType, int, NoneType]] = int",3,pandas
"numpy.nansum(a=numpy.ndarray, keepdims=builtins.bool)",3,dask.array
Type[numpy.int64] == Type[numpy.int64],3,pandas
"numpy.all(a=numpy.ndarray, axis=tuple)",3,dask.array
"numpy.any(a=numpy.ndarray, axis=tuple)",3,dask.array
Type[numpy.datetime64] == Type[numpy.datetime64],3,pandas
"numpy.asarray(a=pandas.core.arrays.sparse.array.SparseArray, dtype=numpy.dtype)",3,pandas
"numpy.ndarray[int] = tuple[float, float, float, float]",3,matplotlib
"numpy.amin(a=numpy.ndarray, axis=tuple)",3,dask.array
"numpy.prod(a=numpy.ndarray, axis=tuple)",3,dask.array
"numpy.any(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",3,dask.array
"numpy.sum(a=numpy.ndarray, dtype=str)",3,dask.array
"numpy.full(dtype=numpy.dtype, fill_value=float, shape=tuple[int])",3,pandas
"numpy.array(list[Union[numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]])",3,pandas
"numpy.ndarray[slibuiltins.boole[NoneType, int, NoneType]] = builtins.bool",3,pandas
numpy.int64(),3,pandas
"numpy.ndarray.fill(numpy.ndarray, numpy.int64)",3,pandas
"numpy.asarray(a=list[list[float]], dtype=Type[builtins.float])",3,matplotlib
pandas.core.series.Series == Type[numpy.int64],3,pandas
numpy.ndarray[int] = numpy.ndarray,3,matplotlib
"numpy.less_equal(numpy.ndarray, int)",3,dask.array
"numpy.logaddexp(int, numpy.ndarray)",3,dask.array
"numpy.logaddexp2(numpy.ndarray, int)",3,dask.array
"numpy.where(list[builtins.bool], numpy.ndarray, float)",3,pandas
"numpy.logical_and(int, numpy.ndarray)",3,dask.array
"numpy.logical_or(numpy.ndarray, int)",3,dask.array
"numpy.logical_xor(int, numpy.ndarray)",3,dask.array
numpy.uint8 != numpy.uint8,3,matplotlib
"numpy.minimum(int, numpy.ndarray)",3,dask.array
"numpy.less(numpy.ndarray, numpy.ndarray)",3,dask.array
numpy.array(list[pandas._libs.tslibs.nattype.NaTType]),3,pandas
"numpy.multiply(int, numpy.ndarray)",3,dask.array
numpy.array(builtins.range),3,pandas
"numpy.ones(dtype=Type[numpy.int64], shape=tuple[int])",3,pandas
"numpy.nextafter(numpy.ndarray, int)",3,dask.array
"numpy.not_equal(numpy.ndarray, numpy.ndarray)",3,dask.array
pandas.core.indexes.numeric.Float64Index == numpy.ndarray,3,pandas
"numpy.not_equal(int, numpy.ndarray)",3,dask.array
pandas.core.indexes.numeric.Int64Index == numpy.ndarray,3,pandas
"numpy.arange(int, float, float)",3,pandas
"numpy.less(int, numpy.ndarray)",3,dask.array
"numpy.column_stack(tup=list[list[Union[float, int]]])",3,matplotlib
"numpy.all(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",3,dask.array
"numpy.argsort(a=numpy.ndarray, kind=str)",3,pandas
"numpy.bitwise_and(numpy.ndarray, int)",3,dask.array
"numpy.bitwise_or(numpy.ndarray, numpy.ndarray)",3,dask.array
"numpy.iterable(y=tuple[int, float])",3,matplotlib
"numpy.bitwise_or(int, numpy.ndarray)",3,dask.array
numpy.any(a=builtins.bool),3,matplotlib
numpy.round,3,pandas
"numpy.bitwise_xor(numpy.ndarray, int)",3,dask.array
"numpy.floor_divide(numpy.ndarray, numpy.ndarray)",3,dask.array
"numpy.floor_divide(int, numpy.ndarray)",3,dask.array
numpy.int64 in pandas.core.indexes.numeric.Int64Index,3,pandas
"numpy.ndarray[slice[numpy.int64, int, NoneType]]",3,pandas
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, pandas.core.indexes.datetimes.DatetimeIndex, int)",3,pandas
"numpy.fmax(numpy.ndarray, int)",3,dask.array
int * numpy.int64,3,matplotlib
"numpy.fmin(int, numpy.ndarray)",3,dask.array
"numpy.fmod(numpy.ndarray, int)",3,dask.array
"numpy.greater(numpy.ndarray, numpy.ndarray)",3,dask.array
"numpy.greater(int, numpy.ndarray)",3,dask.array
numpy.ndarray[numpy.int64] = str,3,pandas
"numpy.greater_equal(numpy.ndarray, int)",3,dask.array
"numpy.hypot(int, numpy.ndarray)",3,dask.array
"numpy.ldexp(numpy.ndarray, int)",3,dask.array
"numpy.power(numpy.ndarray, int)",3,dask.array
"numpy.subtract(numpy.ndarray, int)",3,dask.array
numpy.isinf,3,pandas
numpy.ndarray * numpy.timedelta64,3,xarray
"numpy.unique(ar=numpy.ndarray, return_inverse=builtins.bool)",3,xarray
numpy.dtype == Type[numpy.int64],3,xarray
"numpy.broadcast(numpy.ndarray, numpy.ndarray, numpy.ndarray)",3,xarray
Type[numpy.float64] == numpy.dtype,3,pandas
"numpy.ndarray[tuple[numpy.ndarray, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",3,xarray
"numpy.ndarray[tuple[numpy.ndarray, slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType]]]",3,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], numpy.ndarray, slice[NoneType, NoneType, NoneType]]]",3,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType], numpy.ndarray]]",3,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], numpy.ndarray, slice[NoneType, NoneType, NoneType]]]",3,xarray
"numpy.array(list[list[int]], dtype=str)",3,xarray
"numpy.testing._private.utils.assert_allclose(actual=numpy.float64, desired=float)",3,xarray
numpy.asarray(a=pandas._libs.tslibs.timedeltas.Timedelta),3,pandas
numpy.array(list[builtins.bool]),3,xarray
numpy.ndarray != int,3,xarray
numpy.ones_like(a=pandas.core.series.Series),3,pandas
numpy.uint16,3,pandas
numpy.add,3,dask.array
"numpy.dtype in tuple[Type[numpy.float32], Type[numpy.float64]]",3,pandas
numpy.gradient,3,xarray
numpy.diff,3,xarray
numpy.ndarray.flatten(numpy.ndarray),3,xarray
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.object])",3,xarray
numpy.unique,3,xarray
Type[numpy.float32] == numpy.dtype,3,pandas
numpy.finfo.max,3,pandas
"numpy.linspace(num=int, start=int, stop=float)",3,xarray
pandas._linumpy.datetime64s.tslinumpy.datetime64s.timestamps.Timestamp == numpy.datetime64,3,pandas
"numpy.float_power(numpy.ndarray, int)",3,dask.array
Type[numpy.ndarray] == Type[numpy.ndarray],3,xarray
numpy.int64 -= int,3,pandas
numpy.sin(xarray.core.variable.Variable),3,xarray
pandas.core.indexes.range.RangeIndex == numpy.ndarray,3,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.str])",3,xarray
numpy.datetime64 == numpy.datetime64,3,xarray
numpy.timedelta64(datetime.timedelta),3,xarray
numpy.datetime64.dtype,3,xarray
numpy.datetime64(datetime.datetime),3,xarray
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType]]]",3,pandas
numpy.str_ == str,3,pandas
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, size=tuple[int, int, int])",3,pandas
"numpy.ndarray[slistre[NoneType, NoneType, NoneType]] = str",3,pandas
"numpy.maximum(xarray.core.dataarray.DataArray, int)",3,xarray
pandas.core.series.Series > numpy.float64,3,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], numpy.ndarray]]",3,pandas
"numpy.ndarray[slice[numpy.int64, int, int]]",3,pandas
"numpy.ndarray[slice[NoneType, int, int]]",3,pandas
Type[numpy.float16] == numpy.dtype,3,pandas
numpy.ndarray[list[int]] = float,3,pandas
"numpy.asarray(a=tuple[numpy.ndarray, numpy.ndarray])",3,matplotlib
"numpy.equal(int, numpy.ndarray)",3,dask.array
numpy.array(pandas.core.arrays.datetimes.DatetimeArray),3,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType]]]",3,dask.array
"numpy.nanmedian(a=numpy.ndarray, axis=list[int], keepdims=builtins.bool)",3,dask.array
numpy.random.normal,3,dask.array
"numpy.ndarray.swapaxes(numpy.ndarray, int, int)",3,dask.array
numpy.core.numeric,3,dask.array
"numpy.ndarray.fill(numpy.ndarray, numpy.datetime64)",3,pandas
numpy.isnan(pandas.core.frame.DataFrame),3,pandas
numpy.core,3,dask.array
"numpy.moveaxis(a=numpy.ndarray, destination=int, source=int)",3,dask.array
builtins.function.__name__,3,pandas
"numpy.ndarray.fill(numpy.ndarray, numpy.float64)",3,pandas
"numpy.corrcoef(x=numpy.ndarray, y=numpy.ndarray)",3,dask.array
"numpy.ma.core.MaskedArray.reshape(s=tuple[int], self=numpy.ma.core.MaskedArray)",3,matplotlib
numpy.array(list),3,dask.array
numpy.asanyarray(a=list[int]),3,matplotlib
numpy.abs,3,pandas
"numpy.ndarray[tuple[int, int]] = float",3,pandas
"numpy.linspace(num=int, start=float, stop=float)",3,pandas
numpy.dtype == Type[numpy.float16],3,pandas
"numpy.dtype(list[tuple[str, str]])",3,pandas
numpy.pi,3,pandas
numpy.core.records.fromarrays,3,pandas
numpy.ndarray ** pandas._libs.missing.NAType,3,pandas
"numpy.empty(int, dtype=Type[numpy.uint8])",3,matplotlib
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",3,dask.array
"numpy.asarray(a=list, dtype=str)",3,pandas
numpy.transpose(a=pandas.core.frame.DataFrame),3,pandas
numpy.asarray(a=list[pandas._libs.tslibs.nattype.NaTType]),3,pandas
"numpy.asarray(a=list, dtype=NoneType)",3,pandas
"numpy.array(list[numpy.int64], copy=builtins.bool)",3,pandas
numpy.int8 != numpy.int8,3,pandas
numpy.int32 != numpy.int32,3,pandas
numpy.nanargmin,3,dask.array
numpy.uint8 != numpy.uint8,3,pandas
numpy.uint32 != numpy.uint32,3,pandas
"numpy.asarray(a=pandas.core.arrays.interval.IntervalArray, dtype=NoneType)",3,pandas
numpy.float64 in builtins.set,3,matplotlib
"numpy.array(list[pandas._libs.interval.Interval], dtype=Type[builtins.object])",3,pandas
"numpy.ndarray[slinumpy.float64e[NoneType, int, NoneType]] = numpy.float64",3,pandas
numpy.array(pandas.core.arrays.numpy_.PandasArray),3,pandas
"numpy.sort(a=numpy.ndarray, axis=int)",3,dask.array
"numpy.asarray(a=pandas.core.arrays.period.PeriodArray, dtype=numpy.dtype)",3,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",3,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",3,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, int], slice[NoneType, NoneType, NoneType]]]",3,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, int]]]",3,dask.array
numpy.ndarray - pandas._libs.tslibs.timedeltas.Timedelta,3,pandas
numpy.ma.core.getmaskarray(arr=numpy.ma.core.MaskedArray),3,pandas
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, size=tuple[int])",3,dask.array
numpy.ndarray[int] = matplotlib.axes._subplots.AxesSubplot,3,pandas
numpy.negative(numpy.ndarray),3,dask.array
numpy.arcsin(numpy.ndarray),3,dask.array
"numpy.ndarray[tuple[int, int]] = int",3,pandas
numpy.arctan(numpy.ndarray),3,dask.array
numpy.ndarray -= int,3,pandas
numpy.ndarray[int] = pandas._libs.tslibs.timedeltas.Timedelta,3,pandas
"numpy.ndarray[sliinte[int, NoneType, NoneType]] = int",3,pandas
"numpy.array(list[list[int]], dtype=Type[numpy.int64])",3,pandas
"numpy.add(pandas.core.series.Series, pandas.core.series.Series)",3,pandas
numpy.floor(numpy.ndarray),3,dask.array
numpy.log2(numpy.ndarray),3,dask.array
"numpy.ndarray[tuple[int, int]] = numpy.float64",3,pandas
"numpy.dstack(tup=tuple[numpy.ndarray, numpy.ndarray])",3,dask.array
numpy.rint(numpy.ndarray),3,dask.array
numpy.random.random,3,pandas
"numpy.arange(int, int, float)",3,pandas
numpy.trunc(numpy.ndarray),3,dask.array
"numpy.add(int, numpy.ndarray)",3,dask.array
"numpy.arctan2(numpy.ndarray, int)",3,dask.array
"numpy.copysign(numpy.ndarray, numpy.ndarray)",3,dask.array
"numpy.empty(tuple[int, int, int])",3,matplotlib
"numpy.copysign(int, numpy.ndarray)",3,dask.array
"numpy.generic.view(numpy.datetime64, str)",3,pandas
numpy.arccos(numpy.ndarray),3,dask.array
numpy.issubdtype,3,pandas
"numpy.ndarray.fill(numpy.ndarray, numpy.timedelta64)",3,pandas
"numpy.ufunc.accumulate(numpy.ufunc, numpy.ndarray, axis=int)",3,pandas
"numpy.var(a=numpy.ndarray, ddof=int)",3,pandas
numpy.count_nonzero(a=numpy.ndarray),3,dask.array
numpy.piecewise,3,dask.array
numpy.asarray(a=numpy.ma.core.MaskedArray),3,pandas
"numpy.insert(arr=numpy.ndarray, axis=int, obj=list[int], values=int)",3,dask.array
"numpy.ndarray.reshape(numpy.ndarray, int)",3,matplotlib
numpy.builtins.boolool_ == builtins.bool,3,pandas
numpy.float64 -= numpy.float64,3,matplotlib
numpy.dtype == Type[numpy.float32],3,dask.array
numpy.asanyarray(a=numpy.float64),3,matplotlib
numpy.asanyarray(a=list),3,matplotlib
"numpy.zeros(tuple[int, int], dtype=Type[builtins.int])",3,pandas
"numpy.array(numpy.ndarray, dtype=Type[numpy.float64])",3,pandas
"numpy.einsum(operands=tuple[numpy.ndarray, str])",3,dask.array
"numpy.einsum(operands=tuple[str, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray])",3,dask.array
"numpy.array(numpy.ndarray, dtype=Type[numpy.int64])",3,pandas
"numpy.multiply(numpy.ndarray, numpy.ndarray)",3,dask.array
numpy.shape,3,pandas
"numpy.testing._private.utils.assert_equal(actual=dict, desired=dict)",3,dask.array
"numpy.cumsum(a=tuple[int, int])",3,dask.array
"numpy.where(numpy.ndarray, numpy.ndarray, float)",3,dask.array
numpy.tan(numpy.float64),3,matplotlib
pandas.core.indexes.numeric.Int64Index // numpy.ndarray,3,pandas
numpy.ndarray in dict,3,dask.array
numpy.ma.core.MaskedArray.all(),3,matplotlib
"numpy.ndarray[slinumpy.ndarraye[int, int, int]] = numpy.ndarray",3,pandas
"numpy.ndarray[tuple[tuple[int, int, int], slice[NoneType, NoneType, NoneType]]]",3,matplotlib
numpy.ma.core.ravel(a=float),3,matplotlib
"numpy.zeros(int, dtype=Type[numpy.bool_])",3,pandas
"numpy.vstack(tup=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",3,matplotlib
"numpy.hypot(numpy.ndarray, numpy.ndarray)",3,dask.array
numpy.float64(x=numpy.ma.core.MaskedConstant),3,matplotlib
numpy.bincount(numpy.ndarray),3,pandas
numpy.float64(x=numpy.float128),3,matplotlib
"numpy.prod(a=list[int], dtype=str)",3,pandas
numpy.ma.core.MaskedArray == int,3,matplotlib
"numpy.logical_xor(numpy.ndarray, numpy.ndarray)",3,dask.array
"numpy.median(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",3,dask.array
numpy.ma.core.MaskedArray.all,3,matplotlib
numpy.median,3,dask.array
"numpy.zeros(tuple[int, int], dtype=Type[builtins.bool])",3,matplotlib
numpy.fft.fft,3,dask.array
numpy.uint16,3,matplotlib
numpy.int8 >= int,3,pandas
"numpy.ufunc.reduce(numpy.ufunc, numpy.ndarray, axis=int)",3,pandas
"numpy.concatenate(tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",3,pandas
"numpy.array(list[Union[float, str]], dtype=str)",3,pandas
"numpy.logical_and(numpy.ndarray, numpy.ndarray)",3,dask.array
"numpy.minimum(numpy.ndarray, numpy.ndarray)",3,dask.array
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]])",3,pandas
numpy.fft.fft(a=numpy.ndarray),3,matplotlib
numpy.ma.core.MaskedConstant * numpy.float64,3,matplotlib
"numpy.fft.fft(a=numpy.ndarray, n=int)",3,dask.array
"numpy.clip(a=numpy.ndarray, a_max=int, a_min=int)",3,dask.array
"numpy.ndarray[tuple[int, slilist[numpy.float64]e[NoneType, NoneType, NoneType]]] = list[numpy.float64]",3,matplotlib
"numpy.array(list[Union[float, int]], Type[numpy.float64])",3,matplotlib
float += numpy.float64,3,matplotlib
numpy.ma.core.MaskedArray / int,3,matplotlib
"numpy.angle(deg=builtins.bool, z=numpy.ndarray)",3,dask.array
numpy.iterable(y=list[matplotlib.testing.jpl_units.UnitDbl.UnitDbl]),3,matplotlib
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, desired=list[int])",3,matplotlib
numpy.asarray(a=numpy.float64),3,pandas
"numpy.fmin(numpy.ndarray, numpy.ndarray)",3,dask.array
numpy.numpy.bool_ool_ & numpy.bool_,3,pandas
"numpy.fft.rfft(a=numpy.ndarray, n=int)",3,dask.array
"numpy.fft.irfft(a=numpy.ndarray, axis=int)",3,dask.array
"numpy.fft.hfft(a=numpy.ndarray, n=int)",3,dask.array
"numpy.fft.ihfft(a=numpy.ndarray, n=int)",3,dask.array
"numpy.fft.ihfft(a=numpy.ndarray, axis=int, n=int)",3,dask.array
numpy.isfinite(numpy.ndarray),3,dask.array
numpy.unique,3,pandas
numpy.ndarray.argmin(numpy.ndarray),3,matplotlib
"numpy.array(list[datetime.datetime], dtype=str)",3,pandas
"numpy.arange(int, float, int)",3,matplotlib
"numpy.lituple[numpy.ndarray, numpy.ndarray].index_tricks.RClass[tuple[numpy.ndarray, numpy.ndarray]]",3,matplotlib
"numpy.ndarray[slice[NoneType, numpy.int64, NoneType]]",3,matplotlib
numpy.diff(a=numpy.ndarray),3,dask.array
"numpy.ones(dtype=Type[builtins.bool], shape=tuple[int, int])",3,pandas
numpy.where(numpy.ndarray),3,dask.array
"numpy.testing._private.utils.assert_array_equal(x=tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64], y=tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64])",3,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[numpy.int64, numpy.int64, NoneType]]]",3,pandas
numpy.isnan(float),3,matplotlib
float * numpy.int64,3,pandas
numpy.isclose,3,dask.array
"numpy.ndarray[int] = tuple[numpy.float64, numpy.float64, numpy.float64, int]",3,matplotlib
numpy.ogrid,3,matplotlib
numpy.ma.core.MaskedArray * float,3,matplotlib
numpy.int8 + int,3,pandas
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray)",3,matplotlib
numpy.integer,3,dask.array
numpy.any(a=pandas.core.series.Series),3,pandas
"numpy.asarray(a=pandas.core.arrays.period.PeriodArray, dtype=NoneType)",3,pandas
numpy.atleast_1d,3,matplotlib
"numpy.array(list[list[int]], dtype=numpy.dtype)",3,dask.array
numpy.ones_like(a=numpy.ndarray),3,dask.array
Type[numpy.float64] != numpy.dtype,3,pandas
numpy.linalg.lstsq,3,dask.array
"numpy.linalg.norm(axis=NoneType, keepdims=int, ord=builtins.bool, x=numpy.ndarray)",3,dask.array
"numpy.zeros(int, dtype=Type[builtins.int])",3,pandas
"numpy.testing._private.utils.assert_array_equal(x=int, y=int)",3,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=numpy.ma.core.MaskedArray, y=int)",3,matplotlib
numpy.ma.masked_array,3,matplotlib
"numpy.roll(a=numpy.ndarray, shift=int)",3,pandas
"numpy.vstack(tup=list[Union[list[numpy.float64], numpy.ndarray]])",3,matplotlib
"numpy.ndarray[slice[numpy.int64, NoneType, NoneType]]",3,matplotlib
numpy.int64 % int,3,matplotlib
"numpy.asarray(a=list[int], dtype=Type[numpy.float64])",3,matplotlib
"numpy.arange(int, int, int, dtype=str)",3,pandas
numpy.dstack(tup=list[numpy.ndarray]),3,matplotlib
numpy.dtype == Type[numpy.uint8],3,matplotlib
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], slifloate[NoneType, NoneType, NoneType], int]] = float",3,matplotlib
"numpy.logaddexp(numpy.ndarray, numpy.ndarray)",3,dask.array
numpy.listr.npyio.NpzFile[str],3,matplotlib
"numpy.ndarray[tuple[numpy.ndarray, int]] = numpy.ndarray",3,matplotlib
"numpy.asarray(a=list[numpy.int64], dtype=NoneType)",3,pandas
"numpy.ones(dtype=tuple[int], shape=numpy.dtype)",3,dask.array
numpy.dtype(Type[builtins.float]),3,dask.array
numpy.ndim(a=pandas._libs.tslibs.timestamps.Timestamp),3,pandas
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ma.core.MaskedArray, y=numpy.ndarray)",3,matplotlib
numpy.ma.core.MaskedArray[numpy.ma.core.MaskedArray],3,matplotlib
numpy.ma.core.MaskedArray * numpy.ma.core.MaskedArray,3,matplotlib
"numpy.array(list[Union[float, int]], dtype=Type[builtins.float])",3,matplotlib
numpy.ndarray[list[int]],3,dask.array
numpy.ma.core.masked_invalid(a=list[float]),3,matplotlib
numpy.ma.core.MaskedConstant + numpy.ma.core.MaskedConstant,3,matplotlib
"numpy.insert(arr=numpy.ndarray, obj=int, values=numpy.int64)",3,pandas
"numpy.linalg.norm(axis=int, keepdims=int, ord=builtins.bool, x=numpy.ndarray)",3,dask.array
numpy.matrix.shape,3,dask.array
numpy.float64 * int,3,dask.array
numpy.sum(a=dask.array.core.Array),3,dask.array
pandas.core.dtypes.dtypes.CategoricalDtype == numpy.dtype,3,pandas
float / numpy.int64,3,dask.array
numpy.isscalar(element=str),3,dask.array
numpy.isscalar(element=numpy.matrix),3,dask.array
numpy.fft.fft(a=numpy.ndarray),3,dask.array
numpy.matrix.dtype,3,dask.array
"numpy.array(numpy.ndarray, copy=numpy.dtype, dtype=builtins.bool)",3,pandas
numpy.fft.fft2(a=numpy.ndarray),3,dask.array
numpy.float64(x=int),3,dask.array
int != numpy.int64,3,dask.array
"numpy.asarray(a=pandas.core.arrays.interval.IntervalArray, dtype=numpy.dtype)",3,pandas
numpy.isscalar(element=numpy.int32),3,dask.array
numpy.int32.ndim,3,dask.array
"numpy.array(list[str], dtype=Type[builtins.object])",3,dask.array
numpy.ndarray + str,3,dask.array
"numpy.ones(dtype=Type[numpy.float32], shape=tuple[int, int])",3,dask.array
numpy.linalg.qr(a=numpy.ndarray),3,dask.array
numpy.linalg.svd(a=numpy.ndarray),3,dask.array
"numpy.ndarray.sum(numpy.ndarray, axis=NoneType)",3,dask.array
numpy.isscalar(element=numpy.timedelta64),3,dask.array
builtins.function.__module__,3,dask.array
"numpy.in1d(ar1=numpy.ndarray, ar2=numpy.ndarray)",3,pandas
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=list[int])",3,matplotlib
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int, int)",3,dask.array
"numpy.ndarray.repeat(numpy.ndarray, numpy.ndarray)",3,pandas
"numpy.ndarray.sum(numpy.ndarray, axis=tuple[int, int])",3,dask.array
numpy.asarray(a=builtins.bool),3,pandas
numpy.ndarray[numpy.ndarray] = int,3,dask.array
numpy.sqrt(numpy.float64),3,dask.array
numpy.ndarray % int,3,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType]]]",3,dask.array
numpy.dtype != Type[numpy.int64],3,pandas
"numpy.where(numpy.ndarray, int, numpy.ndarray)",3,dask.array
numpy.isscalar(element=scipy.sparse.csr.csr_matrix),3,dask.array
numpy.random.mtrand.RandomState.rand,3,dask.array
"numpy.ndarray[tuple[list[int], list[int]]]",3,dask.array
numpy.array(list[numpy.int64]),3,dask.array
numpy.ndarray *= numpy.uint64,3,pandas
"numpy.ndarray[tuple[NoneType, NoneType, slice[NoneType, NoneType, NoneType]]]",3,dask.array
numpy.ndim(a=list[str]),3,pandas
int - numpy.int64,3,dask.array
"numpy.cumsum(a=numpy.ndarray, axis=int)",3,dask.array
"numpy.array(list[int], dtype=numpy.dtype)",3,dask.array
"numpy.array(list[pandas._libs.tslibs.timedeltas.Timedelta], dtype=Type[builtins.object])",3,pandas
"numpy.ndarray.take(numpy.ndarray, numpy.ndarray, axis=int)",3,pandas
"numpy.ndarray.transpose(numpy.ndarray, list[int])",3,dask.array
"numpy.array(numpy.ndarray, copy=NoneType, dtype=builtins.bool)",3,pandas
numpy.ndim(a=numpy.float64),3,pandas
numpy.array(numpy.timedelta64),3,dask.array
numpy.linalg.norm(x=numpy.ndarray),3,matplotlib
numpy.dtype(Type[builtins.int]),3,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, NoneType, int]]] = numpy.ndarray",3,matplotlib
"numpy.linspace(endpoint=builtins.bool, num=int, start=int, stop=float)",3,matplotlib
"numpy.fft.fftn(a=numpy.ndarray, axes=tuple[int, int], s=tuple[int, int])",3,dask.array
"numpy.testing._private.utils.assert_array_less(x=numpy.ma.core.MaskedArray, y=float)",3,matplotlib
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.float64, y=numpy.float64)",3,matplotlib
"numpy.append(arr=numpy.ndarray, values=int)",3,pandas
"numpy.array(list[Union[float, str]], copy=builtins.bool)",3,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, int, int]]] = numpy.ndarray",3,matplotlib
"numpy.asarray(a=list[Union[float, str]], dtype=Type[builtins.object])",3,pandas
"numpy.ones(dtype=numpy.dtype, shape=tuple[int])",3,pandas
numpy.int64 + float,3,pandas
numpy.setdiff1d,3,pandas
"numpy.setdiff1d(ar1=numpy.ndarray, ar2=numpy.ndarray, assume_unique=builtins.bool)",3,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",3,matplotlib
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], int, int]] = int",3,matplotlib
"numpy.fft.rfft2(a=numpy.ndarray, axes=tuple[int, int], s=tuple[int, int])",3,dask.array
"numpy.fft.irfft2(a=numpy.ndarray, axes=tuple[int, int])",3,dask.array
"numpy.fft.rfftn(a=numpy.ndarray, axes=tuple[int, int], s=tuple[int, int])",3,dask.array
"numpy.full(dtype=Type[numpy.int32], fill_value=int, shape=int)",3,matplotlib
"numpy.fft.irfftn(a=numpy.ndarray, axes=tuple[int, int])",3,dask.array
"numpy.meshgrid(xi=tuple[list[float], list[float]])",3,matplotlib
numpy.iterable(y=list[matplotlib.tests.test_units.Quantity]),3,matplotlib
"numpy.fft.fft2(a=numpy.ndarray, axes=tuple[int, int], s=tuple[int, int])",3,dask.array
numpy.fft.irfft(a=numpy.ndarray),3,dask.array
numpy.fft.ifft(a=numpy.ndarray),3,dask.array
pandas.core.series.Series | numpy.ndarray,3,pandas
numpy.array(numpy.uint8),3,dask.array
"numpy.asarray(a=pandas.core.arrays.numpy_.PandasArray, dtype=numpy.dtype)",3,pandas
"numpy.isnan(tuple[int, int, int, int])",3,dask.array
numpy.flagsobj.f_contiguous,3,pandas
numpy.triu,3,dask.array
numpy.triu(m=numpy.ndarray),3,dask.array
numpy.array(numpy.str_),3,dask.array
numpy.tril,3,dask.array
numpy.array(builtins.bool),3,dask.array
numpy.eye,3,dask.array
"numpy.asarray(a=pandas.core.arrays.categorical.Categorical, dtype=NoneType)",3,pandas
numpy.diag,3,dask.array
numpy.diag(v=numpy.ndarray),3,dask.array
"numpy.diagonal(a=dask.array.core.Array, offset=int)",3,dask.array
"numpy.diagonal(a=dask.array.core.Array, axis1=int, axis2=int, offset=int)",3,dask.array
"numpy.tile(A=numpy.ndarray, reps=int)",3,dask.array
"numpy.tile(A=numpy.ndarray, reps=tuple[int])",3,dask.array
numpy.pad,3,dask.array
"numpy.array(tuple[int, int])",3,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], int]] = numpy.ndarray",3,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, size=tuple[int])",3,dask.array
float / numpy.ndarray,3,matplotlib
numpy.datetime64 == numpy.datetime64,3,pandas
numpy.timedelta64 * pandas.core.frame.DataFrame,3,pandas
numpy.float64(x=numpy.float64),3,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint8])",3,matplotlib
"numpy.round_(a=float, decimals=int)",3,pandas
"numpy.asarray(a=list[float], dtype=NoneType)",3,pandas
int / numpy.ndarray,3,pandas
pandas.core.indexes.numeric.Int64Index * numpy.ndarray,3,pandas
numpy.ndarray.sort(numpy.ndarray),3,pandas
"numpy.ma.core.MaskedArray(data=numpy.ndarray, mask=numpy.ndarray)",3,matplotlib
numpy.timedelta64 * pandas.core.series.Series,3,pandas
numpy.ndarray[int] = int,3,dask.array
numpy.ceil(float),3,dask.array
numpy.datetime64 + pandas.core.frame.DataFrame,3,pandas
numpy.ndarray.all,3,matplotlib
pandas.core.series.Series * numpy.timedelta64,3,pandas
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta / numpy.ndarray,3,pandas
int * numpy.float64,3,dask.array
numpy.ndarray == float,3,matplotlib
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta - numpy.ndarray,3,pandas
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta + numpy.ndarray,3,pandas
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timestamps.Timestamp - numpy.ndarray,3,pandas
numpy.signbit(numpy.ndarray),3,pandas
numpy.dtype(numpy.dtype),3,dask.array
numpy.generic.item(numpy.float64),3,matplotlib
numpy.ndarray[int] = numpy.timedelta64,3,pandas
pandas.core.arrays.datetimes.DatetimeArray == numpy.ndarray,3,pandas
numpy.iterable(y=list[matplotlib.testing.jpl_units.Epoch.Epoch]),3,matplotlib
"numpy.array(list[pandas._libs.tslibs.timedeltas.Timedelta], copy=builtins.bool)",3,pandas
"numpy.array(pandas.core.arrays.timedeltas.TimedeltaArray, copy=builtins.bool)",3,pandas
numpy.argmax(a=numpy.ndarray),3,dask.array
numpy.copyto,3,matplotlib
numpy.float64 + numpy.ndarray,3,matplotlib
numpy.ma.masked_less_equal,3,matplotlib
"numpy.power(int, numpy.ndarray)",3,matplotlib
pandas.core.arrays.datetimes.DatetimeArray + numpy.timedelta64,3,pandas
pandas.core.arrays.datetimes.DatetimeArray - numpy.timedelta64,3,pandas
Type[numpy.timedelta64].__name__,3,pandas
numpy.ma.core.getdata(a=numpy.ndarray),3,dask.array
numpy.array(numpy.timedelta64),3,pandas
numpy.ma.core.getmaskarray(arr=numpy.ma.core.MaskedArray),3,dask.array
"numpy.swapaxes(a=numpy.ndarray, axis1=int, axis2=int)",3,dask.array
numpy.dtype in dict,3,dask.array
numpy.min,3,dask.array
numpy.asarray(a=list[datetime.datetime]),3,matplotlib
pandas.core.frame.DataFrame - numpy.datetime64,3,pandas
numpy.iterable(y=matplotlib.testing.jpl_units.Epoch.Epoch),3,matplotlib
numpy.max,3,dask.array
numpy.ndarray / float,3,dask.array
numpy.array(list[datetime.time]),3,pandas
numpy.array(numpy.float64),3,pandas
numpy.ndarray % numpy.ndarray,3,pandas
numpy.logical_or,3,matplotlib
pandas.core.frame.DataFrame * numpy.ndarray,3,pandas
numpy.timedelta64 + numpy.timedelta64,3,pandas
pandas.core.indexes.timedeltas.TimedeltaIndex == numpy.ndarray,3,pandas
pandas.core.arrays.timedeltas.TimedeltaArray + numpy.timedelta64,3,pandas
"numpy.var(a=numpy.ndarray, keepdims=builtins.bool)",3,dask.array
"numpy.var(a=numpy.ndarray, axis=tuple)",3,dask.array
float == numpy.float64,3,matplotlib
dictuiltins.function in dict,3,dask.array
"numpy.find_common_type(array_types=list[numpy.dtype], scalar_types=list)",3,pandas
"numpy.ma.core.MaskedArray.reshape(s=tuple[tuple[int, int]], self=numpy.ma.core.MaskedArray)",3,matplotlib
numpy.iterable(y=matplotlib.testing.jpl_units.UnitDbl.UnitDbl),3,matplotlib
numpy.ufunc.__name__,3,dask.array
"numpy.sum(a=numpy.ndarray, axis=tuple)",3,dask.array
numpy.timedelta64 / pandas.core.indexes.timedeltas.TimedeltaIndex,3,pandas
"numpy.ndarray.view(numpy.ndarray, str)",3,dask.array
numpy.ndim(a=list[int]),3,pandas
"numpy.asarray(a=pandas.tests.extension.decimal.array.DecimalArray, dtype=Type[builtins.object])",3,pandas
numpy.iinfo(int_type=Type[numpy.uint64]),3,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int8, side=NoneType, sorter=str)",3,pandas
numpy.rad2deg(numpy.ndarray),3,matplotlib
"numpy.random.mtrand.RandomState.shuffle(numpy.random.mtrand.RandomState, numpy.ndarray)",3,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.ndarray, side=NoneType, sorter=str)",3,pandas
"numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray, dtype=Type[builtins.object])",3,pandas
numpy.ndim(a=list[float]),3,pandas
"numpy.add(pandas.core.series.Series, int)",3,pandas
"numpy.ndarray[slinumpy.ndarraye[int, int, int]] = numpy.ndarray",3,matplotlib
pandas.core.indexes.period.PeriodIndex -= numpy.timedelta64,3,pandas
numpy.ndarray * pandas.core.frame.DataFrame,3,pandas
"numpy.isscalar(element=tuple[numpy.ndarray, numpy.ndarray])",3,dask.array
numpy.ndarray[int] = float,3,xarray
int + numpy.float64,3,pandas
int - numpy.float64,3,pandas
numpy.ndarray - numpy.int64,3,pandas
numpy.isscalar(element=float),3,matplotlib
numpy.mean(a=numpy.ndarray),3,matplotlib
"numpy.mean(a=numpy.ndarray, axis=tuple)",3,dask.array
pandas.core.indexes.period.PeriodIndex > numpy.ndarray,3,pandas
pandas.core.frame.DataFrame > numpy.ndarray,3,pandas
pandas.core.frame.DataFrame != numpy.ndarray,3,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, NoneType]]",3,matplotlib
numpy.atleast_2d(arys=tuple[numpy.ndarray]),3,matplotlib
Type[numpy.float64].__name__,3,pandas
pandas.core.arrays.period.PeriodArray == numpy.ndarray,3,pandas
numpy.ndarray[numpy.ndarray] = pandas._libs.tslibs.nattype.NaTType,3,pandas
numpy.ndarray - pandas.core.indexes.period.PeriodIndex,3,pandas
"numpy.array(list[Union[pandas.tseries.offsets.Hour, pandas.tseries.offsets.Minute]])",3,pandas
numpy.timedelta64 + pandas.core.indexes.period.PeriodIndex,3,pandas
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.period.Period - numpy.timedelta64,3,pandas
pandas.core.arrays.datetimes.DatetimeArray >= numpy.ndarray,3,pandas
"numpy.ones(dtype=Type[builtins.bool], shape=tuple[int])",3,pandas
numpy.bool_.ndim,3,dask.array
numpy.int64 / float,3,matplotlib
"numpy.ma.core.MaskedArray.reshape(s=tuple[tuple[int, int]], self=numpy.ma.core.MaskedArray)",3,dask.array
"numpy.ndarray.astype(numpy.ma.core.MaskedArray, numpy.dtype)",3,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType], slinumpy.ndarraye[int, NoneType, int]]] = numpy.ndarray",3,matplotlib
"numpy.ndarray[tuple[slituple[numpy.ndarray]e[int, NoneType, NoneType], slituple[numpy.ndarray]e[int, NoneType, int]]] = tuple[numpy.ndarray]",3,matplotlib
"numpy.ma.core.masked_greater(value=int, x=dask.array.core.Array)",3,dask.array
numpy.dtype != Type[builtins.object],3,dask.array
"numpy.array(list[tuple[float, float, float, float]])",3,matplotlib
"numpy.sum(a=numpy.ma.core.MaskedArray, axis=int)",3,dask.array
numpy.iterable(y=str),3,matplotlib
"numpy.asarray(a=list, dtype=numpy.dtype)",3,pandas
numpy.ndarray.sort(numpy.ndarray),3,matplotlib
numpy.float64 *= int,3,matplotlib
numpy.iterable(y=list[list[float]]),3,matplotlib
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, list[int])",3,matplotlib
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], int]] = numpy.ndarray",3,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.ndarray)",3,pandas
"numpy.arange(int, dtype=Type[numpy.int64])",3,dask.array
"numpy.prod(a=numpy.ma.core.MaskedArray, axis=int)",3,dask.array
numpy.shape(a=list[list[int]]),3,matplotlib
numpy.asarray(a=pandas.core.arrays.string_.StringArray),3,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int16])",3,matplotlib
numpy.isscalar(element=list[int]),3,matplotlib
"numpy.corrcoef(x=numpy.flatiter, y=numpy.flatiter)",3,pandas
numpy.int16,3,dask.array
numpy.int64(int),3,dask.array
"numpy.ndarray.all(numpy.ndarray, int)",3,pandas
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, desired=list[float], rtol=float)",3,matplotlib
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, numpy.ndarray])",3,dask.array
"numpy.generic.astype(numpy.float64, numpy.dtype)",3,pandas
numpy.sqrt(float),3,pandas
numpy.absolute(pandas.core.frame.DataFrame),3,pandas
"numpy.ndarray[tuple[int, int, int]]",3,dask.array
"numpy.linalg.norm(axis=int, keepdims=float, ord=builtins.bool, x=numpy.ndarray)",3,dask.array
"numpy.logical_and(numpy.ndarray, numpy.ndarray)",3,pandas
numpy.ndarray[pandas.core.indexes.numeric.Int64Index],3,pandas
numpy.ndarray.squeeze,3,matplotlib
"numpy.sum(a=numpy.ndarray, axis=int)",3,pandas
"numpy.amin(a=numpy.ndarray, axis=int)",3,pandas
numpy.nansum,3,pandas
"numpy.ones(dtype=Type[numpy.float32], shape=int)",3,dask.array
numpy.float64.dtype,3,dask.array
"numpy.ndarray[int] = tuple[numpy.int64, numpy.int64]",3,matplotlib
numpy.median(a=numpy.ndarray),3,pandas
numpy.median,3,pandas
"numpy.ma.core.filled(a=numpy.ma.core.MaskedArray, fill_value=int)",3,dask.array
"numpy.unwrap(axis=int, p=numpy.ndarray)",3,matplotlib
numpy.unwrap,3,matplotlib
"numpy.expand_dims(a=numpy.float64, axis=int)",3,pandas
numpy.ndarray | builtins.bool,3,pandas
"numpy.array(list[Union[NoneType, int]], copy=builtins.bool)",3,pandas
"numpy.empty(int, dtype=Type[numpy.float64])",3,pandas
numpy.array(list[datetime.datetime]),3,matplotlib
"numpy.amax(a=numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=int)",3,dask.array
numpy.hypot,3,matplotlib
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.uint64])",3,pandas
"numpy.any(a=numpy.ma.core.MaskedArray, axis=int)",3,dask.array
"numpy.all(a=numpy.ma.core.MaskedArray, axis=int)",3,dask.array
int + numpy.int64,3,dask.array
"numpy.full_like(a=numpy.ndarray, fill_value=float)",3,matplotlib
numpy.NaN,3,matplotlib
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.uint32])",3,pandas
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.uint16])",3,pandas
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.uint8])",3,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint64])",3,pandas
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.int64])",3,pandas
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.int32])",3,pandas
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.int16])",3,pandas
"numpy.ma.core.MaskedArray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",3,matplotlib
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.int8])",3,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",3,matplotlib
"numpy.empty(tuple[int, int, int], dtype=Type[builtins.bool])",3,pandas
"numpy.ndindex(shape=tuple[tuple[int, int]])",3,dask.array
"numpy.asarray(a=list, dtype=Type[numpy.int64])",3,pandas
"numpy.ma.core.MaskedArray[tuple[slice[NoneType, NoneType, NoneType], int]]",3,matplotlib
"numpy.amax(a=numpy.ma.core.MaskedArray, axis=int)",3,dask.array
"numpy.amin(a=numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=int)",3,dask.array
"numpy.amin(a=numpy.ma.core.MaskedArray, axis=int)",3,dask.array
"numpy.std(a=numpy.ma.core.MaskedArray, axis=int)",3,dask.array
"numpy.ma.core.MaskedArray.sum(axis=tuple[int, int], dtype=str, keepdims=builtins.bool)",3,dask.array
numpy.ma.core.masked_invalid(a=builtins.range),3,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint32])",3,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint16])",3,pandas
numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState),3,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint8])",3,pandas
numpy.int64 * float,3,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int16])",3,pandas
numpy.ma.core.MaskedArray - numpy.ma.core.MaskedArray,3,dask.array
numpy.block(arrays=list[list[numpy.ndarray]]),3,dask.array
numpy.ma.core.ravel(a=int),3,matplotlib
"numpy.ndarray[int] = tuple[numpy.float64, numpy.float64, numpy.float64, float]",3,matplotlib
numpy.ma.core.ravel(a=list[int]),3,matplotlib
"numpy.promote_types(numpy.dtype, numpy.dtype)",3,pandas
numpy.int32 == int,3,pandas
"numpy.ma.core.MaskedArray.sum(axis=tuple[int], dtype=str, keepdims=builtins.bool)",3,dask.array
numpy.column_stack(tup=list[numpy.ma.core.MaskedArray]),3,matplotlib
numpy.ma.core.MaskedArray * numpy.float64,3,matplotlib
"numpy.zeros(int, str)",3,matplotlib
numpy.block(arrays=list[numpy.ndarray]),3,dask.array
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.float64])",3,matplotlib
float / numpy.float64,3,pandas
"numpy.array(list[Union[builtins.bool, float]], dtype=Type[numpy.object_])",3,pandas
numpy.isscalar(element=xarray.core.dataarray.DataArray),3,dask.array
numpy.empty(int),3,skimage
numpy.log(float),3,skimage
numpy.float64.dtype,3,xarray
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=tuple[int, int])",3,skimage
not numpy.bool_,3,xarray
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=tuple[tuple[int, int], tuple[int, int]])",3,skimage
"numpy.array(numpy.ndarray, copy=int, ndmin=builtins.bool)",3,skimage
"numpy.pad(array=numpy.ndarray, pad_width=numpy.ndarray)",3,skimage
"numpy.empty(tuple[int], numpy.dtype)",3,skimage
"numpy.zeros(tuple[int, int, int], Type[builtins.int])",3,skimage
"numpy.testing._private.utils.assert_array_equal(x=int, y=int)",3,skimage
numpy.dtype(Type[numpy.int8]),3,skimage
"numpy.unique(ar=numpy.ndarray, return_counts=builtins.bool)",3,skimage
"numpy.arange(int, int, int, Type[numpy.uint8])",3,skimage
numpy.subtract,3,skimage
numpy.log(numpy.float64),3,skimage
"numpy.transpose(a=numpy.ndarray, axes=numpy.ndarray)",3,skimage
"numpy.ndarray.reshape(numpy.ndarray, numpy.ndarray)",3,skimage
"numpy.arange(int, int, dtype=str)",3,xarray
numpy.dtype(Type[numpy.uint16]),3,skimage
"numpy.zeros(tuple[int, int, int])",3,xarray
numpy.iinfo.min,3,skimage
numpy.flatiter[int],3,skimage
"numpy.transpose(a=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",3,skimage
numpy.array(list[list[builtins.bytes]]),3,xarray
"numpy.testing._private.utils.assert_array_equal(x=tuple[int, int, int], y=numpy.ndarray)",3,skimage
numpy.zeros_like(a=numpy.ndarray),3,xarray
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, NoneType, NoneType], int]] = builtins.bool",3,skimage
"numpy.testing._private.utils.assert_equal(actual=numpy.uint64, desired=numpy.ndarray)",3,skimage
"numpy.array(list[tuple[int, int]])",3,skimage
"numpy.testing._private.utils.assert_array_equal(x=tuple[int], y=numpy.ndarray)",3,skimage
"numpy.testing._private.utils.assert_array_equal(x=tuple[int, int, int, int], y=numpy.ndarray)",3,skimage
numpy.dtype == Type[numpy.int64],3,skimage
numpy.asarray(a=tuple[int]),3,skimage
"numpy.testing._private.utils.assert_array_equal(x=tuple[int, int], y=numpy.ndarray)",3,skimage
"numpy.arange(int, dtype=Type[numpy.float32])",3,skimage
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.dataarray.DataArray, y=numpy.float64)",3,xarray
numpy.asarray(a=pandas.core.indexes.timedeltas.TimedeltaIndex),3,xarray
"numpy.amax(a=tuple[int, int])",3,skimage
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=int, pad_width=list[tuple[int, int]])",3,skimage
"numpy.linspace(endpoint=builtins.bool, num=int, start=int, stop=int)",3,skimage
numpy.array(list[builtins.bytes]),3,xarray
numpy.fft.fftshift(x=numpy.ndarray),3,skimage
numpy.log10(numpy.float64),3,skimage
numpy.rot90(m=numpy.ndarray),3,skimage
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]]",3,skimage
"numpy.subtract(int, numpy.ndarray, dtype=numpy.dtype)",3,skimage
numpy.float32(numpy.ndarray),3,skimage
"numpy.zeros(tuple[int, int], numpy.dtype)",3,skimage
numpy.uint8 > int,3,skimage
numpy.asarray(a=numpy.datetime64),3,xarray
float > numpy.float32,3,skimage
"numpy.asarray(a=numpy.ndarray, dtype=str)",3,xarray
numpy.atleast_1d(arys=tuple[int]),3,xarray
numpy.asarray(a=list[builtins.bool]),3,xarray
"numpy.where(numpy.ndarray, float, numpy.ndarray)",3,xarray
"numpy.ndarray.astype(numpy.ndarray, numpy.dtype, copy=builtins.bool)",3,xarray
"numpy.lituple[int, int, int].index_tricks.RClass[tuple[int, int, int]]",3,skimage
numpy.float,3,xarray
numpy.linalg.eig(a=numpy.ndarray),3,skimage
"numpy.cross(a=numpy.ndarray, b=numpy.ndarray)",3,skimage
"numpy.ndarray[tuple[NoneType, slice[NoneType, NoneType, NoneType]]]",3,skimage
"numpy.zeros(int, dtype=Type[builtins.int])",3,skimage
numpy.float64 == numpy.float64,3,skimage
"numpy.swapaxes(a=numpy.ndarray, axis1=int, axis2=int)",3,skimage
int in numpy.ndarray,3,xarray
"numpy.ndarray.reshape(numpy.ndarray, int, int, int)",3,skimage
"numpy.ndarray[slice[numpy.int64, NoneType, NoneType]]",3,skimage
numpy.ndarray += numpy.int64,3,skimage
numpy.flagsobj.writeable = builtins.bool,3,skimage
numpy.isscalar(element=numpy.ndarray),3,skimage
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int, int, int])",3,skimage
"numpy.asarray(a=list[int], dtype=str)",3,xarray
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int)",3,skimage
"numpy.ndarray[slinumpy.ndarraye[NoneType, NoneType, int]] = numpy.ndarray",3,skimage
int * numpy.int64,3,skimage
numpy.transpose,3,skimage
numpy.atleast_1d(arys=tuple[numpy.ndarray]),3,xarray
numpy.timedelta64 / numpy.timedelta64,3,xarray
"numpy.array(list[int], dtype=Type[numpy.uint16])",3,skimage
"numpy.zeros(tuple[int, int, int], dtype=Type[builtins.int])",3,skimage
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=list[Union[float, int]])",3,skimage
numpy.ndarray.var(numpy.ndarray),3,skimage
numpy.asarray(a=int),3,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType]]]",3,skimage
numpy.ma.MaskedArray,3,xarray
"numpy.ndarray.max(numpy.ndarray, int)",3,skimage
numpy.asarray(a=str),3,xarray
"numpy.ndarray[tuple[numpy.ndarray, int]] = numpy.ndarray",3,skimage
numpy.bincount,3,skimage
numpy.asarray(a=xarray.core.indexing.PandasIndexAdapter),3,xarray
"numpy.generic.astype(numpy.int64, Type[numpy.int64])",3,skimage
numpy.floor(numpy.ndarray),3,skimage
"numpy.where(numpy.ndarray, numpy.ndarray, numpy.ndarray)",3,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], numpy.int64]]",3,skimage
"numpy.ndarray[tuple[builtins.ellipsis, int]]",3,xarray
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=list[tuple[numpy.int64, numpy.int64]])",3,skimage
"numpy.squeeze(a=numpy.ndarray, axis=int)",3,skimage
"numpy.ndarray[slice[int, NoneType, NoneType]]",3,xarray
"numpy.maximum(xarray.core.variable.Variable, xarray.core.dataarray.DataArray)",3,xarray
numpy.ndarray.argmax(numpy.ndarray),3,skimage
numpy.uint8 >= int,3,skimage
numpy.ndarray += numpy.float64,3,skimage
numpy.ndarray.transpose(numpy.ndarray),3,skimage
"numpy.argmax(a=numpy.ndarray, axis=int)",3,xarray
"numpy.zeros(tuple[int, int, int, int, int])",3,skimage
"numpy.core._multiarray_umath.normalize_axis_index(int, int)",3,xarray
numpy.array(builtins.range),3,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",3,skimage
"numpy.empty(tuple[int, int], dtype=Type[numpy.float64])",3,skimage
numpy.ma.masked,3,skimage
numpy.float64 + numpy.int64,3,skimage
"numpy.nanpercentile(a=numpy.ndarray, axis=int, q=numpy.float64)",3,xarray
numpy.log2(int),3,skimage
"numpy.empty(tuple[int, int], numpy.dtype)",3,skimage
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=xarray.core.variable.Variable)",3,xarray
"numpy.ones_like(a=numpy.ndarray, dtype=Type[numpy.uint8])",3,skimage
numpy.concatenate(list[numpy.ndarray]),3,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType]]]",3,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType]]]",3,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[NoneType, NoneType, int], slice[NoneType, NoneType, int]]]",3,skimage
"numpy.prod(a=tuple[int, int, int])",3,skimage
numpy.angle(z=numpy.ndarray),3,skimage
"numpy.ndarray[tuple[numpy.int64, numpy.int64]] = int",3,skimage
numpy.diff(a=numpy.ndarray),3,skimage
"tuple[int, int] in numpy.ndarray",3,skimage
"numpy.ndarray[tuple[numpy.ndarray, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",3,xarray
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, desired=numpy.float64)",3,xarray
"numpy.random.mtrand.RandomState.standard_normal(numpy.random.mtrand.RandomState, tuple[int, int])",3,skimage
"numpy.zeros(tuple[int, int], Type[builtins.int])",3,skimage
numpy.ndarray.tolist(numpy.ndarray),3,skimage
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.dataarray.DataArray, y=xarray.core.dataarray.DataArray)",3,xarray
"numpy.ndarray[tuple[int, sliinte[int, NoneType, NoneType]]] = int",3,skimage
"numpy.ndarray[tuple[slice[numpy.int64, NoneType, int], slice[numpy.int64, NoneType, int]]]",3,skimage
"numpy.empty_like(numpy.ndarray, dtype=Type[numpy.float64])",3,skimage
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.dataarray.DataArray, y=numpy.ndarray)",3,xarray
"numpy.clip(a=numpy.ndarray, a_max=numpy.float64, a_min=numpy.float64)",3,skimage
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=list[list[int]])",3,skimage
numpy.argmin,3,skimage
"numpy.ndarray[tuple[slituple[int, int]e[int, int, NoneType], int]] = tuple[int, int]",3,skimage
numpy.int32,3,xarray
"numpy.column_stack(tup=tuple[numpy.ndarray, numpy.ndarray])",3,skimage
"numpy.argmin(a=numpy.ndarray, axis=int)",3,skimage
numpy.full_like,3,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, NoneType]]]",3,xarray
"numpy.ones(dtype=Type[numpy.int8], shape=tuple[int, int])",3,skimage
numpy.ndarray.itemsize,3,skimage
numpy.uint16 == int,3,skimage
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=tuple[float, float])",3,skimage
"numpy.ndarray[tuple[slice[numpy.int64, NoneType, numpy.int64], slice[numpy.int64, NoneType, numpy.int64], slice[numpy.int64, NoneType, numpy.int64]]]",3,skimage
numpy.random.seed,3,skimage
numpy.array(list[builtins.bool]),3,skimage
numpy.min,3,skimage
numpy.argmin(a=numpy.ndarray),3,skimage
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",3,skimage
"numpy.zeros(tuple[int, int], Type[numpy.uint8])",3,skimage
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",3,skimage
numpy.ndarray |= numpy.ndarray,3,skimage
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",3,skimage
numpy.bincount(numpy.ndarray),3,skimage
"numpy.array(list[list[int]], Type[builtins.bool])",3,skimage
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",3,skimage
"numpy.array(list[list[int]], Type[builtins.int])",3,skimage
"numpy.array(list[list[int]], dtype=Type[numpy.int64])",3,skimage
"numpy.array(tuple[int, int], dtype=Type[numpy.int32])",3,skimage
"numpy.ndarray.view(numpy.ndarray, dtype=Type[numpy.uint8])",3,skimage
numpy.ndarray.view,3,skimage
"numpy.hstack(tup=tuple[numpy.ndarray, numpy.ndarray])",3,skimage
"numpy.prod(a=tuple[int, int, int])",3,xarray
"numpy.ndarray[tuple[sliinte[int, NoneType, NoneType], sliinte[int, NoneType, NoneType], int]] = int",3,skimage
"numpy.ndarray[tuple[sliinte[NoneType, int, NoneType], sliinte[NoneType, int, NoneType], int]] = int",3,skimage
numpy.isfinite(numpy.ndarray),3,skimage
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",3,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], numpy.ndarray]]",3,xarray
"numpy.ones(dtype=Type[numpy.float32], shape=tuple[int, int])",3,skimage
"numpy.ndarray[tuple[sliinte[int, NoneType, NoneType], sliinte[NoneType, int, NoneType], int]] = int",3,skimage
"numpy.array(list[int], dtype=Type[numpy.int32])",3,skimage
numpy.dtype == Type[numpy.int8],3,skimage
"numpy.zeros(tuple[int, int, int], dtype=numpy.dtype)",3,skimage
"numpy.tile(A=numpy.ndarray, reps=tuple[int, int, int])",3,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[int, int, NoneType]]]",3,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], NoneType]]",3,skimage
"numpy.zeros(tuple[int, int, int, int], dtype=numpy.dtype)",3,skimage
numpy.ndarray.mean,3,xarray
numpy.ndarray[numpy.ndarray] = float,3,xarray
numpy.ma.core.MaskedArray.mask,3,xarray
"numpy.diff(a=numpy.ndarray, axis=int)",3,xarray
numpy.dtype == Type[builtins.float],3,xarray
numpy.int8(numpy.ndarray),3,skimage
numpy.zeros(tuple[int]),3,xarray
"numpy.tensordot(a=numpy.ndarray, axes=tuple[list[int], list[int]], b=numpy.ndarray)",3,xarray
numpy.argmax,3,skimage
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=tuple[tuple[int, int], tuple[int, int], tuple[int, int]])",3,xarray
numpy.nonzero(a=numpy.ndarray),3,xarray
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int, int, int, int)",3,skimage
numpy.ndarray.nonzero(numpy.ndarray),3,skimage
"numpy.empty(tuple[int], dtype=Type[numpy.float64])",3,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.float64])",3,xarray
numpy.reshape,3,skimage
numpy.ndarray[dask.array.core.Array],3,skimage
"numpy.unique(ar=numpy.ndarray, return_inverse=builtins.bool)",3,skimage
"numpy.insert(arr=numpy.ndarray, axis=int, obj=int, values=numpy.ndarray)",3,skimage
numpy.insert,3,skimage
numpy.cumsum(a=dask.array.core.Array),3,skimage
numpy.float64 == numpy.int64,3,skimage
numpy.r_,3,xarray
"numpy.meshgrid(kwargs=dict, xi=tuple[numpy.ndarray])",3,skimage
numpy.number,3,xarray
numpy.min_scalar_type(int),3,skimage
numpy.asarray(a=xarray.core.indexing.ImplicitToExplicitIndexingAdapter),3,xarray
numpy.asarray(a=float),3,xarray
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int])",3,skimage
numpy.uint8 - numpy.uint8,3,skimage
numpy.rad2deg(numpy.ndarray),3,skimage
"numpy.empty(tuple[int, int], dtype=numpy.dtype)",3,skimage
numpy.diff(a=numpy.ndarray),3,xarray
"numpy.testing._private.utils.assert_equal(actual=str, desired=str)",3,skimage
numpy.ndarray >= int,3,xarray
"numpy.zeros(tuple[int, int, int], dtype=Type[numpy.float32])",3,skimage
"numpy.concatenate(tuple[numpy.ndarray, numpy.ndarray])",3,skimage
numpy.concatenate(list[numpy.ndarray]),3,skimage
numpy.isnan(numpy.ndarray),3,xarray
numpy.broadcast(numpy.ndarray),3,xarray
numpy.argmax(a=numpy.ndarray),3,xarray
"numpy.testing._private.utils.assert_array_equal(x=list[int], y=list[int])",3,skimage
numpy.prod(a=tuple[int]),3,xarray
numpy.asarray(a=list[list[int]]),3,xarray
"numpy.asarray(a=xarray.core.indexing.NumpyIndexingAdapter, dtype=NoneType)",3,xarray
numpy.asarray(a=xarray.core.indexing.NumpyIndexingAdapter),3,xarray
numpy.ndarray[numpy.int64] = int,3,skimage
numpy.complexfloating,3,xarray
numpy.ndarray % int,3,skimage
numpy.int64 != int,3,skimage
"numpy.ndarray[tuple[int, int]] = builtins.bool",3,skimage
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=list[list[tuple[int, int, int]]])",3,skimage
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int, numpy.int64], order=str)",3,skimage
numpy.ndarray[int] = numpy.int64,3,skimage
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[int, int, NoneType]]] = int",3,skimage
*numpy.ndindex,3,skimage
numpy.ndarray / numpy.timedelta64,3,xarray
"numpy.dtype in list[Type[Union[numpy.float32, numpy.float64]]]",3,skimage
numpy.ndarray -= float,3,skimage
"numpy.broadcast(numpy.ndarray, numpy.ndarray)",3,xarray
numpy.asarray(a=int),3,xarray
numpy.ndarray.reshape,3,xarray
numpy.dtype.metadata,3,xarray
numpy.ndarray == numpy.uint8,3,skimage
numpy.concatenate(list[list[int]]),3,xarray
"numpy.testing._private.utils.assert_equal(actual=numpy.uint8, desired=int)",3,skimage
numpy.ndarray[tuple[numpy.ndarray]],3,xarray
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[int, NoneType, NoneType]]] = int",3,skimage
~numpy.bool_,3,skimage
numpy.dtype(Type[numpy.float32]),3,xarray
"numpy.concatenate(tuple[numpy.ndarray, numpy.ndarray], axis=int)",3,skimage
"numpy.array(list[float], dtype=Type[builtins.object])",3,xarray
numpy.ndarray *= int,3,skimage
numpy.linalg.eigvalsh(a=numpy.ndarray),2,skimage
numpy.squeeze(a=numpy.ndarray),2,pandas
"numpy.transpose(a=numpy.ndarray, axes=tuple[int, int, int, int])",2,skimage
"numpy.array(numpy.ndarray, order=str)",2,matplotlib
"numpy.maximum(dask.array.core.Array, dask.array.core.Array)",2,dask.array
"numpy.any(a=numpy.ma.core.MaskedArray, axis=tuple[int], keepdims=builtins.bool)",2,dask.array
"numpy.ndarray[tuple[slifloate[NoneType, int, NoneType], slifloate[NoneType, int, NoneType]]] = float",2,skimage
numpy.ndarray[int] = float,2,skimage
numpy.float64 == _pytest.python_api.ApproxScalar,2,matplotlib
"numpy.ndarray[tuple[builtins.ellipsis, int, int]] = numpy.ndarray",2,skimage
"numpy.amin(a=numpy.ma.core.MaskedArray, axis=tuple[int, int], keepdims=builtins.bool)",2,dask.array
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, int, NoneType], slinumpy.float64e[NoneType, int, NoneType], slinumpy.float64e[NoneType, int, NoneType]]] = numpy.float64",2,skimage
"numpy.fmax(dask.array.core.Array, dask.array.core.Array)",2,dask.array
"numpy.unique(ar=numpy.ndarray, return_index=builtins.bool)",2,skimage
numpy.iterable(y=numpy.datetime64),2,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=list[int], y=list[int])",2,matplotlib
"numpy.insert(arr=numpy.ndarray, obj=int, values=float)",2,pandas
pandas.core.dtypes.dtypes.DatetimeTZDtype == numpy.dtype,2,pandas
"numpy.asarray(a=pandas.core.series.Series, dtype=Type[builtins.object])",2,pandas
"numpy.any(a=numpy.ma.core.MaskedArray, axis=tuple[int, int], keepdims=builtins.bool)",2,dask.array
numpy.array(numpy.ulonglong),2,dask.array
"numpy.zeros(int, dtype=Type[builtins.bool])",2,skimage
numpy.dtype.isnative,2,xarray
numpy.deg2rad(numpy.ndarray),2,skimage
"numpy.ndarray[tuple[slinumpy.float64e[int, NoneType, NoneType], slinumpy.float64e[int, NoneType, NoneType], slinumpy.float64e[NoneType, int, NoneType]]] = numpy.float64",2,skimage
"numpy.ndarray[tuple[slinumpy.float64e[int, NoneType, NoneType], slinumpy.float64e[NoneType, int, NoneType], slinumpy.float64e[NoneType, int, NoneType]]] = numpy.float64",2,skimage
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, int, NoneType], slinumpy.float64e[int, NoneType, NoneType], slinumpy.float64e[NoneType, int, NoneType]]] = numpy.float64",2,skimage
"numpy.ndarray[tuple[sliinte[int, NoneType, NoneType], sliinte[int, NoneType, NoneType]]] = int",2,skimage
"numpy.linspace(endpoint=builtins.bool, num=int, start=float, stop=float)",2,skimage
"numpy.zeros(tuple[int, int], dtype=numpy.dtype)",2,skimage
"numpy.ndarray[slituple[numpy.float64, numpy.float64]e[NoneType, NoneType, NoneType]] = tuple[numpy.float64, numpy.float64]",2,skimage
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=int, pad_width=tuple[tuple[int, int], tuple[int, int]])",2,skimage
numpy.complex,2,pandas
int ** numpy.float64,2,skimage
Type[numpy.matrix].__module__,2,dask.array
numpy.ndarray[list[str]],2,dask.array
numpy.random.RandomState,2,pandas
"numpy.diff(a=numpy.ndarray, axis=int, n=int)",2,skimage
"numpy.multiply(numpy.ndarray, numpy.ndarray)",2,skimage
"numpy.stack(arrays=list[numpy.ma.core.MaskedArray], axis=int)",2,dask.array
numpy.iinfo(int_type=Type[numpy.uint32]),2,pandas
"numpy.asarray(a=list[int], dtype=Type[builtins.float])",2,skimage
"numpy.array(list[tuple[float, float, float]])",2,skimage
"numpy.all(a=numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=int)",2,dask.array
numpy.matrix in dict,2,dask.array
numpy.ndim(a=numpy.ndarray),2,skimage
"numpy.array(list[numpy.ndarray], dtype=Type[numpy.int8])",2,skimage
numpy.ndarray / numpy.ndarray,2,dask.array
Type[numpy.ndarray].__array_ufunc__,2,pandas
"numpy.linalg.solve(a=numpy.ndarray, b=numpy.ndarray)",2,skimage
"numpy.ndarray.view(numpy.ndarray, tuple[Type[numpy.str_], int])",2,pandas
numpy.dtype != str,2,xarray
"numpy.ndarray.view(numpy.ndarray, str)",2,skimage
"numpy.any(a=numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=int)",2,dask.array
numpy.ndarray.reshape,2,pandas
"numpy.ndarray[tuple[int, slituple[numpy.float64, numpy.float64]e[NoneType, NoneType, NoneType]]] = tuple[numpy.float64, numpy.float64]",2,skimage
numpy.linalg.LinAlgError,2,skimage
float > numpy.float64,2,skimage
numpy.asarray(a=list[list[int]]),2,matplotlib
"numpy.all(a=numpy.ma.core.MaskedArray, axis=tuple[int, int], keepdims=builtins.bool)",2,dask.array
numpy.ma.core.ravel(a=builtins.range),2,matplotlib
"numpy.all(a=numpy.ma.core.MaskedArray, axis=tuple[int], keepdims=builtins.bool)",2,dask.array
numpy.isscalar(element=builtins.bool),2,dask.array
"numpy.argmax(a=numpy.ndarray, axis=int)",2,skimage
numpy.prod(a=int),2,pandas
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, numpy.ndarray, size=numpy.int64)",2,pandas
"numpy.generic.astype(numpy.datetime64, str)",2,matplotlib
"numpy.datetime64(str, str)",2,matplotlib
numpy.void.ndim,2,dask.array
"numpy.empty(int, dtype=Type[numpy.int32])",2,pandas
"numpy.logical_or(numpy.ndarray, numpy.ndarray)",2,skimage
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.ndarray, desired=list[list[int]])",2,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, NoneType]]",2,skimage
"numpy.testing._private.utils.assert_array_equal(x=tuple[int, int], y=tuple[float, float])",2,skimage
numpy.dtype > numpy.dtype,2,pandas
"numpy.array(pandas.core.arrays.interval.IntervalArray, copy=builtins.bool)",2,pandas
numpy.datetime64,2,dask.array
numpy.array(builtins.bytes),2,dask.array
"numpy.testing._private.utils.assert_almost_equal(actual=tuple[float, float], desired=tuple[float, float])",2,skimage
"numpy.asarray(a=pandas.core.arrays.numpy_.PandasArray, dtype=NoneType)",2,pandas
numpy.ndarray[pandas.intore.series.Series] = int,2,pandas
"numpy.ndarray[tuple[slice[int, int, NoneType], int]]",2,skimage
"numpy.asarray(a=tuple[int], dtype=Type[builtins.float])",2,skimage
"numpy.transpose(a=tuple[numpy.ndarray, numpy.ndarray])",2,skimage
numpy.array(builtins.complex),2,dask.array
numpy.min_scalar_type(float),2,pandas
numpy.ndarray[int] = pandas._libs.interval.Interval,2,pandas
"numpy.ndarray[tuple[slibuiltins.boole[int, int, NoneType], int]] = builtins.bool",2,skimage
numpy.atleast_1d(arys=tuple[numpy.ndarray]),2,skimage
numpy.ndarray * list[builtins.bool],2,skimage
numpy.complex64.ndim,2,dask.array
"numpy.ndarray.sort(numpy.ndarray, order=str)",2,skimage
numpy.isinf(numpy.float64),2,pandas
"numpy.testing._private.utils.assert_equal(actual=numpy.int64, desired=numpy.ndarray)",2,skimage
"numpy.linspace(endpoint=builtins.bool, num=int, start=numpy.float64, stop=numpy.float64)",2,pandas
numpy.ndarray + list[int],2,matplotlib
numpy.int64 * numpy.int64,2,pandas
numpy.float64 -= numpy.float64,2,pandas
"numpy.amin(a=numpy.ma.core.MaskedArray, axis=tuple[int], keepdims=builtins.bool)",2,dask.array
numpy.array(numpy.int16),2,dask.array
numpy.uint32.ndim,2,dask.array
numpy.floor(numpy.float64),2,pandas
"numpy.clip(a=numpy.float64, a_max=int, a_min=int)",2,skimage
"numpy.roll(a=numpy.ndarray, shift=int)",2,skimage
"numpy.ndarray[slipandas.core.indexes.numeric.Int64Indexe[NoneType, numpy.int64, NoneType]] = pandas.core.indexes.numeric.Int64Index",2,pandas
numpy.dtype == Type[numpy.float32],2,skimage
"numpy.ndarray[slipandas.core.indexes.numeric.Int64Indexe[numpy.int64, NoneType, NoneType]] = pandas.core.indexes.numeric.Int64Index",2,pandas
numpy.ndarray.ravel,2,skimage
"numpy.amax(a=numpy.ma.core.MaskedArray, axis=tuple[int, int], keepdims=builtins.bool)",2,dask.array
"numpy.array(list[Union[NoneType, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[builtins.object])",2,pandas
"numpy.ndarray[int] = tuple[int, int, int]",2,skimage
numpy.flatiter == numpy.int64,2,skimage
"numpy.array(list[str], dtype=Type[builtins.object])",2,matplotlib
"numpy.asarray(a=tuple[int, int, int, int], dtype=Type[builtins.float])",2,skimage
"numpy.testing._private.utils.assert_array_equal(x=tuple[int, int, int], y=tuple[float, float, int])",2,skimage
numpy.int64,2,matplotlib
"numpy.array(numpy.ndarray, dtype=Type[builtins.object])",2,matplotlib
"numpy.array(list[Union[NoneType, str]], dtype=Type[builtins.object])",2,pandas
"numpy.generic.astype(numpy.timedelta64, Type[numpy.float64])",2,matplotlib
"numpy.round_(a=tuple[numpy.float64, numpy.float64])",2,skimage
numpy.array(numpy.bytes_),2,dask.array
numpy.datetime64 - numpy.datetime64,2,matplotlib
numpy.ndarray * float,2,dask.array
numpy.angle,2,dask.array
"numpy.array(list[list[Union[int, int, numpy.float64]]])",2,skimage
numpy.array(numpy.float128),2,dask.array
numpy.uint64(numpy.int64),2,pandas
"numpy.array(numpy.ndarray, copy=Type[numpy.int64], dtype=builtins.bool, order=str)",2,skimage
"numpy.var(a=numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=int)",2,dask.array
numpy.isinf(float),2,skimage
"numpy.ndarray[tuple[slice[numpy.int64, NoneType, numpy.int64], slice[numpy.int64, NoneType, numpy.int64]]]",2,skimage
"numpy.dtype in tuple[Type[numpy.complex64], Type[numpy.complex128]]",2,skimage
numpy.complex64,2,skimage
"numpy.ndarray[tuple[builtins.ellipsis, slice[int, int, NoneType]]]",2,skimage
numpy.iinfo(int_type=Type[numpy.int64]),2,skimage
numpy.complex128,2,skimage
numpy.int64 + float,2,skimage
numpy.float64 += numpy.float64,2,pandas
*numpy.flatiter,2,skimage
"numpy.concatenate(list[Union[list, list[float]]])",2,matplotlib
numpy.ndarray *= numpy.ndarray,2,matplotlib
"numpy.ndarray.swapaxes(numpy.ndarray, int, int)",2,skimage
"numpy.amin(a=numpy.ndarray, axis=tuple[int, int], keepdims=builtins.bool)",2,dask.array
numpy.ndarray.std(numpy.ndarray),2,dask.array
numpy.broadcast_arrays,2,dask.array
numpy.asarray(a=int),2,dask.array
numpy.ma.core.MaskedArray.shape,2,skimage
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int, int, int])",2,dask.array
"numpy.ndarray[tuple[int, slice[int, int, NoneType]]]",2,skimage
"numpy.ma.core.MaskedArray(data=numpy.ndarray, fill_value=numpy.ndarray, mask=dask.array.core.Array)",2,dask.array
"numpy.lituple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]].index_tricks.OGridClass[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",2,skimage
"numpy.ndarray[tuple[slituple[numpy.int64, numpy.int64]e[NoneType, NoneType, NoneType], int]] = tuple[numpy.int64, numpy.int64]",2,matplotlib
numpy.int32(),2,pandas
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType]]]",2,dask.array
"numpy.prod(a=list, dtype=str)",2,pandas
numpy.flagsobj.writeable,2,xarray
"numpy.generic.astype(numpy.timedelta64, str)",2,xarray
numpy.broadcast_to,2,dask.array
numpy.fromiter,2,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.bool_])",2,skimage
numpy.asarray(a=xarray.core.indexing.CopyOnWriteArray),2,xarray
numpy.fft.fft,2,matplotlib
numpy.lib.stride_tricks.as_strided,2,matplotlib
numpy.ndarray[numpy.ndarray] = list[numpy.ndarray],2,pandas
"numpy.ndarray.sum(numpy.ndarray, NoneType, dtype=numpy.dtype)",2,pandas
"numpy.array(int, copy=NoneType, dtype=builtins.bool)",2,pandas
numpy.asarray(a=numpy.ma.core.MaskedArray),2,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[NoneType, NoneType, int]]]",2,dask.array
"numpy.asarray(a=tuple[str, str], dtype=Type[builtins.object])",2,pandas
"numpy.asarray(a=tuple[float, float, float], dtype=Type[numpy.float64])",2,skimage
"numpy.full(fill_value=int, shape=tuple[int, int])",2,dask.array
"numpy.iterable(y=tuple[numpy.int64, numpy.int64])",2,matplotlib
numpy.isfinite(numpy.int64),2,matplotlib
numpy.ma.core.MaskedArray - numpy.float64,2,skimage
"numpy.asarray(a=list[int], dtype=NoneType)",2,pandas
"numpy.ma.core.MaskedArray(data=numpy.ndarray, mask=numpy.ndarray)",2,dask.array
"numpy.flatiter[slice[NoneType, int, NoneType]]",2,xarray
numpy.ma.core.MaskedArray.fill_value,2,skimage
numpy.isnan(numpy.int64),2,pandas
numpy.absolute(numpy.ma.core.MaskedArray),2,skimage
numpy.amax(a=numpy.ma.core.MaskedArray),2,skimage
numpy.ma.core.MaskedArray - numpy.ma.core.MaskedArray,2,skimage
"numpy.ma.core.MaskedArray(data=numpy.ndarray, fill_value=numpy.ndarray, mask=NoneType)",2,dask.array
"numpy.rot90(k=int, m=numpy.ndarray)",2,skimage
"numpy.broadcast_arrays(args=tuple[dask.array.core.Array, dask.array.core.Array])",2,dask.array
numpy.lib,2,matplotlib
"numpy.iterable(y=tuple[numpy.float64, numpy.float64])",2,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType, slice[NoneType, NoneType, NoneType]]]",2,dask.array
numpy.iterable(y=builtins.function),2,matplotlib
"numpy.maximum(numpy.ndarray, numpy.int64)",2,dask.array
numpy.lib.stride_tricks,2,matplotlib
"numpy.ones(dtype=numpy.dtype, shape=int)",2,matplotlib
"numpy.roll(a=numpy.ndarray, axis=tuple[int, int], shift=tuple[int, int])",2,skimage
numpy.isscalar(element=tuple[int]),2,skimage
"numpy.isscalar(element=tuple[int, int, int])",2,skimage
numpy.result_type,2,dask.array
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType]]]",2,skimage
numpy.float64(x=float),2,matplotlib
numpy.ndarray.clip,2,skimage
numpy.array(list[list[builtins.bool]]),2,dask.array
"numpy.asarray(a=list[str], dtype=NoneType)",2,pandas
"numpy.result_type(numpy.dtype, numpy.dtype)",2,dask.array
numpy.ma.array,2,dask.array
numpy.ndarray[tuple[int]],2,xarray
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, int]]]",2,matplotlib
"numpy.empty(tuple[int], dtype=Type[numpy.float64])",2,pandas
dask.array.core.Array + numpy.ndarray,2,dask.array
"numpy.ndarray.astype(numpy.ndarray, str, casting=builtins.bool, copy=str)",2,pandas
numpy.ndarray[numpy.int8],2,pandas
numpy.set_printoptions,2,xarray
numpy.dtype.fields,2,dask.array
"numpy.random.mtrand.RandomState.gamma(numpy.random.mtrand.RandomState, float, numpy.float64)",2,skimage
"numpy.matmul(numpy.ndarray, numpy.ndarray)",2,dask.array
numpy.conjugate(numpy.ndarray),2,skimage
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType]]]",2,dask.array
"numpy.fft.fft(a=numpy.ndarray, axis=int, n=int)",2,matplotlib
"numpy.ndarray.sum(numpy.ndarray, int, dtype=numpy.dtype)",2,pandas
numpy.finfo(dtype=Type[numpy.float64]),2,skimage
numpy.argmin(a=list[numpy.float64]),2,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[numpy.int64, NoneType, int], slinumpy.ndarraye[numpy.int64, NoneType, int]]] = numpy.ndarray",2,skimage
pandas.core.dtypes.dtypes.PeriodDtype == numpy.dtype,2,pandas
"numpy.full(dtype=str, fill_value=float, shape=int)",2,skimage
"numpy.lib.stride_tricks.as_strided(shape=tuple[int, int], strides=tuple[int, int], x=numpy.ndarray)",2,matplotlib
int / numpy.ndarray,2,dask.array
"numpy.tile(A=list[int], reps=int)",2,pandas
"numpy.repeat(a=list[int], repeats=list[int])",2,pandas
"numpy.maximum(numpy.int64, numpy.ndarray)",2,dask.array
"numpy.ndarray[tuple[int, sliinte[int, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",2,skimage
numpy.ndarray.argsort(numpy.ndarray),2,skimage
"numpy.testing._private.utils.assert_array_almost_equal_nulp(x=numpy.ma.core.MaskedArray, y=numpy.float64)",2,skimage
"numpy.ma.core.MaskedArray[tuple[int, int, int]]",2,skimage
"numpy.array(list[int], dtype=str)",2,dask.array
numpy.random.PCG64,2,pandas
numpy.random.mtrand.RandomState.uniform,2,pandas
numpy.random.mtrand.RandomState(numpy.ndarray),2,pandas
numpy.random._mt19937.MT19937(int),2,pandas
numpy.random.mtrand.RandomState(numpy.random._mt19937.MT19937),2,pandas
numpy.argmin(a=numpy.ma.core.MaskedArray),2,dask.array
numpy.random.MT19937,2,pandas
numpy.random._pcg64.PCG64(int),2,pandas
numpy.random.mtrand.RandomState(numpy.random._pcg64.PCG64),2,pandas
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=tuple[int, int, int])",2,skimage
"numpy.asarray(a=list[Union[int, str]], dtype=Type[builtins.object])",2,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, NoneType]]]",2,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType]]]",2,pandas
numpy.dtype == Type[numpy.int16],2,skimage
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.integer])",2,dask.array
"numpy.ndarray[sliinte[int, int, int]] = int",2,pandas
numpy.nonzero(a=numpy.ndarray),2,dask.array
"numpy.array(list[int], dtype=Type[numpy.int16])",2,skimage
numpy.allclose,2,matplotlib
int == numpy.float64,2,skimage
numpy.numpy.bool_ool_ | numpy.bool_,2,xarray
"numpy.ndarray[slice[numpy.int64, numpy.int64, NoneType]]",2,dask.array
"numpy.array(list[int], dtype=Type[numpy.uint64])",2,skimage
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[int, int, NoneType], slice[int, int, NoneType]]]",2,skimage
numpy.vstack(tup=list[numpy.ndarray]),2,dask.array
numpy.array(list[list[list[int]]]),2,pandas
"numpy.array(list, dtype=numpy.dtype)",2,dask.array
int * numpy.int64,2,dask.array
"numpy.array(list[int], dtype=Type[numpy.ulonglong])",2,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[NoneType, NoneType, NoneType], list[int]]]",2,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, int], slice[NoneType, NoneType, int]]]",2,skimage
numpy.ComplexWarning,2,pandas
"numpy.array(list[int], dtype=Type[numpy.longlong])",2,skimage
numpy.asarray(a=xarray.core.indexing.MemoryCachedArray),2,xarray
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int])",2,pandas
numpy.ndarray[int] = numpy.int64,2,matplotlib
"numpy.array(list[int], dtype=Type[numpy.uint32])",2,skimage
*numpy.ndarray,2,dask.array
numpy.ndarray[tuple[builtins.ellipsis]],2,xarray
"numpy.array(list[str], copy=numpy.dtype, dtype=builtins.bool)",2,pandas
Type[numpy.int64] == Type[numpy.int64],2,dask.array
"numpy.empty(dtype=tuple[int, int, int], shape=list[tuple[str, numpy.dtype]])",2,dask.array
"numpy.zeros(int, Type[builtins.int])",2,skimage
numpy.object_,2,dask.array
"numpy.array(float, copy=NoneType, dtype=builtins.bool)",2,pandas
"numpy.linspace(num=int, start=numpy.int64, stop=numpy.int64)",2,matplotlib
"numpy.ones(dtype=numpy.dtype, shape=tuple[int])",2,dask.array
numpy.float_,2,dask.array
"numpy.delete(arr=numpy.ndarray, obj=numpy.ndarray)",2,pandas
numpy.float64(),2,pandas
"numpy.ndarray[numpy.ndarray] = tuple[int, int, int]",2,skimage
numpy.float64 *= int,2,skimage
"numpy.array(pandas.core.indexes.base.Index, copy=builtins.bool)",2,pandas
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",2,skimage
"numpy.argmax(numpy.ndarray, axis=builtins.bool, keepdims=NoneType)",2,dask.array
numpy.tanh(numpy.ndarray),2,skimage
str == numpy.dtype,2,dask.array
"numpy.ones(dtype=str, shape=tuple[int, int])",2,dask.array
"numpy.ma.core.masked_greater(value=float, x=dask.array.core.Array)",2,dask.array
"numpy.array(numpy.ndarray, Type[numpy.float64])",2,matplotlib
"numpy.zeros(int, dtype=Type[numpy.int64])",2,pandas
numpy.ma.core.MaskedArray -= numpy.float64,2,skimage
numpy.ndarray.transpose(numpy.ndarray),2,pandas
"numpy.concatenate(list[Union[list[int], numpy.ndarray]])",2,pandas
"numpy.concatenate(tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",2,skimage
"numpy.empty(tuple[int], dtype=numpy.dtype)",2,skimage
numpy.ma.core.MaskedArray + float,2,matplotlib
"numpy.ndarray.view(numpy.ndarray, str)",2,xarray
numpy.c_,2,pandas
"numpy.lituple[numpy.ndarray, numpy.ndarray].index_tricks.CClass[tuple[numpy.ndarray, numpy.ndarray]]",2,pandas
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.object_],2,pandas
"numpy.ndarray[tuple[slifloate[int, NoneType, NoneType], slifloate[int, NoneType, NoneType]]] = float",2,skimage
numpy.concatenate(tuple[numpy.ndarray]),2,skimage
numpy.int64 //= int,2,pandas
"numpy.asarray(a=xarray.coding.variables._ElementwiseFunctionArray, dtype=NoneType)",2,xarray
"numpy.argmin(numpy.ndarray, axis=builtins.bool, keepdims=NoneType)",2,dask.array
numpy.ndarray[NoneType],2,dask.array
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]]",2,dask.array
"numpy.ndarray[tuple[sliinte[int, int, NoneType], int]] = int",2,skimage
Type[numpy.float32] in dict,2,dask.array
numpy.dtype != Type[numpy.float32],2,dask.array
numpy.argmax(a=numpy.ma.core.MaskedArray),2,dask.array
numpy.string_,2,xarray
numpy.shape(a=list),2,matplotlib
numpy.ndarray == str,2,skimage
numpy.ma.core.MaskedArray ** int,2,dask.array
numpy.float64 * numpy.float64,2,dask.array
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=numpy.ndarray)",2,dask.array
"numpy.asarray(a=list[list[Union[int, numpy.float64]]], dtype=Type[builtins.float])",2,matplotlib
numpy.float128 + numpy.float64,2,matplotlib
"numpy.linspace(endpoint=builtins.bool, num=int, start=numpy.float64, stop=numpy.float64)",2,skimage
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=int)",2,dask.array
"numpy.ndarray[tuple[int, int]] = dask.array.core.Array",2,dask.array
"numpy.ma.core.MaskedArray(data=list[int], mask=list[builtins.bool])",2,matplotlib
numpy.ma.core.ravel(a=numpy.float64),2,matplotlib
"numpy.ndarray + list[Union[float, numpy.float64]]",2,matplotlib
"numpy.tile(A=numpy.ndarray, reps=tuple[int, int])",2,dask.array
numpy.bool,2,xarray
"numpy.ma.core.MaskedArray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType]]]",2,dask.array
numpy.ma.core.ravel(a=list[float]),2,matplotlib
"numpy.transpose(a=numpy.ma.core.MaskedArray, axes=tuple[int, int, int])",2,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], NoneType]]",2,dask.array
"numpy.repeat(a=numpy.ndarray, axis=int, repeats=int)",2,dask.array
"numpy.array(list[list[Union[float, int]]])",2,matplotlib
numpy.fromfunction,2,dask.array
numpy.float64(x=float),2,xarray
"numpy.fromfunction(function=builtins.function, kwargs=dict, shape=tuple[int, int])",2,dask.array
"numpy.diagonal(a=numpy.ndarray, axis1=int, axis2=int, offset=int)",2,dask.array
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",2,dask.array
"numpy.ma.core.filled(a=numpy.ndarray, fill_value=int)",2,dask.array
"numpy.amax(a=numpy.ndarray, axis=tuple[int], keepdims=builtins.bool)",2,dask.array
"numpy.array(numpy.ndarray, Type[numpy.float32])",2,matplotlib
numpy.uint64 == int,2,matplotlib
numpy.fft.rfft2(a=numpy.ndarray),2,dask.array
"numpy.fft.ifftn(a=numpy.ndarray, axes=tuple[int, int], s=tuple[int, int])",2,dask.array
"numpy.minimum(tuple[int, int, int], numpy.ndarray)",2,skimage
numpy.ndim(a=float),2,matplotlib
numpy.fft.fftn(a=numpy.ndarray),2,dask.array
"numpy.fft.ifft2(a=numpy.ndarray, axes=tuple[int, int], s=tuple[int, int])",2,dask.array
numpy.fft.ihfft(a=numpy.ndarray),2,dask.array
"numpy.ma.core.MaskedArray[tuple[slice[int, int, NoneType], slice[int, int, NoneType]]]",2,dask.array
"numpy.generic.astype(numpy.uint64, Type[numpy.float64])",2,matplotlib
numpy.fft.hfft(a=numpy.ndarray),2,dask.array
numpy.fft.rfft(a=numpy.ndarray),2,dask.array
numpy.vectorize,2,xarray
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType]]]",2,dask.array
"numpy.generic.astype(numpy.float64, Type[numpy.float32])",2,matplotlib
numpy.copy(a=numpy.ndarray),2,matplotlib
"numpy.arange(int, dtype=str)",2,matplotlib
"numpy.amin(a=numpy.ndarray, axis=tuple[int], keepdims=builtins.bool)",2,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int)",2,skimage
"numpy.diagonal(a=dask.array.core.Array, axis1=int, offset=int)",2,dask.array
numpy.ndarray.base,2,matplotlib
numpy.uint32 + numpy.int64,2,dask.array
"numpy.array(list[list[float]], Type[builtins.float])",2,skimage
numpy.meshgrid,2,dask.array
"numpy.arange(float, float, float)",2,dask.array
Type[numpy.uint64] in dict,2,dask.array
"numpy.ndarray[tuple[slituple[float, int]e[NoneType, NoneType, NoneType], int]] = tuple[float, int]",2,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=list, y=list)",2,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=list[numpy.ndarray], y=list[list[list[int]]])",2,matplotlib
"numpy.array(list[int], dtype=Type[numpy.uint8])",2,matplotlib
int * numpy.uint64,2,dask.array
numpy.linalg.LinAlgError,2,matplotlib
"numpy.allclose(a=numpy.ndarray, b=numpy.float64)",2,matplotlib
numpy.uint32 in dict,2,dask.array
int * numpy.uint32,2,dask.array
numpy.int32 in dict,2,dask.array
numpy.int64 in dict,2,dask.array
int * numpy.int32,2,dask.array
"numpy.array(list[int], Type[numpy.float64])",2,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], list[int]]]",2,matplotlib
"numpy.bincount(numpy.ndarray, minlength=int)",2,skimage
numpy.ndarray.tolist,2,matplotlib
numpy.lib.stride_tricks.DummyArray.base,2,matplotlib
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.ndarray, desired=float)",2,matplotlib
numpy.asarray(a=pandas.core.series.Series),2,xarray
"numpy.random.mtrand.RandomState.uniform(numpy.random.mtrand.RandomState, float, int)",2,skimage
numpy.diag(v=dask.array.core.Array),2,dask.array
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]] = builtins.bool",2,skimage
"numpy.eye(N=int, dtype=Type[builtins.int])",2,dask.array
"numpy.isnan(list[Union[float, int]])",2,matplotlib
"numpy.tensordot(a=numpy.ndarray, axes=tuple[tuple[int, int], tuple[int, int]], b=numpy.ndarray)",2,dask.array
"numpy.amax(a=numpy.ma.core.MaskedArray, axis=tuple[int], keepdims=builtins.bool)",2,dask.array
numpy.complex128.real,2,matplotlib
numpy.testing.assert_array_almost_equal,2,matplotlib
"numpy.lituple[slice[int, int, builtins.complex], slice[int, int, builtins.complex]].index_tricks.MGridClass[tuple[slice[int, int, builtins.complex], slice[int, int, builtins.complex]]]",2,matplotlib
numpy.ndarray.argmax(numpy.ndarray),2,matplotlib
"numpy.isclose(a=numpy.float64, b=numpy.float64)",2,matplotlib
"numpy.round_(a=numpy.ma.core.MaskedArray, decimals=int)",2,dask.array
numpy.ndarray | numpy.ndarray,2,xarray
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.float64, desired=numpy.float64)",2,matplotlib
"numpy.ndarray[sliinte[int, NoneType, NoneType]] = int",2,matplotlib
"numpy.resize(a=numpy.ndarray, new_shape=int)",2,matplotlib
"numpy.array(list[list[list[int]]], dtype=Type[numpy.uint8])",2,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[NoneType, NoneType, int]]]",2,matplotlib
"numpy.array(list[int], copy=numpy.dtype, dtype=builtins.bool)",2,pandas
numpy.fft.rfftn(a=numpy.ndarray),2,dask.array
"numpy.maximum(numpy.ndarray, numpy.ndarray)",2,skimage
"numpy.all(a=numpy.ndarray, axis=tuple[int, int], keepdims=builtins.bool)",2,dask.array
"numpy.all(a=numpy.ndarray, axis=tuple[int], keepdims=builtins.bool)",2,dask.array
numpy.ma.core.MaskedArray.fill_value,2,dask.array
"numpy.minimum(numpy.ndarray, numpy.ndarray)",2,skimage
numpy.ndarray += int,2,dask.array
"numpy.ma.core.MaskedArray[tuple[slice[int, int, NoneType]]]",2,dask.array
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, int]] = int",2,skimage
numpy.float64 %= float,2,skimage
numpy.ma.core.MaskedArray in dict,2,dask.array
numpy.ndarray ** numpy.ndarray,2,skimage
int * numpy.ma.core.MaskedArray,2,matplotlib
"numpy.ma.numpy.ma.core.MaskedArrayore.MaskedArray[tuple[builtins.ellipsis, int]] = numpy.ma.core.MaskedArray",2,matplotlib
numpy.uint8.ndim,2,dask.array
"numpy.clip(a=numpy.ma.core.MaskedArray, a_max=int, a_min=int)",2,matplotlib
"numpy.rollaxis(a=numpy.ndarray, axis=int, start=int)",2,skimage
numpy.diff,2,dask.array
"numpy.fft.fft(a=numpy.ndarray, axis=int)",2,dask.array
numpy.ma.core.array(data=numpy.ndarray),2,matplotlib
numpy.ceil(numpy.ndarray),2,skimage
numpy.ma.core.MaskedArray.mask,2,dask.array
numpy.longdouble,2,matplotlib
~numpy.ma.core.MaskedArray,2,matplotlib
numpy.sign(numpy.ma.core.MaskedArray),2,matplotlib
numpy.ma.core.MaskedArray - float,2,matplotlib
numpy.ma.numpy.ma.core.MaskedArrayore.MaskedArray[numpy.ma.numpy.ma.core.MaskedArrayore.MaskedArray] = numpy.ma.core.MaskedArray,2,matplotlib
"numpy.linalg.norm(axis=tuple[int, int], keepdims=int, ord=builtins.bool, x=numpy.ndarray)",2,dask.array
numpy.float64 // int,2,matplotlib
numpy.random.mtrand.RandomState(NoneType),2,skimage
numpy.ma.core.MaskedArray / float,2,matplotlib
"numpy.linalg.norm(axis=tuple[int], keepdims=float, ord=builtins.bool, x=numpy.ndarray)",2,dask.array
"numpy.linalg.norm(axis=NoneType, keepdims=float, ord=builtins.bool, x=numpy.ndarray)",2,dask.array
"numpy.percentile(a=numpy.ndarray, q=float)",2,skimage
"numpy.amax(a=numpy.ndarray, axis=tuple[int, int], keepdims=builtins.bool)",2,dask.array
"numpy.arange(numpy.float64, numpy.float64, int)",2,matplotlib
"numpy.linalg.norm(axis=tuple[int], keepdims=int, ord=builtins.bool, x=numpy.ndarray)",2,dask.array
"numpy.ndarray[int] = tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64]",2,matplotlib
"numpy.array(tuple[tuple[int, int], tuple[int, int], tuple[int, int], tuple[int, int], tuple[int, int]])",2,skimage
"numpy.linalg.norm(axis=int, keepdims=NoneType, ord=builtins.bool, x=numpy.ndarray)",2,dask.array
"numpy.array(numpy.ndarray, copy=int, dtype=numpy.dtype, ndmin=builtins.bool)",2,matplotlib
numpy.int64 == numpy.int32,2,dask.array
numpy.ndarray[list[int]] = int,2,skimage
"numpy.median(a=numpy.ndarray, axis=int)",2,dask.array
numpy.float64 % float,2,skimage
"numpy.ones(dtype=numpy.dtype, shape=tuple[int, int, int])",2,dask.array
"numpy.concatenate(list[Union[list, list[Union[numpy.float64, numpy.int64]]]])",2,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=numpy.ma.core.MaskedArray, y=numpy.ma.core.MaskedArray)",2,matplotlib
builtins.str.lower(self=numpy.str_),2,matplotlib
"numpy.array(list[datetime.datetime], dtype=str)",2,matplotlib
"numpy.minimum(tuple[int, int], numpy.ndarray)",2,skimage
float > numpy.float64,2,matplotlib
numpy.arange(numpy.float64),2,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.str_])",2,xarray
numpy.float64(x=int),2,matplotlib
"numpy.ma.core.masked_equal(value=int, x=numpy.ndarray)",2,dask.array
numpy.amin(a=list[numpy.int64]),2,skimage
numpy.amax(a=list[numpy.int64]),2,skimage
numpy.asarray(a=builtins.bytes),2,xarray
"numpy.fft.irfft(a=numpy.ndarray, axis=int, n=int)",2,dask.array
"numpy.generic.astype(numpy.uint16, Type[numpy.float32])",2,matplotlib
"numpy.lituple[float, float, float].index_tricks.RClass[tuple[float, float, float]]",2,skimage
"numpy.fft.ifft(a=numpy.ndarray, axis=int, n=int)",2,dask.array
"numpy.testing._private.utils.assert_allclose(actual=float, atol=float, desired=float)",2,skimage
"numpy.array(list[Union[int, numpy.float64]])",2,matplotlib
"numpy.resize(a=numpy.ndarray, new_shape=tuple[int, int])",2,matplotlib
"numpy.maximum(numpy.float64, int)",2,skimage
"numpy.zeros(int, dtype=Type[builtins.bool])",2,matplotlib
"numpy.transpose(a=numpy.ndarray, axes=tuple[int, int, int])",2,dask.array
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.int])",2,dask.array
numpy.ndarray.item(numpy.ma.core.MaskedArray),2,matplotlib
"numpy.transpose(a=numpy.ndarray, axes=tuple[int])",2,dask.array
"numpy.ndarray.astype(numpy.ma.core.MaskedArray, Type[numpy.float64])",2,matplotlib
"numpy.transpose(a=numpy.ndarray, axes=tuple[int, int, int, int])",2,dask.array
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.float64, decimal=int, desired=numpy.float64)",2,skimage
"numpy.ndarray[slice[numpy.int8, numpy.int64, NoneType]]",2,matplotlib
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=numpy.ma.core.MaskedArray)",2,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType]]]",2,matplotlib
numpy.sum(a=list[float]),2,matplotlib
numpy.amax(a=list[int]),2,skimage
numpy.asarray(a=list[numpy.int64]),2,skimage
"numpy.testing._private.utils.assert_equal(actual=tuple[list[tuple[str]], tuple], desired=tuple[list[tuple[str]], tuple])",2,dask.array
numpy.argmin(a=numpy.ndarray),2,matplotlib
numpy.fft.ifftn(a=numpy.ndarray),2,dask.array
numpy.fft.ifft2(a=numpy.ndarray),2,dask.array
builtins.function.__doc__,2,dask.array
numpy.dtype(Type[numpy.float64]),2,xarray
"numpy.testing._private.utils.assert_equal(actual=tuple[slice[numpy.int64, NoneType, numpy.int64], slice[numpy.int64, NoneType, numpy.int64]], desired=list[slice[float, NoneType, float]])",2,skimage
"numpy.stack(arrays=tuple[numpy.ndarray, numpy.ndarray], axis=int)",2,matplotlib
numpy.ndarray * builtins.complex,2,matplotlib
numpy.nancumprod(a=numpy.ndarray),2,dask.array
numpy.nancumsum(a=numpy.ndarray),2,dask.array
"numpy.sum(a=numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=int)",2,dask.array
"numpy.ndarray.reshape(numpy.ndarray, tuple[int])",2,skimage
"numpy.testing._private.utils.assert_equal(actual=numpy.uint16, desired=int)",2,skimage
numpy.shape,2,matplotlib
"numpy.timedelta64(int, str)",2,dask.array
"numpy.multiply(numpy.ndarray, float, dtype=Type[numpy.float32])",2,skimage
"numpy.interp(fp=numpy.ndarray, x=numpy.ndarray, xp=numpy.ndarray)",2,skimage
int == numpy.int64,2,matplotlib
numpy.signedinteger,2,pandas
"numpy.prod(a=numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=int)",2,dask.array
"numpy.testing._private.utils.assert_equal(actual=numpy.int16, desired=int)",2,skimage
"numpy.full(dtype=int, fill_value=Type[numpy.uint8], shape=tuple[int, int])",2,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType, NoneType]]",2,dask.array
"numpy.ndarray[tuple[NoneType, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], NoneType]]",2,dask.array
numpy.unsignedinteger,2,pandas
"numpy.ndarray.view(numpy.ndarray, numpy.dtype)",2,dask.array
numpy.ascontiguousarray(a=numpy.ndarray),2,dask.array
"numpy.testing._private.utils.assert_equal(actual=numpy.uint32, desired=int)",2,skimage
numpy.uint8(numpy.ndarray),2,skimage
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=list[numpy.float64])",2,matplotlib
numpy.transpose(a=numpy.ndarray),2,skimage
"numpy.ndarray[tuple[builtins.ellipsis, int]]",2,dask.array
"numpy.ndarray[tuple[slilist[float]e[int, int, NoneType], int]] = list[float]",2,matplotlib
"numpy.ndarray[tuple[slice[int, int, NoneType], int]]",2,matplotlib
"numpy.hypot(numpy.float64, numpy.float64)",2,skimage
numpy.iterable(y=matplotlib.tests.test_units.Quantity),2,matplotlib
numpy.ufunc in dict,2,dask.array
str % numpy.float64,2,dask.array
"numpy.iterable(y=tuple[int, float, int, float])",2,matplotlib
"numpy.iterable(y=tuple[float, int, float, int])",2,matplotlib
numpy.log2(numpy.ndarray),2,skimage
"numpy.issubdtype(arg1=Type[numpy.uint16], arg2=Type[numpy.floating])",2,skimage
numpy.AxisError(axis=str),2,dask.array
"numpy.ndarray[int] = tuple[float, int]",2,matplotlib
"numpy.ndarray[int] = tuple[int, int]",2,matplotlib
"numpy.ndarray.cumprod(numpy.ndarray, axis=int)",2,dask.array
numpy.ones(shape=list[int]),2,skimage
"numpy.array(list[int], dtype=Type[numpy.float32])",2,skimage
"numpy.ndarray.cumsum(numpy.ndarray, axis=int)",2,dask.array
"numpy.ndarray[tuple[slituple[list]e[int, NoneType, NoneType], slituple[list]e[int, NoneType, int]]] = tuple[list]",2,matplotlib
numpy.ma.MaskedArray,2,pandas
"numpy.ma.core.MaskedArray.sum(axis=tuple[int, int], keepdims=builtins.bool)",2,dask.array
"numpy.ndarray[tuple[int, builtins.ellipsis]]",2,skimage
"numpy.empty(tuple[int, int])",2,dask.array
numpy.ndarray &= numpy.ndarray,2,skimage
"numpy.zeros(tuple[int, int, int, int, int, int, int], dtype=Type[numpy.float64])",2,skimage
"numpy.ndarray.put(numpy.ndarray, numpy.ndarray, numpy.ndarray)",2,pandas
"numpy.ndarray[tuple[int, int, int, int, int, int]] = int",2,skimage
"numpy.zeros(tuple[int, int, int, int, int], dtype=Type[numpy.float64])",2,skimage
"numpy.ma.core.MaskedArray.sum(axis=tuple[int], keepdims=builtins.bool)",2,dask.array
numpy.float64 != numpy.float64,2,dask.array
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int, int, int, int])",2,dask.array
numpy.log(numpy.ndarray),2,skimage
numpy.prod(a=list[numpy.float64]),2,dask.array
"numpy.lituple[float, int, int].index_tricks.RClass[tuple[float, int, int]]",2,skimage
numpy.isnan(numpy.float64),2,dask.array
numpy.atleast_1d(arys=tuple[float]),2,skimage
"numpy.full(dtype=Type[builtins.float], fill_value=float, shape=int)",2,skimage
"numpy.ndarray.view(numpy.ndarray, Type[numpy.ndarray])",2,pandas
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int, int, int)",2,dask.array
"numpy.mean(a=numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=int)",2,dask.array
"numpy.zeros_like(a=numpy.ndarray, dtype=Type[builtins.bool])",2,skimage
numpy.asarray(a=list[str]),2,matplotlib
"numpy.ndarray[slilist[Union[float, str]]e[NoneType, NoneType, NoneType]] = list[Union[float, str]]",2,pandas
"numpy.mean(a=numpy.ma.core.MaskedArray, axis=int)",2,dask.array
numpy.load,2,dask.array
"numpy.maximum(numpy.ndarray, int)",2,skimage
"numpy.arange(int, int, int)",2,dask.array
"numpy.array(numpy.ndarray, copy=Type[numpy.object_], dtype=builtins.bool)",2,pandas
numpy.ndarray[tuple[list[int]]],2,dask.array
numpy.exp(int),2,skimage
"numpy.array(numpy.ndarray, copy=str, dtype=builtins.bool)",2,pandas
"numpy.ndarray[tuple[list[int], slice[NoneType, NoneType, NoneType]]]",2,dask.array
numpy.flatnonzero(a=numpy.ndarray),2,dask.array
"numpy.ndarray[tuple[list[int], slice[NoneType, NoneType, NoneType], list[int], list[int]]]",2,dask.array
"numpy.ndarray[tuple[slifloate[int, int, NoneType], slifloate[int, int, NoneType], slifloate[NoneType, NoneType, NoneType]]] = float",2,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], list[int], slice[NoneType, NoneType, NoneType], list[int]]]",2,dask.array
"numpy.empty(tuple[int], dtype=Type[builtins.bool])",2,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], list[int], list[int]]]",2,dask.array
"numpy.ndarray[tuple[list[int], list[int], list[int], list[int]]]",2,dask.array
"numpy.ndarray[tuple[list[int], list[int], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2,dask.array
"numpy.empty(tuple[int, int, int], dtype=numpy.dtype)",2,dask.array
"numpy.ndarray[tuple[list[int], slice[NoneType, NoneType, NoneType], list[int], slice[NoneType, NoneType, NoneType]]]",2,dask.array
"numpy.generic.astype(numpy.float64, numpy.dtype)",2,dask.array
numpy.isfortran(a=numpy.ndarray),2,matplotlib
"numpy.ma.core.masked_greater(value=int, x=numpy.ndarray)",2,dask.array
numpy.ndarray + numpy.int64,2,matplotlib
Type[numpy.int32] in dict,2,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, int]]",2,dask.array
"numpy.ndarray[tuple[NoneType, builtins.ellipsis]]",2,dask.array
numpy.int64 // int,2,matplotlib
"numpy.array(list[float], dtype=Type[numpy.float64])",2,skimage
numpy.isscalar(element=numpy.dtype),2,dask.array
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=float)",2,matplotlib
numpy.sort,2,dask.array
numpy.ndarray >= numpy.int64,2,matplotlib
numpy.linalg.qr,2,dask.array
"numpy.ma.core.masked_inside(v1=int, v2=int, x=numpy.ndarray)",2,dask.array
"numpy.round_(a=numpy.ndarray, decimals=int)",2,dask.array
numpy.round_(a=dask.array.core.Array),2,dask.array
int -= numpy.float64,2,matplotlib
"numpy.testing._private.utils.assert_almost_equal(actual=list[float], desired=numpy.ndarray)",2,matplotlib
"numpy.ma.core.masked_outside(v1=int, v2=int, x=numpy.ndarray)",2,dask.array
"numpy.array(list[list[float]], dtype=Type[numpy.float64])",2,matplotlib
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=list[list[int]])",2,skimage
numpy.vstack,2,dask.array
"numpy.ndarray.reshape(numpy.ndarray, int, int, int, int)",2,dask.array
numpy.ndarray //= int,2,skimage
"numpy.ndarray[slifloate[NoneType, NoneType, NoneType]] = float",2,matplotlib
numpy.float64 in dict,2,dask.array
int * numpy.float32,2,dask.array
"numpy.generic.astype(numpy.float32, numpy.dtype)",2,matplotlib
numpy.ndarray.imag,2,matplotlib
numpy.array(matplotlib.transforms.Bbox),2,matplotlib
"numpy.testing._private.utils.assert_equal(actual=tuple[int], desired=tuple[int])",2,skimage
numpy.dtype != Type[builtins.float],2,dask.array
"numpy.testing._private.utils.assert_allclose(actual=numpy.ma.core.MaskedArray, desired=numpy.ma.core.MaskedArray)",2,matplotlib
numpy.round_(a=numpy.float64),2,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], NoneType, slice[NoneType, NoneType, NoneType]]]",2,dask.array
"numpy.asarray(a=tuple[int, int])",2,dask.array
numpy.random.uniform,2,matplotlib
numpy.asarray(a=dask.array.core.Array),2,dask.array
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.float16, decimal=int, desired=float)",2,skimage
"numpy.generic.astype(numpy.uint8, Type[numpy.int64])",2,skimage
numpy.ndarray += numpy.float64,2,matplotlib
numpy.array(list[list[list[int]]]),2,dask.array
"numpy.random.mtrand.RandomState.poisson(numpy.random.mtrand.RandomState, numpy.ndarray)",2,skimage
numpy.int32 == int,2,matplotlib
"numpy.flip(axis=int, m=dask.array.core.Array)",2,dask.array
int - numpy.int64,2,xarray
"numpy.array(tuple[int, int, int, int])",2,dask.array
"numpy.ma.core.fix_invalid(a=numpy.ma.core.MaskedArray, fill_value=int)",2,dask.array
numpy.ma.core.MaskedArray - numpy.ma.core.MaskedArray,2,matplotlib
"numpy.arange(int, int, dtype=Type[numpy.int32])",2,matplotlib
numpy.matrix.all,2,dask.array
"numpy.testing._private.utils.assert_array_almost_equal(decimal=int, x=tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64], y=tuple[int, int, int, int])",2,matplotlib
"numpy.ma.core.filled(a=numpy.ndarray, fill_value=NoneType)",2,dask.array
numpy.ndarray[numpy.int32],2,matplotlib
"numpy.ones(dtype=Type[numpy.int32], shape=int)",2,matplotlib
"numpy.ma.testutils.assert_array_almost_equal(x=numpy.ma.core.MaskedArray, y=numpy.ma.core.MaskedArray)",2,matplotlib
"numpy.empty(dtype=tuple[int], shape=numpy.dtype)",2,dask.array
"numpy.ma.core.filled(a=numpy.ma.core.MaskedArray, fill_value=NoneType)",2,dask.array
"numpy.empty(list[int], dtype=Type[numpy.int32])",2,matplotlib
"numpy.insert(arr=numpy.ndarray, axis=int, obj=int, values=float)",2,matplotlib
numpy.asanyarray(a=list),2,dask.array
numpy.insert,2,matplotlib
"numpy.array(list[builtins.bool], dtype=Type[builtins.bool])",2,matplotlib
"numpy.empty(tuple[int, int, int], numpy.dtype)",2,skimage
"numpy.ndarray.sum(numpy.ndarray, axis=builtins.bool, keepdims=int)",2,dask.array
int / numpy.int64,2,skimage
"numpy.ndarray[slice[int, NoneType, numpy.int64]]",2,skimage
"numpy.flip(axis=int, m=numpy.ndarray)",2,dask.array
"numpy.ndarray.reshape(numpy.ndarray, tuple[numpy.int64, int])",2,skimage
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[builtins.bool], p=tuple[int, int], size=list[float])",2,skimage
numpy.random.choice,2,skimage
"numpy.cov(m=dask.array.core.Array, y=dask.array.core.Array)",2,dask.array
"numpy.random.mtrand.RandomState.seed(numpy.random.mtrand.RandomState, seed=int)",2,skimage
"numpy.ma.core.masked_values(atol=float, rtol=float, shrink=builtins.bool, value=int, x=numpy.ndarray)",2,dask.array
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, float, float, tuple[int, int])",2,skimage
"numpy.transpose(a=numpy.ndarray, axes=list[int])",2,matplotlib
numpy.int64 // int,2,dask.array
"numpy.apply_along_axis(arr=numpy.ndarray, axis=int, func1d=builtins.function, kwargs=dict)",2,skimage
"numpy.ndarray[slice[int, NoneType, int]]",2,skimage
int / numpy.float64,2,dask.array
numpy.dtype != Type[builtins.int],2,dask.array
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.int32])",2,matplotlib
numpy.transpose(a=list[numpy.ndarray]),2,matplotlib
numpy.int64 - numpy.int64,2,dask.array
"numpy.bincount(numpy.ndarray, minlength=int)",2,matplotlib
numpy.ndarray != int,2,matplotlib
"numpy.empty(int, dtype=Type[numpy.float64])",2,matplotlib
numpy.zeros(numpy.int64),2,matplotlib
"numpy.ones(dtype=Type[numpy.uint64], shape=int)",2,pandas
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]] = builtins.bool",2,skimage
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint32, side=numpy.ndarray, sorter=str)",2,pandas
"numpy.array(list[list[str]], dtype=Type[builtins.object])",2,pandas
"numpy.array(list[Union[builtins.bool, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",2,pandas
"numpy.random.mtrand.RandomState.random_sample(numpy.random.mtrand.RandomState, tuple[int, int])",2,pandas
"numpy.ndarray[sliinte[numpy.int64, numpy.int64, NoneType]] = int",2,pandas
numpy.ndarray[numpy.ndarray] = pandas._libs.tslibs.timestamps.Timestamp,2,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.float64)",2,pandas
"numpy.ndarray[slinumpy.datetime64e[int, int, NoneType]] = numpy.datetime64",2,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.datetime64)",2,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.timedelta64)",2,pandas
"numpy.ndarray[slinumpy.ndarraye[int, int, NoneType]] = numpy.ndarray",2,pandas
"numpy.ndarray.shape = tuple[int, int]",2,skimage
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int64, side=NoneType, sorter=str)",2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int64, side=numpy.ndarray, sorter=str)",2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint64, side=numpy.ndarray, sorter=str)",2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, int, side=numpy.ndarray, sorter=str)",2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int8, side=numpy.ndarray, sorter=str)",2,pandas
numpy.iinfo(int_type=Type[numpy.int16]),2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int16, side=NoneType, sorter=str)",2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int16, side=numpy.ndarray, sorter=str)",2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int32, side=numpy.ndarray, sorter=str)",2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint8, side=NoneType, sorter=str)",2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint8, side=numpy.ndarray, sorter=str)",2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint16, side=numpy.ndarray, sorter=str)",2,pandas
"numpy.arange(int, int, int, dtype=Type[numpy.int32])",2,pandas
numpy.int32 > int,2,pandas
numpy.modf(pandas.core.arrays.sparse.array.SparseArray),2,pandas
pandas.core.arrays.sparse.array.SparseArray == numpy.ndarray,2,pandas
"numpy.full(dtype=numpy.dtype, fill_value=int, shape=tuple[int])",2,pandas
"numpy.ndarray[slice[numpy.int64, numpy.int64, int]]",2,pandas
numpy.int64 /= numpy.float64,2,skimage
"numpy.ndarray[slice[int, numpy.int64, int]]",2,pandas
"numpy.full(dtype=numpy.dtype, fill_value=numpy.float64, shape=tuple[int])",2,pandas
numpy.float64(x=numpy.ndarray),2,skimage
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.ndarray, desired=list[float])",2,skimage
numpy.ndarray >= numpy.ndarray,2,pandas
pandas.core.arrays.sparse.array.SparseArray != numpy.ndarray,2,pandas
pandas.core.arrays.sparse.array.SparseArray > numpy.ndarray,2,pandas
pandas.core.arrays.sparse.array.SparseArray >= numpy.ndarray,2,pandas
numpy.ndarray[int] = NoneType,2,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, int]]]",2,pandas
pandas.core.arrays.sparse.array.SparseArray | numpy.ndarray,2,pandas
numpy.exp(pandas.core.arrays.sparse.array.SparseArray),2,pandas
numpy.int64 += int,2,pandas
"numpy.array(int, dtype=numpy.dtype)",2,pandas
"numpy.ndarray[tuple[int, int, int]] = float",2,skimage
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2,pandas
"numpy.array(list[tuple[numpy.float32, numpy.float32, numpy.float32, numpy.float32, numpy.float32, numpy.float32, numpy.float32, numpy.float32, numpy.float32]])",2,skimage
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=tuple[tuple[int, int], tuple[int, int]])",2,skimage
numpy.mean(a=pandas.core.arrays.sparse.array.SparseArray),2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint32, side=NoneType, sorter=str)",2,pandas
numpy.ndim(a=str),2,pandas
"numpy.ndarray[slice[numpy.int32, numpy.int32, NoneType]]",2,pandas
numpy.transpose,2,pandas
"numpy.array(list[Union[float, numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]])",2,pandas
"numpy.array(list[Union[float, numpy.datetime64, numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]])",2,pandas
"numpy.array(list[Union[numpy.datetime64, numpy.timedelta64]], dtype=Type[builtins.object])",2,pandas
"numpy.array(list[NoneType], dtype=str)",2,pandas
"numpy.arange(int, int, dtype=Type[numpy.int64])",2,pandas
"numpy.ndarray.reshape(numpy.ndarray, tuple)",2,pandas
"numpy.arange(int, dtype=Type[numpy.float64])",2,pandas
pandas.core.dtypes.dtypes.PeriodDtype == Type[numpy.object_],2,pandas
numpy.array(list[list[builtins.bool]]),2,pandas
"numpy.asarray(a=list[pandas._libs.tslibs.nattype.NaTType], dtype=Type[builtins.object])",2,pandas
"numpy.array(list[Union[NoneType, float]], dtype=str)",2,pandas
"numpy.ndim(a=list[Union[float, int]])",2,pandas
numpy.ndim(a=numpy.uint64),2,pandas
"numpy.array(list[Union[datetime.time, pandas._libs.tslibs.nattype.NaTType]])",2,pandas
"numpy.asarray(a=list[Union[float, str]])",2,pandas
numpy.floor(numpy.ndarray),2,pandas
numpy.array(list[numpy.uint64]),2,pandas
numpy.intool_ == int,2,pandas
numpy.timedelta64(pandas._libs.tslibs.timedeltas.Timedelta),2,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, pandas._libs.tslibs.timestamps.Timestamp)",2,pandas
numpy.dtype == Type[numpy.uint16],2,pandas
numpy.ndarray // numpy.ndarray,2,skimage
numpy.ulonglong.dtype,2,pandas
numpy.concatenate(list[pandas.core.indexes.timedeltas.TimedeltaIndex]),2,pandas
"numpy.array(list[Union[numpy.datetime64, pandas._libs.tslibs.nattype.NaTType]])",2,pandas
"numpy.repeat(a=builtins.bool, repeats=int)",2,pandas
"numpy.array(list[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType]], copy=builtins.bool)",2,pandas
int == numpy.int32,2,pandas
"numpy.transpose(a=pandas.core.series.Series, axes=int)",2,pandas
"numpy.repeat(a=pandas.core.indexes.numeric.Int64Index, repeats=builtins.range)",2,pandas
numpy.int64 > numpy.int64,2,skimage
"numpy.asarray(a=pandas.core.arrays.timedeltas.TimedeltaArray, dtype=numpy.dtype)",2,pandas
"numpy.repeat(a=pandas.core.arrays.interval.IntervalArray, repeats=builtins.range)",2,pandas
"numpy.repeat(a=pandas.core.indexes.timedeltas.TimedeltaIndex, repeats=int)",2,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, pandas._libs.tslibs.timedeltas.Timedelta)",2,pandas
"numpy.ndim(a=list[Union[NoneType, str]])",2,pandas
"numpy.repeat(a=pandas.core.arrays.categorical.Categorical, repeats=builtins.range)",2,pandas
"numpy.array(pandas.core.indexes.period.PeriodIndex, dtype=str)",2,pandas
"numpy.array(list[Union[float, numpy.timedelta64]])",2,pandas
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, int, int, replace=builtins.bool)",2,skimage
numpy.unicode_,2,pandas
"numpy.ndarray[slibuiltins.boole[numpy.int64, numpy.int64, NoneType]] = builtins.bool",2,pandas
"numpy.ndarray[tuple[int, slituple[int, int]e[NoneType, NoneType, NoneType]]] = tuple[int, int]",2,skimage
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.ndarray, desired=int)",2,skimage
Type[numpy.float64] == Type[numpy.float64],2,pandas
"numpy.array(list[Union[float, int]], dtype=Type[builtins.float])",2,pandas
"numpy.array(list[int], dtype=Type[builtins.float])",2,pandas
"numpy.ndarray[slilist[tuple[int, str]]e[NoneType, NoneType, NoneType]] = list[tuple[int, str]]",2,pandas
"numpy.array(tuple[tuple[int, int], tuple[int, int], tuple[int, int], tuple[int, int]])",2,skimage
numpy.lib.stride_tricks,2,pandas
numpy.concatenate(list[pandas.core.indexes.datetimes.DatetimeIndex]),2,pandas
"numpy.ndim(a=list[Union[float, pandas._libs.tslibs.nattype.NaTType, str]])",2,pandas
numpy.finfo(dtype=Type[numpy.float64]),2,pandas
numpy.timedelta64 == numpy.timedelta64,2,pandas
numpy.ndarray[numpy.ndarray] = numpy.timedelta64,2,pandas
numpy.finfo(dtype=str),2,pandas
numpy.array(pandas.core.arrays.timedeltas.TimedeltaArray),2,pandas
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.int64, desired=int)",2,skimage
numpy.iinfo(int_type=Type[builtins.int]),2,pandas
"numpy.testing._private.utils.assert_array_almost_equal(x=tuple[numpy.float64, numpy.float64], y=tuple[float, float])",2,skimage
numpy.ndim(a=list),2,pandas
numpy.ndarray[int] = numpy.complex128,2,pandas
"numpy.testing._private.utils.assert_array_almost_equal(x=tuple[int, int, int, int], y=tuple[int, int, int, int])",2,skimage
"numpy.asarray(a=list[Union[NoneType, str]])",2,pandas
numpy.sum(a=pandas.core.arrays.timedeltas.TimedeltaArray),2,pandas
"numpy.append(arr=numpy.ndarray, values=str)",2,pandas
"numpy.asarray(a=list[NoneType], dtype=Type[builtins.object])",2,pandas
"numpy.array(list[Union[NoneType, int]])",2,pandas
"numpy.array(pandas.core.arrays.boolean.BooleanArray, dtype=str)",2,pandas
"numpy.array(list[Union[builtins.bool, pandas._libs.missing.NAType]], dtype=str)",2,pandas
numpy.int64 ** int,2,skimage
numpy.int64 > float,2,pandas
"numpy.lituple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]].index_tricks.MGridClass[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",2,skimage
numpy.ndarray[list[int]] = float,2,skimage
"numpy.array(tuple[numpy.ndarray, numpy.ndarray])",2,skimage
numpy.finfo(dtype=Type[numpy.float32]),2,pandas
numpy.ndarray[numpy.ndarray] = numpy.datetime64,2,pandas
"numpy.asarray(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]], dtype=Type[builtins.object])",2,pandas
"numpy.sum(a=list[numpy.ndarray], axis=int)",2,skimage
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint64, side=NoneType, sorter=str)",2,pandas
"numpy.arange(int, dtype=Type[numpy.int32])",2,pandas
numpy.ndarray &= numpy.ndarray,2,pandas
numpy.asarray(a=list[datetime.datetime]),2,pandas
"numpy.array(list[Union[int, pandas._libs.missing.NAType]], copy=builtins.bool)",2,pandas
"numpy.asarray(a=list[builtins.bool], dtype=Type[builtins.object])",2,pandas
"numpy.asarray(a=list[pandas._libs.tslibs.period.Period], dtype=NoneType)",2,pandas
numpy.ndarray[int] = datetime.date,2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, int, side=NoneType, sorter=str)",2,pandas
"numpy.mean(a=numpy.ndarray, dtype=Type[numpy.float64])",2,skimage
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint16, side=NoneType, sorter=str)",2,pandas
numpy.iinfo(int_type=Type[numpy.int8]),2,pandas
"numpy.asarray(a=pandas.core.arrays.string_.StringArray, dtype=Type[builtins.object])",2,pandas
numpy.iinfo(int_type=Type[numpy.int32]),2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int32, side=NoneType, sorter=str)",2,pandas
"numpy.array(list[Union[builtins.bool, float]], dtype=Type[builtins.object])",2,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int]]",2,pandas
"numpy.ndarray[slinumpy.ndarraye[int, NoneType, NoneType]] = numpy.ndarray",2,pandas
"numpy.array(pandas.core.arrays.datetimes.DatetimeArray, copy=builtins.bool)",2,pandas
"numpy.testing._private.utils.assert_equal(actual=builtins.bool, desired=builtins.bool, err_msg=str)",2,skimage
"numpy.array(numpy.ndarray, dtype=numpy.dtype)",2,pandas
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]], dtype=Type[builtins.object])",2,pandas
"numpy.asarray(a=pandas.core.arrays.timedeltas.TimedeltaArray, dtype=str)",2,pandas
numpy.finfo.eps,2,pandas
numpy.all(a=numpy.bool_),2,pandas
numpy.lib,2,pandas
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.int64, desired=numpy.int64)",2,skimage
numpy.ndarray[numpy.ndarray] = numpy.uint32,2,pandas
numpy.ndarray[numpy.ndarray] = numpy.uint64,2,pandas
numpy.ndarray[numpy.ndarray] = numpy.int16,2,pandas
"numpy.frombuffer(builtins.bytes, count=str, dtype=int)",2,pandas
"numpy.where(builtins.bool, builtins.bool, numpy.ndarray)",2,pandas
int ** numpy.ndarray,2,pandas
"numpy.ones(dtype=Type[numpy.int32], shape=int)",2,pandas
"numpy.frombuffer(builtins.bytes, count=numpy.dtype, dtype=int)",2,pandas
numpy.ndarray ** pandas.core.arrays.integer.IntegerArray,2,pandas
numpy.int16 == int,2,pandas
"numpy.ufunc.reduce(numpy.ufunc, list[numpy.ndarray])",2,skimage
numpy.ndarray.tobytes(numpy.recarray),2,pandas
"numpy.where(numpy.bool_, builtins.bool, numpy.ndarray)",2,pandas
numpy.ndarray[numpy.int64] = builtins.bool,2,skimage
numpy.ndarray * numpy.int64,2,skimage
"numpy.array(pandas.core.indexes.datetimes.DatetimeIndex, copy=builtins.bool)",2,pandas
"numpy.array(list[numpy.timedelta64], copy=builtins.bool)",2,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], list]]",2,pandas
numpy.sin(pandas.core.series.Series),2,pandas
numpy.cos(numpy.ndarray),2,pandas
"numpy.array(list[pandas._libs.missing.NAType], dtype=Type[builtins.object])",2,pandas
numpy.stack(arrays=list[numpy.ndarray]),2,skimage
numpy.lib.stride_tricks.as_strided,2,pandas
numpy.ndarray[numpy.ndarray] = numpy.uint16,2,pandas
"numpy.array(list[Union[builtins.bool, int]], copy=numpy.dtype, dtype=builtins.bool)",2,pandas
numpy.ndarray[numpy.ndarray] = numpy.uint8,2,pandas
"numpy.array(list[pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",2,pandas
"numpy.apply_along_axis(arr=int, axis=numpy.ndarray, func1d=builtins.function)",2,skimage
"numpy.array(list[Union[NoneType, str]], copy=builtins.bool)",2,pandas
"numpy.asarray(a=list[Union[NoneType, str]], dtype=Type[builtins.object])",2,pandas
"numpy.ndarray.mean(numpy.ndarray, int)",2,skimage
"numpy.arctan2(numpy.float64, numpy.float64)",2,skimage
"numpy.ndarray[slinumpy.ndarraye[int, NoneType, int]] = numpy.ndarray",2,skimage
"numpy.asanyarray(a=list[int], dtype=Type[numpy.int8])",2,pandas
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]], copy=builtins.bool)",2,pandas
"numpy.array(list[int], Type[builtins.float])",2,skimage
numpy.int,2,pandas
"numpy.array(list[builtins.bool], copy=builtins.bool)",2,pandas
numpy.ndarray[numpy.ndarray] = numpy.int32,2,pandas
"numpy.asarray(a=pandas.core.indexes.base.Index, dtype=Type[builtins.bool])",2,pandas
numpy.ndarray[tuple[numpy.ndarray]],2,pandas
numpy.str_ in pandas.core.indexes.base.Index,2,pandas
Type[numpy.int16] == Type[numpy.int16],2,pandas
pandas.core.series.Series > numpy.ndarray,2,pandas
Type[numpy.int16] == Type[numpy.int8],2,pandas
"numpy.ndarray[tuple[numpy.int64, slice[NoneType, NoneType, NoneType]]]",2,skimage
numpy.ndim(a=int),2,pandas
"numpy.argsort(a=pandas.core.arrays.categorical.Categorical, kind=str)",2,pandas
numpy.ndarray[numpy.ndarray] = numpy.int8,2,pandas
numpy.float64(x=numpy.float64),2,pandas
"numpy.asarray(a=list[Union[float, pandas._libs.tslibs.nattype.NaTType, str]])",2,pandas
numpy.float64(x=numpy.int64),2,pandas
"numpy.ones(shape=tuple[int, int, int])",2,pandas
"numpy.array(list[list[int]], dtype=numpy.dtype)",2,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, pandas._libs.tslibs.period.Period)",2,pandas
numpy.prod(a=numpy.ndarray),2,pandas
"numpy.zeros(numpy.int64, dtype=numpy.dtype)",2,skimage
numpy.prod(a=numpy.ndarray),2,skimage
numpy.ndarray == numpy.float64,2,pandas
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int, int])",2,pandas
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]]",2,pandas
numpy.bool_.item,2,pandas
"numpy.array_equal(a1=numpy.ndarray, a2=numpy.ndarray)",2,skimage
numpy.any(a=pandas.core.frame.DataFrame),2,pandas
numpy.transpose(a=numpy.ndarray),2,pandas
numpy.transpose(a=list[list[float]]),2,pandas
numpy.ndarray.shape = tuple[int],2,skimage
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int])",2,skimage
numpy.ndarray == numpy.int64,2,pandas
"numpy.ndarray[tuple[int, int]] = builtins.bool",2,pandas
"numpy.interp(fp=numpy.ndarray, x=numpy.ndarray, xp=numpy.ndarray)",2,pandas
numpy.ndarray[list] = float,2,pandas
"numpy.ndarray[slice[NoneType, numpy.int64, NoneType]]",2,pandas
str in numpy.ndarray,2,pandas
"numpy.cumsum(a=numpy.ndarray, axis=int)",2,pandas
"numpy.cumprod(a=numpy.ndarray, axis=int)",2,pandas
"numpy.array(builtins.bool, copy=NoneType, dtype=builtins.bool)",2,pandas
"numpy.repeat(a=pandas.tests.extension.json.array.JSONArray, repeats=list[int])",2,pandas
"numpy.repeat(a=pandas.tests.extension.json.array.JSONArray, repeats=int)",2,pandas
numpy.array(pandas.tests.extension.decimal.array.DecimalArray),2,pandas
"numpy.argsort(a=pandas.core.arrays.string_.StringArray, kind=str)",2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.arrays.string_.StringArray, side=NoneType, sorter=str)",2,pandas
"numpy.repeat(a=pandas.core.arrays.string_.StringArray, repeats=int)",2,pandas
"numpy.repeat(a=pandas.core.arrays.string_.StringArray, repeats=list[int])",2,pandas
numpy.array_split,2,pandas
numpy.ndarray[int] = decimal.Decimal,2,pandas
pandas.core.series.Series - numpy.int64,2,pandas
numpy.ndarray[list],2,pandas
"numpy.ndarray[slifloate[NoneType, NoneType, NoneType]] = float",2,pandas
"numpy.asarray(a=pandas.tests.extension.decimal.array.DecimalArray, dtype=NoneType)",2,pandas
"numpy.asarray(a=list[decimal.Decimal], dtype=NoneType)",2,pandas
"numpy.round_(a=pandas.core.frame.DataFrame, decimals=int)",2,pandas
"numpy.asarray(a=list[builtins.bool], dtype=Type[builtins.bool])",2,pandas
"numpy.sum(a=pandas.core.series.Series, axis=int)",2,pandas
"numpy.repeat(a=list[int], repeats=int)",2,pandas
numpy.asarray(a=list[decimal.Decimal]),2,pandas
"numpy.array(list[decimal.Decimal], dtype=str)",2,pandas
numpy.exp(pandas.core.series.Series),2,pandas
"numpy.lexsort(tuple[pandas.core.series.Series, pandas.core.series.Series])",2,pandas
numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState),2,pandas
"numpy.asarray(a=pandas.tests.extension.json.array.JSONArray, dtype=numpy.dtype)",2,pandas
"numpy.asarray(a=pandas.tests.extension.json.array.JSONArray, dtype=Type[builtins.object])",2,pandas
"numpy.ones(shape=tuple[int, int, int, int])",2,pandas
"numpy.ones(shape=tuple[int, int, int, int, int])",2,pandas
numpy.float32 > int,2,skimage
numpy.random.normal,2,pandas
numpy.ma.numpy.datetime64ore.MaskedArray[numpy.ndarray] = numpy.datetime64,2,pandas
numpy.ma.core.MaskedArray.harden_mask(self=numpy.ma.core.MaskedArray),2,pandas
"numpy.meshgrid(kwargs=dict, xi=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray])",2,skimage
"numpy.zeros(tuple[int, int, int, int], dtype=Type[numpy.float32])",2,skimage
numpy.uint64 == int,2,pandas
numpy.isinf(pandas.core.frame.DataFrame),2,pandas
"numpy.ndarray[slilist[tuple[int, float, str]]e[NoneType, NoneType, NoneType]] = list[tuple[int, float, str]]",2,pandas
numpy.core,2,pandas
numpy.int64 / numpy.int64,2,skimage
"numpy.array(numpy.ndarray, dtype=Type[numpy.float32])",2,pandas
numpy.iinfo(int_type=Type[numpy.uint64]),2,skimage
numpy.asarray(a=list[numpy.ndarray]),2,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2,pandas
numpy.ndarray /= numpy.float32,2,skimage
numpy.dtype != Type[numpy.float64],2,pandas
"numpy.asarray(a=list[pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",2,pandas
"numpy.asarray(a=list[pandas._libs.interval.Interval], dtype=Type[builtins.object])",2,pandas
"numpy.asarray(a=list[Union[NoneType, float]], dtype=Type[builtins.object])",2,pandas
"numpy.issubdtype(arg1=Type[numpy.int64], arg2=Type[numpy.floating])",2,skimage
numpy.ndim(a=float),2,pandas
"numpy.ndarray[slifloate[int, NoneType, NoneType]] = float",2,pandas
"numpy.zeros(tuple[int, int], dtype=str)",2,pandas
"numpy.tile(A=numpy.ndarray, reps=tuple[int, int])",2,pandas
"numpy.ma.intore.MaskedArray[tuple[int, int]] = int",2,pandas
"numpy.ma.extras.masked_all(dtype=Type[builtins.float], shape=tuple[int, int])",2,pandas
numpy.ma.core.MaskedArray.soften_mask(self=numpy.ma.core.MaskedArray),2,pandas
numpy.concatenate(list[pandas.core.indexes.numeric.Int64Index]),2,pandas
numpy.cov(m=numpy.ndarray),2,pandas
"numpy.asarray(a=pandas.core.indexes.numeric.Int64Index, dtype=Type[numpy.int64])",2,pandas
"numpy.ones(dtype=str, shape=tuple[int, int])",2,pandas
pandas.core.series.Series + numpy.float64,2,pandas
pandas.core.series.Series == numpy.dtype,2,pandas
"numpy.zeros(tuple[int, int, int])",2,pandas
"numpy.ones(dtype=Type[builtins.int], shape=tuple[int, int])",2,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.ndarray, side=str)",2,pandas
"numpy.array(list[int], dtype=Type[numpy.float64])",2,skimage
numpy.dtype == Type[numpy.uint8],2,pandas
numpy.ndarray[list[numpy.int64]],2,pandas
numpy.ma.floatore.MaskedArray[numpy.ndarray] = float,2,pandas
"numpy.array(list[Union[NoneType, int]], dtype=Type[builtins.object])",2,pandas
numpy.ndarray[int] = pandas._libs.tslibs.nattype.NaTType,2,pandas
numpy.array(pandas._libs.tslibs.nattype.NaTType),2,pandas
int == numpy.ndarray,2,pandas
"numpy.isscalar(element=tuple[float, float])",2,skimage
numpy.recarray[str],2,pandas
"numpy.ndarray[tuple[numpy.ndarray, int]] = numpy.ndarray",2,pandas
"numpy.ndarray.fill(numpy.ndarray, NoneType)",2,pandas
numpy.absolute(pandas.core.arrays.timedeltas.TimedeltaArray),2,pandas
"numpy.ndarray[tuple[numpy.ndarray, int]] = int",2,pandas
"numpy.array(pandas.core.arrays.string_.StringArray, copy=builtins.bool)",2,pandas
"numpy.array_split(ary=pandas.core.series.Series, indices_or_sections=int)",2,pandas
numpy.timedelta64 in pandas.core.indexes.category.CategoricalIndex,2,pandas
int == numpy.int16,2,pandas
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], slifloate[int, NoneType, NoneType]]] = float",2,pandas
"numpy.repeat(a=pandas.core.arrays.boolean.BooleanArray, repeats=int)",2,pandas
"numpy.repeat(a=pandas.core.arrays.boolean.BooleanArray, repeats=list[int])",2,pandas
"numpy.repeat(a=numpy.int64, repeats=int)",2,pandas
"numpy.asarray(a=pandas.core.arrays.integer.IntegerArray, dtype=NoneType)",2,pandas
"numpy.all(a=tuple[int, int])",2,pandas
"numpy.repeat(a=pandas.core.arrays.categorical.Categorical, repeats=int)",2,pandas
"numpy.repeat(a=pandas.core.arrays.categorical.Categorical, repeats=list[int])",2,pandas
float * numpy.uint8,2,skimage
"numpy.ndarray[tuple[slifloate[int, NoneType, NoneType]]] = float",2,pandas
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], slifloate[NoneType, int, NoneType]]] = float",2,pandas
"numpy.repeat(a=pandas.core.arrays.datetimes.DatetimeArray, repeats=list[int])",2,pandas
numpy.asarray(a=list[pandas._libs.tslibs.timedeltas.Timedelta]),2,pandas
pandas.core.indexes.numeric.Float64Index - numpy.ndarray,2,pandas
"numpy.percentile(a=numpy.ndarray, q=int)",2,skimage
"numpy.array(list[int], dtype=Type[numpy.uint16])",2,pandas
numpy.isscalar(element=numpy.float64),2,skimage
"numpy.array(list[int], dtype=Type[numpy.int16])",2,pandas
"numpy.array(list[tuple[int, str]], dtype=list[tuple[str, Union[Type[builtins.int], str]]])",2,pandas
"numpy.asarray(a=list[Union[float, str]], dtype=NoneType)",2,pandas
"numpy.array(list, dtype=Type[numpy.float64])",2,pandas
"numpy.array(list, dtype=Type[numpy.bool_])",2,pandas
numpy.ndim(a=list[numpy.int64]),2,pandas
pandas._linumpy.bool_s.missing.NAType + numpy.bool_,2,pandas
"numpy.ndarray.astype(numpy.ndarray, str, casting=str)",2,pandas
numpy.exp2(pandas.core.indexes.multi.MultiIndex),2,pandas
numpy.isinf(pandas.core.indexes.multi.MultiIndex),2,pandas
numpy.datetime64 in pandas.core.arrays.categorical.Categorical,2,pandas
numpy.complex64.dtype,2,pandas
numpy.bytes_.dtype,2,pandas
"numpy.array(list[datetime.datetime], copy=builtins.bool)",2,pandas
numpy.isnan(numpy.float32),2,pandas
numpy.timedelta64(numpy.timedelta64),2,pandas
numpy.dtype != Type[builtins.object],2,pandas
numpy.signbit(pandas.core.indexes.multi.MultiIndex),2,pandas
"numpy.asarray(a=pandas.core.arrays.boolean.BooleanArray, dtype=numpy.dtype)",2,pandas
"numpy.asarray(a=pandas.core.arrays.boolean.BooleanArray, dtype=Type[builtins.object])",2,pandas
"numpy.array(pandas.core.arrays.boolean.BooleanArray, copy=builtins.bool)",2,pandas
numpy.log(pandas.core.indexes.multi.MultiIndex),2,pandas
"numpy.ndarray[slice[NoneType, numpy.int64, NoneType]]",2,skimage
numpy.rad2deg(pandas.core.indexes.multi.MultiIndex),2,pandas
numpy.arctanh(pandas.core.indexes.multi.MultiIndex),2,pandas
numpy.arcsinh(pandas.core.indexes.multi.MultiIndex),2,pandas
numpy.cosh(pandas.core.indexes.multi.MultiIndex),2,pandas
numpy.arctan(pandas.core.indexes.multi.MultiIndex),2,pandas
numpy.arcsin(pandas.core.indexes.multi.MultiIndex),2,pandas
numpy.cos(pandas.core.indexes.multi.MultiIndex),2,pandas
numpy.sqrt(pandas.core.indexes.multi.MultiIndex),2,pandas
numpy.log10(pandas.core.indexes.multi.MultiIndex),2,pandas
numpy.isfinite,2,skimage
pandas.core.indexes.numpy.ndarrayase.Index == numpy.ndarray,2,pandas
numpy.array(pandas.core.arrays.string_.StringArray),2,pandas
int == numpy.uint16,2,pandas
"numpy.repeat(a=pandas.core.arrays.interval.IntervalArray, repeats=list[int])",2,pandas
numpy.ndarray[numpy.ndarray] = pandas.core.indexes.numeric.Int64Index,2,pandas
"numpy.ndarray[slipandas.core.indexes.numeric.Float64Indexe[NoneType, int, NoneType]] = pandas.core.indexes.numeric.Float64Index",2,pandas
"numpy.asarray(a=list[numpy.float64], dtype=NoneType)",2,pandas
"numpy.asarray(a=list[numpy.float64], dtype=numpy.dtype)",2,pandas
"numpy.array(pandas.core.arrays.numpy_.PandasArray, copy=builtins.bool)",2,pandas
"numpy.ufunc.reduce(numpy.ufunc, tuple[int])",2,skimage
"numpy.argsort(a=pandas.core.arrays.numpy_.PandasArray, kind=str)",2,pandas
numpy.array(list[numpy.bool_]),2,pandas
"numpy.amax(a=pandas.core.series.Series, axis=int)",2,pandas
"numpy.repeat(a=pandas.core.arrays.period.PeriodArray, repeats=list[int])",2,pandas
numpy.random.mtrand.RandomState.randint,2,pandas
"numpy.lituple[numpy.ndarray, builtins.bool].index_tricks.RClass[tuple[numpy.ndarray, builtins.bool]]",2,pandas
numpy.indices(dimensions=tuple[int]),2,skimage
"numpy.asarray(a=pandas.core.arrays.sparse.array.SparseArray, dtype=NoneType)",2,pandas
numpy.random.uniform,2,pandas
"numpy.ndarray[slifloate[int, NoneType, int]] = float",2,pandas
"numpy.repeat(a=pandas.core.arrays.sparse.array.SparseArray, repeats=int)",2,pandas
"numpy.repeat(a=pandas.core.arrays.sparse.array.SparseArray, repeats=list[int])",2,pandas
numpy.ndarray.flatten(numpy.ndarray),2,pandas
numpy.std,2,skimage
"numpy.tile(A=list[str], reps=int)",2,pandas
"numpy.tile(A=list[Union[float, int]], reps=int)",2,pandas
"numpy.percentile(a=pandas.core.frame.DataFrame, axis=int, q=int)",2,pandas
numpy.ndarray[numpy.ndarray] = pandas.core.indexes.numeric.Float64Index,2,pandas
numpy.concatenate(list[pandas.core.indexes.numeric.Float64Index]),2,pandas
"numpy.array(pandas.core.arrays.integer.IntegerArray, copy=builtins.bool)",2,pandas
int == numpy.uint64,2,pandas
numpy.int16 != numpy.int16,2,pandas
numpy.uint16 != numpy.uint16,2,pandas
numpy.uint64 != numpy.uint64,2,pandas
"numpy.generic.astype(numpy.int32, Type[numpy.int64])",2,skimage
numpy.argsort(a=pandas.core.indexes.multi.MultiIndex),2,pandas
"numpy.ndarray.argsort(numpy.ndarray, axis=int, kind=NoneType, order=NoneType)",2,pandas
"numpy.array(pandas.core.indexes.numeric.UInt64Index, copy=numpy.dtype, dtype=builtins.bool)",2,pandas
"numpy.array(pandas.core.indexes.numeric.Int64Index, copy=numpy.dtype, dtype=builtins.bool)",2,pandas
numpy.ndarray[int] = numpy.int8,2,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType]]] = numpy.ndarray",2,pandas
pandas.core.dtypes.dtypes.IntervalDtype == Type[numpy.object_],2,pandas
numpy.ndarray[int] = list[int],2,pandas
"numpy.percentile(a=pandas.core.series.Series, q=float)",2,pandas
pandas._linumpy.int16s.missing.NAType + numpy.int16,2,pandas
"numpy.multiply(numpy.ndarray, float)",2,skimage
pandas._linumpy.int64s.missing.NAType + numpy.int64,2,pandas
"numpy.add(numpy.ndarray, int)",2,skimage
pandas._linumpy.uint16s.missing.NAType + numpy.uint16,2,pandas
"numpy.empty(int, dtype=Type[builtins.object])",2,skimage
pandas._linumpy.uint64s.missing.NAType + numpy.uint64,2,pandas
"numpy.array(list[list[int]], Type[builtins.int])",2,pandas
"numpy.ndarray.view(numpy.ndarray, dtype=numpy.dtype)",2,pandas
"numpy.full(dtype=numpy.dtype, fill_value=builtins.bool, shape=tuple[int])",2,pandas
"numpy.array(list[Union[float, int]], copy=numpy.dtype, dtype=builtins.bool)",2,pandas
"numpy.empty(int, dtype=Type[numpy.uint8])",2,pandas
"numpy.arange(float, float, int)",2,pandas
"numpy.asarray(a=list[Union[NoneType, int]], dtype=Type[builtins.object])",2,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",2,skimage
"numpy.asarray(a=list[Union[builtins.bool, float]], dtype=Type[builtins.object])",2,pandas
"numpy.ndarray.reshape(numpy.ndarray, int)",2,pandas
"numpy.array(list, copy=numpy.dtype, dtype=builtins.bool)",2,pandas
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",2,skimage
numpy.isnan(int),2,pandas
"numpy.ndarray[tuple[int, slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",2,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], numpy.ndarray]] = numpy.ndarray",2,skimage
pandas.core.arrays.string_.StringDtype != numpy.dtype,2,pandas
numpy.uint64 in numpy.ndarray,2,pandas
numpy.ndarray &= pandas.core.series.Series,2,pandas
pandas.core.arrays.integer.Int64Dtype == numpy.dtype,2,pandas
"numpy.empty_like(numpy.ndarray, dtype=str)",2,pandas
"numpy.asarray(a=list[Union[NoneType, builtins.bool]], dtype=Type[builtins.object])",2,pandas
"numpy.empty(int, dtype=Type[numpy.float32])",2,pandas
"numpy.array(tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64], dtype=Type[numpy.float64])",2,skimage
"numpy.empty(int, dtype=Type[numpy.uint64])",2,pandas
numpy.uint64(),2,pandas
"numpy.unravel_index(numpy.int64, tuple[int, int, int, int])",2,skimage
"numpy.empty(int, dtype=Type[numpy.uint32])",2,pandas
numpy.uint32(),2,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, NoneType, NoneType]]] = numpy.ndarray",2,skimage
"numpy.asarray(a=tuple[int, int, int], dtype=Type[builtins.float])",2,skimage
"numpy.array(list[Union[NoneType, builtins.bool, datetime.datetime, float, int, str]], dtype=Type[builtins.object])",2,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",2,skimage
numpy.isscalar(element=dask.array.core.Array),2,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2,skimage
"numpy.asarray(a=list[Union[float, int]], dtype=Type[builtins.object])",2,pandas
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.float64])",2,skimage
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2,skimage
"numpy.asarray(a=list[int], dtype=numpy.dtype)",2,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, NoneType, NoneType]]] = numpy.ndarray",2,skimage
"numpy.array(list[Union[datetime.datetime, int]], dtype=Type[builtins.object])",2,pandas
str + numpy.ndarray,2,pandas
"numpy.tri(M=int, N=int, k=int)",2,skimage
numpy.zeros(list[int]),2,skimage
"numpy.array(list[Union[float, str]], dtype=Type[numpy.object_])",2,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",2,skimage
"numpy.lituple[slice[NoneType, int, builtins.complex], slice[NoneType, int, builtins.complex]].index_tricks.MGridClass[tuple[slice[NoneType, int, builtins.complex], slice[NoneType, int, builtins.complex]]]",2,skimage
"numpy.testing._private.utils.assert_allclose(actual=numpy.float64, desired=numpy.float64)",2,skimage
"numpy.putmask(numpy.ndarray, numpy.ndarray, str)",2,pandas
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",2,skimage
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",2,skimage
numpy.bool_(),2,pandas
"numpy.ndarray[tuple[int, slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",2,skimage
"numpy.array(numpy.ndarray, copy=Type[builtins.object], dtype=builtins.bool)",2,pandas
"numpy.where(numpy.ndarray, str, numpy.ndarray)",2,pandas
"numpy.empty(int, dtype=Type[numpy.uint16])",2,pandas
numpy.uint8(),2,pandas
"numpy.multiply(numpy.ndarray, int, dtype=numpy.ndarray, out=numpy.dtype)",2,skimage
numpy.complex128 /= numpy.float64,2,skimage
numpy.array(pandas._libs.tslibs.timestamps.Timestamp),2,pandas
"numpy.generic.astype(numpy.datetime64, Type[numpy.int64])",2,pandas
numpy.datetime64.astype,2,pandas
numpy.ndarray == pandas.core.arrays.datetimes.DatetimeArray,2,pandas
pandas.core.arrays.datetimes.DatetimeArray > numpy.ndarray,2,pandas
pandas.core.arrays.datetimes.DatetimeArray != numpy.ndarray,2,pandas
"numpy.ascontiguousarray(a=numpy.ndarray, dtype=Type[numpy.int64])",2,skimage
numpy.ndarray > pandas.core.arrays.datetimes.DatetimeArray,2,pandas
numpy.ndim(a=list[pandas._libs.tslibs.timedeltas.Timedelta]),2,pandas
"numpy.array(list[Union[int, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]])",2,pandas
"numpy.round_(a=numpy.ndarray, decimals=int)",2,pandas
"numpy.asarray(a=pandas.core.series.Series, dtype=NoneType)",2,pandas
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]], dtype=Type[builtins.object])",2,pandas
numpy.asanyarray,2,skimage
numpy.fabs(numpy.ndarray),2,pandas
"numpy.asanyarray(a=numpy.ndarray, dtype=Type[builtins.bool])",2,skimage
numpy.float64 - pandas.core.series.Series,2,pandas
"numpy.ndim(a=list[Union[pandas._libs.tslibs.nattype.NaTType, str]])",2,pandas
"numpy.indices(dimensions=tuple[int, int])",2,skimage
pandas.core.indexes.datetimes.DatetimeIndex != numpy.ndarray,2,pandas
numpy.ndarray == pandas.core.indexes.datetimes.DatetimeIndex,2,pandas
"numpy.lituple[slice[int, int, builtins.complex], slice[int, int, builtins.complex], slice[int, int, builtins.complex]].index_tricks.MGridClass[tuple[slice[int, int, builtins.complex], slice[int, int, builtins.complex], slice[int, int, builtins.complex]]]",2,skimage
numpy.ndarray == pandas.core.series.Series,2,pandas
"numpy.full(fill_value=builtins.bool, shape=tuple[int, int])",2,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2,skimage
"numpy.array(list[Union[float, str]])",2,pandas
"numpy.array(numpy.ndarray, dtype=Type[builtins.bool])",2,skimage
"numpy.empty(int, dtype=Type[numpy.object_])",2,pandas
"numpy.empty(int, dtype=Type[builtins.bool])",2,pandas
numpy.arange(numpy.float64),2,skimage
numpy.min_scalar_type(builtins.complex),2,pandas
"numpy.array(tuple[numpy.int64, numpy.int64], dtype=Type[numpy.float64])",2,skimage
"numpy.ndarray[tuple[int, slifloate[NoneType, NoneType, NoneType]]] = float",2,pandas
"numpy.ndarray.take(numpy.ndarray, list[int], axis=numpy.ndarray, out=int)",2,pandas
numpy.complex128 * numpy.complex128,2,skimage
numpy.int16(),2,pandas
numpy.int8(),2,pandas
"numpy.amax(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple[int, int])",2,skimage
"numpy.array(list[int], dtype=Type[builtins.bool])",2,pandas
"numpy.fmax(numpy.ndarray, float)",2,skimage
"numpy.array(numpy.ndarray, dtype=Type[builtins.float])",2,skimage
"numpy.ones(dtype=Type[builtins.bool], shape=tuple[int, int, int, int])",2,skimage
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, tuple[int, int, int])",2,pandas
numpy.int64 in numpy.ndarray,2,skimage
"numpy.ndarray[tuple[slice[numpy.int64, numpy.int64, NoneType], slice[numpy.int64, numpy.int64, NoneType], slice[numpy.int64, numpy.int64, NoneType]]]",2,skimage
"numpy.ndarray[tuple[list[int], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], list[int], slice[NoneType, NoneType, NoneType]]]",2,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], list[int]]]",2,pandas
numpy.timedelta64 * int,2,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType]]]",2,skimage
numpy.vectorize,2,dask.array
numpy.ravel(a=numpy.matrix),2,skimage
"numpy.ndarray[tuple[slifloate[int, int, NoneType], slifloate[int, int, NoneType], slifloate[int, int, NoneType]]] = float",2,skimage
numpy.int64 / numpy.ndarray,2,pandas
"numpy.repeat(a=numpy.ndarray, repeats=numpy.float64)",2,pandas
"numpy.tile(A=numpy.ndarray, reps=numpy.int64)",2,pandas
numpy.array(list[str]),2,dask.array
numpy.float64 == str,2,pandas
numpy.int16 - numpy.int16,2,skimage
"numpy.array(str, copy=NoneType, dtype=builtins.bool)",2,pandas
"numpy.resize(a=list[int], new_shape=tuple[int])",2,matplotlib
numpy.bool_.ndim,2,pandas
numpy.maximum,2,skimage
numpy.sqrt,2,skimage
numpy.split,2,pandas
numpy.argsort(a=numpy.flatiter),2,skimage
"numpy.allclose(a=numpy.float64, b=int)",2,skimage
"numpy.prod(a=tuple[int, int])",2,skimage
numpy.int64.ndim,2,pandas
"numpy.flatiter[int] = tuple[str, int]",2,dask.array
numpy.float64 == NoneType,2,pandas
"numpy.empty(list[int], dtype=str)",2,dask.array
"numpy.sqrt(numpy.ndarray, out=numpy.ndarray)",2,skimage
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=tuple[int, int])",2,skimage
numpy.int64 / numpy.float64,2,pandas
numpy.median(a=numpy.ndarray),2,skimage
numpy.cumproduct(args=tuple[numpy.ndarray]),2,pandas
numpy.ndarray[list[int]] = builtins.bool,2,pandas
numpy.tri(N=int),2,skimage
"numpy.ndarray.sum(numpy.ndarray, axis=Type[numpy.float64], dtype=int)",2,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",2,skimage
"numpy.ndarray.astype(numpy.ndarray, numpy.dtype, copy=builtins.bool)",2,dask.array
numpy.float32 == int,2,skimage
numpy.float32 - numpy.float32,2,skimage
numpy.float64 - numpy.ndarray,2,pandas
"numpy.ndarray.sum(numpy.ndarray, axis=Type[numpy.float64], dtype=NoneType)",2,pandas
numpy.sqrt(numpy.float64),2,pandas
"numpy.ndarray.sum(numpy.ndarray, int)",2,pandas
"numpy.allclose(a=tuple[int, float], b=tuple[numpy.int64, float], equal_nan=builtins.bool)",2,dask.array
numpy.float16 - numpy.float16,2,skimage
numpy.int64 + numpy.ndarray,2,skimage
"numpy.int64 in tuple[int, int]",2,skimage
numpy.ndarray[numpy.bool_] = float,2,pandas
"numpy.zeros(tuple[int, int])",2,dask.array
"numpy.float64 in tuple[int, int, int]",2,skimage
"numpy.zeros(int, dtype=numpy.dtype)",2,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.bool], copy=builtins.bool)",2,pandas
"numpy.int64 in tuple[int, int, int]",2,skimage
numpy.int16 >= int,2,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType]]]",2,dask.array
numpy.float64 ** float,2,dask.array
numpy.zeros(int),2,dask.array
numpy.float64 ** int,2,pandas
numpy.can_cast,2,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",2,dask.array
"numpy.random.mtrand.RandomState.standard_normal(numpy.random.mtrand.RandomState, tuple[int, int, int])",2,skimage
numpy.matmul,2,dask.array
numpy.linalg._umath_linalg,2,dask.array
numpy.inv(numpy.ndarray),2,dask.array
"numpy.zeros(list[int], dtype=numpy.dtype)",2,skimage
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType]]]",2,dask.array
numpy.ndarray + numpy.int64,2,skimage
"numpy.ndarray[tuple[numpy.int64, int]]",2,skimage
numpy.ndarray.ravel,2,dask.array
numpy.dtype.hasobject,2,dask.array
numpy.nanprod,2,pandas
"numpy.cov(m=numpy.ndarray, y=numpy.ndarray)",2,pandas
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray)",2,pandas
"numpy.allclose(a=float, b=float)",2,pandas
numpy.ndarray *= numpy.uint8,2,skimage
"numpy.ndarray[slinumpy.ndarraye[NoneType, NoneType, int]] = numpy.ndarray",2,pandas
"numpy.random.mtrand.RandomState.uniform(numpy.random.mtrand.RandomState, size=int)",2,pandas
numpy.uint8 in list[int],2,skimage
numpy.random.mtrand.RandomState.beta,2,pandas
"numpy.random.mtrand.RandomState.beta(numpy.random.mtrand.RandomState, float, float, size=int)",2,pandas
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray, equal_nan=builtins.bool)",2,dask.array
numpy.nansum(a=pandas.core.series.Series),2,pandas
numpy.nanmean(a=pandas.core.series.Series),2,pandas
numpy.iinfo(int_type=Type[numpy.int8]),2,skimage
numpy.ufunc.signature,2,dask.array
"numpy.amax(a=numpy.ndarray, axis=int)",2,pandas
"numpy.ascontiguousarray(a=numpy.ndarray, dtype=Type[numpy.float64])",2,skimage
numpy.float128 * numpy.float64,2,pandas
"numpy.unravel_index(numpy.int64, tuple[int, int, int])",2,skimage
numpy.float32(numpy.int64),2,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.signedinteger])",2,skimage
numpy.ndarray.astype,2,dask.array
"numpy.ascontiguousarray(a=list[int], dtype=Type[numpy.float64])",2,skimage
"numpy.dtype in tuple[Type[numpy.uint8], Type[numpy.int8]]",2,skimage
numpy.dtype(Type[numpy.float128]),2,pandas
numpy.signedinteger,2,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.float16])",2,skimage
numpy.float128 - numpy.float128,2,pandas
"numpy.transpose(a=numpy.ndarray, axes=tuple[int, int])",2,dask.array
"numpy.amin(a=numpy.ndarray, axis=NoneType)",2,pandas
"numpy.median(a=numpy.ndarray, axis=int)",2,pandas
"numpy.median(a=numpy.ndarray, axis=NoneType)",2,pandas
"numpy.round_(a=numpy.ndarray, decimals=int)",2,skimage
numpy.dtype == Type[builtins.float],2,skimage
"numpy.var(a=numpy.ndarray, axis=int, ddof=int)",2,pandas
"numpy.var(a=numpy.ndarray, axis=NoneType, ddof=int)",2,pandas
numpy.testing.assert_almost_equal,2,skimage
"numpy.std(a=numpy.ndarray, axis=int, ddof=int)",2,pandas
"numpy.std(a=numpy.ndarray, axis=NoneType, ddof=int)",2,pandas
numpy.std(a=numpy.ndarray),2,pandas
"numpy.ones(dtype=str, shape=tuple[int, int])",2,skimage
numpy.ndarray == pandas.core.frame.DataFrame,2,pandas
"numpy.ndarray[tuple[int, slinumpy.ndarraye[numpy.int64, numpy.int64, NoneType]]] = numpy.ndarray",2,skimage
numpy.timedelta64(datetime.timedelta),2,pandas
numpy.ndarray + pandas.core.arrays.period.PeriodArray,2,pandas
"numpy.array(list[int], dtype=int, ndmin=Type[numpy.int64])",2,pandas
"numpy.array(list[int], dtype=int, ndmin=Type[numpy.int16])",2,pandas
pandas.core.arrays.period.PeriodArray - numpy.datetime64,2,pandas
"numpy.array(list[int], dtype=int, ndmin=Type[numpy.float128])",2,pandas
numpy.int64 * int,2,pandas
-numpy.int64,2,pandas
"numpy.array(list[int], dtype=int, ndmin=Type[numpy.float64])",2,pandas
numpy.all(a=builtins.bool),2,pandas
"numpy.array(list[int], dtype=int, ndmin=Type[numpy.float32])",2,pandas
numpy.ptp(a=numpy.ndarray),2,skimage
numpy.timedelta64 - pandas.core.indexes.period.PeriodIndex,2,pandas
"numpy.array(list[int], dtype=int, ndmin=Type[numpy.float16])",2,pandas
pandas.core.arrays.period.PeriodArray + numpy.timedelta64,2,pandas
"numpy.full(dtype=Type[numpy.int32], fill_value=int, shape=int)",2,skimage
"numpy.lituple[numpy.ndarray, numpy.ndarray].index_tricks.RClass[tuple[numpy.ndarray, numpy.ndarray]]",2,pandas
numpy.std(a=pandas.core.series.Series),2,pandas
"numpy.ndarray[tuple[int, slinumpy.ndarraye[numpy.int64, numpy.int64, NoneType], slinumpy.ndarraye[numpy.int64, numpy.int64, NoneType]]] = numpy.ndarray",2,skimage
numpy.ndarray.tolist,2,pandas
pandas.core.arrays.timedeltas.TimedeltaArray >= numpy.ndarray,2,pandas
int * numpy.float32,2,skimage
"numpy.issubdtype(arg1=Type[builtins.float], arg2=Type[numpy.floating])",2,skimage
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, str]], dtype=Type[builtins.object])",2,pandas
numpy.float64 > numpy.uint8,2,skimage
numpy.array(list[pandas.tseries.offsets.QuarterEnd]),2,pandas
numpy.size,2,pandas
pandas.core.indexes.period.PeriodIndex >= numpy.ndarray,2,pandas
numpy.loadtxt(fname=str),2,pandas
numpy.ndarray ** numpy.ndarray,2,pandas
numpy.ndarray + numpy.float64,2,pandas
"numpy.ndarray[tuple[slifloate[NoneType, int, NoneType]]] = float",2,pandas
numpy.ndarray[str] = pandas.core.indexes.numeric.Int64Index,2,pandas
numpy.ndarray - pandas.core.indexes.base.Index,2,pandas
"numpy.array(list[Union[int, str]])",2,pandas
numpy.array(list[decimal.Decimal]),2,pandas
"numpy.array(list[datetime.date], dtype=Type[builtins.object])",2,pandas
pandas.core.indexes.period.PeriodIndex != numpy.ndarray,2,pandas
Type[numpy.int64].__name__,2,pandas
numpy.ndarray >= numpy.uint8,2,skimage
numpy.finfo.resolution,2,skimage
pandas.core.arrays.period.PeriodArray != numpy.ndarray,2,pandas
numpy.uint8(numpy.float64),2,skimage
pandas.core.arrays.period.PeriodArray > numpy.ndarray,2,pandas
numpy.ndarray >= numpy.float64,2,skimage
pandas.core.frame.DataFrame >= numpy.ndarray,2,pandas
pandas.tseries.offsets.MonthEnd * numpy.int64,2,pandas
numpy.array(list[pandas.tseries.offsets.MonthEnd]),2,pandas
pandas.tseries.offsets.Day * numpy.int64,2,pandas
numpy.array(list[pandas.tseries.offsets.Day]),2,pandas
"numpy.ndarray[tuple[sliinte[NoneType, int, NoneType]]] = int",2,pandas
numpy.datetime64 + pandas.core.indexes.timedeltas.TimedeltaIndex,2,pandas
"numpy.asarray(a=list[Union[pandas._libs.tslibs.nattype.NaTType, str]])",2,pandas
pandas.core.arrays.timedeltas.TimedeltaArray + numpy.datetime64,2,pandas
numpy.ndarray[tuple[numpy.ndarray]] = numpy.ndarray,2,skimage
numpy.ndarray[str] = builtins.bool,2,pandas
pandas.core.arrays.timedeltas.TimedeltaArray * numpy.int64,2,pandas
"numpy.zeros(int, dtype=list[tuple[str, Union[Type[Union[builtins.bool, builtins.int]], str]]])",2,pandas
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]])",2,pandas
pandas._linumpy.float32s.tslinumpy.float32s.timedeltas.Timedelta / numpy.float32,2,pandas
pandas._linumpy.float32s.tslinumpy.float32s.nattype.NaTType / numpy.float32,2,pandas
pandas._linumpy.uint8s.tslinumpy.uint8s.timedeltas.Timedelta / numpy.uint8,2,pandas
pandas._linumpy.uint8s.tslinumpy.uint8s.nattype.NaTType / numpy.uint8,2,pandas
pandas._linumpy.uint16s.tslinumpy.uint16s.timedeltas.Timedelta / numpy.uint16,2,pandas
pandas._linumpy.uint16s.tslinumpy.uint16s.nattype.NaTType / numpy.uint16,2,pandas
pandas._linumpy.uint32s.tslinumpy.uint32s.timedeltas.Timedelta / numpy.uint32,2,pandas
pandas._linumpy.uint32s.tslinumpy.uint32s.nattype.NaTType / numpy.uint32,2,pandas
pandas._linumpy.uint64s.tslinumpy.uint64s.timedeltas.Timedelta / numpy.uint64,2,pandas
pandas._linumpy.uint64s.tslinumpy.uint64s.nattype.NaTType / numpy.uint64,2,pandas
pandas._linumpy.int8s.tslinumpy.int8s.timedeltas.Timedelta / numpy.int8,2,pandas
pandas._linumpy.int8s.tslinumpy.int8s.nattype.NaTType / numpy.int8,2,pandas
pandas._linumpy.int16s.tslinumpy.int16s.timedeltas.Timedelta / numpy.int16,2,pandas
pandas._linumpy.int16s.tslinumpy.int16s.nattype.NaTType / numpy.int16,2,pandas
pandas._linumpy.int32s.tslinumpy.int32s.timedeltas.Timedelta / numpy.int32,2,pandas
pandas._linumpy.int32s.tslinumpy.int32s.nattype.NaTType / numpy.int32,2,pandas
pandas._linumpy.int64s.tslinumpy.int64s.timedeltas.Timedelta / numpy.int64,2,pandas
pandas._linumpy.int64s.tslinumpy.int64s.nattype.NaTType / numpy.int64,2,pandas
pandas.core.indexes.timedeltas.TimedeltaIndex * numpy.int64,2,pandas
pandas.core.arrays.timedeltas.TimedeltaArray // numpy.timedelta64,2,pandas
pandas.core.series.Series // numpy.timedelta64,2,pandas
pandas.core.indexes.timedeltas.TimedeltaIndex * numpy.ndarray,2,pandas
numpy.ndarray + pandas.core.indexes.timedeltas.TimedeltaIndex,2,pandas
"numpy.testing._private.utils.assert_equal(actual=numpy.dtype, desired=Type[numpy.uint8])",2,skimage
"numpy.testing._private.utils.assert_equal(actual=numpy.dtype, desired=Type[builtins.bool])",2,skimage
"numpy.empty_like(numpy.ndarray, dtype=Type[numpy.uint8])",2,skimage
pandas.core.indexes.timedeltas.TimedeltaIndex + numpy.timedelta64,2,pandas
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, int, int, size=int)",2,pandas
numpy.int64 + numpy.float64,2,pandas
numpy.ndarray * pandas.tseries.offsets.Minute,2,pandas
numpy.float64 >= numpy.int64,2,pandas
numpy.ndarray * numpy.timedelta64,2,pandas
"numpy.empty(tuple[int, int, int], dtype=Type[builtins.bool])",2,skimage
pandas.core.indexes.timedeltas.TimedeltaIndex // numpy.timedelta64,2,pandas
"numpy.ones(dtype=Type[numpy.uint8], shape=tuple[int, int, int])",2,skimage
"numpy.zeros(tuple[int, int, int], Type[builtins.bool])",2,skimage
numpy.ma.core.MaskedArray.mask,2,pandas
numpy.timedelta64 / pandas.core.arrays.timedeltas.TimedeltaArray,2,pandas
"numpy.ndarray[tuple[list[int], list[int]]]",2,pandas
numpy.asarray(a=builtins.range),2,skimage
"numpy.asarray(a=list[Union[float, int]], dtype=NoneType)",2,pandas
"numpy.empty(tuple[int, int], dtype=Type[builtins.bool])",2,skimage
numpy.nanmax,2,pandas
numpy.nanmin,2,pandas
float + numpy.ndarray,2,pandas
"numpy.array(list, dtype=numpy.dtype)",2,pandas
"numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray, dtype=Type[numpy.int64])",2,pandas
numpy.sqrt(pandas.core.indexes.numeric.Int64Index),2,pandas
numpy.ndim(a=pandas._libs.tslibs.timedeltas.Timedelta),2,pandas
"numpy.array(list[pandas._libs.tslibs.timestamps.Timestamp], dtype=str)",2,pandas
numpy.ravel_multi_index,2,skimage
numpy.dtype(int),2,pandas
pandas.core.indexes.datetimes.DatetimeIndex -= numpy.ndarray,2,pandas
pandas.core.indexes.datetimes.DatetimeIndex += numpy.ndarray,2,pandas
builtins.builtin_function_or_methoduiltins.builtins.builtin_function_or_methoduiltin_function_or_method == builtins.builtin_function_or_method,2,pandas
pandas.core.series.Series + numpy.datetime64,2,pandas
"numpy.ufunc.accumulate(numpy.ufunc, numpy.ndarray)",2,pandas
"numpy.ndim(a=list[Union[float, str]])",2,pandas
numpy.array(list[list[pandas.tseries.offsets.Day]]),2,pandas
numpy.ndim(a=numpy.int64),2,pandas
numpy.asarray(a=numpy.bool_),2,pandas
numpy.asarray(a=pandas._libs.missing.NAType),2,pandas
pandas.core.dtypes.dtypes.DatetimeTZDtype == Type[numpy.object_],2,pandas
"numpy.empty(tuple[int], dtype=numpy.dtype)",2,pandas
numpy.ma.datetime.datetimeore.MaskedArray[int] = datetime.datetime,2,pandas
numpy.flagsobj.c_contiguous,2,skimage
numpy.ma.intore.MaskedArray[int] = int,2,pandas
numpy.ma.floatore.MaskedArray[int] = float,2,pandas
numpy.ma.core.MaskedArray.ndim,2,pandas
numpy.ndarray * pandas.core.indexes.numeric.Int64Index,2,pandas
"numpy.zeros(tuple[int, int], dtype=Type[numpy.int64])",2,skimage
"numpy.array(list[Union[NoneType, builtins.bool, float]])",2,pandas
numpy.ndarray[int] = numpy.datetime64,2,pandas
numpy.ndim(a=list[pandas._libs.tslibs.nattype.NaTType]),2,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, tuple[numpy.float64])",2,pandas
"numpy.array(list[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]])",2,pandas
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=int)",2,skimage
"numpy.array(list[list[int]], dtype=Type[numpy.bool_])",2,skimage
"numpy.array(list[list[int]], Type[numpy.bool_])",2,skimage
"numpy.array(list[list[int]], dtype=Type[builtins.int])",2,skimage
-numpy.timedelta64,2,pandas
pandas.core.indexes.datetimes.DatetimeIndex - numpy.timedelta64,2,pandas
pandas.core.frame.DataFrame -= numpy.timedelta64,2,pandas
pandas.core.series.Series -= numpy.timedelta64,2,pandas
numpy.timedelta64 + pandas.core.indexes.datetimes.DatetimeIndex,2,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, tuple[float])",2,pandas
"numpy.array(list[Union[pandas.tseries.offsets.Day, pandas.tseries.offsets.MonthEnd]])",2,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, list[numpy.float64])",2,pandas
"numpy.array(tuple[int, int, int, int, int])",2,skimage
"numpy.putmask(numpy.ndarray, numpy.ndarray, list[float])",2,pandas
"numpy.ndarray[tuple[int, int, int, int]]",2,skimage
pandas.core.series.Series - numpy.datetime64,2,pandas
"numpy.zeros(tuple[int], dtype=Type[numpy.int64])",2,pandas
"numpy.array(list[pandas._libs.tslibs.nattype.NaTType], copy=builtins.bool)",2,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, int]]]",2,skimage
"numpy.arange(float, dtype=str)",2,pandas
"numpy.add(pandas.core.series.Series, numpy.ndarray)",2,pandas
pandas.core.indexes.numeric.UInt64Index * numpy.ndarray,2,pandas
pandas.core.indexes.numeric.Float64Index * numpy.ndarray,2,pandas
pandas.core.indexes.range.RangeIndex / numpy.ndarray,2,pandas
float - numpy.ndarray,2,pandas
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timestamps.Timestamp + numpy.ndarray,2,pandas
numpy.datetime64 + pandas.core.indexes.numeric.Int64Index,2,pandas
numpy.timedelta64 - pandas._libs.tslibs.timedeltas.Timedelta,2,pandas
"numpy.array(int, dtype=int, ndmin=str)",2,skimage
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta // numpy.timedelta64,2,pandas
numpy.array(numpy.uint64),2,pandas
numpy.float64 ** pandas._libs.missing.NAType,2,pandas
"numpy.ndarray[slilist[decimal.Decimal]e[NoneType, NoneType, NoneType]] = list[decimal.Decimal]",2,pandas
"numpy.array(tuple[int, int], dtype=int, ndmin=str)",2,skimage
"numpy.ndarray - tuple[int, int]",2,skimage
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=float)",2,pandas
numpy.ndarray + pandas._libs.tslibs.timedeltas.Timedelta,2,pandas
"numpy.empty(tuple[int, int], dtype=Type[builtins.float])",2,pandas
numpy.int16(pandas.core.series.Series),2,pandas
"numpy.array(list[list[int]], dtype=Type[numpy.float32])",2,skimage
numpy.uint64(pandas.core.series.Series),2,pandas
numpy.zeros(numpy.ndarray),2,skimage
numpy.uint16(pandas.core.series.Series),2,pandas
numpy.sign(numpy.ndarray),2,skimage
numpy.float64(x=pandas.core.series.Series),2,pandas
numpy.sin(numpy.ndarray),2,pandas
"numpy.array(numpy.ndarray, copy=Type[numpy.float64], dtype=builtins.bool)",2,pandas
"numpy.array(list[Union[numpy.timedelta64, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]])",2,pandas
numpy.timedelta64 / pandas._libs.tslibs.timedeltas.Timedelta,2,pandas
pandas.core.indexes.range.RangeIndex // numpy.ndarray,2,pandas
"numpy.ndarray[tuple[sliinte[int, int, NoneType], int, int]] = int",2,skimage
numpy.ndarray // numpy.ndarray,2,pandas
numpy.unique(ar=pandas.core.series.Series),2,pandas
numpy.ndarray // pandas.core.series.Series,2,pandas
pandas.core.indexes.numeric.Int64Index / numpy.ndarray,2,pandas
pandas.core.series.Series // numpy.ndarray,2,pandas
pandas.core.indexes.numeric.UInt64Index / numpy.ndarray,2,pandas
pandas.core.indexes.numeric.UInt64Index // numpy.ndarray,2,pandas
pandas.core.indexes.numeric.Float64Index / numpy.ndarray,2,pandas
numpy.datetime64.view,2,pandas
pandas.core.indexes.numeric.Float64Index // numpy.ndarray,2,pandas
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta * numpy.ndarray,2,pandas
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta // numpy.ndarray,2,pandas
pandas.core.frame.DataFrame * numpy.timedelta64,2,pandas
numpy.datetime64(datetime.datetime),2,pandas
"numpy.testing._private.utils.assert_equal(actual=tuple[numpy.ndarray, numpy.ndarray], desired=tuple[numpy.ndarray, numpy.ndarray])",2,skimage
numpy.dtype == Type[numpy.float16],2,skimage
"numpy.array(list[list[builtins.bool]], dtype=Type[builtins.bool])",2,pandas
"numpy.allclose(a=list[numpy.float64], b=list[numpy.float64])",2,skimage
numpy.timedelta64 / pandas.core.indexes.numeric.Int64Index,2,pandas
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta % numpy.timedelta64,2,pandas
numpy.timedelta64 + pandas.core.indexes.numeric.Int64Index,2,pandas
numpy.timedelta64 - pandas.core.indexes.numeric.Int64Index,2,pandas
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int, int, int, int, int])",2,skimage
"numpy.array(list[list[Union[int, str]]], dtype=Type[builtins.object])",2,pandas
"numpy.einsum(operands=tuple[str, numpy.ndarray])",2,xarray
"numpy.amax(a=numpy.ndarray, axis=tuple, keepdims=builtins.bool)",2,dask.array
"numpy.ldexp(int, numpy.ndarray)",2,dask.array
numpy.ndarray % int,2,xarray
numpy.ndim(a=numpy.float64),2,matplotlib
numpy.isscalar(element=int),2,matplotlib
"numpy.all(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",2,dask.array
Type[numpy.int64] in dict,2,dask.array
"numpy.asarray(a=float, dtype=Type[numpy.float64])",2,xarray
numpy.dtype != Type[numpy.int64],2,dask.array
"numpy.einsum(operands=tuple[str, numpy.ndarray])",2,dask.array
numpy.iterable(y=datetime.datetime),2,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType]]]",2,dask.array
"numpy.lituple[numpy.ndarray, numpy.ndarray, numpy.ndarray].index_tricks.RClass[tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]]",2,matplotlib
numpy.any,2,dask.array
"numpy.hypot(numpy.ndarray, int)",2,dask.array
numpy.histogram,2,matplotlib
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int, int)",2,matplotlib
numpy.ndarray[int] = float,2,dask.array
"numpy.take_along_axis(arr=numpy.ndarray, axis=int, indices=numpy.ndarray)",2,dask.array
"numpy.amin(a=numpy.ndarray, axis=tuple, keepdims=builtins.bool)",2,dask.array
"numpy.concatenate(list[numpy.ndarray], int)",2,dask.array
numpy.iterable(y=list[decimal.Decimal]),2,matplotlib
"numpy.generic.astype(numpy.datetime64, Type[numpy.int64])",2,matplotlib
numpy.float64 - int,2,xarray
numpy.float64 >= float,2,matplotlib
"numpy.less(numpy.ndarray, int)",2,dask.array
numpy.ndarray.nonzero(numpy.ndarray),2,xarray
str != numpy.dtype,2,dask.array
"numpy.std(a=numpy.ndarray, dtype=str)",2,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], numpy.ndarray, slice[int, int, int]]]",2,xarray
"numpy.einsum(operands=tuple[str, numpy.ndarray, numpy.ndarray, numpy.ndarray])",2,dask.array
"numpy.einsum(operands=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, str])",2,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, size=list[int])",2,xarray
"numpy.convolve(a=numpy.ndarray, mode=str, v=numpy.ndarray)",2,matplotlib
"numpy.full_like(a=list[float], fill_value=float)",2,matplotlib
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=float, pad_width=tuple[tuple[int, int], tuple[int, int], tuple[int, int]])",2,xarray
numpy.invert(dask.array.core.Array),2,dask.array
"numpy.any(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",2,dask.array
"numpy.greater_equal(int, numpy.ndarray)",2,dask.array
numpy.seterr,2,dask.array
numpy.cbrt(numpy.ndarray),2,skimage
"numpy.ndarray[tuple[slice[int, NoneType, NoneType]]]",2,dask.array
numpy.ndarray.cumsum(numpy.ndarray),2,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, int]]]",2,dask.array
"numpy.maximum(numpy.ndarray, int)",2,xarray
"numpy.greater(numpy.ndarray, int)",2,dask.array
"numpy.amin(a=numpy.ndarray, axis=NoneType)",2,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2,xarray
"numpy.concatenate(tuple[numpy.ndarray, numpy.ndarray], int)",2,matplotlib
numpy.asarray(a=xarray.coding.variables._ElementwiseFunctionArray),2,xarray
"numpy.where(numpy.ndarray, float, int)",2,skimage
"numpy.amax(a=numpy.ndarray, axis=NoneType)",2,xarray
numpy.cov,2,matplotlib
numpy.str_ != str,2,matplotlib
"numpy.broadcast_to(array=str, shape=int)",2,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, int], numpy.ndarray]]",2,xarray
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, size=int)",2,dask.array
"numpy.any(a=numpy.ndarray, axis=tuple[int], keepdims=builtins.bool)",2,dask.array
"numpy.ndarray[tuple[slituple[numpy.float64, numpy.float64]e[NoneType, NoneType, NoneType], int]] = tuple[numpy.float64, numpy.float64]",2,matplotlib
numpy.random.random,2,xarray
"numpy.array(list[list[builtins.bytes]], dtype=str)",2,xarray
"numpy.ndarray[slice[int, int, int]]",2,matplotlib
numpy.flagsobj.writeable = builtins.bool,2,matplotlib
"numpy.any(a=numpy.ndarray, axis=tuple, keepdims=builtins.bool)",2,dask.array
"numpy.apply_along_axis(args=tuple[int], arr=numpy.ndarray, axis=int, func1d=builtins.function)",2,matplotlib
"numpy.array(list[float], dtype=numpy.dtype)",2,skimage
numpy.isscalar(element=numpy.ndarray),2,matplotlib
"numpy.all(a=numpy.ndarray, axis=tuple, keepdims=builtins.bool)",2,dask.array
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.float64)",2,matplotlib
"numpy.ndarray[tuple[numpy.ndarray, slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType]]]",2,xarray
"numpy.ndarray[tuple[int, int]] = int",2,dask.array
numpy.nanpercentile,2,xarray
list[int] @ numpy.ndarray,2,skimage
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2,dask.array
numpy.random.mtrand.RandomState.randint,2,xarray
"numpy.nansum(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",2,dask.array
numpy.asarray(a=numpy.float64),2,xarray
numpy.asarray(a=tuple[int]),2,matplotlib
numpy.float64 - float,2,xarray
numpy.asarray(a=pandas.core.indexes.numeric.Int64Index),2,xarray
"numpy.array(list[Union[int, str]], dtype=Type[builtins.object])",2,xarray
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=tuple[tuple[int, int], tuple[int, int], tuple[int, int]])",2,xarray
numpy.asarray(a=builtins.memoryview),2,matplotlib
numpy.array(numpy.int64),2,xarray
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=numpy.ndarray)",2,dask.array
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, int], int]] = float",2,xarray
"numpy.array(list[Union[float, int]], dtype=Type[numpy.float32])",2,xarray
"numpy.array(list[numpy.datetime64], dtype=NoneType)",2,xarray
"numpy.array(list[float], dtype=NoneType)",2,xarray
numpy.float64 += float,2,xarray
"numpy.ma.core.asarray(a=numpy.ndarray, dtype=Type[numpy.float64])",2,matplotlib
"numpy.timedelta64(str, str)",2,xarray
numpy.ma.asarray,2,matplotlib
"numpy.nanvar(a=numpy.ndarray, keepdims=builtins.bool)",2,dask.array
int == numpy.int64,2,xarray
numpy.get_printoptions(),2,xarray
"numpy.ma.numpy.ma.core.MaskedArrayore.MaskedArray[tuple[int, slinumpy.ma.core.MaskedArraye[NoneType, NoneType, NoneType]]] = numpy.ma.core.MaskedArray",2,matplotlib
"numpy.logical_or(int, numpy.ndarray)",2,dask.array
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType]]]",2,dask.array
"numpy.asarray(a=xarray.core.indexing.PandasIndexAdapter, dtype=NoneType)",2,xarray
numpy.log,2,dask.array
"numpy.minimum(numpy.ndarray, int)",2,dask.array
"numpy.array(int, dtype=Type[builtins.object])",2,xarray
numpy.dtype.isnative,2,matplotlib
"numpy.nanargmax(numpy.ndarray, int, keepdims=builtins.bool)",2,dask.array
"numpy.can_cast(numpy.dtype, Type[builtins.float], str)",2,matplotlib
numpy.ndarray > numpy.float64,2,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=pandas.core.indexes.base.Index, y=list[str])",2,xarray
"numpy.asanyarray(a=tuple[float, float])",2,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=list[numpy.ndarray], y=list[list[int]])",2,xarray
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], int, int]] = float",2,matplotlib
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=float)",2,skimage
"numpy.logical_xor(numpy.ndarray, int)",2,dask.array
numpy.deg2rad(list[float]),2,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=numpy.timedelta64, y=numpy.ndarray)",2,xarray
"numpy.einsum(operands=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, str])",2,dask.array
"numpy.clip(a=float, a_max=int, a_min=int)",2,matplotlib
"numpy.var(a=numpy.ndarray, dtype=str)",2,dask.array
"numpy.nanprod(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",2,dask.array
"numpy.logaddexp(numpy.ndarray, int)",2,dask.array
numpy.dtype == Type[builtins.object],2,xarray
"numpy.ndarray[tuple[builtins.ellipsis, int, NoneType]]",2,skimage
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=int)",2,xarray
"numpy.less_equal(int, numpy.ndarray)",2,dask.array
"numpy.nanprod(a=numpy.ndarray, axis=tuple)",2,dask.array
numpy.roll,2,matplotlib
"numpy.nansum(a=numpy.ndarray, dtype=str)",2,dask.array
numpy.int64 >= int,2,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], numpy.ndarray, slice[NoneType, int, NoneType]]]",2,xarray
numpy.float64 -= int,2,matplotlib
"numpy.ndarray[tuple[numpy.ndarray, slice[NoneType, NoneType, NoneType]]]",2,xarray
"numpy.cumsum(a=list[Union[float, int]])",2,matplotlib
numpy.seterr,2,skimage
"numpy.array(tuple[int, int])",2,matplotlib
"numpy.array(list[tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64]])",2,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.bool])",2,dask.array
"numpy.nansum(a=numpy.ndarray, axis=tuple[int, int], dtype=str, keepdims=builtins.bool)",2,dask.array
"numpy.median(a=numpy.ndarray, axis=list[int], keepdims=builtins.bool)",2,dask.array
"numpy.array(list[Union[NoneType, str]], dtype=Type[builtins.object])",2,xarray
"numpy.array(str, dtype=str)",2,xarray
"numpy.logical_and(numpy.ndarray, int)",2,dask.array
numpy.ndarray + list[float],2,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",2,xarray
"numpy.mean(a=numpy.ndarray, axis=int)",2,xarray
"numpy.logaddexp2(int, numpy.ndarray)",2,dask.array
"numpy.ndarray[tuple[slifloate[int, NoneType, int], int]] = float",2,matplotlib
numpy.asarray(a=xarray.core.indexing.LazilyVectorizedIndexedArray),2,xarray
"numpy.asarray(a=list[float], dtype=Type[builtins.float])",2,matplotlib
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.datetime64])",2,matplotlib
numpy.nanvar(a=numpy.ndarray),2,dask.array
"numpy.ndarray.sum(numpy.ndarray, axis=tuple[int], keepdims=builtins.bool)",2,dask.array
"numpy.asarray(a=list[float], dtype=Type[numpy.float64])",2,xarray
dask.array.core.Array * numpy.ndarray,2,dask.array
numpy.datetime64,2,matplotlib
numpy.ma.core.masked_invalid(a=numpy.ma.core.MaskedArray),2,matplotlib
numpy.ndarray == dask.array.core.Array,2,xarray
numpy.ma.core.MaskedArray.T,2,matplotlib
"numpy.equal(numpy.ndarray, int)",2,dask.array
"numpy.ndarray.transpose(numpy.ndarray, builtins.range)",2,xarray
"numpy.array(tuple[float, float, float, float])",2,matplotlib
numpy.ndarray + numpy.int64,2,dask.array
"numpy.asarray(a=int, dtype=numpy.dtype)",2,xarray
numpy.ma.core.MaskedArray[list[int]],2,matplotlib
"numpy.cumsum(a=tuple[int, int, int])",2,dask.array
numpy.mean(a=xarray.core.dataarray.DataArray),2,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], numpy.ndarray, slice[NoneType, NoneType, NoneType]]]",2,dask.array
numpy.ma.core.getdata(a=numpy.ma.core.MaskedArray),2,matplotlib
"numpy.maximum(xarray.core.dataset.Dataset, xarray.core.dataset.Dataset)",2,xarray
numpy.ndarray & numpy.ndarray,2,dask.array
"numpy.where(builtins.bool, numpy.ndarray, numpy.ndarray)",2,dask.array
"numpy.concatenate(tuple[numpy.ndarray, list[numpy.float64]])",2,matplotlib
"numpy.broadcast_arrays(args=tuple[numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray])",2,matplotlib
"numpy.full_like(a=numpy.ndarray, fill_value=numpy.float64)",2,dask.array
numpy.ndarrayuiltins.numpy.ndarrayool & numpy.ndarray,2,matplotlib
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.float64, str)",2,matplotlib
"numpy.var(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",2,dask.array
float * numpy.ma.core.MaskedArray,2,matplotlib
numpy.str_ in xarray.core.utils.Frozen,2,xarray
"numpy.concatenate(list[numpy.ndarray], axis=int)",2,xarray
numpy.False_,2,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType]]]",2,xarray
numpy.float64 - numpy.float64,2,dask.array
numpy.var,2,dask.array
"numpy.testing._private.utils.assert_array_equal(x=list[int], y=list[int])",2,xarray
numpy.frexp(numpy.ndarray),2,xarray
"numpy.ndarray[tuple[slituple[float, float]e[NoneType, NoneType, NoneType], int]] = tuple[float, float]",2,matplotlib
"numpy.xlogy(numpy.ndarray, numpy.ndarray)",2,dask.array
numpy.iterable(y=tuple[int]),2,matplotlib
numpy.ma.getmask,2,matplotlib
"numpy.ndarray[tuple[numpy.ndarray, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2,dask.array
"numpy.ma.core.MaskedArray[tuple[slice[NoneType, NoneType, NoneType], NoneType]]",2,matplotlib
"numpy.var(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",2,dask.array
numpy.result_type(dask.array.core.Array),2,xarray
"numpy.prod(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",2,dask.array
"numpy.add(numpy.ndarray, int)",2,dask.array
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int, int])",2,xarray
"numpy.maximum(int, xarray.core.dataset.Dataset)",2,xarray
"numpy.ndarray.sum(numpy.ndarray, axis=tuple[int, int], keepdims=builtins.bool)",2,dask.array
"numpy.generic.astype(numpy.float64, Type[numpy.float64])",2,matplotlib
"numpy.maximum(int, xarray.core.dataarray.DataArray)",2,xarray
"numpy.maximum(int, xarray.core.variable.Variable)",2,xarray
"numpy.where(numpy.bool_, numpy.ndarray, numpy.ndarray)",2,dask.array
numpy.cos(xarray.core.dataarray.DataArray),2,xarray
"numpy.mean(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",2,dask.array
numpy.argmin,2,dask.array
"numpy.add(dask.array.core.Array, dask.array.core.Array)",2,dask.array
numpy.builtins.boolool_ == builtins.bool,2,xarray
"numpy.allclose(a=numpy.ndarray, b=int)",2,xarray
"numpy.ones(shape=tuple[int, int, int])",2,xarray
"numpy.maximum(numpy.ndarray, xarray.core.variable.Variable)",2,xarray
"numpy.sum(a=numpy.ndarray, axis=tuple[int, int])",2,dask.array
"numpy.interp(fp=numpy.ndarray, x=int, xp=numpy.ndarray)",2,matplotlib
"numpy.asarray(a=list[list[int]], dtype=Type[builtins.float])",2,matplotlib
numpy.ndarray += numpy.float64,2,dask.array
"numpy.true_divide(dask.array.core.Array, dask.array.core.Array)",2,dask.array
"numpy.maximum(xarray.core.variable.Variable, xarray.core.dataset.Dataset)",2,xarray
numpy.ma.core.MaskedArray,2,matplotlib
"numpy.ma.core.masked_less_equal(copy=builtins.bool, value=int, x=numpy.ma.core.MaskedArray)",2,matplotlib
numpy.ndarray.any,2,xarray
numpy.asanyarray(a=list[builtins.bool]),2,dask.array
"numpy.copysign(numpy.ndarray, int)",2,dask.array
"numpy.maximum(xarray.core.dataset.Dataset, numpy.ndarray)",2,xarray
"numpy.maximum(numpy.ndarray, xarray.core.dataset.Dataset)",2,xarray
"numpy.issubdtype(arg1=Type[numpy.uint8], arg2=Type[numpy.floating])",2,skimage
"numpy.arctan2(int, numpy.ndarray)",2,dask.array
"numpy.maximum(numpy.ndarray, xarray.core.dataarray.DataArray)",2,xarray
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]] = numpy.ndarray",2,xarray
"numpy.ndarray.sum(numpy.ndarray, axis=int)",2,xarray
"numpy.column_stack(tup=list[list[Union[int, numpy.float64, numpy.float64]]])",2,matplotlib
"numpy.ma.core.MaskedArray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",2,matplotlib
"numpy.any(a=numpy.ndarray, axis=tuple[int, int], keepdims=builtins.bool)",2,dask.array
numpy.tanh(dask.array.core.Array),2,dask.array
numpy.square(dask.array.core.Array),2,dask.array
numpy.dtype(numpy.dtype),2,skimage
"numpy.nanmin(a=numpy.ndarray, axis=tuple, keepdims=builtins.bool)",2,dask.array
numpy.add,2,matplotlib
numpy.nanmin(a=numpy.ndarray),2,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",2,xarray
"numpy.asarray(a=list[tuple[float, float]], dtype=Type[builtins.float])",2,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=dask.array.core.Array)",2,xarray
"numpy.ma.core.MaskedArray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",2,matplotlib
numpy.int,2,xarray
"numpy.sum(a=numpy.ndarray, axis=tuple[int, int, int], dtype=numpy.dtype, keepdims=builtins.bool)",2,dask.array
"numpy.concatenate(list[Union[list[int], numpy.ndarray]])",2,matplotlib
"numpy.ndarray[slice[int, NoneType, int]]",2,xarray
numpy.cumsum(a=list[int]),2,matplotlib
"numpy.dot(numpy.ndarray, matplotlib.transforms.Affine2D)",2,matplotlib
"numpy.ufunc.reduce(numpy.ufunc, list[numpy.ndarray])",2,matplotlib
"numpy.floor_divide(numpy.ndarray, int)",2,dask.array
"numpy.nanmin(a=numpy.ndarray, axis=tuple[int], keepdims=builtins.bool)",2,dask.array
numpy.spacing(dask.array.core.Array),2,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2,matplotlib
"numpy.array(numpy.ndarray, Type[builtins.float])",2,matplotlib
"numpy.fmod(int, numpy.ndarray)",2,dask.array
"numpy.ufunc.at(numpy.ufunc, numpy.ndarray, tuple[numpy.ndarray, numpy.ndarray], int)",2,matplotlib
numpy.asarray(a=numpy.float32),2,xarray
numpy.ndarray == float,2,xarray
numpy.ndarray + builtins.range,2,matplotlib
numpy.isfinite(list[float]),2,matplotlib
"numpy.asarray(a=list[Union[float, int]])",2,xarray
"numpy.fmin(numpy.ndarray, int)",2,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, NoneType]]]",2,matplotlib
"numpy.fmax(int, numpy.ndarray)",2,dask.array
numpy.ndarray.flags,2,matplotlib
numpy.ndarray.argmin,2,matplotlib
"numpy.amax(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",2,dask.array
"numpy.asanyarray(a=numpy.ndarray, dtype=Type[builtins.float])",2,matplotlib
numpy.generic,2,xarray
"numpy.piecewise(args=tuple[int], condlist=list[numpy.ndarray], funclist=list[builtins.function], kw=dict, x=numpy.ndarray)",2,dask.array
numpy.generic.item(numpy.float64),2,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType, NoneType]]",2,xarray
numpy.ma.core,2,matplotlib
"numpy.array(numpy.ndarray, dtype=Type[builtins.float])",2,xarray
"numpy.testing._private.utils.assert_array_equal(x=pandas.core.indexes.multi.MultiIndex, y=pandas.core.indexes.multi.MultiIndex)",2,xarray
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], NoneType, builtins.ellipsis]]",2,dask.array
"numpy.ma.core.MaskedArray.reshape(s=tuple[int, int], self=numpy.ma.core.MaskedArray)",2,matplotlib
numpy.result_type(numpy.ndarray),2,xarray
"numpy.issubdtype(arg1=Type[numpy.float32], arg2=Type[numpy.floating])",2,skimage
"numpy.isnan(tuple[int, int, int, int, int])",2,dask.array
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType]]]",2,matplotlib
numpy.asanyarray(a=list[numpy.ndarray]),2,matplotlib
"numpy.bitwise_and(int, numpy.ndarray)",2,dask.array
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]]",2,dask.array
numpy.sin,2,xarray
"numpy.ma.core.MaskedArray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",2,matplotlib
"numpy.vstack(tup=tuple[numpy.ndarray, numpy.ndarray, list[float]])",2,matplotlib
"numpy.where(numpy.ndarray, float, numpy.ndarray)",2,dask.array
"numpy.column_stack(tup=list[list[Union[int, numpy.float64]]])",2,matplotlib
"numpy.nanmax(a=numpy.ndarray, axis=tuple[int], keepdims=builtins.bool)",2,dask.array
"numpy.bitwise_or(numpy.ndarray, int)",2,dask.array
"numpy.array(list[Union[builtins.bytes, float]], dtype=Type[builtins.object])",2,xarray
numpy.asarray(a=tuple[float]),2,matplotlib
"numpy.nanpercentile(a=numpy.ndarray, axis=list[int], q=numpy.float64)",2,xarray
"numpy.bitwise_xor(int, numpy.ndarray)",2,dask.array
"numpy.ndarray.repeat(numpy.ndarray, int, axis=int)",2,matplotlib
"numpy.amin(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",2,dask.array
"numpy.concatenate(list[Union[list, list[numpy.float64]]])",2,matplotlib
"numpy.array(float, dtype=str)",2,dask.array
numpy.asarray(a=numpy.bytes_),2,xarray
numpy.ndarray.repeat,2,matplotlib
numpy.argwhere(a=numpy.ndarray),2,dask.array
"numpy.nanmax(a=numpy.ndarray, axis=tuple, keepdims=builtins.bool)",2,dask.array
numpy.int64 - int,2,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], list[int], list[int]]]",2,xarray
numpy.average,2,dask.array
numpy.amin(a=list[numpy.float64]),2,matplotlib
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int, int, int])",2,skimage
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=pandas.core.indexes.datetimes.DatetimeIndex)",2,xarray
"numpy.concatenate(list[Union[list, list[numpy.int64]]])",2,matplotlib
"numpy.generic.astype(numpy.int64, Type[numpy.float32])",2,matplotlib
numpy.array(numpy.ndarray),2,dask.array
"numpy.equal(float, numpy.ndarray)",2,dask.array
"numpy.apply_along_axis(arr=numpy.ndarray, axis=int, func1d=builtins.function)",2,dask.array
"numpy.generic.astype(numpy.timedelta64, Type[numpy.float64])",2,xarray
numpy.arctanh(dask.array.core.Array),2,dask.array
"numpy.ma.core.array(copy=numpy.ndarray, data=numpy.ndarray, mask=builtins.bool)",2,matplotlib
numpy.take,2,xarray
"numpy.empty(dtype=tuple[int], shape=list[tuple[str, numpy.dtype]])",2,dask.array
numpy.float64 * numpy.float64,2,xarray
"numpy.ndarray[tuple[numpy.ndarray, slice[int, int, int], slice[int, int, int]]]",2,xarray
numpy.numpy.bool_ool_ != numpy.bool_,2,matplotlib
"numpy.ndarray[tuple[numpy.ndarray, slice[int, int, int], slice[NoneType, NoneType, NoneType]]]",2,xarray
numpy.shape(a=list[int]),2,matplotlib
numpy.asarray(a=builtins.bool),2,xarray
numpy.ndarray[list[int]] = builtins.bool,2,matplotlib
"numpy.outer(a=numpy.ndarray, b=numpy.ndarray)",2,dask.array
numpy.timedelta64 == numpy.timedelta64,2,xarray
"numpy.take(a=numpy.ndarray, axis=int, indices=list[int])",2,xarray
numpy.atleast_1d(arys=tuple[numpy.ma.core.MaskedArray]),2,matplotlib
"numpy.amin(a=numpy.ndarray, axis=int)",2,xarray
numpy.ndarray[numpy.bool_],2,skimage
numpy.concatenate,2,xarray
numpy.asarray(a=dask.array.core.Array),2,xarray
numpy.ndarray == numpy.float32,2,xarray
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int, int, int, int])",2,xarray
"numpy.lislice[NoneType, int, NoneType].index_tricks.RClass[slice[NoneType, int, NoneType]]",2,xarray
"numpy.searchsorted(a=numpy.ndarray, side=str, v=numpy.ndarray)",2,dask.array
"numpy.minimum(numpy.float64, numpy.float64)",2,matplotlib
numpy.array(list[float]),2,dask.array
"numpy.frompyfunc(builtins.builtin_function_or_method, int, int)",2,dask.array
numpy.iterable(y=int),2,dask.array
"numpy.array(list[tuple[numpy.float64, numpy.float64, numpy.float64, int]])",2,matplotlib
numpy.ndarray.min,2,dask.array
"numpy.sum(a=numpy.ndarray, axis=tuple[int, int])",2,xarray
numpy.sinc(x=numpy.ndarray),2,dask.array
"numpy.sum(a=numpy.ndarray, axis=NoneType)",2,xarray
"numpy.arange(float, int, float)",2,matplotlib
"numpy.clip(a=numpy.ndarray, a_max=NoneType, a_min=int)",2,dask.array
"numpy.ndarray[tuple[slice[int, int, int], slice[int, int, int], slice[NoneType, NoneType, NoneType]]]",2,xarray
numpy.random.randint,2,matplotlib
"numpy.ndarray[tuple[slice[int, int, int], slice[int, int, int], numpy.ndarray]]",2,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], list[int]]]",2,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], numpy.ndarray]]",2,xarray
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int])",2,dask.array
"numpy.array(list[int], ndmin=int)",2,xarray
"numpy.ndarray.searchsorted(numpy.ndarray, float)",2,matplotlib
numpy.transpose(a=numpy.ndarray),2,matplotlib
"numpy.percentile(a=numpy.ndarray, q=list[float])",2,matplotlib
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",2,xarray
numpy.ndarray[numpy.ndarray] = numpy.ndarray,2,xarray
numpy.rad2deg(dask.array.core.Array),2,dask.array
numpy.concatenate(list[list]),2,matplotlib
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=float)",2,xarray
"numpy.ndarray.take(numpy.ndarray, numpy.ndarray, axis=int)",2,xarray
"numpy.nanargmin(numpy.ndarray, NoneType, keepdims=builtins.bool)",2,dask.array
numpy.random.choice,2,dask.array
numpy.ndarray.take,2,xarray
"numpy.array(list[Union[float, int]], ndmin=int)",2,xarray
numpy.int64 - numpy.int64,2,xarray
"numpy.asanyarray(a=tuple[tuple[numpy.float64, numpy.float64], tuple[numpy.float64, numpy.float64]])",2,matplotlib
"numpy.ndarray[int] = tuple[numpy.int64, numpy.float64]",2,matplotlib
"numpy.ndarray[tuple[list[int], slice[NoneType, NoneType, NoneType]]]",2,xarray
numpy.shape(a=list[float]),2,matplotlib
numpy.ndarray + xarray.core.dataset.Dataset,2,xarray
numpy.uint8 == numpy.uint8,2,matplotlib
"numpy.asarray(a=list[tuple[numpy.float64, numpy.float64]], dtype=Type[builtins.float])",2,matplotlib
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, int, int, int)",2,matplotlib
"numpy.result_type(numpy.dtype, numpy.dtype, numpy.dtype)",2,dask.array
"numpy.ndarray[tuple[slice[int, int, int], numpy.ndarray, slice[NoneType, NoneType, NoneType]]]",2,xarray
numpy.shape(a=list[list]),2,matplotlib
"numpy.asarray(a=list[numpy.ndarray], dtype=Type[builtins.float])",2,matplotlib
"numpy.ndarray[tuple[numpy.ndarray, slice[NoneType, NoneType, NoneType], slice[int, int, int]]]",2,xarray
numpy.int64 - numpy.ndarray,2,matplotlib
"numpy.ndarray[tuple[slice[int, int, int], numpy.ndarray, slice[int, int, int]]]",2,xarray
"numpy.asanyarray(a=tuple[numpy.float64, numpy.float64])",2,matplotlib
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], numpy.ndarray, slice[NoneType, int, NoneType]]]",2,xarray
numpy.cos(int),2,matplotlib
"numpy.histogram(a=dask.array.core.Array, bins=numpy.ndarray)",2,dask.array
"numpy.array(list[tuple[float, float, float]])",2,matplotlib
numpy.ndarray[numpy.bool_] = numpy.ndarray,2,skimage
"numpy.ndarray.mean(numpy.ndarray, axis=int)",2,xarray
numpy.fabs(dask.array.core.Array),2,dask.array
"numpy.nanprod(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",2,dask.array
"numpy.testing._private.utils.assert_array_equal(x=dask.array.core.Array, y=numpy.ndarray)",2,dask.array
numpy.bool_.all,2,xarray
"numpy.expand_dims(a=numpy.ndarray, axis=int)",2,dask.array
numpy.isscalar(element=numpy.ndarray),2,xarray
"numpy.flatiter[slice[int, NoneType, NoneType]]",2,xarray
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",2,xarray
numpy.array(list[NoneType]),2,matplotlib
"numpy.nanmax(a=numpy.ndarray, axis=NoneType)",2,xarray
numpy.concatenate(list[list[numpy.uint8]]),2,matplotlib
"numpy.concatenate(list[list[tuple[numpy.float64, numpy.float64]]])",2,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.indexing.CopyOnWriteArray, y=numpy.ndarray)",2,xarray
numpy.asarray(a=builtins.complex),2,xarray
numpy.exp2(dask.array.core.Array),2,dask.array
numpy.ndarray / int,2,xarray
numpy.int64 * int,2,dask.array
numpy.asarray(a=list[NoneType]),2,matplotlib
numpy.ndarray.sum(numpy.ndarray),2,xarray
numpy.float32 == numpy.float32,2,matplotlib
numpy.isinf(dask.array.core.Array),2,dask.array
numpy.log(dask.array.core.Array),2,dask.array
numpy.ndarray.transpose(numpy.ndarray),2,matplotlib
"numpy.mean(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",2,xarray
"numpy.iterable(y=list[Union[list, list[int]]])",2,matplotlib
"numpy.mean(a=numpy.ndarray, keepdims=builtins.bool)",2,xarray
numpy.ma.core.getdata(a=numpy.ndarray),2,matplotlib
numpy.ones_like(a=xarray.core.variable.Variable),2,xarray
"numpy.einsum(operands=tuple[str, numpy.ndarray, numpy.ndarray, numpy.ndarray])",2,xarray
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=list[int])",2,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], numpy.ndarray]]",2,xarray
"numpy.nanpercentile(a=numpy.ndarray, axis=int, q=numpy.ndarray)",2,xarray
numpy.log1p(dask.array.core.Array),2,dask.array
"numpy.insert(arr=numpy.ndarray, axis=int, obj=int, values=int)",2,dask.array
-numpy.int64,2,dask.array
"numpy.nanmin(a=numpy.ndarray, axis=int)",2,xarray
"numpy.ndarray[slinumpy.ndarraye[NoneType, NoneType, NoneType]] = numpy.ndarray",2,matplotlib
"numpy.amax(a=numpy.ndarray, axis=tuple[int, int, int], keepdims=builtins.bool)",2,dask.array
numpy.conjugate(dask.array.core.Array),2,dask.array
"numpy.moveaxis(a=numpy.ndarray, destination=tuple, source=tuple)",2,xarray
"numpy.? (vectorized)(numpy.ndarray, numpy.ndarray)",2,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], NoneType]]",2,xarray
"numpy.where(numpy.bool_, float, numpy.float64)",2,xarray
numpy.unique(ar=xarray.core.dataarray.DataArray),2,xarray
numpy.flatnonzero(a=numpy.ndarray),2,xarray
numpy.ndarray[int] = numpy.int64,2,dask.array
numpy.cbrt(dask.array.core.Array),2,dask.array
"numpy.concatenate(list[Union[list[tuple[numpy.float64, numpy.float64]], numpy.ndarray]])",2,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2,xarray
"numpy.amin(a=numpy.ndarray, axis=tuple[int, int, int], keepdims=builtins.bool)",2,dask.array
numpy.iterable(y=numpy.ndarray),2,dask.array
"numpy.asarray(a=numpy.ma.core.MaskedArray, dtype=Type[builtins.float])",2,matplotlib
"numpy.full(fill_value=float, shape=tuple[int, int])",2,xarray
numpy.sin(int),2,matplotlib
numpy.logical_not(dask.array.core.Array),2,xarray
numpy.generic.any(numpy.bool_),2,xarray
numpy.ma.core.masked_invalid(a=list[float]),2,xarray
numpy.degrees(dask.array.core.Array),2,dask.array
numpy.arcsin(numpy.ndarray),2,matplotlib
"numpy.array(numpy.ndarray, copy=builtins.bool)",2,matplotlib
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.number])",2,dask.array
"numpy.full(fill_value=int, shape=tuple[int, int])",2,xarray
"numpy.ufunc.outer(numpy.ufunc, dask.array.core.Array, dask.array.core.Array)",2,dask.array
numpy.cosh(dask.array.core.Array),2,dask.array
"numpy.full(dtype=Type[numpy.uint8], fill_value=numpy.uint8, shape=int)",2,matplotlib
"numpy.empty(tuple[int, int])",2,matplotlib
"numpy.ndarray + tuple[numpy.float64, float]",2,matplotlib
"numpy.? (vectorized)(numpy.ndarray, int)",2,dask.array
"numpy.array(list[list[Union[float, float, int]]], Type[builtins.float])",2,matplotlib
numpy.iterable(y=list[builtins.bool]),2,matplotlib
numpy.logical_not(dask.array.core.Array),2,dask.array
numpy.gradient,2,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, size=tuple[int, int])",2,xarray
numpy.linalg.inv(a=numpy.ndarray),2,matplotlib
numpy.float64uiltins.numpy.float64ytes % numpy.float64,2,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2,xarray
"numpy.float64[tuple[builtins.ellipsis, NoneType]]",2,skimage
"numpy.ndarray.reshape(numpy.ndarray, int, int, int)",2,dask.array
"numpy.ndarray[tuple[slice[int, int, int], slice[NoneType, NoneType, NoneType], numpy.ndarray]]",2,xarray
"numpy.ndarray += list[Union[float, int]]",2,matplotlib
numpy.array(int),2,matplotlib
numpy.asarray(a=float),2,skimage
numpy.dtype.name,2,skimage
"numpy.nanmin(a=numpy.ndarray, axis=tuple)",2,dask.array
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.variable.IndexVariable, y=numpy.int64)",2,xarray
"numpy.power(int, numpy.ndarray)",2,dask.array
"numpy.rollaxis(a=numpy.ndarray, axis=int, start=int)",2,dask.array
Type[numpy.float64].__module__,2,dask.array
"numpy.iterable(y=list[Union[str, tuple[int, int, int]]])",2,matplotlib
"numpy.ma.core.array(copy=numpy.bool_, data=numpy.ndarray, mask=builtins.bool)",2,matplotlib
"numpy.isnan(tuple[int, int, int, int, int, int, int])",2,dask.array
numpy.float64 += int,2,xarray
numpy.trapz,2,xarray
"numpy.core.numeric.normalize_axis_tuple(argname=str, axis=int, ndim=int)",2,dask.array
numpy.random.mtrand.RandomState.randint,2,dask.array
"numpy.testing._private.utils.assert_equal(actual=numpy.datetime64, desired=numpy.datetime64)",2,xarray
numpy.array(numpy.float64),2,matplotlib
"numpy.float_power(int, numpy.ndarray)",2,dask.array
"numpy.nanmedian(a=numpy.ndarray, axis=int)",2,xarray
numpy.ndarray - numpy.int64,2,xarray
"numpy.clip(a=numpy.ndarray, a_max=float, a_min=float)",2,matplotlib
numpy.nanmean,2,xarray
"numpy.nanvar(a=numpy.ndarray, axis=int)",2,xarray
numpy.float,2,matplotlib
numpy.asanyarray(a=list[numpy.float64]),2,matplotlib
numpy.ndarray[tuple],2,xarray
"numpy.gradient(f=xarray.core.dataarray.DataArray, kwargs=dict, varargs=tuple[xarray.core.dataarray.DataArray])",2,xarray
Type[numpy.datetime64] == Type[numpy.datetime64],2,xarray
numpy.any(a=numpy.ndarray),2,xarray
numpy.sin(xarray.core.variable.IndexVariable),2,xarray
"numpy.array(list[list[Union[float, int, int]]])",2,matplotlib
numpy.zeros(int),2,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], numpy.ndarray]]",2,xarray
"numpy.asanyarray(a=list[list[int]], dtype=Type[builtins.float])",2,matplotlib
"numpy.subtract(int, numpy.ndarray)",2,dask.array
"numpy.einsum(operands=tuple[numpy.ndarray, numpy.ndarray, str])",2,dask.array
"numpy.trapz(axis=int, x=xarray.core.dataarray.DataArray, y=xarray.core.dataarray.DataArray)",2,xarray
numpy.dtype == Type[numpy.int32],2,xarray
"numpy.sum(a=numpy.ndarray, axis=int)",2,xarray
"numpy.ndarray.transpose(numpy.ndarray, list[int])",2,xarray
"numpy.nanvar(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",2,dask.array
Type[numpy.uint16] == Type[builtins.bool],2,skimage
numpy.asanyarray,2,matplotlib
"numpy.multiply(numpy.ndarray, int)",2,dask.array
"numpy.multiply(dask.array.core.Array, dask.array.core.Array)",2,dask.array
numpy.arccosh(dask.array.core.Array),2,dask.array
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType]]]",2,dask.array
"numpy.asarray(a=tuple[float, float])",2,matplotlib
numpy.atleast_1d(arys=tuple[numpy.ndarray]),2,dask.array
numpy.isfinite(matplotlib.transforms.Bbox),2,matplotlib
"numpy.remainder(dask.array.core.Array, dask.array.core.Array)",2,dask.array
Type[numpy.float64] == Type[builtins.bool],2,skimage
numpy.ufunc,2,dask.array
"numpy.cumsum(a=list[Union[int, numpy.float64]])",2,matplotlib
"numpy.nanargmax(numpy.ndarray, NoneType, keepdims=builtins.bool)",2,dask.array
"numpy.nanargmin(numpy.ndarray, int, keepdims=builtins.bool)",2,dask.array
"numpy.maximum(numpy.float64, numpy.float64)",2,matplotlib
"numpy.nanstd(a=numpy.ndarray, axis=tuple)",2,dask.array
"numpy.nanstd(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",2,dask.array
"numpy.not_equal(numpy.ndarray, int)",2,dask.array
numpy.asarray(a=list[numpy.int64]),2,matplotlib
"numpy.allclose(a=xarray.core.variable.Variable, b=numpy.ndarray)",2,xarray
"numpy.nanmin(a=numpy.ndarray, axis=tuple[int, int], keepdims=builtins.bool)",2,dask.array
numpy.nanstd(a=numpy.ndarray),2,dask.array
numpy.isin,2,dask.array
"numpy.nanstd(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",2,dask.array
"numpy.multiply(numpy.ndarray, float, dtype=Type[numpy.float64])",2,skimage
"numpy.nextafter(int, numpy.ndarray)",2,dask.array
numpy.meshgrid,2,xarray
numpy.arcsinh(dask.array.core.Array),2,dask.array
numpy.random.choice,2,xarray
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, int, int, replace=builtins.bool)",2,xarray
"numpy.swapaxes(a=numpy.ndarray, axis1=int, axis2=int)",2,xarray
numpy.percentile,2,xarray
numpy.dtype(Type[builtins.float]),2,xarray
"numpy.ndarray[tuple[slituple[int, int]e[NoneType, NoneType, NoneType], int]] = tuple[int, int]",2,matplotlib
"numpy.nanmax(a=numpy.ndarray, axis=tuple[int, int], keepdims=builtins.bool)",2,dask.array
"numpy.unique(ar=numpy.ndarray, return_counts=builtins.bool, return_index=builtins.bool, return_inverse=builtins.bool)",2,dask.array
"numpy.amax(a=numpy.ndarray, axis=int)",2,xarray
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.int64])",2,xarray
"numpy.nansum(a=numpy.ndarray, axis=int)",2,xarray
"numpy.nextafter(float, float)",2,matplotlib
numpy.amax(a=list[numpy.float64]),2,matplotlib
numpy.sin(xarray.core.dataarray.DataArray),2,xarray
"numpy.dtype != list[tuple[str, numpy.dtype]]",2,dask.array
numpy.ufunc.nin,2,xarray
numpy.reciprocal(dask.array.core.Array),2,dask.array
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType]]]",2,dask.array
"numpy.arange(numpy.float64, numpy.float64, numpy.float64)",2,matplotlib
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",2,dask.array
numpy.float64 // numpy.float64,2,matplotlib
xarray.core.dataarray.DataArray + numpy.ndarray,2,xarray
"numpy.nanmax(a=numpy.ndarray, axis=int)",2,xarray
"numpy.percentile(a=numpy.ndarray, q=list[int])",2,matplotlib
numpy.sign(dask.array.core.Array),2,dask.array
numpy.array(numpy.float64),2,xarray
"numpy.nanmin(a=numpy.ndarray, axis=NoneType)",2,xarray
numpy.linspace,2,xarray
"numpy.cumsum(a=tuple[int, int, int, int])",2,dask.array
numpy.ndarray -= float,2,matplotlib
numpy.dtype != Type[numpy.uint8],2,matplotlib
numpy.sqrt(numpy.ndarray),2,xarray
"numpy.ndarray.reshape(numpy.ndarray, list[int])",2,xarray
numpy.generic.item(numpy.float32),2,matplotlib
"numpy.sum(a=numpy.ndarray, keepdims=builtins.bool)",2,dask.array
"numpy.moveaxis(a=numpy.ndarray, destination=numpy.ndarray, source=numpy.ndarray)",2,xarray
numpy.arange(float),2,dask.array
"numpy.testing._private.utils.assert_equal(actual=numpy.timedelta64, desired=numpy.timedelta64)",2,xarray
"numpy.ndarray.clip(numpy.ndarray, int, int)",2,xarray
numpy.float64 - numpy.float64,2,xarray
float + numpy.ndarray,2,xarray
numpy.array(dask.array.core.Array),2,xarray
"numpy.dtype != list[tuple[str, Union[Type[numpy.int64], numpy.dtype]]]",2,dask.array
numpy.intp,2,xarray
"numpy.nanmax(a=numpy.ndarray, axis=tuple)",2,dask.array
"numpy.asarray(a=xarray.core.indexing.MemoryCachedArray, dtype=NoneType)",2,xarray
float * numpy.int64,2,skimage
numpy.asarray(a=numpy.timedelta64),2,xarray
"numpy.tensordot(a=numpy.ndarray, axes=tuple[int, int], b=numpy.ndarray)",2,dask.array
numpy.ndarray /= int,2,matplotlib
"numpy.roll(a=numpy.ndarray, shift=int)",2,dask.array
"numpy.random.mtrand.RandomState.shuffle(numpy.random.mtrand.RandomState, numpy.ndarray)",2,dask.array
"numpy.arange(int, dtype=Type[numpy.int64])",2,xarray
"numpy.array(list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]], dtype=str)",1,pandas
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.timestamps.Timestamp, str]]",1,pandas
Type[pandas._liType[numpy.object_]s.tsliType[numpy.object_]s.timestamps.Timestamp] == Type[numpy.object_],1,pandas
-numpy.float64,1,pandas
numpy.ediff1d,1,pandas
numpy.array(list[list[list[builtins.bool]]]),1,pandas
float > numpy.float64,1,pandas
"numpy.empty(int, dtype=list[tuple[str, Type[builtins.object]]])",1,pandas
"numpy.zeros(tuple[int, int], dtype=Type[numpy.int8])",1,pandas
numpy.double,1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], int, builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.array(numpy.ndarray, copy=Type[builtins.float], dtype=builtins.bool)",1,pandas
int += numpy.int64,1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.array(list[Union[int, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, slice[int, NoneType, NoneType], NoneType]]",1,dask.array
int -= numpy.int64,1,pandas
numpy.int64 += numpy.int64,1,pandas
Type[numpy.complex128] == Type[numpy.object_],1,pandas
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
"numpy.asarray(a=list[tuple[str, int]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, NoneType, builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis]]",1,dask.array
numpy.size(a=numpy.ndarray),1,pandas
"numpy.asarray(a=list[tuple[str, int]], dtype=NoneType)",1,pandas
"numpy.where(list[Type[Union[numpy.int32, numpy.uint8]]])",1,pandas
"numpy.asarray(a=list[tuple[str, int]])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, builtins.ellipsis, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.asarray(a=numpy.ndarray, dtype=Type[builtins.float])",1,pandas
"numpy.where(list[Union[Type[numpy.float64], str]])",1,pandas
numpy.ndarray[numpy.bool_] = float,1,skimage
"numpy.where(list[Union[Type[Union[numpy.float32, numpy.int32]], str]])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, slice[int, NoneType, NoneType], int]]",1,dask.array
numpy.unique(ar=list[str]),1,pandas
"numpy.where(list[Union[Type[Union[numpy.float64, numpy.int32, numpy.int8, numpy.uint8]], str]])",1,pandas
"numpy.where(list[Union[Type[Union[numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int8, numpy.uint8]], str]])",1,pandas
numpy.float32 / float,1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
pandas.core.dtypes.dtypes.DatetimeTZDtype == Type[numpy.uint16],1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, builtins.ellipsis, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, NoneType, NoneType]]",1,dask.array
"numpy.where(list[Type[Union[numpy.float32, numpy.int8]]])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, slice[int, NoneType, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], builtins.ellipsis, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[slilist[Union[float, numpy.float32, numpy.float64]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.float32, numpy.float64]]",1,pandas
"numpy.where(list[Union[Type[Union[numpy.float64, numpy.int32, numpy.int8]], str]])",1,pandas
"numpy.empty_like(numpy.ndarray, dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[float, numpy.float32]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.float32]]",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, builtins.ellipsis, NoneType]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], builtins.ellipsis, int]]",1,dask.array
"numpy.where(list[Union[Type[numpy.uint8], str]])",1,pandas
"numpy.where(list[Union[Type[Union[numpy.float32, numpy.float64, numpy.int32]], str]])",1,pandas
"numpy.array(numpy.ndarray, dtype=Type[numpy.int16])",1,pandas
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, NoneType, NoneType]]",1,dask.array
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.float64], copy=builtins.bool)",1,skimage
numpy.sqrt(numpy.int64),1,skimage
"numpy.ones(dtype=Type[numpy.bool_], shape=tuple[int, int])",1,pandas
"numpy.lib.stride_tricks.as_strided(shape=tuple[int, int], strides=numpy.ndarray, x=tuple[int, int])",1,pandas
"numpy.ndarray[tuple[NoneType, slice[NoneType, int, NoneType], builtins.ellipsis, int]]",1,dask.array
"numpy.ndarray[tuple[NoneType, slice[NoneType, int, NoneType], builtins.ellipsis, slice[int, NoneType, NoneType]]]",1,dask.array
numpy.ndarray.itemsize,1,pandas
"numpy.ndarray[tuple[NoneType, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[NoneType, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.array(tuple[str, str, str, str, str, str, str, str])",1,pandas
"numpy.array(tuple[str, str, str, str, str, str, str, str, str, str, str])",1,pandas
"numpy.ndarray[tuple[NoneType, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], NoneType]]",1,dask.array
"numpy.ndarray[slice[NoneType, numpy.int32, NoneType]]",1,pandas
"numpy.ndarray[tuple[NoneType, slice[NoneType, int, NoneType], int, builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[NoneType, slice[NoneType, int, NoneType], int, int]]",1,dask.array
"numpy.ndarray[tuple[NoneType, slice[NoneType, int, NoneType], int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[NoneType, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], builtins.ellipsis]]",1,dask.array
numpy.ndarray -= numpy.int64,1,skimage
numpy.ndarray[tuple[list[int]]] = numpy.ndarray,1,pandas
"numpy.ndarray[tuple[sliinte[int, int, NoneType]]] = int",1,pandas
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str], dtype=NoneType)",1,pandas
"numpy.array(pandas.core.series.Series, copy=numpy.dtype, dtype=builtins.bool)",1,pandas
numpy.float32 - numpy.ndarray,1,skimage
"numpy.reshape(a=list[str], newshape=tuple[int, int])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], int, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
pandas.core.series.Series > numpy.float32,1,pandas
"numpy.where(list[Type[Union[numpy.float32, numpy.int32]]])",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[NoneType, NoneType, int]]]",1,skimage
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ix_(args=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,skimage
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.array(list[builtins.complex], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.take(a=numpy.ndarray, axis=int, indices=list)",1,pandas
"numpy.take(a=numpy.ndarray, axis=int, indices=list[int])",1,pandas
"numpy.asanyarray(a=list, dtype=str)",1,pandas
"numpy.asanyarray(a=list, dtype=Type[numpy.int64])",1,pandas
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, slice[int, NoneType, NoneType], int]]",1,dask.array
"numpy.asanyarray(a=list[int], dtype=Type[numpy.int64])",1,pandas
"numpy.array(list[builtins.bool], dtype=Type[numpy.bool_])",1,pandas
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, slice[int, NoneType, NoneType], NoneType]]",1,dask.array
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.ndarray[tuple[list[int]]],1,pandas
numpy.ndarray[tuple[list]],1,pandas
"numpy.ones(dtype=Type[numpy.bool_], shape=int)",1,pandas
"numpy.ndarray[tuple[slice[int, int, int]]]",1,pandas
"numpy.ndarray[tuple[slice[int, int, NoneType]]]",1,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType]]]",1,pandas
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, NoneType, int]]",1,dask.array
"numpy.array(list[builtins.bool], dtype=Type[numpy.object_])",1,pandas
numpy.ndarrayuiltins.complex * numpy.ndarray,1,pandas
"numpy.ndarray[slilist[tuple[str, str, str, str]]e[NoneType, NoneType, NoneType]] = list[tuple[str, str, str, str]]",1,pandas
"numpy.asarray(a=list[tuple[str, str, str, str]], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=list[tuple[str, str, str, str]], dtype=NoneType)",1,pandas
"numpy.ndarray[tuple[NoneType, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], int]]",1,dask.array
numpy.ndarray[numpy.ndarray] = pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
"numpy.ndarray[tuple[NoneType, int, int, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.array(list[Union[int, pandas._libs.tslibs.nattype.NaTType]], copy=builtins.bool)",1,pandas
numpy.int64 in pandas.core.indexes.range.RangeIndex,1,pandas
"numpy.ndarray[tuple[int, sliinte[numpy.int64, numpy.int64, NoneType]]] = int",1,pandas
numpy.ndarray[tuple[int]],1,pandas
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,pandas
numpy.ndarray[numpy.ndarray] = pandas.core.indexes.timedeltas.TimedeltaIndex,1,pandas
"numpy.ndarray[tuple[slilist[int]e[int, numpy.int64, NoneType]]] = list[int]",1,pandas
numpy.ndim(a=list[list[int]]),1,pandas
"numpy.ndarray[tuple[NoneType, int, int, slice[int, NoneType, NoneType]]]",1,dask.array
numpy.int64 // int,1,pandas
"numpy.ndarray[tuple[NoneType, int, int, NoneType]]",1,dask.array
numpy.str_ in pandas._libs.index.ObjectEngine,1,pandas
"numpy.ndarray[tuple[NoneType, int, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
numpy.str_ in pandas.core.frame.DataFrame,1,pandas
numpy.ndarray[tuple[numpy.ndarray]] = pandas.core.arrays.datetimes.DatetimeArray,1,pandas
numpy.ndim(a=pandas.core.arrays.timedeltas.TimedeltaArray),1,pandas
"numpy.array(pandas.core.series.Series, copy=builtins.bool)",1,pandas
"numpy.asarray(a=tuple[int, int, int, tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str]], dtype=Type[builtins.object])",1,pandas
"numpy.delete(arr=numpy.ndarray, axis=int, obj=int)",1,pandas
"numpy.asarray(a=list[tuple[int, int]])",1,pandas
"numpy.asarray(a=list[int], dtype=Type[numpy.uint64])",1,pandas
"Type[numpy.uint64] in tuple[Type[numpy.object_], Type[builtins.object]]",1,pandas
"numpy.ndarray[tuple[NoneType, int, slice[int, NoneType, NoneType], NoneType]]",1,dask.array
"numpy.array(numpy.int64, ndmin=int)",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=list[tuple[int, int, int]])",1,pandas
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=list[tuple[str, str, str, str]])",1,pandas
"numpy.ndarray[tuple[NoneType, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[slinumpy.ndarraye[numpy.int64, numpy.int64, NoneType]] = numpy.ndarray",1,pandas
"numpy.ndarray[slilist[tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64]]",1,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[numpy.int64, numpy.int64, NoneType]]] = numpy.ndarray",1,pandas
numpy.ndarray[list[int]] = numpy.ndarray,1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[NoneType, slice[NoneType, int, NoneType], NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[NoneType, int, builtins.ellipsis, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[NoneType, int, builtins.ellipsis, NoneType]]",1,dask.array
"numpy.ndarray[tuple[NoneType, int, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[NoneType, int, slice[NoneType, int, NoneType], NoneType]]",1,dask.array
"numpy.asarray(a=list[tuple[int, int, int]], dtype=NoneType)",1,pandas
builtins.functionuiltins.function == builtins.function,1,pandas
"numpy.ndarray[tuple[NoneType, int, int, int]]",1,dask.array
Type[pandas.core.series.Series] == Type[numpy.ndarray],1,pandas
Type[Type[numpy.ndarray]uiltins.set] == Type[numpy.ndarray],1,pandas
Type[Type[numpy.ndarray]uiltins.slice] == Type[numpy.ndarray],1,pandas
"numpy.ndarray[tuple[NoneType, int, int, builtins.ellipsis]]",1,dask.array
Type[pandas.core.indexes.Type[numpy.ndarray]ase.Index] == Type[numpy.ndarray],1,pandas
Type[numpy.ndarray] == Type[numpy.ndarray],1,pandas
Type[Type[numpy.ndarray]uiltins.list] == Type[numpy.ndarray],1,pandas
Type[Type[numpy.ndarray]uiltins.tuple] == Type[numpy.ndarray],1,pandas
"numpy.arange(int, int, NoneType)",1,pandas
"numpy.logical_or(pandas.core.series.Series, pandas.core.series.Series)",1,pandas
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, int, int]]",1,dask.array
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, int, NoneType]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], NoneType, slice[NoneType, int, NoneType], NoneType]]",1,dask.array
"Type[numpy.int32] in tuple[Type[numpy.float32], Type[numpy.float64]]",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], NoneType, builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], NoneType, int]]",1,dask.array
Type[numpy.int16] == Type[numpy.uint32],1,pandas
numpy.int8 > int,1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
Type[numpy.int8] == Type[numpy.uint16],1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], NoneType, builtins.ellipsis, int]]",1,dask.array
"numpy.where(list[Type[Union[numpy.float64, numpy.int16, numpy.int32, numpy.int8]]])",1,pandas
numpy.ndarray.byteswap(numpy.ndarray),1,pandas
Type[numpy.int64] == Type[numpy.float64],1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], NoneType, builtins.ellipsis, slice[int, NoneType, NoneType]]]",1,dask.array
Type[numpy.int32] == Type[numpy.int64],1,pandas
Type[numpy.int32] == Type[numpy.int16],1,pandas
Type[numpy.int32] == Type[numpy.int8],1,pandas
Type[numpy.int32] == Type[numpy.uint32],1,pandas
Type[numpy.int32] == Type[numpy.float64],1,pandas
Type[numpy.int16] == Type[numpy.uint16],1,pandas
Type[numpy.int16] == Type[numpy.float64],1,pandas
Type[numpy.int8] == Type[numpy.int8],1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], NoneType, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
Type[numpy.int8] == Type[numpy.uint32],1,pandas
Type[numpy.int8] == Type[numpy.uint8],1,pandas
Type[numpy.int8] == Type[numpy.float64],1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], NoneType, slice[NoneType, int, NoneType], int]]",1,dask.array
Type[numpy.int64] == Type[numpy.int8],1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
Type[numpy.int64] == Type[numpy.int16],1,pandas
"numpy.dtype in tuple[Type[numpy.float16], Type[numpy.float32]]",1,pandas
"numpy.array(list[numpy.int64], dtype=Type[numpy.int32])",1,pandas
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.int64],1,pandas
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.int16],1,pandas
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.int8],1,pandas
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.uint32],1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], int, int]]",1,dask.array
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.uint8],1,pandas
"numpy.where(list[Type[Union[numpy.int32, numpy.int8]]])",1,pandas
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.uint16],1,pandas
"numpy.where(list[Type[Union[numpy.int16, numpy.int32, numpy.int8]]])",1,pandas
"numpy.dtype in tuple[Type[numpy.int8], Type[numpy.int16], Type[numpy.int32]]",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], int, slice[int, NoneType, NoneType]]]",1,dask.array
numpy.ndarray.newbyteorder(numpy.ndarray),1,pandas
numpy.float16,1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], int, NoneType]]",1,dask.array
numpy.ndarray - datetime.datetime,1,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, datetime.datetime)",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], builtins.ellipsis]]",1,dask.array
numpy.where(list[Type[numpy.float64]]),1,pandas
numpy.float32 == float,1,pandas
numpy.ndarray[numpy.ndarray] = pandas.io.stata.StataMissingValue,1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], int]]",1,dask.array
numpy.array(pandas.io.stata.StataMissingValue),1,pandas
"numpy.unique(ar=pandas.core.series.Series, return_inverse=builtins.bool)",1,pandas
"numpy.where(list[Union[Type[numpy.int32], str]])",1,pandas
numpy.uint8 in dict,1,pandas
"numpy.asarray(a=list[builtins.bytes], dtype=numpy.dtype)",1,pandas
"numpy.ix_(args=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,skimage
numpy.dtype != Type[numpy.int32],1,pandas
numpy.dtype != Type[numpy.int16],1,pandas
numpy.dtype != Type[numpy.int8],1,pandas
numpy.dtype != Type[numpy.float32],1,pandas
"numpy.where(list[Type[Union[numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int8]]])",1,pandas
numpy.where(list[builtins.bool]),1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], NoneType, NoneType, int]]",1,dask.array
"numpy.issubdtype(arg1=Type[numpy.bytes_], arg2=Type[numpy.integer])",1,pandas
"numpy.core.multiarray._reconstruct(Type[numpy.ndarray], tuple[int], str)",1,pandas
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray.__setstate__(numpy.ndarray, tuple[int, tuple[int], numpy.dtype, builtins.bool, builtins.bytes])",1,pandas
"numpy.core.multiarray._reconstruct(Type[pandas.core.arrays.sparse.array.SparseArray], tuple[int], builtins.bytes)",1,pandas
"numpy.core.multiarray._reconstruct(Type[numpy.ndarray], tuple[int], builtins.bytes)",1,pandas
"numpy.dtype(str, int, int)",1,pandas
Type[numpy.int64] == Type[numpy.object_],1,pandas
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, slice[NoneType, int, NoneType], NoneType]]",1,dask.array
"numpy.sort(a=numpy.ndarray, axis=int)",1,skimage
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, int, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.exp(float),1,skimage
numpy.dtype == Type[numpy.uint32],1,pandas
"numpy.amax(a=list[numpy.ndarray], axis=int)",1,skimage
numpy.ndarray | pandas.core.series.Series,1,pandas
"numpy.zeros(tuple[int, int], dtype=Type[numpy.uint8])",1,pandas
"numpy.asarray(a=pandas.core.series.Series, dtype=Type[numpy.float64])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], NoneType, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.where(list[Type[Union[numpy.float64, numpy.int16, numpy.int8]]])",1,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, pandas._libs.tslibs.nattype.NaTType)",1,pandas
numpy.where(list[str]),1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], NoneType, int, builtins.ellipsis]]",1,dask.array
"numpy.where(list[Type[Union[numpy.float32, numpy.float64, numpy.int32]]])",1,pandas
numpy.isinf(numpy.float32),1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], NoneType, int, int]]",1,dask.array
"numpy.where(list[Union[Type[Union[numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int8]], str]])",1,pandas
"numpy.ndarray.argsort(numpy.ndarray, int)",1,skimage
numpy.float32 > float,1,pandas
"numpy.where(list[Type[Union[numpy.float64, numpy.int16, numpy.int32]]])",1,pandas
"numpy.roll(a=list[Union[float, int]], shift=int)",1,skimage
numpy.int16 > int,1,pandas
numpy.where(list[Type[numpy.int32]]),1,pandas
numpy.ndarray[int] = numpy.dtype,1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], NoneType, slice[int, NoneType, NoneType], int]]",1,dask.array
"numpy.where(list[Union[Type[Union[numpy.float64, numpy.int32]], str]])",1,pandas
"numpy.where(list[Type[Union[numpy.float64, numpy.int32]]])",1,pandas
numpy.isinf(float),1,pandas
"numpy.where(list[Union[Type[Union[numpy.float32, numpy.uint8]], str]])",1,pandas
"numpy.where(list[Type[Union[numpy.float32, numpy.int16, numpy.int32, numpy.int8]]])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], NoneType, int, slice[int, NoneType, NoneType]]]",1,dask.array
numpy.min_scalar_type(numpy.float32),1,pandas
"numpy.where(list[Type[Union[numpy.float32, numpy.int16, numpy.int8]]])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], NoneType, slice[int, NoneType, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.true_divide(numpy.ndarray, numpy.ndarray)",1,skimage
"numpy.ndarray[slilist[pandas.core.arrays.integer.Int64Dtype]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.integer.Int64Dtype]",1,pandas
dask.array.core.Array + numpy.ma.core.MaskedArray,1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[slilist[Union[builtins.bool, tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, tuple[int, int]]]",1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], NoneType]]",1,dask.array
"numpy.ndarray[slilist[Union[datetime.datetime, datetime.timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.datetime, datetime.timedelta]]",1,pandas
"numpy.array(list[Union[pandas.core.arrays.integer.Int64Dtype, pandas.core.dtypes.dtypes.DatetimeTZDtype]])",1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[slilist[Union[list[int], numpy.ndarray]]e[NoneType, NoneType, NoneType]] = list[Union[list[int], numpy.ndarray]]",1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], NoneType, NoneType]]",1,dask.array
"numpy.repeat(a=list[int], repeats=numpy.int64)",1,pandas
"numpy.repeat(a=list, repeats=numpy.int64)",1,pandas
"numpy.ndarray[tuple[int, int, builtins.ellipsis, int]]",1,dask.array
"numpy.repeat(a=pandas.core.indexes.datetimes.DatetimeIndex, repeats=numpy.float64)",1,pandas
"numpy.ndarray[slinumpy.bool_e[NoneType, NoneType, int]] = numpy.bool_",1,pandas
"numpy.ndarray[tuple[int, int, builtins.ellipsis, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.array(list[pandas._libs.interval.Interval], copy=builtins.bool)",1,pandas
"numpy.array(list[Union[numpy.float64, numpy.int64]], dtype=Type[numpy.float64])",1,pandas
numpy.int64 * numpy.float64,1,pandas
"numpy.array(list[numpy.int64], dtype=Type[numpy.float64])",1,pandas
"numpy.allclose(a=numpy.ndarray, atol=float, b=numpy.ndarray)",1,pandas
"numpy.ndarray[tuple[int, int, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.asarray(a=list[Union[float, int]], dtype=Type[numpy.float64])",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
"numpy.repeat(a=pandas.core.indexes.category.CategoricalIndex, repeats=numpy.float64)",1,pandas
"numpy.ndarray[tuple[int, int, slice[NoneType, int, NoneType], NoneType]]",1,dask.array
numpy.ndarray in pandas.core.frame.DataFrame,1,pandas
"numpy.random.mtrand.RandomState.lognormal(numpy.random.mtrand.RandomState, float, float, int)",1,pandas
"numpy.ndarray[tuple[int, int, int, builtins.ellipsis]]",1,dask.array
"numpy.array(list[tuple[str, str]], dtype=list[tuple[str, Type[builtins.object]]])",1,pandas
"numpy.dtype(list[tuple[str, Type[Union[builtins.float, builtins.int, builtins.object]]]])",1,pandas
"numpy.ndarray[tuple[int, int, int, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray.repeat(numpy.ndarray, numpy.float64, axis=NoneType)",1,pandas
"numpy.issubdtype(arg1=Type[numpy.timedelta64], arg2=Type[numpy.integer])",1,pandas
"numpy.where(numpy.ndarray, pandas.core.arrays.categorical.Categorical, pandas.core.arrays.categorical.Categorical)",1,pandas
"numpy.array(float, dtype=numpy.dtype)",1,pandas
"numpy.array(list[tuple[numpy.datetime64, str]], list[tuple[str, numpy.dtype]])",1,pandas
pandas._linumpy.bool_s.missing.NAType != numpy.bool_,1,pandas
numpy.int64 > pandas._libs.missing.NAType,1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], int, builtins.ellipsis]]",1,dask.array
numpy.int64 == pandas._libs.missing.NAType,1,pandas
pandas._linumpy.int64s.missing.NAType >= numpy.int64,1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], int, int]]",1,dask.array
pandas._linumpy.int64s.missing.NAType != numpy.int64,1,pandas
numpy.int64 // pandas._libs.missing.NAType,1,pandas
numpy.int64 * pandas._libs.missing.NAType,1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], int, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.int64 + pandas._libs.missing.NAType,1,pandas
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[str], tuple[int, int])",1,pandas
"numpy.array(list[tuple[numpy.int64, numpy.int8]], list[tuple[str, numpy.dtype]])",1,pandas
numpy.min_scalar_type(numpy.float16),1,pandas
numpy.asarray(a=numpy.float64),1,skimage
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], int, NoneType]]",1,dask.array
"numpy.array(numpy.float64, dtype=int, ndmin=str)",1,skimage
"numpy.array(numpy.ndarray, dtype=int, ndmin=str)",1,skimage
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"tuple[int, int] != numpy.ndarray",1,skimage
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], int]]",1,dask.array
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.array(list[tuple[numpy.int64, str]], list[tuple[str, numpy.dtype]])",1,pandas
"numpy.array(list[tuple[str, str]], list[tuple[str, numpy.dtype]])",1,pandas
"numpy.ndarray[slilist[Union[list[Union[float, int, str]], pandas.core.indexes.datetimes.DatetimeIndex]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[float, int, str]], pandas.core.indexes.datetimes.DatetimeIndex]]",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.float16e[NoneType, NoneType, NoneType]]] = numpy.float16",1,pandas
"numpy.ndarray[tuple[int, int, int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, int, int, NoneType]]",1,dask.array
"numpy.asarray(a=tuple[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, str], dtype=Type[builtins.object])",1,pandas
"numpy.repeat(a=pandas.core.indexes.base.Index, repeats=numpy.float64)",1,pandas
"numpy.where(numpy.ndarray, float, numpy.ndarray)",1,pandas
numpy.iterable(y=float),1,pandas
"numpy.ndarray.view(numpy.ndarray, dtype=Type[numpy.int64])",1,pandas
numpy.iterable(y=list[pandas._libs.tslibs.timestamps.Timestamp]),1,pandas
"numpy.iterable(y=list[Union[float, int]])",1,pandas
numpy.iterable(y=pandas.core.indexes.interval.IntervalIndex),1,pandas
"numpy.ones(dtype=str, shape=int)",1,pandas
"numpy.ndarray[tuple[int, int, NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
pandas.core.frame.DataFrame / numpy.float64,1,pandas
pandas.core.frame.DataFrame / numpy.int64,1,pandas
"numpy.repeat(a=pandas.core.indexes.numeric.Float64Index, repeats=numpy.float64)",1,pandas
"numpy.repeat(a=pandas.core.indexes.numeric.Int64Index, repeats=numpy.float64)",1,pandas
"numpy.asarray(a=tuple[int, int, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, str], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[int, int, NoneType, builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[int, int, NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1,pandas
"numpy.array(tuple[datetime.date, datetime.date, datetime.date], copy=builtins.bool)",1,pandas
"numpy.ndarray[tuple[int, int, NoneType, NoneType]]",1,dask.array
"tuple[int, int] != numpy.int64",1,pandas
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], builtins.ellipsis, int]]",1,dask.array
"numpy.ndarray[slilist[list[Union[NoneType, int]]]e[NoneType, NoneType, NoneType]] = list[list[Union[NoneType, int]]]",1,pandas
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.array(list[float], ndmin=int)",1,pandas
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.ndarray.fill(numpy.ndarray, numpy.float128)",1,pandas
"numpy.array(list[float], dtype=int, ndmin=Type[numpy.float128])",1,pandas
numpy.isfinite(float),1,pandas
"numpy.ndarray[tuple[int, int, slice[int, NoneType, NoneType], NoneType]]",1,dask.array
"numpy.ndarray[tuple[int, int, slice[int, NoneType, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.append(arr=pandas.core.indexes.base.Index, values=float)",1,pandas
"numpy.asarray(a=list[pandas.core.resample.TimeGrouper], dtype=str)",1,pandas
"numpy.asarray(a=tuple[builtins.bool, builtins.bool, builtins.bool, builtins.bool], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[int, int, slice[int, NoneType, NoneType], int]]",1,dask.array
"numpy.array(tuple[str, str, str, str, str, str, str, str], copy=builtins.bool)",1,pandas
"numpy.asarray(a=tuple[int, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[list[str], pandas.core.series.Series]]e[NoneType, NoneType, NoneType]] = list[Union[list[str], pandas.core.series.Series]]",1,pandas
numpy.str_ != str,1,pandas
"numpy.asarray(a=list[Union[numpy.str_, str]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[int, int, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.asarray(a=list[Union[numpy.str_, str]], dtype=NoneType)",1,pandas
"numpy.asarray(a=list[Union[numpy.str_, str]])",1,pandas
"numpy.append(arr=pandas.core.indexes.numeric.Float64Index, values=float)",1,pandas
"numpy.ndarray[tuple[int, int, NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[int, int, builtins.ellipsis, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, int, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ones(dtype=numpy.dtype, shape=int)",1,pandas
numpy.int64 - float,1,pandas
"numpy.asarray(a=pandas.core.indexes.datetimes.DatetimeIndex, dtype=numpy.dtype)",1,pandas
numpy.iterable(y=pandas.core.indexes.datetimes.DatetimeIndex),1,pandas
"numpy.where(pandas.core.series.Series, pandas.core.series.Series, float)",1,pandas
numpy.float64 += float,1,pandas
numpy.float64 -= float,1,pandas
"numpy.ndarray[tuple[int, int, builtins.ellipsis, NoneType]]",1,dask.array
"numpy.ndarray[tuple[int, int, slice[NoneType, int, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.around(a=float, decimals=int)",1,pandas
"numpy.ndarray[tuple[int, int, slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.ndarray[tuple[int, int, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
numpy.modf(float),1,pandas
pandas._linumpy.bool_s.missing.NAType >= numpy.bool_,1,pandas
numpy.pandas._libs.missing.NATypeool_ == pandas._libs.missing.NAType,1,pandas
numpy.pandas._libs.missing.NATypeool_ > pandas._libs.missing.NAType,1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, NoneType, builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
numpy.datetime64 - numpy.timedelta64,1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, int, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, int, NoneType]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, slice[int, NoneType, NoneType], int]]",1,dask.array
pandas._linumpy.float64s.tslinumpy.float64s.timestamps.Timestamp != numpy.float64,1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, slice[int, NoneType, NoneType], NoneType]]",1,dask.array
pandas._linumpy.float64s.tslinumpy.float64s.timestamps.Timestamp == numpy.float64,1,pandas
"numpy.array(list[list[pandas._libs.tslibs.timestamps.Timestamp]], dtype=Type[builtins.object])",1,pandas
numpy.ndarray >= pandas._libs.tslibs.timestamps.Timestamp,1,pandas
numpy.ndarray != pandas._libs.tslibs.timestamps.Timestamp,1,pandas
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timestamps.Timestamp != numpy.ndarray,1,pandas
numpy.round_(a=float),1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timestamps.Timestamp == numpy.ndarray,1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
numpy.ndarray + pandas._libs.tslibs.timestamps.Timestamp,1,pandas
pandas._linumpy.int64s.tslinumpy.int64s.timestamps.Timestamp - numpy.int64,1,pandas
pandas._linumpy.int64s.tslinumpy.int64s.timestamps.Timestamp + numpy.int64,1,pandas
numpy.timedelta64 + pandas._libs.tslibs.timestamps.Timestamp,1,pandas
numpy.datetime64 - pandas._libs.tslibs.timestamps.Timestamp,1,pandas
"numpy.zeros_like(a=numpy.ndarray, dtype=Type[numpy.float32])",1,skimage
numpy.ndim(a=list[numpy.timedelta64]),1,pandas
numpy.float16(int),1,pandas
numpy.ndarray != pandas._libs.tslibs.timedeltas.Timedelta,1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, slice[NoneType, int, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.concatenate(tuple[numpy.ndarray, list[int]])",1,skimage
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta == numpy.ndarray,1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], int, NoneType]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], int, int]]",1,dask.array
"numpy.array(tuple, copy=builtins.bool)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], int, builtins.ellipsis]]",1,dask.array
"numpy.array(tuple, copy=NoneType, dtype=builtins.bool)",1,pandas
"numpy.take(a=pandas.core.indexes.base.Index, indices=numpy.ndarray)",1,pandas
"numpy.asarray(a=tuple[int, int, float], dtype=Type[builtins.object])",1,pandas
"numpy.where(builtins.bool, int, int)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], int, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.take(a=pandas.core.indexes.numeric.Float64Index, indices=numpy.ndarray)",1,pandas
"numpy.isclose(a=numpy.bool_, b=builtins.bool, equal_nan=builtins.bool)",1,pandas
"numpy.isclose(a=float, b=float, equal_nan=builtins.bool)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], int, slice[int, NoneType, NoneType]]]",1,dask.array
numpy.isclose,1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
numpy.ptp,1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], NoneType]]",1,dask.array
"numpy.isclose(a=numpy.float64, b=int, equal_nan=builtins.bool)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.asarray(a=tuple[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], NoneType, int]]",1,dask.array
"numpy.all(a=pandas.core.series.Series, out=builtins.object)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], NoneType, NoneType]]",1,dask.array
"numpy.all(a=pandas.core.series.Series, keepdims=builtins.bool)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, builtins.ellipsis, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.ptp(a=numpy.ndarray),1,pandas
"numpy.ufunc.reduce(numpy.ufunc, numpy.ndarray, axis=NoneType, dtype=NoneType, keepdims=builtins.bool)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, builtins.ellipsis, int]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, builtins.ellipsis, NoneType]]",1,dask.array
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta != numpy.ndarray,1,pandas
"numpy.array(list[list[pandas._libs.tslibs.timedeltas.Timedelta]], dtype=Type[builtins.object])",1,pandas
pandas._linumpy.ndarrays.missing.NAType ** numpy.ndarray,1,pandas
numpy.ndarray // pandas._libs.missing.NAType,1,pandas
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.nattype.NaTType + numpy.timedelta64,1,pandas
numpy.ndarray - pandas._libs.tslibs.nattype.NaTType,1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], builtins.ellipsis, int]]",1,dask.array
"numpy.divmod(numpy.ndarray, pandas._libs.missing.NAType)",1,pandas
"numpy.modf(pandas._libs.missing.NAType, pandas._libs.missing.NAType)",1,pandas
numpy.logaddexp,1,pandas
"numpy.logaddexp(pandas._libs.missing.NAType, numpy.ndarray)",1,pandas
"numpy.logaddexp(numpy.ndarray, pandas._libs.missing.NAType)",1,pandas
"numpy.ufunc.at(numpy.ufunc, pandas._libs.missing.NAType, int)",1,pandas
numpy.frexp(pandas._libs.missing.NAType),1,pandas
"numpy.add(pandas._libs.missing.NAType, int)",1,pandas
numpy.log(pandas._libs.missing.NAType),1,pandas
numpy.ndarray % pandas._libs.missing.NAType,1,pandas
numpy.ndarray / pandas._libs.missing.NAType,1,pandas
numpy.timedelta64 + pandas._libs.tslibs.nattype.NaTType,1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], builtins.ellipsis, slice[int, NoneType, NoneType]]]",1,dask.array
numpy.ndarray * pandas._libs.missing.NAType,1,pandas
numpy.ndarray - pandas._libs.missing.NAType,1,pandas
numpy.zeros(tuple[int]),1,pandas
numpy.ndarray + pandas._libs.missing.NAType,1,pandas
"numpy.full(dtype=Type[builtins.object], fill_value=pandas._libs.missing.NAType, shape=tuple[int, int, int])",1,pandas
"numpy.full(dtype=Type[builtins.object], fill_value=pandas._libs.missing.NAType, shape=tuple[int, int])",1,pandas
"numpy.full(dtype=Type[builtins.object], fill_value=pandas._libs.missing.NAType, shape=tuple[int])",1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], builtins.ellipsis, NoneType]]",1,dask.array
numpy.pandas._libs.missing.NATypeool_ ** pandas._libs.missing.NAType,1,pandas
numpy.ndarrayuiltins.numpy.ndarrayool == numpy.ndarray,1,pandas
float == numpy.ndarray,1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], int]]",1,dask.array
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.nattype.NaTType - numpy.timedelta64,1,pandas
numpy.timedelta64 + pandas._libs.interval.Interval,1,pandas
numpy.ndarray % pandas._libs.tslibs.timedeltas.Timedelta,1,pandas
"numpy.ndarray[tuple[int, builtins.ellipsis, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType, NoneType, NoneType]]",1,dask.array
numpy.timedelta64 % pandas._libs.tslibs.timedeltas.Timedelta,1,pandas
"numpy.ndarray[tuple[int, builtins.ellipsis, slice[NoneType, int, NoneType], int]]",1,dask.array
numpy.int32 // pandas._libs.tslibs.timedeltas.Timedelta,1,pandas
numpy.uint8 // pandas._libs.tslibs.timedeltas.Timedelta,1,pandas
numpy.float64 // pandas._libs.tslibs.timedeltas.Timedelta,1,pandas
"numpy.ndarray[tuple[int, builtins.ellipsis, int, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.int32(float),1,pandas
"numpy.ndarray[tuple[int, builtins.ellipsis, int, NoneType]]",1,dask.array
numpy.uint8(float),1,pandas
pandas._linumpy.int32s.tslinumpy.int32s.timedeltas.Timedelta // numpy.int32,1,pandas
pandas._linumpy.datetime64s.tslinumpy.datetime64s.timedeltas.Timedelta // numpy.datetime64,1,pandas
numpy.datetime64 / pandas._libs.tslibs.timedeltas.Timedelta,1,pandas
numpy.float64 * pandas._libs.tslibs.timedeltas.Timedelta,1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], builtins.ellipsis, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.timedelta64 * pandas._libs.tslibs.timedeltas.Timedelta,1,pandas
"numpy.ndarray[tuple[int, builtins.ellipsis, slice[int, NoneType, NoneType], int]]",1,dask.array
"numpy.ndarray[tuple[int, builtins.ellipsis, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, builtins.ellipsis, slice[int, NoneType, NoneType], NoneType]]",1,dask.array
pandas._linumpy.float64s.tslinumpy.float64s.timedeltas.Timedelta - numpy.float64,1,pandas
pandas._linumpy.float64s.tslinumpy.float64s.timedeltas.Timedelta + numpy.float64,1,pandas
pandas._linumpy.int64s.tslinumpy.int64s.timedeltas.Timedelta - numpy.int64,1,pandas
pandas._linumpy.int64s.tslinumpy.int64s.timedeltas.Timedelta + numpy.int64,1,pandas
"numpy.ndarray[tuple[int, builtins.ellipsis, NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[int, builtins.ellipsis, NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta - numpy.timedelta64,1,pandas
numpy.datetime64 + pandas._libs.tslibs.timedeltas.Timedelta,1,pandas
"numpy.zeros_like(a=numpy.ndarray, dtype=Type[numpy.uint8])",1,skimage
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.array(list[float], dtype=int, ndmin=Type[numpy.float64])",1,pandas
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], NoneType]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], builtins.ellipsis, NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], builtins.ellipsis, NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis, int]]",1,dask.array
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=builtins.range)",1,pandas
numpy.ndarray &= int,1,pandas
numpy.ndarray >> numpy.ndarray,1,pandas
numpy.ix_,1,skimage
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.ndarray[tuple[numpy.ndarray, int]] = float",1,pandas
"numpy.ndarray[slituple[str, str]e[NoneType, NoneType, NoneType]] = tuple[str, str]",1,pandas
"numpy.ndarray[slilist[list[Union[float, int]]]e[NoneType, NoneType, NoneType]] = list[list[Union[float, int]]]",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], int, builtins.ellipsis]]",1,dask.array
"numpy.zeros(int, dtype=Type[numpy.uint8])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], int, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.ndarray + str,1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], int, int]]",1,dask.array
"numpy.asarray(a=tuple[int, int, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[tuple[str, str], tuple[str, str], str], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.array(tuple[datetime.datetime, datetime.datetime, datetime.datetime], copy=builtins.bool)",1,pandas
"numpy.ndarray[tuple[slinumpy.datetime64e[int, int, NoneType]]] = numpy.datetime64",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], int, NoneType]]",1,dask.array
"numpy.ndarray[slilist[Union[numpy.ndarray, pandas.core.indexes.datetimes.DatetimeIndex]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.ndarray, pandas.core.indexes.datetimes.DatetimeIndex]]",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], int]]",1,dask.array
"numpy.asarray(a=tuple[int, str], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], builtins.ellipsis, slice[int, NoneType, NoneType], NoneType]]",1,dask.array
numpy.ndarray >>= numpy.ndarray,1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], NoneType, builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[int, NoneType, NoneType, builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[int, NoneType, builtins.ellipsis, int]]",1,dask.array
numpy.ndarray[str] = str,1,pandas
"numpy.ndarray[tuple[int, NoneType, builtins.ellipsis, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, NoneType, slice[NoneType, int, NoneType], builtins.ellipsis]]",1,dask.array
numpy.nonzero(a=pandas.core.indexes.numeric.Int64Index),1,pandas
"numpy.zeros(int, dtype=list[tuple[str, Union[Type[Union[builtins.bool, numpy.int64]], str]]])",1,pandas
"numpy.ndarray[tuple[int, NoneType, slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.asarray(a=list[datetime.datetime], dtype=NoneType)",1,pandas
"numpy.asarray(a=list[datetime.date], dtype=NoneType)",1,pandas
"numpy.ndarray[tuple[int, NoneType, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, NoneType, slice[int, NoneType, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[int, NoneType, slice[int, NoneType, NoneType], int]]",1,dask.array
"numpy.ndarray[tuple[int, NoneType, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, NoneType, NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.frombuffer(builtins.bytes, dtype=Type[numpy.uint64])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], builtins.ellipsis, slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], builtins.ellipsis, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], builtins.ellipsis, int, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], builtins.ellipsis, int, int]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], builtins.ellipsis, int, slice[int, NoneType, NoneType]]]",1,dask.array
Type[numpy.datetime64] in dict,1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], builtins.ellipsis, int, NoneType]]",1,dask.array
"numpy.ndarray[slilist[matplotlib.axes._subplots.AxesSubplot]e[NoneType, NoneType, NoneType]] = list[matplotlib.axes._subplots.AxesSubplot]",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], builtins.ellipsis, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
numpy.array(list[matplotlib.axes._subplots.AxesSubplot]),1,pandas
"numpy.take(a=list[str], indices=list[int])",1,pandas
"numpy.zeros(int, numpy.dtype)",1,pandas
builtins.bytes.rstrip(self=numpy.bytes_),1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
numpy.unsignedinteger,1,skimage
"numpy.ndarray[slilist[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType, str]]",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
numpy.array(list[list[list[list[list[list[int]]]]]]),1,pandas
numpy.float32 / int,1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, slice[NoneType, int, NoneType], NoneType]]",1,dask.array
numpy.copy(a=numpy.float64),1,skimage
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, int, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.arange(int, dtype=Type[builtins.int])",1,pandas
"numpy.prod(a=tuple[int, int, int, int])",1,pandas
"numpy.ndarray[slilist[list[Union[NoneType, builtins.complex, float, float, int]]]e[NoneType, NoneType, NoneType]] = list[list[Union[NoneType, builtins.complex, float, float, int]]]",1,pandas
"numpy.ndarray[slilist[Union[builtins.complex, int, str]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, int, str]]",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, int, NoneType]]",1,dask.array
"numpy.ndarray[slilist[Union[builtins.object, int]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.object, int]]",1,pandas
"numpy.ndarray[slilist[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType]]",1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta, str]]",1,pandas
"numpy.array(list[Union[float, int]], dtype=Type[builtins.int])",1,pandas
"numpy.ndarray[slilist[Union[datetime.timedelta, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.timedelta, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, int, builtins.ellipsis]]",1,dask.array
str != numpy.int64,1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, int, int]]",1,dask.array
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp, str]]",1,pandas
"numpy.ndarray[slilist[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType, str]]",1,pandas
"numpy.ndarray[slilist[Union[datetime.date, pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.date, pandas._libs.tslibs.nattype.NaTType, str]]",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
Type[numpy.float64] == str,1,pandas
"numpy.array(list[dict], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[list[Union[int, str]]]e[NoneType, NoneType, NoneType]] = list[list[Union[int, str]]]",1,pandas
"numpy.issubdtype(arg1=Type[numpy.datetime64], arg2=Type[numpy.integer])",1,pandas
"numpy.array(list[float], dtype=Type[numpy.float16])",1,pandas
"numpy.arange(float, float, int, dtype=Type[numpy.float32])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.asarray(a=tuple[int, tuple[str, str], tuple[str, str]], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int, int, tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str]], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int, tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str]], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int, tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str]], dtype=Type[builtins.object])",1,pandas
"numpy.array(pandas.core.indexes.numeric.UInt64Index, copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[Union[numpy.ndarray, pandas.core.arrays.categorical.Categorical]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.ndarray, pandas.core.arrays.categorical.Categorical]]",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[slilist[pandas.core.arrays.categorical.Categorical]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.categorical.Categorical]",1,pandas
"numpy.ndarray[slilist[list[Union[int, pandas._libs.tslibs.timestamps.Timestamp]]]e[NoneType, NoneType, NoneType]] = list[list[Union[int, pandas._libs.tslibs.timestamps.Timestamp]]]",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=list[Type[Union[builtins.float, builtins.int, builtins.object]]])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, builtins.ellipsis, int]]",1,dask.array
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, slice[NoneType, int, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=list[Type[Union[builtins.float, builtins.object]]])",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
numpy.ceil(numpy.float64),1,pandas
numpy.ndarray - float,1,pandas
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], int, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.argmax(a=pandas.core.indexes.datetimes.DatetimeIndex),1,pandas
numpy.fft.ifftshift(x=numpy.ndarray),1,skimage
"numpy.ones(dtype=Type[builtins.int], shape=int)",1,pandas
"numpy.ndarray[tuple[int, NoneType, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, NoneType, slice[NoneType, int, NoneType], NoneType]]",1,dask.array
numpy.argmax(a=pandas.core.series.Series),1,pandas
numpy.argmin(a=pandas.core.series.Series),1,pandas
"numpy.allclose(a=float, b=numpy.float64)",1,pandas
"numpy.allclose(a=float, b=numpy.float32)",1,pandas
"numpy.ndarray.sum(numpy.ndarray, dtype=str)",1,pandas
"numpy.isclose(a=float, b=float)",1,skimage
"numpy.argmax(a=pandas.core.indexes.period.PeriodIndex, out=int)",1,pandas
"numpy.argmin(a=pandas.core.indexes.period.PeriodIndex, out=int)",1,pandas
"numpy.ndarray[tuple[int, NoneType, int, int]]",1,dask.array
numpy.argmin(a=pandas.core.indexes.datetimes.DatetimeIndex),1,pandas
"numpy.arange(numpy.int64, numpy.int64, int)",1,pandas
"numpy.amax(a=pandas.core.indexes.datetimes.DatetimeIndex, out=int)",1,pandas
"numpy.amin(a=pandas.core.indexes.datetimes.DatetimeIndex, out=int)",1,pandas
numpy.amax(a=pandas.core.indexes.datetimes.DatetimeIndex),1,pandas
"numpy.ndarray[tuple[int, NoneType, int, builtins.ellipsis]]",1,dask.array
numpy.amin(a=pandas.core.indexes.datetimes.DatetimeIndex),1,pandas
"numpy.amax(a=pandas.core.indexes.range.RangeIndex, out=int)",1,pandas
"numpy.amin(a=pandas.core.indexes.range.RangeIndex, out=int)",1,pandas
"numpy.ndarray[tuple[int, NoneType, int, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.amax(a=pandas.core.indexes.range.RangeIndex),1,pandas
"numpy.argmax(a=pandas.core.indexes.numeric.Int64Index, out=int)",1,pandas
"numpy.argmin(a=pandas.core.indexes.numeric.Int64Index, out=int)",1,pandas
numpy.argmax(a=pandas.core.indexes.numeric.Int64Index),1,pandas
"numpy.ndarray[tuple[int, NoneType, int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.lilist[slice[int, float, NoneType]].index_tricks.MGridClass[list[slice[int, float, NoneType]]]",1,skimage
"numpy.ndarray[tuple[int, NoneType, builtins.ellipsis, NoneType]]",1,dask.array
"numpy.amax(a=pandas.core.indexes.numeric.Int64Index, out=int)",1,pandas
"numpy.sum(a=tuple[int, int])",1,pandas
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], int, NoneType]]",1,dask.array
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], int, builtins.ellipsis]]",1,dask.array
"numpy.ndarray.fill(numpy.ndarray, numpy.float32)",1,pandas
"numpy.array(list[float], dtype=int, ndmin=Type[numpy.float32])",1,pandas
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], int, int]]",1,dask.array
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], int]]",1,dask.array
numpy.float16(float),1,pandas
"numpy.array(list[float], dtype=int, ndmin=Type[numpy.float16])",1,pandas
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], NoneType, builtins.ellipsis]]",1,dask.array
"numpy.ndarray[slilist[Union[decimal.Decimal, int]]e[NoneType, NoneType, NoneType]] = list[Union[decimal.Decimal, int]]",1,pandas
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slistre[int, int, NoneType]]] = str",1,pandas
"numpy.searchsorted(a=numpy.ndarray, side=str, v=pandas.core.indexes.datetimes.DatetimeIndex)",1,pandas
"numpy.ndarray[tuple[int, NoneType, builtins.ellipsis, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.array(pandas.core.arrays.interval.IntervalArray, dtype=Type[numpy.object_])",1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.timedeltas.Timedelta]]",1,pandas
"numpy.ndarray[slilist[Union[float, pandas._libs.tslibs.period.Period]]e[NoneType, NoneType, NoneType]] = list[Union[float, pandas._libs.tslibs.period.Period]]",1,pandas
"numpy.ndarray[slilist[Union[builtins.bool, pandas._libs.tslibs.period.Period]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, pandas._libs.tslibs.period.Period]]",1,pandas
"numpy.array(list[Union[builtins.bool, float]], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.array_equal(a1=list[Union[builtins.bool, int]], a2=numpy.ndarray)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, NoneType, int]]]",1,pandas
numpy.zeros_like(a=pandas.core.indexes.datetimes.DatetimeIndex),1,pandas
numpy.ndarray += numpy.int64,1,pandas
numpy.product(args=tuple[pandas.core.series.Series]),1,pandas
builtins.frozensetuiltins.function in builtins.frozenset,1,pandas
numpy.product,1,pandas
"numpy.ndarray[tuple[int, NoneType, int, NoneType]]",1,dask.array
"numpy.ndarray[tuple[int, NoneType, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[slilist[pandas.core.arrays.integer.UInt32Dtype]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.integer.UInt32Dtype]",1,pandas
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], builtins.ellipsis, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.linspace(num=int, start=numpy.float64, stop=numpy.float64)",1,pandas
numpy.int64 - numpy.float64,1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.array(tuple[float, float, float, float])",1,pandas
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, int, int, int)",1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"builtins.bytes.decode(encoding=str, self=numpy.bytes_)",1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], NoneType]]",1,dask.array
numpy.bytes_,1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], NoneType, int]]",1,dask.array
*numpy.void,1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], builtins.ellipsis, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int, int)",1,pandas
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], builtins.ellipsis, NoneType]]",1,dask.array
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], NoneType]]",1,dask.array
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ma.core.masked_where(a=numpy.ma.core.MaskedArray, condition=numpy.ndarray)",1,pandas
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], NoneType, NoneType]]",1,dask.array
numpy.ma.core.array(data=numpy.ndarray),1,pandas
numpy.ravel(a=pandas.core.frame.DataFrame),1,pandas
numpy.histogram,1,pandas
"numpy.histogram(a=numpy.ndarray, bins=NoneType, range=int)",1,pandas
numpy.ravel(a=pandas.core.series.Series),1,pandas
"numpy.ndarray[tuple[int, builtins.ellipsis, NoneType, NoneType]]",1,dask.array
numpy.array(list[matplotlib.axes._axes.Axes]),1,pandas
"numpy.amin(a=pandas.core.indexes.numeric.Int64Index, out=int)",1,pandas
"numpy.ndarray[tuple[int, NoneType, NoneType, NoneType]]",1,dask.array
"numpy.ndarray[tuple[int, NoneType, slice[int, NoneType, NoneType], NoneType]]",1,dask.array
"numpy.ndarray[tuple[int, NoneType, NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.amin(a=pandas.core.indexes.numeric.Int64Index),1,pandas
numpy.amax(a=pandas.core.indexes.numeric.Int64Index),1,pandas
numpy.argmax(a=pandas.core.indexes.timedeltas.TimedeltaIndex),1,pandas
numpy.argmin(a=pandas.core.indexes.timedeltas.TimedeltaIndex),1,pandas
"numpy.amax(a=pandas.core.indexes.timedeltas.TimedeltaIndex, out=int)",1,pandas
"numpy.amin(a=pandas.core.indexes.timedeltas.TimedeltaIndex, out=int)",1,pandas
numpy.amax(a=pandas.core.indexes.timedeltas.TimedeltaIndex),1,pandas
numpy.amin(a=pandas.core.indexes.timedeltas.TimedeltaIndex),1,pandas
"numpy.maximum(pandas.core.series.Series, pandas.core.series.Series)",1,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.unsignedinteger])",1,skimage
"numpy.ndarray[tuple[int, NoneType, NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[int, builtins.ellipsis, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.arange(float, int, float)",1,pandas
"numpy.ndarray[tuple[int, builtins.ellipsis, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[int, builtins.ellipsis, slice[NoneType, int, NoneType], NoneType]]",1,dask.array
"numpy.ndarray[tuple[int, builtins.ellipsis, int, int]]",1,dask.array
"numpy.array(list[Union[NoneType, datetime.datetime]], copy=builtins.bool)",1,pandas
"numpy.array(list[NoneType], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
numpy.asarray(a=list[NoneType]),1,pandas
"numpy.ndim(a=list[Union[NoneType, datetime.datetime]])",1,pandas
"numpy.ndarray[tuple[int, builtins.ellipsis, int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.asarray(a=list[Union[NoneType, datetime.datetime]])",1,pandas
numpy.ndim(a=list[NoneType]),1,pandas
numpy.ndarray * numpy.float64,1,pandas
"numpy.random.mtrand.RandomState.set_state(numpy.random.mtrand.RandomState, tuple[str, numpy.ndarray, int, int, float])",1,pandas
"numpy.ndarray[tuple[int, builtins.ellipsis, NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.int64 * numpy.ndarray,1,skimage
"numpy.ndarray[tuple[NoneType, NoneType, NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[int, numpy.ndarray]] = numpy.datetime64",1,pandas
numpy.ndarray[list[int]],1,skimage
"numpy.ndarray[slilist[tuple[int, int, int]]e[NoneType, NoneType, NoneType]] = list[tuple[int, int, int]]",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, int]] = numpy.float64",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, int]] = numpy.float32",1,pandas
numpy.array(numpy.float32),1,pandas
numpy.size(a=pandas.core.series.Series),1,pandas
"numpy.prod(a=pandas.core.series.Series, axis=int)",1,pandas
numpy.ndarray[tuple[list[int]]] = float,1,pandas
numpy.core._add_newdocs.__warningregistry__,1,skimage
numpy.invert,1,skimage
"numpy.array(list[numpy.bool_], copy=builtins.bool)",1,pandas
"numpy.round_(a=int, decimals=int)",1,pandas
"numpy.outer(a=pandas.core.frame.DataFrame, b=pandas.core.frame.DataFrame)",1,pandas
"numpy.tile(A=numpy.ndarray, reps=list[int])",1,pandas
numpy.core.einsumfunc.__warningregistry__,1,skimage
"numpy.ndarray[slilist[tuple[numpy.int64, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[tuple[numpy.int64, numpy.int64]]",1,pandas
"numpy.ufunc.reduceat(numpy.ufunc, numpy.ndarray, numpy.ndarray)",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[list[Union[datetime.datetime, int]]]e[NoneType, NoneType, NoneType]] = list[list[Union[datetime.datetime, int]]]",1,pandas
"numpy.greater_equal(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.amin(a=pandas.core.series.Series, axis=int)",1,pandas
"numpy.ndarray[slilist[Union[list[int], pandas.core.arrays.categorical.Categorical]]e[NoneType, NoneType, NoneType]] = list[Union[list[int], pandas.core.arrays.categorical.Categorical]]",1,pandas
numpy.core.machar.__warningregistry__,1,skimage
"numpy.hypot(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.asarray(a=tuple[pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
numpy.iterable(y=numpy.ndarray),1,pandas
numpy.mean(a=pandas.core.frame.DataFrame),1,pandas
"numpy.array(numpy.float64, copy=NoneType, dtype=builtins.bool)",1,pandas
"numpy.greater(dask.array.core.Array, dask.array.core.Array)",1,dask.array
pandas.core.series.Series * numpy.float64,1,pandas
numpy.float32 == int,1,pandas
pandas.core.series.Series * numpy.float32,1,pandas
"numpy.ndarray[slilist[tuple[int, int, str]]e[NoneType, NoneType, NoneType]] = list[tuple[int, int, str]]",1,pandas
"numpy.asarray(a=list[tuple[int, int, str]], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=list[tuple[int, int, str]], dtype=NoneType)",1,pandas
"numpy.ndarray[slilist[tuple[int, str, int]]e[NoneType, NoneType, NoneType]] = list[tuple[int, str, int]]",1,pandas
"numpy.asarray(a=list[tuple[int, str, int]], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=list[tuple[int, str, int]], dtype=NoneType)",1,pandas
"numpy.ndarray[slilist[tuple[str, int, int]]e[NoneType, NoneType, NoneType]] = list[tuple[str, int, int]]",1,pandas
numpy.linalg.linalg.__warningregistry__,1,skimage
"numpy.asarray(a=list[tuple[str, int, int]], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=list[tuple[str, int, int]], dtype=NoneType)",1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.complex])",1,pandas
numpy.linalg.lapack_lite.__warningregistry__,1,skimage
numpy.ndarray * builtins.complex,1,pandas
numpy.lib.scimath.__warningregistry__,1,skimage
"numpy.fmin(dask.array.core.Array, dask.array.core.Array)",1,dask.array
numpy.lib.ufunclike.__warningregistry__,1,skimage
"numpy.percentile(a=int, q=pandas.core.frame.DataFrame)",1,pandas
numpy.percentile(pandas.core.series.Series),1,pandas
"numpy.percentile(a=int, q=pandas.core.series.Series)",1,pandas
"numpy.fmod(dask.array.core.Array, dask.array.core.Array)",1,dask.array
numpy.core.__warningregistry__,1,skimage
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
NoneType != numpy.int64,1,pandas
numpy.core._internal.__warningregistry__,1,skimage
numpy.ndarray[int] = numpy.float32,1,pandas
int + numpy.float32,1,pandas
numpy.float32 / numpy.float32,1,pandas
numpy.sum(a=pandas.core.frame.DataFrame),1,pandas
numpy.core.memmap.__warningregistry__,1,skimage
numpy.generic.squeeze(numpy.bool_),1,pandas
"numpy.ndarray[tuple[slinumpy.datetime64e[int, int, int]]] = numpy.datetime64",1,pandas
numpy.squeeze(a=pandas.core.series.Series),1,pandas
"numpy.logaddexp(dask.array.core.Array, dask.array.core.Array)",1,dask.array
numpy.core._type_aliases.__warningregistry__,1,skimage
"numpy.empty(list[int], dtype=str)",1,pandas
"numpy.logaddexp2(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, int, p=int, replace=builtins.bool, size=numpy.ndarray)",1,pandas
"numpy.array_equal(a1=list[int], a2=numpy.ndarray)",1,skimage
numpy.core._string_helpers.__warningregistry__,1,skimage
numpy.random.mtrand.RandomState.choice,1,pandas
"numpy.empty(tuple[int, int], dtype=NoneType)",1,pandas
numpy.int64.attrs,1,pandas
"numpy.logical_and(dask.array.core.Array, dask.array.core.Array)",1,dask.array
pandas.core.series.Series /= numpy.int64,1,pandas
"numpy.where(numpy.ndarray, pandas.core.arrays.datetimes.DatetimeArray, pandas.core.arrays.datetimes.DatetimeArray)",1,pandas
numpy.asarray(a=list[pandas.core.dtypes.dtypes.DatetimeTZDtype]),1,pandas
"numpy.core.records.array(dtype=list[tuple[str, str]], obj=list[tuple[str, str, str, str]])",1,pandas
numpy.recarray,1,pandas
"numpy.core.records.array(dtype=list[tuple[str, str]], obj=list[tuple[int, str]])",1,pandas
"numpy.core.records.array(dtype=dict, obj=list[tuple[int, float]])",1,pandas
numpy.asarray(a=numpy.recarray),1,pandas
Type[numpy.recarray] != Type[numpy.recarray],1,pandas
numpy.core.records.array,1,pandas
numpy.dtype.fields,1,pandas
numpy.dtype[str],1,pandas
numpy.core.multiarray.__warningregistry__,1,skimage
numpy.array(list[list[str]]),1,pandas
"numpy.ndarray[slilist[Union[list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]], tuple[float, float]]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]], tuple[float, float]]]",1,pandas
"numpy.ndarray[tuple[slifloate[int, int, int]]] = float",1,pandas
"numpy.empty(tuple[int], dtype=NoneType)",1,pandas
numpy.amax(a=pandas.core.frame.DataFrame),1,pandas
numpy.core._asarray.__warningregistry__,1,skimage
"numpy.ldexp(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.array(numpy.int64, copy=NoneType, dtype=builtins.bool)",1,pandas
"numpy.around(a=numpy.int64, decimals=int)",1,pandas
numpy.modf(numpy.int64),1,pandas
numpy.isfinite(numpy.int64),1,pandas
numpy.iterable(y=list[int]),1,pandas
numpy.core.defchararray.__warningregistry__,1,skimage
numpy.core.arrayprint.__warningregistry__,1,skimage
"numpy.less(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.float64])",1,pandas
"numpy.zeros(tuple[int, int], str)",1,pandas
numpy.array(list[list[numpy.float32]]),1,pandas
numpy.ndarray != list[float],1,pandas
"numpy.ndarray[slilist[Union[Type[Union[builtins.object, numpy.int64]], numpy.dtype]]e[NoneType, NoneType, NoneType]] = list[Union[Type[Union[builtins.object, numpy.int64]], numpy.dtype]]",1,pandas
"numpy.histogram(a=numpy.ndarray, bins=NoneType, range=numpy.int64)",1,skimage
"numpy.ndarray[slilist[pandas.core.indexes.numeric.Int64Index]e[NoneType, NoneType, NoneType]] = list[pandas.core.indexes.numeric.Int64Index]",1,pandas
"numpy.ndarray[slilist[Union[datetime.datetime, int]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.datetime, int]]",1,pandas
"numpy.arange(numpy.int64, numpy.int64)",1,pandas
numpy.core.shape_base.__warningregistry__,1,skimage
"numpy.int64 != slice[NoneType, NoneType, NoneType]",1,pandas
numpy.int64 != NoneType,1,pandas
numpy.ndarray -= numpy.ndarray,1,pandas
"numpy.lituple[numpy.ndarray, int].index_tricks.RClass[tuple[numpy.ndarray, int]]",1,pandas
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=tuple[tuple[int, int], tuple[int, int], tuple[int, int]])",1,skimage
numpy.core._methods.__warningregistry__,1,skimage
"numpy.ndarray[slilist[list[Union[float, str]]]e[NoneType, NoneType, NoneType]] = list[list[Union[float, str]]]",1,pandas
"numpy.less_equal(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.asarray(a=list[tuple[numpy.int64, numpy.int64]], dtype=NoneType)",1,pandas
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, NoneType, NoneType], slinumpy.float64e[int, NoneType, NoneType]]] = numpy.float64",1,pandas
"numpy.ndarray[slilist[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]]",1,pandas
"numpy.empty(int, dtype=Type[numpy.bool_])",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
"numpy.append(arr=pandas.core.indexes.base.Index, values=pandas.core.indexes.base.Index)",1,pandas
numpy.polynomial.legendre.__warningregistry__,1,skimage
int - numpy.uint8,1,skimage
"numpy.ndarray[slilist[Union[pandas._libs.missing.NAType, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.missing.NAType, str]]",1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, str]]",1,pandas
numpy.ndim(a=builtins.generator),1,pandas
numpy.ndim(a=builtins.list_iterator),1,pandas
"numpy.array(builtins.generator, copy=builtins.bool)",1,pandas
"numpy.array(builtins.list_iterator, copy=builtins.bool)",1,pandas
numpy.polynomial.polynomial.__warningregistry__,1,skimage
"numpy.arctan2(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.putmask(numpy.ndarray, str, int)",1,pandas
numpy.polynomial.polyutils.__warningregistry__,1,skimage
"numpy.random.mtrand.RandomState.random_sample(numpy.random.mtrand.RandomState, int)",1,pandas
"numpy.array(pandas.core.indexes.multi.MultiIndex, copy=numpy.dtype, dtype=builtins.bool)",1,pandas
numpy.fft.helper.__warningregistry__,1,skimage
"numpy.copysign(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.array(pandas.core.indexes.numeric.Float64Index, copy=numpy.dtype, dtype=builtins.bool)",1,pandas
numpy.ndarray == list[int],1,skimage
"numpy.array(tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",1,pandas
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1,pandas
numpy.fft._pocketfft_internal.__warningregistry__,1,skimage
"numpy.array(tuple[str, str, str, str, str, str, str, str, str, str, str, str], copy=builtins.bool)",1,pandas
"numpy.array(tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], copy=builtins.bool)",1,pandas
"numpy.array(tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",1,pandas
"numpy.where(pandas.core.series.Series, numpy.ndarray, float)",1,pandas
"numpy.where(tuple[builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool], numpy.ndarray, float)",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=list[pandas._libs.tslibs.timedeltas.Timedelta], dtype=NoneType)",1,pandas
"numpy.asarray(a=list[pandas._libs.interval.Interval], dtype=NoneType)",1,pandas
"numpy.ndarray[slilist[Union[float, numpy.datetime64]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.datetime64]]",1,pandas
"numpy.array(list[Union[NoneType, numpy.timedelta64]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[NoneType, numpy.timedelta64]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, numpy.timedelta64]]",1,pandas
"numpy.array(list[Union[NoneType, numpy.datetime64]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[NoneType, numpy.datetime64]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, numpy.datetime64]]",1,pandas
"numpy.array(tuple[int, float], copy=builtins.bool)",1,pandas
numpy.float64 + numpy.uint8,1,skimage
numpy.isnan(float),1,skimage
numpy.polynomial.hermite_e.__warningregistry__,1,skimage
numpy.timedelta64 in pandas._libs.index.TimedeltaEngine,1,pandas
numpy.datetime64 in pandas._libs.index.DatetimeEngine,1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.float64, side=NoneType, sorter=str)",1,pandas
numpy.uint64(numpy.uint64),1,pandas
numpy.asarray(a=numpy.uint64),1,pandas
pandas.core.indexes.numeric.UInt64Index == numpy.uint64,1,pandas
numpy.float64 - numpy.uint8,1,skimage
numpy.uint8 + numpy.uint8,1,skimage
"numpy.asarray(a=tuple[int, str, int, str, int, str], dtype=Type[builtins.object])",1,pandas
"numpy.where(tuple[builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool], numpy.ndarray, float)",1,pandas
"numpy.asarray(a=list[Union[NoneType, float]], dtype=NoneType)",1,pandas
numpy.ndarray._values,1,pandas
"numpy.asarray(a=list[tuple[str, str]], dtype=str)",1,pandas
"numpy.asarray(a=list[Union[str, tuple[str, str]]], dtype=str)",1,pandas
"numpy.ndarray[slilist[Union[float, pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[float, pandas._libs.tslibs.nattype.NaTType, str]]",1,pandas
"numpy.array(list[Union[float, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.tslibs.nattype.NaTType, str]]",1,pandas
"numpy.asarray(a=tuple[float, float, float])",1,pandas
numpy.lib._version.__warningregistry__,1,skimage
numpy.lib.arrayterator.__warningregistry__,1,skimage
numpy.argsort(a=pandas.core.indexes.interval.IntervalIndex),1,pandas
"numpy.array(list[tuple[int, int, int]])",1,pandas
numpy.lib.polynomial.__warningregistry__,1,skimage
"numpy.ndarray[slilist[tuple[tuple[str, str], str]]e[NoneType, NoneType, NoneType]] = list[tuple[tuple[str, str], str]]",1,pandas
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, int, tuple[int, int])",1,pandas
"numpy.ndarray[tuple[sliinte[int, int, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1,skimage
"numpy.array(list[Union[NoneType, str]])",1,pandas
"numpy.ndarray.reshape(numpy.ndarray, list[int])",1,pandas
"numpy.bitwise_or(dask.array.core.Array, dask.array.core.Array)",1,dask.array
numpy.array(list[NoneType]),1,pandas
"numpy.ndarray[slilist[Union[datetime.date, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.date, pandas._libs.tslibs.nattype.NaTType]]",1,pandas
numpy.lib.nanfunctions.__warningregistry__,1,skimage
"numpy.ndarray[tuple[sliNoneTypee[int, int, int]]] = NoneType",1,pandas
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, pandas.core.indexes.datetimes.DatetimeIndex, numpy.int64)",1,pandas
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[str], numpy.int64)",1,pandas
numpy.lib.stride_tricks.__warningregistry__,1,skimage
"numpy.bitwise_xor(dask.array.core.Array, dask.array.core.Array)",1,dask.array
numpy.lib.histograms.__warningregistry__,1,skimage
numpy.array(NoneType),1,pandas
numpy.matrixlib.defmatrix.__warningregistry__,1,skimage
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, numpy.int64)",1,pandas
"numpy.array(list[Union[float, int]], dtype=numpy.dtype)",1,pandas
"numpy.array(list[Union[NoneType, int]], dtype=numpy.dtype)",1,pandas
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.nattype.NaTType]]",1,pandas
"numpy.sum(a=pandas.core.frame.DataFrame, axis=int)",1,pandas
numpy.ndim(a=tuple),1,pandas
"numpy.array(list[int], Type[numpy.int64])",1,pandas
"numpy.floor_divide(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.array_equal(a1=pandas.core.indexes.base.Index, a2=pandas.core.indexes.numeric.Int64Index)",1,pandas
numpy.asarray(a=tuple[int]),1,pandas
numpy.ndarray[int] = list[str],1,pandas
numpy.argsort(a=pandas.core.indexes.range.RangeIndex),1,pandas
"numpy.ndarray[slilist[Union[list[Union[float, int]], pandas.core.indexes.datetimes.DatetimeIndex]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[float, int]], pandas.core.indexes.datetimes.DatetimeIndex]]",1,pandas
numpy.argsort(a=pandas.core.indexes.numeric.Int64Index),1,pandas
numpy.argsort(a=pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.argsort(a=pandas.core.indexes.datetimes.DatetimeIndex),1,pandas
"numpy.equal(dask.array.core.Array, dask.array.core.Array)",1,dask.array
numpy.argsort(a=pandas.core.indexes.base.Index),1,pandas
"numpy.arange(int, dtype=Type[numpy.uint8])",1,skimage
numpy.lib.npyio.__warningregistry__,1,skimage
numpy.lib._datasource.__warningregistry__,1,skimage
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1,pandas
"numpy.allclose(a=pandas.core.series.Series, b=pandas.core.series.Series, rtol=int)",1,pandas
"numpy.ndarray[tuple[sliinte[NoneType, int, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1,pandas
"numpy.ndarray[slilist[Union[list[Union[float, int, str]], pandas.core.indexes.datetimes.DatetimeIndex, pandas.core.indexes.timedeltas.TimedeltaIndex, pandas.core.series.Series]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[float, int, str]], pandas.core.indexes.datetimes.DatetimeIndex, pandas.core.indexes.timedeltas.TimedeltaIndex, pandas.core.series.Series]]",1,pandas
"numpy.ndarray[tuple[sliinte[int, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
numpy.zeros_like,1,pandas
"numpy.array(list[numpy.timedelta64], dtype=str)",1,pandas
"numpy.array(list[list[int]], dtype=Type[numpy.int32])",1,pandas
"numpy.array(list[list[int]], dtype=Type[numpy.int16])",1,pandas
"numpy.array(list[list[int]], dtype=Type[numpy.int8])",1,pandas
"numpy.array(list[list[int]], dtype=Type[numpy.uint64])",1,pandas
"numpy.bitwise_and(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.array(list[list[int]], dtype=Type[numpy.uint32])",1,pandas
"numpy.array(list[list[int]], dtype=Type[numpy.uint16])",1,pandas
"numpy.array(list[list[int]], dtype=Type[numpy.uint8])",1,pandas
"numpy.array(list[list[int]], dtype=Type[numpy.float32])",1,pandas
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, int, NoneType]]] = int",1,pandas
numpy.lib.arraysetops.__warningregistry__,1,skimage
"numpy.logical_or(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.ndarray[slituple[float, float]e[NoneType, NoneType, NoneType]] = tuple[float, float]",1,pandas
"numpy.ndarray[slilist[tuple[Union[float, int], Union[float, int]]]e[NoneType, NoneType, NoneType]] = list[tuple[Union[float, int], Union[float, int]]]",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]] = int",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.indexes.base.Index, side=NoneType, sorter=str)",1,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.number])",1,pandas
"numpy.clip(a=numpy.ndarray, a_max=int, a_min=NoneType)",1,dask.array
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]] = numpy.ndarray",1,pandas
numpy.ndarray * builtins.complex,1,dask.array
numpy.ndarray[tuple[numpy.ndarray]] = list[float],1,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], numpy.ndarray]] = numpy.ndarray",1,pandas
numpy.angle(z=numpy.ndarray),1,dask.array
numpy.datetime64 != datetime.datetime,1,pandas
"numpy.array(tuple[str, str])",1,pandas
numpy.isposinf(x=numpy.ndarray),1,dask.array
"numpy.ndim(a=tuple[str, str])",1,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[numpy.int64, int, NoneType]]]",1,pandas
numpy.i0(x=numpy.ndarray),1,dask.array
"numpy.bincount(dask.array.core.Array, minlength=int)",1,skimage
numpy.ix_,1,pandas
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1,pandas
"numpy.ix_(args=tuple[numpy.ndarray, numpy.ndarray])",1,pandas
"Type[numpy.uint32] in list[Type[Union[numpy.bool_, numpy.float16, numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int64, numpy.int8, numpy.longlong, numpy.uint16, numpy.uint32, numpy.uint64, numpy.uint8, numpy.ulonglong]]]",1,skimage
numpy.nan_to_num(x=numpy.ndarray),1,dask.array
"numpy.ndarray[slilist[Union[list[int], tuple[float, float, float, float]]]e[NoneType, NoneType, NoneType]] = list[Union[list[int], tuple[float, float, float, float]]]",1,pandas
"Type[numpy.int32] in tuple[Type[numpy.float32], Type[numpy.float64]]",1,skimage
"numpy.array(list[numpy.bool_], dtype=Type[builtins.bool])",1,pandas
numpy.array(builtins.function),1,pandas
"numpy.ndarray[slilist[tuple[float, float]]e[NoneType, NoneType, NoneType]] = list[tuple[float, float]]",1,pandas
"numpy.ndarray[tuple[int, numpy.ndarray]] = list[str]",1,pandas
"numpy.array(int, copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, int, int, size=tuple[int, int])",1,dask.array
"numpy.issubdtype(arg1=Type[numpy.uint32], arg2=Type[numpy.floating])",1,skimage
"numpy.array(list[float], dtype=str)",1,skimage
"numpy.hstack(tup=tuple[list[builtins.bool], numpy.ndarray, list[builtins.bool]])",1,pandas
"numpy.array(str, dtype=numpy.dtype)",1,pandas
numpy.isreal(x=dask.array.core.Array),1,dask.array
numpy.iscomplex(x=dask.array.core.Array),1,dask.array
"numpy.array(list[Union[float, pandas._libs.tslibs.timestamps.Timestamp]], copy=builtins.bool)",1,pandas
"numpy.empty(int, dtype=NoneType)",1,pandas
numpy.ndarray[tuple[numpy.ndarray]] = numpy.datetime64,1,pandas
"numpy.where(numpy.ndarray, numpy.ndarray, numpy.datetime64)",1,pandas
"numpy.asanyarray(a=list[list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp]]])",1,pandas
numpy.real(val=dask.array.core.Array),1,dask.array
numpy.asanyarray(a=list[list[str]]),1,pandas
"numpy.asanyarray(a=list[list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]])",1,pandas
numpy.imag(val=dask.array.core.Array),1,dask.array
"numpy.asanyarray(a=tuple[list[builtins.bool], list[builtins.bool], list[builtins.bool]])",1,pandas
numpy.asanyarray(a=list[list[builtins.bool]]),1,pandas
numpy.frexp,1,dask.array
numpy.asanyarray(a=int),1,pandas
"Type[numpy.uint32] in tuple[Type[numpy.float32], Type[numpy.float64]]",1,skimage
numpy.empty_like,1,dask.array
numpy.frexp(dask.array.core.Array),1,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], numpy.int64]]",1,pandas
"numpy.asarray(a=list[tuple[int]], dtype=NoneType)",1,pandas
numpy.asarray(a=list[tuple[int]]),1,pandas
"numpy.empty_like(numpy.ndarray, dtype=numpy.dtype, shape=tuple[int, int])",1,dask.array
numpy.modf,1,dask.array
numpy.modf(dask.array.core.Array),1,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], numpy.ndarray]] = numpy.ndarray",1,pandas
numpy.ndim(a=pandas.core.indexes.datetimes.DatetimeIndex),1,pandas
"numpy.ndarray.clip(numpy.ndarray, int)",1,dask.array
"numpy.ndarray[tuple[slipandas.core.arrays.categorical.Categoricale[int, int, NoneType], int]] = pandas.core.arrays.categorical.Categorical",1,pandas
"numpy.ndarray[tuple[slilist[int]e[int, int, NoneType]]] = list[int]",1,pandas
"numpy.ndim(a=list[Union[int, str]])",1,pandas
"numpy.array(tuple[pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",1,pandas
"numpy.asarray(a=list[Union[float, int, str]], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[float, int, str]], copy=builtins.bool)",1,pandas
"numpy.array(list[list[Union[float, int]]], dtype=Type[numpy.float64])",1,pandas
"numpy.array(list[list[Union[builtins.bool, float]]], dtype=Type[builtins.object])",1,pandas
"numpy.array(tuple[int, int, int, int, int, int, int, int, int], copy=builtins.bool)",1,pandas
"numpy.asarray(a=tuple[float, float, float], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.tslibs.period.Period]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.tslibs.period.Period]]",1,pandas
"Type[numpy.uint64] in tuple[Type[numpy.float32], Type[numpy.float64]]",1,skimage
"numpy.add(dask.array.core.Array, int, out=dask.array.core.Array)",1,dask.array
"numpy.issubdtype(arg1=Type[numpy.uint64], arg2=Type[numpy.floating])",1,skimage
"numpy.ufunc.reduce(numpy.ufunc, dask.array.core.Array)",1,dask.array
numpy.arange(numpy.int64),1,pandas
"numpy.empty(int, dtype=numpy.dtype)",1,dask.array
"numpy.add(dask.array.core.Array, int, out=numpy.ndarray)",1,dask.array
numpy.isnat(float),1,pandas
numpy.isnat(numpy.datetime64),1,pandas
numpy.isnat(numpy.timedelta64),1,pandas
"numpy.array(list[Union[pandas.core.dtypes.dtypes.DatetimeTZDtype, pandas.core.dtypes.dtypes.PeriodDtype]])",1,pandas
"numpy.result_type(numpy.dtype, numpy.dtype, numpy.dtype)",1,pandas
"numpy.log(dask.array.core.Array, out=dask.array.core.Array)",1,dask.array
"numpy.divmod(numpy.ndarray, float)",1,dask.array
"Type[numpy.int64] in list[Type[Union[numpy.bool_, numpy.float16, numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int64, numpy.int8, numpy.longlong, numpy.uint16, numpy.uint32, numpy.uint64, numpy.uint8, numpy.ulonglong]]]",1,skimage
"builtins.str.ljust(self=numpy.str_, width=int)",1,pandas
str + numpy.str_,1,pandas
"numpy.divmod(numpy.ndarray, numpy.ndarray)",1,dask.array
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], int]] = int",1,pandas
"numpy.int16[tuple[builtins.ellipsis, NoneType, NoneType]]",1,dask.array
"numpy.sin(dask.array.core.Array, out=dask.array.core.Array)",1,dask.array
"numpy.array(tuple[str], copy=builtins.bool)",1,pandas
"numpy.ndim(a=list[list[Union[int, str]]])",1,pandas
"numpy.array(tuple[int, int, int, int], copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[Union[numpy.dtype, pandas.core.dtypes.dtypes.CategoricalDtype]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.dtype, pandas.core.dtypes.dtypes.CategoricalDtype]]",1,pandas
"numpy.issubdtype(arg1=Type[numpy.int32], arg2=Type[numpy.floating])",1,skimage
numpy.iterable(y=builtins.range),1,pandas
"numpy.array(pandas.core.indexes.range.RangeIndex, copy=Type[builtins.object], dtype=builtins.bool)",1,pandas
"numpy.array(pandas._libs.tslibs.timestamps.Timestamp, copy=NoneType, dtype=builtins.bool)",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[slifloate[int, int, NoneType], slifloate[int, int, NoneType]]] = float",1,pandas
"numpy.asarray(a=tuple[int, tuple[str, str], tuple[str, str], tuple[str, str]], dtype=Type[builtins.object])",1,pandas
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, size=tuple[int, int])",1,pandas
"numpy.asarray(a=tuple[int, tuple[str, str, str, str], tuple[str, str, str, str], tuple[str, str, str, str]], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int, int, tuple[str, str, str, str], tuple[str, str, str, str], tuple[str, str, str, str]], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=list[Union[int, str]], dtype=NoneType)",1,pandas
"numpy.asarray(a=list[Union[int, str]])",1,pandas
"numpy.array(pandas.core.indexes.base.Index, copy=Type[numpy.object_], dtype=builtins.bool)",1,pandas
"Type[numpy.int32] in list[Type[Union[numpy.bool_, numpy.float16, numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int64, numpy.int8, numpy.longlong, numpy.uint16, numpy.uint32, numpy.uint64, numpy.uint8, numpy.ulonglong]]]",1,skimage
numpy.array(list[list[pandas._libs.tslibs.timestamps.Timestamp]]),1,pandas
"numpy.array(list[Union[NoneType, float]], copy=builtins.bool)",1,pandas
numpy.sin,1,dask.array
"Type[numpy.uint64] in list[Type[Union[numpy.bool_, numpy.float16, numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int64, numpy.int8, numpy.longlong, numpy.uint16, numpy.uint32, numpy.uint64, numpy.uint8, numpy.ulonglong]]]",1,skimage
numpy.asanyarray(a=pandas.core.indexes.base.Index),1,pandas
"numpy.ndarray.ravel(numpy.ndarray, str)",1,pandas
"numpy.asarray(a=pandas._testing.SubclassedSeries, dtype=Type[builtins.bool])",1,pandas
numpy.negative,1,dask.array
"numpy.arange(numpy.int64, numpy.int64, dtype=str)",1,pandas
"numpy.array(list[Union[pandas.core.arrays.integer.Int64Dtype, pandas.core.dtypes.dtypes.CategoricalDtype]])",1,pandas
"numpy.ndarray[slilist[Union[pandas.core.arrays.integer.Int64Dtype, pandas.core.dtypes.dtypes.CategoricalDtype]]e[NoneType, NoneType, NoneType]] = list[Union[pandas.core.arrays.integer.Int64Dtype, pandas.core.dtypes.dtypes.CategoricalDtype]]",1,pandas
numpy.ndarray.conj(numpy.ndarray),1,dask.array
"numpy.issubdtype(arg1=Type[numpy.int16], arg2=Type[numpy.floating])",1,skimage
numpy.round_(a=pandas.core.frame.DataFrame),1,pandas
pandas.core.dtypes.dtypes.CategoricalDtype != numpy.dtype,1,pandas
"numpy.array(list[tuple[int, int]], dtype=numpy.dtype)",1,pandas
"numpy.round_(a=list[Union[float, int]])",1,skimage
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.str_)",1,pandas
"builtins.str.startswith(numpy.str_, str)",1,pandas
numpy.ndarray == numpy.bool_,1,pandas
numpy.atleast_1d(arys=tuple[builtins.bool]),1,pandas
"numpy.asarray(a=tuple[float, float])",1,skimage
"numpy.array(list[Union[float, int, str]], dtype=numpy.dtype)",1,pandas
"numpy.nextafter(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.asarray(a=list[Union[float, int, str]])",1,pandas
"numpy.lituple[float, float].index_tricks.RClass[tuple[float, float]]",1,skimage
"numpy.array(list[str], dtype=numpy.dtype)",1,pandas
numpy.ndim(a=datetime.datetime),1,pandas
numpy.ndarray == numpy.complex128,1,pandas
numpy.asarray(a=list[builtins.complex]),1,pandas
"numpy.asarray(a=tuple[tuple[int, int, int], tuple[int, float, int]])",1,skimage
"numpy.can_cast(numpy.ndarray, Type[builtins.bool])",1,pandas
numpy.ndim(a=builtins.bool),1,pandas
Type[numpy.int64] != numpy.dtype,1,pandas
"numpy.not_equal(dask.array.core.Array, dask.array.core.Array)",1,dask.array
numpy.where(dask.array.core.Array),1,skimage
numpy.ndarray + dask.array.core.Array,1,skimage
"numpy.vectorize(otypes=list[numpy.dtype], pyfunc=builtins.function)",1,pandas
numpy.vectorize,1,pandas
"numpy.array(tuple[int], copy=builtins.bool)",1,pandas
"numpy.apply_along_axis(args=tuple[str], arr=numpy.ndarray, axis=int, func1d=builtins.function)",1,pandas
"numpy.array(list[float], dtype=numpy.dtype)",1,pandas
"numpy.array(list[list[str]], dtype=numpy.dtype)",1,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.int8)",1,pandas
"numpy.power(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.issubdtype(arg1=Type[numpy.int16], arg2=Type[numpy.integer])",1,pandas
float * numpy.longlong,1,pandas
numpy.compat.__warningregistry__,1,skimage
numpy.longlong + int,1,pandas
"numpy.logical_xor(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, tuple[int])",1,pandas
"tuple[builtins.builtin_function_or_method, Type[builtins.list], Type[builtins.tuple], builtins.builtin_function_or_method]uiltins.tuple[builtins.builtin_function_or_method, Type[builtins.list], Type[builtins.tuple], builtins.builtin_function_or_method]uiltin_function_or_method in tuple[builtins.builtin_function_or_method, Type[builtins.list], Type[builtins.tuple], builtins.builtin_function_or_method]",1,pandas
"numpy.asarray(a=list[tuple[str, str, str]], dtype=str)",1,pandas
numpy.compat._inspect.__warningregistry__,1,skimage
numpy.argmax(a=dask.array.core.Array),1,skimage
"numpy.ndarray[slilist[pandas.core.dtypes.dtypes.DatetimeTZDtype]e[NoneType, NoneType, NoneType]] = list[pandas.core.dtypes.dtypes.DatetimeTZDtype]",1,pandas
"numpy.minimum(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.CategoricalDtype, pandas.core.dtypes.dtypes.DatetimeTZDtype, pandas.core.dtypes.dtypes.PeriodDtype]])",1,pandas
numpy._distributor_init.__warningregistry__,1,skimage
numpy.int8(numpy.int64),1,pandas
dask.array.core.Array - numpy.ndarray,1,skimage
"numpy.ndarray.round(numpy.ndarray, list[int])",1,pandas
"numpy.ndarray.round(numpy.ndarray, str)",1,pandas
"numpy.ndarray.round(numpy.ndarray, float)",1,pandas
numpy.__config__.__warningregistry__,1,skimage
numpy.ndim(a=pandas._libs.missing.NAType),1,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, pandas._libs.missing.NAType)",1,pandas
pandas.core.arrays.numpy.ndarrayoolean.BooleanArray |= numpy.ndarray,1,pandas
numpy.eye(N=int),1,pandas
"numpy.array(list[Union[NoneType, float]], dtype=numpy.dtype)",1,pandas
"numpy.asarray(a=list[Union[NoneType, float]])",1,pandas
"numpy.lituple[int, int, int, int, int].index_tricks.RClass[tuple[int, int, int, int, int]]",1,skimage
"numpy.asarray(a=pandas.core.arrays.boolean.BooleanArray, dtype=Type[numpy.bool_])",1,pandas
"numpy.testing._private.utils.assert_allclose(actual=numpy.float64, atol=float, desired=int)",1,skimage
"numpy.arange(int, float)",1,pandas
"numpy.issubdtype(arg1=Type[numpy.float32], arg2=Type[numpy.integer])",1,pandas
"numpy.asarray(a=list[Union[float, int]])",1,skimage
"numpy.ndarray[slilist[Union[NoneType, int, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, int, str]]",1,pandas
numpy.absolute(numpy.int64),1,skimage
"numpy.ndarray[slilist[list[Union[int, numpy.float64]]]e[NoneType, NoneType, NoneType]] = list[list[Union[int, numpy.float64]]]",1,pandas
"numpy.ndarray[slilist[Union[float, int, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[float, int, numpy.int64]]",1,pandas
"numpy.ndarray[slilist[Union[int, numpy.int64, str]]e[NoneType, NoneType, NoneType]] = list[Union[int, numpy.int64, str]]",1,pandas
"numpy.ndarray[slilist[Union[builtins.bool, int]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, int]]",1,pandas
"numpy.ndarray[slilist[Union[builtins.bool, int, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, int, numpy.int64]]",1,pandas
"numpy.add(numpy.ndarray, float, dtype=Type[numpy.float64])",1,skimage
numpy.add,1,skimage
"Type[numpy.uint16] in tuple[Type[numpy.float32], Type[numpy.float64]]",1,skimage
"numpy.ufunc.outer(numpy.ufunc, int, numpy.ndarray)",1,dask.array
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.timedelta64e[NoneType, NoneType, NoneType]]] = numpy.timedelta64",1,pandas
"numpy.ndarray[slilist[Union[NoneType, datetime.datetime]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, datetime.datetime]]",1,pandas
"numpy.ufunc.outer(numpy.ufunc, float, numpy.ndarray)",1,dask.array
"Type[numpy.int16] in list[Type[Union[numpy.bool_, numpy.float16, numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int64, numpy.int8, numpy.longlong, numpy.uint16, numpy.uint32, numpy.uint64, numpy.uint8, numpy.ulonglong]]]",1,skimage
"numpy.ndarray[tuple[int, int]] = numpy.timedelta64",1,pandas
"numpy.ufunc.outer(numpy.ufunc, list[int], numpy.ndarray)",1,dask.array
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=numpy.ndarray)",1,pandas
"numpy.ufunc.outer(numpy.ufunc, numpy.int64, numpy.ndarray)",1,dask.array
"numpy.where(numpy.ndarray, numpy.ndarray, numpy.float64)",1,pandas
"numpy.ones(dtype=numpy.dtype, shape=tuple)",1,dask.array
"numpy.ndarray[tuple[int, int]] = numpy.datetime64",1,pandas
"numpy.array(list[list[int]], dtype=Type[numpy.float64])",1,pandas
numpy.ndarray.real,1,dask.array
numpy.ndarray.imag,1,dask.array
"Type[numpy.int16] in tuple[Type[numpy.float32], Type[numpy.float64]]",1,skimage
"numpy.ndarray[slilist[Type[builtins.str]]e[NoneType, NoneType, NoneType]] = list[Type[builtins.str]]",1,pandas
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.timedeltas.Timedelta]]",1,pandas
"numpy.ndarray[slilist[Union[numpy.int64, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.int64, pandas._libs.tslibs.timedeltas.Timedelta]]",1,pandas
"numpy.array(list[numpy.ndarray], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.issubdtype(arg1=Type[numpy.int8], arg2=Type[numpy.floating])",1,skimage
numpy.float64.ndim,1,skimage
"numpy.subtract(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.percentile(a=numpy.ndarray, interpolation=str, q=numpy.ndarray)",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int]]",1,pandas
"numpy.lislice[NoneType, NoneType, NoneType].index_tricks.IndexExpression[slice[NoneType, NoneType, NoneType]]",1,pandas
numpy.s_,1,pandas
"numpy.lislice[NoneType, NoneType, int].index_tricks.IndexExpression[slice[NoneType, NoneType, int]]",1,pandas
"numpy.asanyarray(a=pandas.core.indexes.numeric.Int64Index, dtype=str)",1,pandas
"numpy.float_power(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"Type[numpy.uint8] in tuple[Type[numpy.float32], Type[numpy.float64]]",1,skimage
"numpy.clip(a=numpy.ndarray, a_max=float, a_min=float, out=numpy.ndarray)",1,skimage
"numpy.vstack(tup=tuple[list[int], list[int]])",1,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[numpy.int64, NoneType, NoneType]]]",1,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, numpy.int64, NoneType]]]",1,pandas
"numpy.empty_like(numpy.ndarray, dtype=Type[builtins.float])",1,skimage
"numpy.array(list[Union[float, list, list[int], tuple[int, int]]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[float, list, list[int], tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[float, list, list[int], tuple[int, int]]]",1,pandas
"numpy.asarray(a=tuple[tuple[str, str], str], dtype=Type[builtins.object])",1,pandas
"numpy.iterable(y=tuple[str, str])",1,pandas
numpy.iterable(y=str),1,pandas
numpy.iterable(y=list[str]),1,pandas
"numpy.asarray(a=list[pandas._libs.tslibs.timestamps.Timestamp], dtype=NoneType)",1,pandas
"numpy.asarray(a=tuple[float, float], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[tuple[str, str, str]]e[NoneType, NoneType, NoneType]] = list[tuple[str, str, str]]",1,pandas
"numpy.delete(arr=numpy.ndarray, obj=list[numpy.int64])",1,pandas
"Type[numpy.int8] in tuple[Type[numpy.float32], Type[numpy.float64]]",1,skimage
"numpy.ndarray[slilist[Union[numpy.int64, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.int64, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
"numpy.array(list[Union[float, numpy.datetime64]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[float, numpy.timedelta64]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.timedelta64]]",1,pandas
"numpy.array(list[Union[float, numpy.timedelta64]], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[float, float, str], dtype=Type[builtins.object])",1,pandas
"numpy.array(tuple[int, int, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",1,pandas
"numpy.ndarray[tuple[NoneType, NoneType, NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.asarray(a=tuple[int, int, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, int, int], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=list[Union[int, pandas._libs.tslibs.timestamps.Timestamp]], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[int, pandas._libs.tslibs.timestamps.Timestamp]], copy=builtins.bool)",1,pandas
"numpy.sum(a=tuple[int, int])",1,skimage
"numpy.ndarray[slilist[Union[float, tuple[float, datetime.datetime]]]e[NoneType, NoneType, NoneType]] = list[Union[float, tuple[float, datetime.datetime]]]",1,pandas
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType]]]",1,dask.array
"numpy.ndarray[slilist[tuple[str, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[tuple[str, numpy.int64]]",1,pandas
numpy.ndarray == list[int],1,dask.array
"numpy.arange(numpy.int64, numpy.int64, NoneType)",1,pandas
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, dtype=str, size=tuple[int, int])",1,dask.array
numpy.in1d,1,pandas
"numpy.array(tuple[float, float, str], copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
"numpy.all(a=list[numpy.ndarray], axis=int)",1,pandas
"numpy.any(a=list[numpy.ndarray], axis=int)",1,pandas
"numpy.repeat(a=builtins.range, repeats=int)",1,pandas
"numpy.ndarray[slilist[tuple[int, Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]]e[NoneType, NoneType, NoneType]] = list[tuple[int, Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]]",1,pandas
"numpy.asarray(a=tuple[float, float, float, float, float, float, float], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[tuple[Union[float, int], Union[float, int], Union[float, int], Union[float, int], Union[float, int], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]]e[NoneType, NoneType, NoneType]] = list[tuple[Union[float, int], Union[float, int], Union[float, int], Union[float, int], Union[float, int], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]]",1,pandas
numpy.random.seed,1,dask.array
"numpy.ndarray[slilist[tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]]e[NoneType, NoneType, NoneType]] = list[tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]]",1,pandas
"numpy.in1d(ar1=numpy.ndarray, ar2=numpy.ndarray, assume_unique=builtins.bool)",1,pandas
"numpy.arange(numpy.int64, int, NoneType)",1,pandas
"numpy.array(list[Union[int, pandas._libs.missing.NAType]], dtype=Type[pandas._libs.missing.NAType])",1,pandas
"numpy.array(list[Union[int, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[pandas._libs.tslibs.nattype.NaTType])",1,pandas
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, size=tuple[int])",1,dask.array
"numpy.where(tuple[builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool], numpy.ndarray, float)",1,pandas
"numpy.asarray(a=list[Union[float, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]])",1,pandas
"numpy.asarray(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period, str]])",1,pandas
numpy.asarray(a=pandas._libs.tslibs.period.Period),1,pandas
"numpy.ndarray[tuple[NoneType, NoneType, slice[int, NoneType, NoneType], int]]",1,dask.array
"numpy.array(list[datetime.timedelta], copy=builtins.bool)",1,pandas
"numpy.array(list[Union[datetime.timedelta, numpy.timedelta64, pandas.tseries.offsets.Second, str]], copy=builtins.bool)",1,pandas
"numpy.ndim(a=list[Union[datetime.timedelta, numpy.timedelta64, pandas.tseries.offsets.Second, str]])",1,pandas
"numpy.array(list[Union[float, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]])",1,pandas
"numpy.array(list[Union[float, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]], copy=builtins.bool)",1,pandas
"numpy.ndim(a=list[Union[float, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]])",1,pandas
"numpy.array(list[Union[float, pandas._libs.tslibs.nattype.NaTType, str]], copy=builtins.bool)",1,pandas
"numpy.ndarray[tuple[NoneType, NoneType, NoneType, builtins.ellipsis]]",1,dask.array
"numpy.ndim(a=list[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType]])",1,pandas
"numpy.concatenate(tuple[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex])",1,pandas
"numpy.concatenate(tuple[pandas.core.indexes.range.RangeIndex, pandas.core.indexes.base.Index])",1,pandas
numpy.bool_uiltins.numpy.bool_ool == numpy.bool_,1,pandas
"numpy.lib.arraypad._as_pairs(as_index=builtins.bool, ndim=int, x=tuple[tuple[int, int], tuple[int, int]])",1,skimage
"numpy.repeat(a=pandas.core.indexes.range.RangeIndex, repeats=int)",1,pandas
"numpy.array(pandas.core.indexes.period.PeriodIndex, dtype=Type[numpy.uint64])",1,pandas
"numpy.array(pandas.core.indexes.period.PeriodIndex, dtype=Type[numpy.int32])",1,pandas
"numpy.array(pandas.core.indexes.period.PeriodIndex, dtype=Type[numpy.float64])",1,pandas
"numpy.asarray(a=pandas.core.indexes.period.PeriodIndex, dtype=Type[numpy.int64])",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.asarray(a=pandas.core.indexes.period.PeriodIndex, dtype=str)",1,pandas
"numpy.array(pandas.core.arrays.period.PeriodArray, dtype=Type[numpy.int64])",1,pandas
"numpy.array(pandas.core.arrays.period.PeriodArray, dtype=str)",1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.period.Period, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.period.Period, str]]",1,pandas
"numpy.repeat(a=pandas.core.indexes.period.PeriodIndex, repeats=int)",1,pandas
"numpy.repeat(a=pandas.core.indexes.period.PeriodIndex, axis=int, repeats=int)",1,pandas
"numpy.ndarray[slice[str, NoneType, NoneType]]",1,pandas
"numpy.array(list[Union[NoneType, int]], dtype=Type[builtins.NoneType])",1,pandas
numpy.compat.py3k.__warningregistry__,1,skimage
"numpy.asarray(a=tuple[int, int, int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
numpy.ndarray[numpy.int64] = builtins.bool,1,pandas
"numpy.linspace(num=int, start=float, stop=int)",1,pandas
"numpy.linspace(num=int, start=int, stop=float)",1,pandas
"numpy.arange(int, step=float)",1,pandas
"numpy.arange(int, step=int)",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.arrays.datetimes.DatetimeArray, side=NoneType, sorter=str)",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.arrays.integer.IntegerArray, side=NoneType, sorter=str)",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.arrays.interval.IntervalArray, side=NoneType, sorter=str)",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, list[pandas._libs.interval.Interval], side=NoneType, sorter=str)",1,pandas
"numpy.ndarray[slilist[tuple[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp], Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]]e[NoneType, NoneType, NoneType]] = list[tuple[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp], Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]]",1,pandas
"numpy.asarray(a=list[tuple[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp], Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]], dtype=NoneType)",1,pandas
"numpy.allclose(a=numpy.float64, b=numpy.ndarray, equal_nan=builtins.bool)",1,dask.array
"numpy.lexsort(tuple[pandas.core.indexes.numeric.Int64Index, pandas.core.indexes.numeric.Int64Index])",1,pandas
pandas.core.indexes.interval.IntervalIndex > numpy.ndarray,1,pandas
numpy.seterr(all=str),1,dask.array
"numpy.ndarray[slituple[float, int]e[NoneType, NoneType, NoneType]] = tuple[float, int]",1,pandas
"numpy.ndarray[slituple[float]e[NoneType, NoneType, NoneType]] = tuple[float]",1,pandas
"numpy.random.mtrand.RandomState.seed(numpy.random.mtrand.RandomState, seed=int)",1,dask.array
"numpy.ndarray[slituple[int, int, float]e[NoneType, NoneType, NoneType]] = tuple[int, int, float]",1,pandas
"numpy.seterr(divide=str, invalid=str, over=str, under=str)",1,dask.array
"numpy.allclose(a=tuple[numpy.float64, numpy.float64], b=tuple[numpy.float64, numpy.float64], equal_nan=builtins.bool)",1,dask.array
"numpy.ndarray[tuple[int, int]] = numpy.int64",1,skimage
"numpy.ndarray[slilist[tuple[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period]]e[NoneType, NoneType, NoneType]] = list[tuple[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period]]",1,pandas
numpy.core._multiarray_umath.__warningregistry__,1,skimage
numpy.sqrt(float),1,dask.array
"numpy.asarray(a=list[tuple[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period]], dtype=NoneType)",1,pandas
int - numpy.float64,1,dask.array
"numpy.asarray(a=list[tuple[int, int]], dtype=Type[builtins.object])",1,pandas
"numpy.array(tuple[int, int, int, int, int, int, int, int, int, int], copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[Union[int, pandas._libs.interval.Interval]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.interval.Interval]]",1,pandas
"numpy.ndarray[slilist[tuple[int, float]]e[NoneType, NoneType, NoneType]] = list[tuple[int, float]]",1,pandas
numpy.exp(pandas.core.indexes.multi.MultiIndex),1,pandas
"numpy.ndarray[slilist[tuple[float, int]]e[NoneType, NoneType, NoneType]] = list[tuple[float, int]]",1,pandas
numpy.ndarray == list[int],1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int64, side=str)",1,pandas
int != numpy.int64,1,skimage
"numpy.ndim(a=list[Union[int, pandas._libs.tslibs.nattype.NaTType]])",1,pandas
pandas.core.indexes.multi.MultiIndex == numpy.ndarray,1,pandas
"numpy.random.mtrand.RandomState.permutation(numpy.random.mtrand.RandomState, list[tuple[int, int]])",1,pandas
"numpy.delete(arr=numpy.ndarray, obj=list)",1,pandas
"numpy.tile(A=pandas.core.indexes.datetimes.DatetimeIndex, reps=int)",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.CategoricalDtype, pandas.core.dtypes.dtypes.DatetimeTZDtype]])",1,pandas
"numpy.ndarray[slilist[tuple[int, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[tuple[int, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
"numpy.repeat(a=numpy.ndarray, repeats=numpy.int64)",1,pandas
"numpy.array(tuple[int, int], copy=builtins.bool)",1,pandas
numpy.int8 == numpy.int64,1,pandas
"numpy.ndarray[slilist[Union[NoneType, float, int, pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, float, int, pandas._libs.tslibs.nattype.NaTType, str]]",1,pandas
numpy.isnan(pandas.core.indexes.multi.MultiIndex),1,pandas
numpy.isfinite(pandas.core.indexes.multi.MultiIndex),1,pandas
numpy.deg2rad(pandas.core.indexes.multi.MultiIndex),1,pandas
numpy.arccosh(pandas.core.indexes.multi.MultiIndex),1,pandas
numpy.tanh(pandas.core.indexes.multi.MultiIndex),1,pandas
numpy.sinh(pandas.core.indexes.multi.MultiIndex),1,pandas
numpy.arccos(pandas.core.indexes.multi.MultiIndex),1,pandas
numpy.tan(pandas.core.indexes.multi.MultiIndex),1,pandas
numpy.sin(pandas.core.indexes.multi.MultiIndex),1,pandas
numpy.log1p(pandas.core.indexes.multi.MultiIndex),1,pandas
numpy.log2(pandas.core.indexes.multi.MultiIndex),1,pandas
numpy.expm1(pandas.core.indexes.multi.MultiIndex),1,pandas
numpy.ndim(a=list[datetime.timedelta]),1,pandas
"numpy.ndarray[tuple[NoneType, NoneType, int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[NoneType, NoneType, int, builtins.ellipsis]]",1,dask.array
numpy.ndarray[float] = int,1,pandas
"numpy.array(numpy.ndarray, copy=builtins.bool)",1,skimage
numpy.ndarray[numpy.ndarray] = pandas.core.indexes.datetimes.DatetimeIndex,1,pandas
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,pandas
numpy.asarray(a=builtins.complex),1,pandas
"numpy.issubdtype(arg1=Type[numpy.complex128], arg2=Type[numpy.integer])",1,pandas
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], int, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], int, NoneType]]",1,dask.array
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
Type[Type[numpy.complex128]uiltins.oType[numpy.complex128]ject] == Type[numpy.complex128],1,pandas
Type[numpy.complex128] == Type[numpy.complex128],1,pandas
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], int]]",1,dask.array
Type[numpy.float64] == Type[numpy.complex128],1,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, builtins.complex)",1,pandas
"numpy.array(list[Union[datetime.timedelta, str]], copy=builtins.bool)",1,pandas
"numpy.ndim(a=list[Union[datetime.timedelta, str]])",1,pandas
"numpy.asarray(a=list[Union[datetime.datetime, pandas._libs.tslibs.timestamps.Timestamp]])",1,pandas
"numpy.asarray(a=list[Union[numpy.datetime64, pandas._libs.tslibs.timestamps.Timestamp]])",1,pandas
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], NoneType]]",1,dask.array
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, numpy.ndarray)",1,pandas
"numpy.where(numpy.ndarray, numpy.ndarray, pandas.core.arrays.datetimes.DatetimeArray)",1,pandas
"numpy.ndarray[slilist[Union[builtins.bool, numpy.float64]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, numpy.float64]]",1,pandas
"numpy.ndarray[slilist[Union[builtins.bool, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, numpy.int64]]",1,pandas
"numpy.ndarray[slilist[Union[builtins.complex, numpy.bool_]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, numpy.bool_]]",1,pandas
"numpy.ndarray[slilist[Union[builtins.complex, numpy.complex128]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, numpy.complex128]]",1,pandas
"numpy.ndarray[slilist[Union[builtins.complex, numpy.float64]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, numpy.float64]]",1,pandas
"numpy.ndarray[slilist[Union[builtins.complex, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, numpy.int64]]",1,pandas
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], NoneType, builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.ndarray[slilist[Union[int, numpy.complex128]]e[NoneType, NoneType, NoneType]] = list[Union[int, numpy.complex128]]",1,pandas
numpy.float64 in pandas.core.indexes.numeric.Float64Index,1,pandas
"numpy.ndarray[tuple[NoneType, int, NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.ndarray[list[int]] = int,1,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",1,pandas
"numpy.ix_(args=tuple[list[int], list[int]])",1,pandas
"numpy.ndarray[tuple[NoneType, int, NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[int, int]] = list[int]",1,pandas
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.uint64])",1,pandas
numpy.int64 % int,1,skimage
"numpy.zeros(int, dtype=Type[numpy.float64])",1,pandas
"numpy.zeros(int, dtype=Type[builtins.complex])",1,pandas
"numpy.ndarray[tuple[NoneType, int, NoneType, NoneType]]",1,dask.array
"numpy.ndarray[slilist[int]e[NoneType, int, NoneType]] = list[int]",1,pandas
numpy.ndarray[int] = numpy.str_,1,pandas
numpy.array(numpy.str_),1,pandas
int ** numpy.bool_,1,skimage
numpy.asarray(a=list[list[int]]),1,pandas
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], builtins.ellipsis, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[slilist[int]e[int, NoneType, int]] = list[int]",1,pandas
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], builtins.ellipsis, int]]",1,dask.array
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[int, int, NoneType]]] = int",1,pandas
numpy.__version__,1,skimage
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], builtins.ellipsis, NoneType]]",1,dask.array
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.ndarray[sliinte[float, float, NoneType]] = int",1,pandas
"numpy.ndarray[sliinte[int, float, NoneType]] = int",1,pandas
"numpy.ndarray[sliinte[float, int, NoneType]] = int",1,pandas
numpy.float64 in pandas._libs.index.Float64Engine,1,pandas
"numpy.ndarray[slilist[Union[float, numpy.bool_]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.bool_]]",1,pandas
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, pandas.core.indexes.numeric.Int64Index)",1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.timedeltas.Timedelta, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.timedeltas.Timedelta, str]]",1,pandas
int == numpy.uint8,1,pandas
"numpy.ndarray[tuple[NoneType, NoneType, slice[NoneType, int, NoneType], int]]",1,dask.array
pandas.core.arrays.integer.Int16Dtype == Type[numpy.object_],1,pandas
"numpy.ndarray[tuple[NoneType, NoneType, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
pandas.core.arrays.integer.Int8Dtype == Type[numpy.object_],1,pandas
int == numpy.int8,1,pandas
pandas.core.arrays.integer.UInt64Dtype == Type[numpy.object_],1,pandas
pandas.core.arrays.integer.UInt32Dtype == Type[numpy.object_],1,pandas
pandas.core.arrays.integer.UInt16Dtype == Type[numpy.object_],1,pandas
pandas.core.arrays.integer.UInt8Dtype == Type[numpy.object_],1,pandas
numpy.asarray(a=list[pandas._libs.interval.Interval]),1,pandas
"numpy.ndarray[tuple[NoneType, NoneType, slice[NoneType, int, NoneType], NoneType]]",1,dask.array
numpy.int64 == numpy.int16,1,pandas
numpy.uint64 == numpy.uint32,1,pandas
"numpy.ndarray[tuple[NoneType, NoneType, int, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.uint64 == numpy.uint16,1,pandas
"numpy.ndarray[tuple[slilist[str]e[int, int, NoneType], int]] = list[str]",1,pandas
numpy.uint64 == numpy.uint8,1,pandas
"numpy.ndarray[tuple[numpy.ndarray, int]] = list[str]",1,pandas
"numpy.eye(N=int, dtype=numpy.dtype)",1,pandas
numpy.ndarray[tuple[list[int]]] = list[int],1,pandas
numpy.ndarray[tuple[list[int]]] = int,1,pandas
numpy.ndarray[tuple[numpy.ndarray]] = list[int],1,pandas
"numpy.asarray(a=tuple[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta], dtype=Type[builtins.object])",1,pandas
"numpy.where(pandas.core.series.Series, numpy.ndarray, int)",1,pandas
"numpy.ndarray[tuple[NoneType, NoneType, int, int]]",1,dask.array
numpy.argsort(a=pandas.core.indexes.timedeltas.TimedeltaIndex),1,pandas
"numpy.ndarray[tuple[NoneType, NoneType, int, NoneType]]",1,dask.array
pandas.core.arrays.integer.Int32Dtype == Type[numpy.object_],1,pandas
int == numpy.uint32,1,pandas
numpy.bool_uiltins.numpy.bool_ool != numpy.bool_,1,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], int]] = numpy.ndarray",1,pandas
"numpy.ndarray[slilist[Union[numpy.bool_, str]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.bool_, str]]",1,pandas
"numpy.where(numpy.ndarray, numpy.ndarray, builtins.bool)",1,pandas
numpy.complex128uiltins.complex != numpy.complex128,1,pandas
"numpy.where(numpy.ndarray, numpy.ndarray, builtins.complex)",1,pandas
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, builtins.bool)",1,pandas
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, pandas.core.indexes.base.Index)",1,pandas
numpy.dtype(builtins.complex),1,pandas
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[slilist[Union[builtins.complex, str]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, str]]",1,pandas
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], NoneType, int]]",1,dask.array
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, pandas.core.indexes.numeric.Float64Index)",1,pandas
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, float)",1,pandas
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, int)",1,pandas
"numpy.ndarray[tuple[NoneType, slice[int, NoneType, NoneType], NoneType, NoneType]]",1,dask.array
"numpy.ndarray[tuple[NoneType, NoneType, builtins.ellipsis, int]]",1,dask.array
"numpy.asarray(a=list[Union[datetime.date, str]])",1,pandas
"numpy.ndarray[tuple[NoneType, NoneType, slice[NoneType, int, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.ndarray[tuple[NoneType, NoneType, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndim(a=list[Union[datetime.date, str]])",1,pandas
"numpy.ndarray[slilist[builtins.complex]e[NoneType, NoneType, NoneType]] = list[builtins.complex]",1,pandas
"numpy.ndarray[slilist[Union[builtins.complex, float]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, float]]",1,pandas
"numpy.asarray(a=list[Union[int, numpy.int16]])",1,pandas
"numpy.array(list[Union[int, numpy.int16]], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.array_equal(a1=list[Union[int, numpy.int32]], a2=numpy.ndarray)",1,pandas
numpy.ndarray[int] = builtins.complex,1,pandas
"numpy.core.records.fromarrays(arrayList=list[list[str]], names=list[str])",1,pandas
"numpy.array(list[tuple[int, int]], copy=builtins.bool)",1,pandas
"numpy.asarray(a=list[tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp]], dtype=NoneType)",1,pandas
"numpy.array(list[Union[numpy.datetime64, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[builtins.object])",1,pandas
numpy.cos(pandas.core.indexes.numeric.UInt64Index),1,pandas
numpy.arccos(numpy.ndarray),1,pandas
numpy.tan(numpy.ndarray),1,pandas
numpy.log1p(numpy.ndarray),1,pandas
numpy.log2(numpy.ndarray),1,pandas
numpy.expm1(numpy.ndarray),1,pandas
numpy.random._mt19937.__warningregistry__,1,skimage
numpy.rad2deg(pandas.core.indexes.numeric.UInt64Index),1,pandas
numpy.arctanh(pandas.core.indexes.numeric.UInt64Index),1,pandas
numpy.random._bit_generator.__warningregistry__,1,skimage
numpy.arcsinh(pandas.core.indexes.numeric.UInt64Index),1,pandas
numpy.cosh(pandas.core.indexes.numeric.UInt64Index),1,pandas
numpy.arctan(pandas.core.indexes.numeric.UInt64Index),1,pandas
numpy.arcsin(pandas.core.indexes.numeric.UInt64Index),1,pandas
numpy.sqrt(pandas.core.indexes.numeric.UInt64Index),1,pandas
"numpy.asarray(a=list[tuple[float, float]], dtype=NoneType)",1,pandas
numpy.log10(pandas.core.indexes.numeric.UInt64Index),1,pandas
numpy.log(pandas.core.indexes.numeric.UInt64Index),1,pandas
numpy.exp2(pandas.core.indexes.numeric.UInt64Index),1,pandas
numpy.rad2deg(numpy.ndarray),1,pandas
numpy.rad2deg(pandas.core.indexes.numeric.Int64Index),1,pandas
numpy.arctanh(numpy.ndarray),1,pandas
numpy.arctanh(pandas.core.indexes.numeric.Int64Index),1,pandas
numpy.arcsinh(numpy.ndarray),1,pandas
numpy.arcsinh(pandas.core.indexes.numeric.Int64Index),1,pandas
numpy.cosh(numpy.ndarray),1,pandas
numpy.cosh(pandas.core.indexes.numeric.Int64Index),1,pandas
numpy.arctan(numpy.ndarray),1,pandas
numpy.arctan(pandas.core.indexes.numeric.Int64Index),1,pandas
numpy.sinh(numpy.ndarray),1,pandas
numpy.tanh(numpy.ndarray),1,pandas
numpy.arccosh(numpy.ndarray),1,pandas
numpy.deg2rad(numpy.ndarray),1,pandas
numpy.sinh(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.arctan(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.arccos(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.arcsin(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.tan(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.cos(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.sin(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.sqrt(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.log1p(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.log10(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.log2(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.log(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.expm1(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.exp2(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.exp(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.rad2deg(pandas.core.indexes.numeric.Float64Index),1,pandas
numpy.arctanh(pandas.core.indexes.numeric.Float64Index),1,pandas
numpy.arcsinh(pandas.core.indexes.numeric.Float64Index),1,pandas
numpy.cosh(pandas.core.indexes.numeric.Float64Index),1,pandas
numpy.arctan(pandas.core.indexes.numeric.Float64Index),1,pandas
numpy.random._philox.__warningregistry__,1,skimage
numpy.arcsin(pandas.core.indexes.numeric.Float64Index),1,pandas
numpy.cos(pandas.core.indexes.numeric.Float64Index),1,pandas
numpy.sqrt(pandas.core.indexes.numeric.Float64Index),1,pandas
numpy.log10(pandas.core.indexes.numeric.Float64Index),1,pandas
numpy.log(pandas.core.indexes.numeric.Float64Index),1,pandas
numpy.exp2(pandas.core.indexes.numeric.Float64Index),1,pandas
numpy.arcsin(numpy.ndarray),1,pandas
numpy.arcsin(pandas.core.indexes.numeric.Int64Index),1,pandas
numpy.cos(pandas.core.indexes.numeric.Int64Index),1,pandas
pandas.core.indexes.numeric.UInt64Index == numpy.ndarray,1,pandas
"numpy.ndarray[slilist[numpy.ulonglong]e[NoneType, NoneType, NoneType]] = list[numpy.ulonglong]",1,pandas
"numpy.repeat(a=pandas.core.indexes.numeric.UInt64Index, axis=int, repeats=int)",1,pandas
numpy.argsort(a=pandas.core.indexes.numeric.UInt64Index),1,pandas
"numpy.histogram(a=numpy.ndarray, bins=builtins.bool, density=tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64])",1,skimage
"numpy.array_equal(a1=pandas.core.series.Series, a2=pandas.core.series.Series)",1,pandas
"numpy.concatenate(tuple[pandas.core.indexes.base.Index, pandas.core.indexes.numeric.Int64Index])",1,pandas
"numpy.concatenate(tuple[pandas.core.indexes.numeric.Int64Index, pandas.core.indexes.base.Index])",1,pandas
"numpy.asarray(a=list[Union[float, int, numpy.int64]], dtype=NoneType)",1,pandas
"numpy.convolve(a=numpy.ndarray, mode=str, v=list[float])",1,skimage
numpy.polynomial.__warningregistry__,1,skimage
numpy.ndarray -= numpy.uint8,1,skimage
"numpy.repeat(a=pandas.core.indexes.numeric.Int64Index, axis=int, repeats=int)",1,pandas
"numpy.asarray(a=list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]])",1,pandas
"numpy.ndim(a=list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]])",1,pandas
numpy.ndarray - pandas.core.indexes.numeric.Float64Index,1,pandas
"numpy.asarray(a=tuple[float, float, float, float, float], dtype=Type[builtins.object])",1,pandas
numpy.uint8 / int,1,skimage
"numpy.repeat(a=pandas.core.indexes.numeric.Float64Index, axis=int, repeats=int)",1,pandas
"numpy.repeat(a=pandas.core.indexes.numeric.Float64Index, repeats=int)",1,pandas
numpy.argsort(a=pandas.core.indexes.numeric.Float64Index),1,pandas
"numpy.array(pandas.core.indexes.numeric.Float64Index, copy=Type[numpy.float64], dtype=builtins.bool)",1,pandas
"numpy.ndarray[slilist[Union[numpy.datetime64, numpy.timedelta64]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.datetime64, numpy.timedelta64]]",1,pandas
"numpy.ndarray[slilist[Union[numpy.timedelta64, pandas._libs.missing.NAType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.timedelta64, pandas._libs.missing.NAType]]",1,pandas
"numpy.ndarray[slilist[Union[numpy.datetime64, pandas._libs.missing.NAType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.datetime64, pandas._libs.missing.NAType]]",1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.missing.NAType, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.missing.NAType, pandas._libs.tslibs.nattype.NaTType]]",1,pandas
"numpy.array(list[Union[numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]]",1,pandas
numpy.ulonglong(),1,pandas
"numpy.asarray(a=list[Union[float, int, numpy.uint64]], dtype=NoneType)",1,pandas
numpy.log10(numpy.ndarray),1,pandas
"numpy.concatenate(tuple[pandas.core.indexes.base.Index, pandas.core.indexes.numeric.UInt64Index])",1,pandas
numpy.log10(pandas.core.indexes.numeric.Int64Index),1,pandas
numpy.log(numpy.ndarray),1,pandas
numpy.log(pandas.core.indexes.numeric.Int64Index),1,pandas
numpy.exp2(numpy.ndarray),1,pandas
numpy.exp2(pandas.core.indexes.numeric.Int64Index),1,pandas
numpy.rad2deg(pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.arctanh(pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.arcsinh(pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.cosh(pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.arctan(pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.arcsin(pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.cos(pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.sqrt(pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.log10(pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.log(pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.exp2(pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.rad2deg(pandas.core.indexes.base.Index),1,pandas
numpy.arctanh(pandas.core.indexes.base.Index),1,pandas
numpy.arcsinh(pandas.core.indexes.base.Index),1,pandas
numpy.cosh(pandas.core.indexes.base.Index),1,pandas
numpy.arctan(pandas.core.indexes.base.Index),1,pandas
numpy.arcsin(pandas.core.indexes.base.Index),1,pandas
numpy.cos(pandas.core.indexes.base.Index),1,pandas
numpy.sqrt(pandas.core.indexes.base.Index),1,pandas
numpy.log10(pandas.core.indexes.base.Index),1,pandas
numpy.log(pandas.core.indexes.base.Index),1,pandas
numpy.exp2(pandas.core.indexes.base.Index),1,pandas
numpy.cosh(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.random._sfc64.__warningregistry__,1,skimage
numpy.tanh(pandas.core.indexes.category.CategoricalIndex),1,pandas
pandas.core.arrays.integer.UInt32Dtype != numpy.dtype,1,pandas
"numpy.array(list[numpy.timedelta64], dtype=Type[builtins.object])",1,pandas
numpy.asarray(a=numpy.timedelta64),1,pandas
numpy.prod(a=list[int]),1,skimage
"numpy.where(list[builtins.bool], numpy.ndarray, numpy.ndarray)",1,pandas
"numpy.ndarray.view(numpy.ndarray, dtype=Type[numpy.ndarray])",1,pandas
numpy.ndarray[builtins.ellipsis],1,pandas
int + numpy.float64,1,dask.array
"numpy.delete(arr=numpy.ndarray, obj=slice[int, int, NoneType])",1,pandas
"numpy.array(tuple[int, int, int])",1,pandas
"numpy.delete(arr=numpy.ndarray, obj=tuple[int, int, int])",1,pandas
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1,pandas
"numpy.where(tuple[builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool], numpy.ndarray, int)",1,pandas
"numpy.where(list[builtins.bool], numpy.ndarray, int)",1,pandas
"numpy.repeat(a=pandas.core.indexes.datetimes.DatetimeIndex, axis=int, repeats=int)",1,pandas
"numpy.ndarray.repeat(numpy.ndarray, numpy.ndarray, axis=NoneType)",1,pandas
"numpy.asarray(a=pandas.core.indexes.datetimes.DatetimeIndex, dtype=Type[builtins.object])",1,pandas
"numpy.ndim(a=list[Union[int, pandas._libs.tslibs.timestamps.Timestamp]])",1,pandas
numpy.asarray(a=list[datetime.date]),1,pandas
numpy.ndim(a=list[datetime.date]),1,pandas
float + numpy.float64,1,dask.array
"numpy.array(list[numpy.int64], dtype=Type[numpy.int64])",1,pandas
"numpy.arange(int, numpy.uint64, int, dtype=Type[numpy.int64])",1,pandas
"numpy.float64[tuple[builtins.ellipsis, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType]]",1,dask.array
numpy.uint64 > numpy.uint64,1,pandas
"numpy.isnan(tuple[int, int, int, int, int, int])",1,dask.array
"numpy.arange(numpy.int64, int, int, dtype=Type[numpy.int64])",1,pandas
"numpy.ndim(a=list[Union[pandas._libs.tslibs.timestamps.Timestamp, str]])",1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
"numpy.clip(a=numpy.ndarray, a_max=NoneType, a_min=int)",1,skimage
"numpy.array(list[Union[float, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]])",1,pandas
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, str]], dtype=str)",1,pandas
"numpy.ndarray[slilist[tuple[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[tuple[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta]]",1,pandas
"numpy.asarray(a=list[tuple[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta]], dtype=NoneType)",1,pandas
"numpy.asarray(a=list[tuple[int, int]], dtype=NoneType)",1,pandas
dask.array.core.Array * numpy.float64,1,dask.array
"Type[numpy.float64] in tuple[Type[builtins.list], Type[builtins.tuple], Type[builtins.set]]",1,dask.array
"numpy.ndarray[slituple[str, str, str, str, str, str, str, str, str]e[NoneType, NoneType, NoneType]] = tuple[str, str, str, str, str, str, str, str, str]",1,pandas
numpy.float64 / dask.array.core.Array,1,dask.array
"numpy.power(numpy.ndarray, float)",1,dask.array
"numpy.where(numpy.ndarray, numpy.float64, numpy.ndarray)",1,dask.array
"numpy.where(pandas.core.series.Series, pandas.core.arrays.interval.IntervalArray, float)",1,pandas
"numpy.subtract(numpy.float64, numpy.ndarray)",1,dask.array
"numpy.where(numpy.ndarray, pandas.core.arrays.interval.IntervalArray, float)",1,pandas
"numpy.putmask(pandas.core.arrays.interval.IntervalArray, str, int)",1,pandas
"numpy.putmask(pandas.core.arrays.interval.IntervalArray, numpy.ndarray, int)",1,pandas
pandas.core.indexes.interval.IntervalIndex == numpy.ndarray,1,pandas
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1,pandas
"numpy.array(tuple[float, float, float, float, float, float, float, float, float, float], copy=builtins.bool)",1,pandas
"numpy.ndarray.astype(numpy.ndarray, pandas.core.dtypes.dtypes.DatetimeTZDtype, copy=builtins.bool)",1,pandas
"numpy.ndarray.astype(numpy.ndarray, pandas.core.dtypes.dtypes.PeriodDtype, copy=builtins.bool)",1,pandas
numpy.version.__warningregistry__,1,skimage
"numpy.array(list[Union[datetime.date, pandas._libs.tslibs.nattype.NaTType]])",1,pandas
"numpy.hstack(tup=tuple[list[int], list[int]])",1,pandas
"numpy.where(dask.array.core.Array, int, dask.array.core.Array)",1,dask.array
numpy._globals.__warningregistry__,1,skimage
numpy.ndarray == list[datetime.date],1,pandas
numpy.ndarray == list[datetime.time],1,pandas
"numpy.allclose(a=tuple[numpy.ndarray, numpy.ndarray], b=tuple[numpy.ndarray, numpy.ndarray], equal_nan=builtins.bool)",1,dask.array
"numpy.ndim(a=list[Union[datetime.datetime, str]])",1,pandas
"numpy.asarray(a=list[Union[float, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]])",1,pandas
numpy.arcsinh(pandas.core.indexes.category.CategoricalIndex),1,pandas
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.period.Period]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.period.Period]]",1,pandas
numpy.dual.__warningregistry__,1,skimage
numpy.signbit(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.isnan(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.isinf(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.isfinite(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.signbit(pandas.core.indexes.range.RangeIndex),1,pandas
numpy.isinf(pandas.core.indexes.range.RangeIndex),1,pandas
numpy.testing._private.nosetester.__warningregistry__,1,skimage
numpy.ufunc in tuple[numpy.ufunc],1,pandas
numpy.isnan(pandas.core.indexes.timedeltas.TimedeltaIndex),1,pandas
numpy.isfinite(pandas.core.indexes.timedeltas.TimedeltaIndex),1,pandas
numpy.isnan(pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.isfinite(pandas.core.indexes.period.PeriodIndex),1,pandas
numpy.signbit(pandas.core.indexes.datetimes.DatetimeIndex),1,pandas
numpy.isinf(pandas.core.indexes.datetimes.DatetimeIndex),1,pandas
numpy.testing._private.utils.__warningregistry__,1,skimage
"numpy.ufunc in tuple[numpy.ufunc, numpy.ufunc, numpy.ufunc]",1,pandas
numpy.signbit(pandas.core.indexes.base.Index),1,pandas
numpy.isinf(pandas.core.indexes.base.Index),1,pandas
numpy.__warningregistry__,1,skimage
numpy.ma.extras.__warningregistry__,1,skimage
numpy.ctypeslib.__warningregistry__,1,skimage
numpy.random._pickle.__warningregistry__,1,skimage
numpy.rad2deg(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.deg2rad(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.arctanh(pandas.core.indexes.category.CategoricalIndex),1,pandas
numpy.arccosh(pandas.core.indexes.category.CategoricalIndex),1,pandas
"numpy.ndarray[slilist[Union[builtins.bool, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
"numpy.ndarray[slilist[Union[builtins.bool, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, pandas._libs.tslibs.timedeltas.Timedelta]]",1,pandas
"numpy.float64[tuple[builtins.ellipsis, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType]]",1,dask.array
Type[numpy.uint8] == Type[builtins.bool],1,skimage
numpy.isnan(tuple),1,dask.array
numpy.ndarray[numpy.ndarray] = pandas.core.indexes.base.Index,1,pandas
"numpy.empty(tuple[int], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[builtins.bool, float]], copy=builtins.bool)",1,pandas
"numpy.array(builtins.map, copy=builtins.bool)",1,pandas
numpy.uint8 == numpy.uint8,1,skimage
numpy.datetime64 in pandas.core.indexes.category.CategoricalIndex,1,pandas
Type[numpy.float32] == Type[builtins.bool],1,skimage
numpy.timedelta64 in pandas.core.arrays.categorical.Categorical,1,pandas
numpy.int64 / float,1,dask.array
"numpy.putmask(pandas.core.arrays.categorical.Categorical, numpy.ndarray, int)",1,pandas
numpy.convolve,1,skimage
"numpy.where(pandas.core.series.Series, pandas.core.arrays.categorical.Categorical, float)",1,pandas
"numpy.cumsum(a=tuple[int, int, int, int, int, int, int, int, int, int, int])",1,dask.array
"numpy.where(numpy.ndarray, pandas.core.arrays.categorical.Categorical, float)",1,pandas
"numpy.where(tuple[builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool], pandas.core.arrays.categorical.Categorical, float)",1,pandas
"numpy.where(list[builtins.bool], pandas.core.arrays.categorical.Categorical, float)",1,pandas
"numpy.repeat(a=pandas.core.indexes.category.CategoricalIndex, axis=int, repeats=int)",1,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.int64])",1,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.int32])",1,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.int16])",1,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.int8])",1,pandas
"numpy.concatenate(list[Union[numpy.ndarray, pandas.core.arrays.categorical.Categorical]])",1,pandas
numpy.ufunc.__doc__,1,dask.array
"numpy.asarray(a=pandas.core.indexes.base.Index, dtype=numpy.dtype)",1,pandas
"numpy.ndarray[slilist[Union[str, tuple[str, int]]]e[NoneType, NoneType, NoneType]] = list[Union[str, tuple[str, int]]]",1,pandas
"numpy.ndarray[slilist[Union[builtins.bool, str]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, str]]",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], NoneType]]",1,dask.array
"numpy.array(list[list[float]], dtype=numpy.dtype)",1,pandas
"numpy.array(numpy.ma.core.MaskedArray, copy=builtins.bool)",1,pandas
"numpy.nanmin(a=numpy.ndarray, axis=tuple[int, int])",1,dask.array
"numpy.nanmin(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",1,dask.array
"numpy.histogram(a=numpy.ndarray, bins=NoneType, range=int)",1,skimage
"numpy.ndarray(dtype=tuple, shape=Type[builtins.int])",1,dask.array
Type[numpy.uint8] in dict,1,skimage
"numpy.arange(int, int, int, Type[numpy.int32])",1,dask.array
"numpy.nanmax(numpy.ndarray, axis=tuple[int, int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.array(list[list[int]], Type[numpy.int32])",1,dask.array
numpy.dtype != Type[numpy.int32],1,dask.array
numpy.rollaxis,1,skimage
"Type[numpy.uint8] in list[Type[Union[numpy.bool_, numpy.float16, numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int64, numpy.int8, numpy.longlong, numpy.uint16, numpy.uint32, numpy.uint64, numpy.uint8, numpy.ulonglong]]]",1,skimage
"numpy.nanmax(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",1,dask.array
Type[numpy.uint8] == str,1,skimage
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.uint8])",1,skimage
"numpy.ndarray(dtype=tuple, shape=Type[builtins.float])",1,dask.array
numpy.float,1,dask.array
numpy.isscalar(element=Type[numpy.ndarray]),1,dask.array
numpy.linalg.norm(x=dask.array.core.Array),1,dask.array
numpy.vstack(tup=dask.array.core.Array),1,dask.array
numpy.dstack(tup=dask.array.core.Array),1,dask.array
"numpy.ndarray.__array_function__(numpy.ndarray, builtins.function, tuple, tuple[numpy.ndarray, numpy.int64], dict)",1,dask.array
"numpy.prod(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",1,dask.array
"numpy.ndarray.__array_function__(numpy.ndarray, builtins.function, tuple, tuple[numpy.ndarray], dict)",1,dask.array
"numpy.ndarray.__array_function__(numpy.ndarray, builtins.function, tuple, tuple[numpy.ndarray, numpy.ndarray], dict)",1,dask.array
"numpy.asarray(a=numpy.dtype, dtype=numpy.ndarray)",1,dask.array
Type[numpy.lidict.mixins.NDArrayOperatorsMixin] in dict,1,dask.array
numpy.lib.mixins.NDArrayOperatorsMixin,1,dask.array
numpy.lib,1,dask.array
"numpy.polyfit(deg=int, x=numpy.ndarray, y=numpy.ndarray)",1,skimage
"numpy.interp(fp=numpy.ndarray, x=numpy.flatiter, xp=numpy.ndarray)",1,skimage
"numpy.ndarray.__array_function__(numpy.ndarray, builtins.function, tuple[Type[numpy.ndarray]], tuple[numpy.ndarray, numpy.ndarray], dict)",1,dask.array
numpy.any(a=numpy.bool_),1,skimage
"numpy.arange(int, dtype=Type[builtins.float])",1,dask.array
"numpy.array(list[int], dtype=Type[numpy.float16])",1,skimage
"numpy.linspace(dtype=int, endpoint=builtins.bool, num=Type[builtins.int], start=float, stop=float)",1,dask.array
"numpy.linspace(dtype=builtins.bool, endpoint=Type[builtins.float], start=int, stop=int)",1,dask.array
"numpy.linspace(endpoint=int, num=builtins.bool, start=float, stop=float)",1,dask.array
"numpy.linspace(endpoint=builtins.bool, start=int, stop=int)",1,dask.array
"numpy.allclose(a=float, b=numpy.float64)",1,dask.array
"numpy.linspace(endpoint=builtins.bool, retstep=builtins.bool, start=int, stop=int)",1,dask.array
"numpy.full(dtype=numpy.dtype, fill_value=int, shape=numpy.ndarray)",1,dask.array
"numpy.zeros(numpy.ndarray, dtype=numpy.dtype)",1,dask.array
"numpy.ones(dtype=numpy.dtype, shape=numpy.ndarray)",1,dask.array
"numpy.empty(numpy.ndarray, dtype=numpy.dtype)",1,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, numpy.ndarray)",1,dask.array
"numpy.zeros(list[int], dtype=numpy.dtype)",1,dask.array
"numpy.empty(list[int], dtype=numpy.dtype)",1,dask.array
"numpy.full_like(a=numpy.ndarray, fill_value=int)",1,dask.array
"numpy.ones(dtype=Type[numpy.bool_], shape=tuple[int, int])",1,skimage
"numpy.zeros(tuple[int, int], dtype=numpy.dtype)",1,dask.array
"numpy.full(dtype=numpy.dtype, fill_value=int, shape=list[int])",1,dask.array
"numpy.ones(dtype=numpy.dtype, shape=list[int])",1,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, list[int])",1,dask.array
"numpy.full(dtype=numpy.dtype, fill_value=int, shape=tuple[int, int])",1,dask.array
"numpy.histogram(a=numpy.ndarray, bins=tuple[int, int], range=int)",1,skimage
"numpy.int32[tuple[builtins.ellipsis, NoneType, NoneType]]",1,dask.array
"numpy.nanmin(numpy.ndarray, axis=tuple[int, int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
numpy.ndarray.cumsum(numpy.ndarray),1,skimage
numpy.array(list[list[list[list[int]]]]),1,dask.array
numpy.concatenate(list[dask.array.core.Array]),1,dask.array
"numpy.asarray(a=numpy.ndarray, dtype=numpy.dtype)",1,dask.array
"numpy.ndarray[tuple[NoneType, NoneType, NoneType, slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.reshape(a=numpy.ndarray, newshape=list[int])",1,skimage
"numpy.amin(a=numpy.ndarray, axis=builtins.bool, keepdims=NoneType)",1,dask.array
"numpy.median(a=tuple[int, int, int, int, int, int, int, int, int, int])",1,dask.array
float * numpy.int64,1,dask.array
numpy.int64 -= numpy.int64,1,dask.array
numpy.int64 % int,1,dask.array
"numpy.argmin(numpy.ndarray, axis=builtins.bool, keepdims=int)",1,dask.array
int -= numpy.int64,1,dask.array
int >= numpy.int64,1,dask.array
numpy.int64[tuple[NoneType]],1,dask.array
"numpy.isnan(tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64])",1,dask.array
"numpy.isnan(tuple[float, float, float, float, float])",1,dask.array
"numpy.asarray(a=tuple[int, int], dtype=Type[builtins.int])",1,dask.array
"numpy.unravel_index(numpy.int64, tuple[int])",1,dask.array
numpy.int64 -= numpy.int64,1,skimage
numpy.ndarray / numpy.int64,1,dask.array
numpy.ndarray * numpy.float64,1,dask.array
"numpy.cumsum(a=tuple[int, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64])",1,dask.array
"numpy.ravel_multi_index(tuple[numpy.int64], tuple[int])",1,dask.array
numpy.float64 + float,1,dask.array
numpy.int64 / numpy.int64,1,dask.array
"numpy.amax(a=numpy.ndarray, axis=builtins.bool, keepdims=NoneType)",1,dask.array
"numpy.asarray(a=tuple[int], dtype=Type[builtins.int])",1,dask.array
numpy.ndarray >= numpy.int64,1,skimage
"numpy.argmax(numpy.ndarray, axis=builtins.bool, keepdims=int)",1,dask.array
numpy.int64 + int,1,dask.array
numpy.float64 *= numpy.int64,1,dask.array
"numpy.median(a=tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64])",1,dask.array
"numpy.nanstd(a=numpy.ndarray, axis=tuple[int, int])",1,dask.array
"numpy.nanstd(a=numpy.ndarray, keepdims=builtins.bool)",1,dask.array
numpy.lib.mixins,1,dask.array
"numpy.full_like(a=numpy.ndarray, dtype=numpy.dtype, fill_value=numpy.int64, shape=tuple[int, int])",1,dask.array
numpy.linalg.eigvals(a=numpy.ndarray),1,dask.array
numpy.linalg.det(a=dask.array.core.Array),1,dask.array
numpy.min_scalar_type(numpy.ndarray),1,dask.array
"numpy.fft.fft2(a=numpy.ndarray, axes=tuple[int, int], s=NoneType)",1,dask.array
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=list[float])",1,skimage
Type[numpy.uint16] in dict,1,skimage
"numpy.complex128[tuple[builtins.ellipsis, NoneType, NoneType]]",1,dask.array
"numpy.fft.fft(numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.prod(a=numpy.ndarray, axis=tuple[int, int])",1,dask.array
numpy.round,1,dask.array
"numpy.full_like(a=numpy.ndarray, dtype=numpy.dtype, fill_value=numpy.float64, shape=tuple[int, int])",1,dask.array
"numpy.var(a=numpy.ndarray, axis=tuple[int, int])",1,dask.array
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.uint16])",1,skimage
numpy.amin(a=dask.array.core.Array),1,dask.array
"numpy.promote_types(numpy.dtype, Type[builtins.float])",1,dask.array
numpy.vstack(tup=numpy.ndarray),1,dask.array
"numpy.amax(a=numpy.ndarray, axis=tuple[int, int])",1,dask.array
numpy.obj2sctype(rep=Type[numpy.floating]),1,skimage
numpy.block(arrays=list[dask.array.core.Array]),1,dask.array
"numpy.all(a=numpy.ndarray, axis=tuple[int, int])",1,dask.array
numpy.stack(arrays=list[numpy.ndarray]),1,dask.array
numpy.mean(a=dask.array.core.Array),1,dask.array
"numpy.matmul(dask.array.core.Array, dask.array.core.Array)",1,dask.array
numpy.hstack(tup=dask.array.core.Array),1,dask.array
"numpy.mean(a=numpy.ndarray, axis=tuple[int, int])",1,dask.array
numpy.dstack(tup=numpy.ndarray),1,dask.array
"numpy.dot(dask.array.core.Array, dask.array.core.Array)",1,dask.array
"numpy.arange(int, int, int, Type[builtins.float])",1,dask.array
"numpy.arange(int, int, int, Type[builtins.int])",1,dask.array
"numpy.arange(float, float, float, numpy.dtype)",1,dask.array
numpy.random.mtrand.RandomState.randint,1,skimage
"numpy.tile(A=list[list[int]], reps=tuple[int, int])",1,dask.array
Type[numpy.float64] == str,1,skimage
numpy.asarray(a=list[list[int]]),1,dask.array
"numpy.tile(A=list[list[int]], reps=int)",1,dask.array
numpy.transpose(a=list[numpy.ndarray]),1,skimage
"numpy.ndarray.repeat(numpy.ndarray, int)",1,dask.array
numpy.repeat,1,dask.array
int != numpy.float64,1,dask.array
"numpy.ndarray.round(numpy.ndarray, int)",1,dask.array
"numpy.ndarray.repeat(numpy.ndarray, int, axis=int)",1,dask.array
numpy.log10(numpy.ndarray),1,skimage
numpy.ndarray.repeat,1,dask.array
"numpy.issubdtype(arg1=Type[numpy.uint16], arg2=Type[numpy.float64])",1,skimage
"numpy.full_like(a=numpy.ndarray, dtype=Type[numpy.float64], fill_value=numpy.int64, shape=tuple[int, int])",1,dask.array
numpy.rint,1,skimage
"numpy.diagonal(a=dask.array.core.Array, axis1=int)",1,dask.array
numpy.diagonal(a=dask.array.core.Array),1,dask.array
"numpy.random.mtrand.RandomState.uniform(numpy.random.mtrand.RandomState, float, float)",1,skimage
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[builtins.function])",1,skimage
"numpy.full_like(a=numpy.ndarray, dtype=Type[numpy.float64], fill_value=numpy.float64, shape=tuple[int, int])",1,dask.array
"numpy.eye(N=int, k=int)",1,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, float, int)",1,skimage
"tuple[builtins.function, builtins.function, builtins.function, builtins.builtin_function_or_method]uiltins.tuple[builtins.function, builtins.function, builtins.function, builtins.builtin_function_or_method]uiltin_function_or_method in tuple[builtins.function, builtins.function, builtins.function, builtins.builtin_function_or_method]",1,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, size=int)",1,skimage
numpy.zeros_like,1,dask.array
"numpy.zeros_like(a=numpy.ndarray, shape=tuple[int, int])",1,dask.array
"numpy.tril(k=int, m=numpy.ndarray)",1,dask.array
"numpy.tile(A=list[list[int]], reps=tuple[int, int, int, int])",1,dask.array
"numpy.tile(A=numpy.ndarray, reps=tuple[int, int, int, int])",1,dask.array
"numpy.nanvar(a=numpy.ndarray, axis=tuple)",1,dask.array
"numpy.empty(tuple[int, int, int])",1,dask.array
Type[numpy.float64] in dict,1,skimage
"numpy.ndarray[sliinte[NoneType, int, NoneType]] = int",1,dask.array
"numpy.all(numpy.ndarray, axis=tuple, computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.ndarray[sliinte[int, NoneType, NoneType]] = int",1,dask.array
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=builtins.function, pad_width=tuple[tuple[int, int], tuple[int, int]])",1,dask.array
"numpy.amin(numpy.ndarray, axis=tuple[int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.empty(tuple[int], dtype=Type[builtins.object])",1,dask.array
numpy.ndarray[tuple[int]] = dask.array.core.Array,1,dask.array
"numpy.amax(numpy.ndarray, axis=tuple[int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.power(int, numpy.ndarray)",1,skimage
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=tuple[tuple[int, int], tuple[int, int]])",1,dask.array
"numpy.rint(numpy.ndarray, out=numpy.ndarray)",1,skimage
"numpy.asarray(a=tuple[float, int])",1,skimage
numpy.nanprod,1,dask.array
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=int)",1,dask.array
"numpy.testing._private.utils.assert_equal(actual=tuple[numpy.ndarray, numpy.ndarray], desired=list[list[Union[float, int]]])",1,skimage
"numpy.linspace(dtype=numpy.dtype, num=int, start=numpy.float64, stop=int)",1,dask.array
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=tuple[tuple[int, int], tuple[int, int]])",1,dask.array
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=tuple[int, int])",1,dask.array
"numpy.empty(tuple[int, int], dtype=Type[builtins.object])",1,dask.array
"numpy.multiply(numpy.ndarray, int, dtype=Type[numpy.float64])",1,skimage
"numpy.issubdtype(arg1=Type[numpy.float64], arg2=Type[numpy.uint8])",1,skimage
"numpy.full(dtype=Type[numpy.uint8], fill_value=int, shape=tuple[int, int, int])",1,skimage
"numpy.tile(A=numpy.ndarray, reps=tuple[int, int, int])",1,dask.array
"numpy.zeros(tuple[int, int, int], dtype=Type[builtins.bool])",1,skimage
numpy.isnan(list[float]),1,skimage
"numpy.sum(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",1,dask.array
numpy.obj2sctype(rep=Type[numpy.uint16]),1,skimage
"numpy.std(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",1,dask.array
"numpy.amin(a=numpy.ndarray, axis=tuple[int, int])",1,dask.array
"numpy.triu(k=int, m=numpy.ndarray)",1,dask.array
"numpy.any(numpy.ndarray, axis=tuple[int, int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
numpy.dtype != Type[numpy.uint32],1,dask.array
"numpy.arange(numpy.uint32, numpy.uint32, numpy.uint32, dtype=Type[numpy.uint32])",1,dask.array
numpy.uint64 in dict,1,dask.array
"numpy.ndarray.ptp(numpy.ndarray, int)",1,skimage
numpy.uint64 * int,1,dask.array
numpy.uint64 / numpy.uint64,1,dask.array
"numpy.arange(numpy.uint64, numpy.uint64, numpy.uint64, dtype=NoneType)",1,dask.array
"numpy.choose(a=numpy.ndarray, choices=list[numpy.ndarray])",1,skimage
numpy.obj2sctype(rep=numpy.dtype),1,skimage
Type[numpy.unsignedinteger] in dict,1,dask.array
numpy.uint32 * int,1,dask.array
numpy.uint32 / numpy.uint32,1,dask.array
"numpy.arange(numpy.uint32, numpy.uint32, numpy.uint32, dtype=NoneType)",1,dask.array
"numpy.nansum(a=numpy.ndarray, axis=tuple[int, int])",1,dask.array
numpy.int32 * int,1,dask.array
numpy.int32 / numpy.int32,1,dask.array
"numpy.arange(numpy.int32, numpy.int32, numpy.int32, dtype=NoneType)",1,dask.array
numpy.float32 in dict,1,dask.array
"numpy.sum(a=numpy.ndarray, axis=tuple[int, int], keepdims=builtins.bool)",1,dask.array
Type[numpy.floating] in dict,1,dask.array
numpy.float32 * int,1,dask.array
numpy.float32 / numpy.float32,1,dask.array
"numpy.arange(numpy.float32, numpy.float32, numpy.float32, dtype=NoneType)",1,dask.array
"numpy.arange(int, float, int)",1,dask.array
"numpy.arange(int, float, int, dtype=NoneType)",1,dask.array
"numpy.arange(int, int, int, dtype=NoneType)",1,dask.array
Type[numpy.uint32] in dict,1,dask.array
"numpy.arange(numpy.int64, numpy.int64, numpy.uint32, Type[numpy.uint32])",1,dask.array
numpy.uint64 - numpy.uint64,1,dask.array
"numpy.meshgrid(kwargs=dict, xi=tuple[numpy.ndarray])",1,dask.array
"numpy.ndarray[tuple[sliinte[numpy.int64, numpy.int64, NoneType], sliinte[numpy.int64, numpy.int64, NoneType]]] = int",1,skimage
numpy.shape,1,skimage
"numpy.generic.astype(numpy.int8, Type[numpy.int64])",1,skimage
"numpy.promote_types(numpy.dtype, numpy.dtype)",1,skimage
"numpy.issubdtype(arg1=Type[numpy.float64], arg2=Type[numpy.float64])",1,skimage
"numpy.meshgrid(kwargs=dict, xi=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,dask.array
"numpy.float64[tuple[builtins.ellipsis, NoneType, NoneType, NoneType, NoneType]]",1,dask.array
"numpy.amax(a=tuple[int, int, int, int])",1,dask.array
"numpy.seterr(divide=str, invalid=str, over=str, under=str)",1,skimage
"numpy.ndarray[tuple[builtins.ellipsis, NoneType, NoneType, NoneType]]",1,dask.array
"numpy.meshgrid(kwargs=dict, xi=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,dask.array
"numpy.meshgrid(kwargs=dict, xi=tuple[numpy.ndarray, numpy.ndarray])",1,dask.array
"numpy.indices(dimensions=tuple[int], dtype=Type[builtins.float])",1,dask.array
"numpy.any(a=numpy.ndarray, axis=tuple[int, int])",1,dask.array
numpy.prod(a=tuple[int]),1,dask.array
numpy.indices(dimensions=tuple),1,dask.array
numpy.prod(a=tuple),1,dask.array
numpy.ndarray % float,1,skimage
"numpy.arange(float, float, float, str)",1,dask.array
"numpy.arange(float, float, float, dtype=str)",1,dask.array
numpy.seterr(invalid=str),1,skimage
"numpy.uint64[tuple[builtins.ellipsis, NoneType]]",1,dask.array
numpy.isscalar(element=numpy.uint64),1,dask.array
"numpy.ndarray(dtype=tuple, shape=Type[numpy.uint64])",1,dask.array
numpy.dtype(Type[numpy.uint64]),1,dask.array
numpy.ceil(numpy.float64),1,dask.array
numpy.int64 += numpy.int64,1,skimage
"numpy.nanargmin(a=numpy.ndarray, axis=NoneType)",1,dask.array
numpy.array(numpy.complex64),1,dask.array
numpy.ndarray | numpy.ndarray,1,dask.array
"numpy.array(list[int], copy=builtins.bool)",1,dask.array
numpy.random._bounded_integers.__warningregistry__,1,skimage
"numpy.ndarray(dtype=tuple, shape=Type[numpy.int64])",1,dask.array
numpy.dtype(Type[numpy.float32]),1,dask.array
builtins.float.is_integer(self=numpy.float64),1,dask.array
"numpy.argpartition(a=numpy.ndarray, axis=int, kth=int)",1,dask.array
numpy.float64 // int,1,dask.array
numpy.float64 != int,1,dask.array
numpy.dtype(Type[numpy.uint8]),1,dask.array
numpy.argpartition,1,dask.array
"numpy.arange(int, int, int, Type[numpy.int64])",1,dask.array
numpy.float64 in builtins.frozenset,1,dask.array
"numpy.transpose(a=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,skimage
numpy.float64 > int,1,dask.array
numpy.argsort,1,dask.array
numpy.median(a=tuple[int]),1,dask.array
"numpy.ndarray[tuple[slibuiltins.boole[int, NoneType, NoneType]]] = builtins.bool",1,skimage
numpy.random._common.__warningregistry__,1,skimage
numpy.polynomial.laguerre.__warningregistry__,1,skimage
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[int, NoneType, NoneType]]] = builtins.bool",1,skimage
numpy.nan_to_num(x=pandas.core.indexes.base.Index),1,dask.array
"numpy.issubdtype(arg1=Type[numpy.bool_], arg2=Type[numpy.floating])",1,skimage
numpy.matrix.__class__,1,dask.array
"numpy.ndarray.view(numpy.matrix, type=Type[numpy.ndarray])",1,dask.array
numpy.ndarray.trace(numpy.ndarray),1,dask.array
numpy.ndarray.trace,1,dask.array
"numpy.ndarray.trace(numpy.ndarray, int)",1,dask.array
numpy.random.mtrand.__warningregistry__,1,skimage
numpy.ndarray %= int,1,dask.array
"numpy.ndarray.reshape(numpy.matrix, tuple[int])",1,dask.array
numpy.random._pcg64.__warningregistry__,1,skimage
numpy.memmap in dict,1,dask.array
"numpy.memmap(dtype=tuple[int], filename=str, mode=str, shape=numpy.dtype)",1,dask.array
numpy.memmap,1,dask.array
"numpy.cumsum(a=numpy.ndarray, axis=NoneType)",1,dask.array
"numpy.asarray(a=list[tuple[numpy.ndarray, numpy.ndarray]])",1,skimage
"numpy.array(list[list[int]], copy=builtins.bool)",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, NoneType, int]]]",1,dask.array
"numpy.cumprod(a=numpy.ndarray, axis=NoneType)",1,dask.array
"numpy.nancumsum(a=numpy.ndarray, axis=NoneType)",1,dask.array
"numpy.cumsum(a=dask.array.core.Array, axis=dask.array.core.Array, out=int)",1,dask.array
numpy.ma.__warningregistry__,1,skimage
numpy.floating,1,dask.array
"numpy.asanyarray(a=list[Union[float, int]])",1,dask.array
"numpy.partition(a=numpy.ndarray, axis=int, kth=int)",1,dask.array
"numpy.array(numpy.ndarray, copy=builtins.bool)",1,dask.array
"numpy.ndarray[tuple[list[int], list[int], list[int], slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.array(list, copy=builtins.bool)",1,dask.array
numpy.partition,1,dask.array
numpy.ma.core.__warningregistry__,1,skimage
"numpy.ndarray[tuple[list[int], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,dask.array
numpy.random.__warningregistry__,1,skimage
"numpy.ndarray[tuple[list[int], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,dask.array
"numpy.empty(tuple[int, int, int, int])",1,dask.array
"numpy.searchsorted(a=list[int], side=str, v=int)",1,dask.array
numpy.ndarray[tuple[list[int]]] = numpy.ndarray,1,dask.array
numpy.random._generator.__warningregistry__,1,skimage
Type[numpy.int64] in builtins.set,1,dask.array
numpy.matrix.view,1,dask.array
"numpy.ndarray.trace(numpy.ndarray, int, int, int)",1,dask.array
numpy.int64 -= int,1,skimage
"numpy.array(numpy.ndarray, dtype=int, ndmin=str)",1,dask.array
numpy.isscalar(element=numpy.float128),1,dask.array
numpy.atleast_1d(),1,dask.array
numpy.atleast_3d(),1,dask.array
numpy.float128(int),1,dask.array
numpy.array(numpy.uint64),1,dask.array
numpy.atleast_2d(arys=tuple[numpy.ndarray]),1,dask.array
numpy.atleast_3d(arys=tuple[numpy.ndarray]),1,dask.array
numpy.uint64.ndim,1,dask.array
"numpy.atleast_2d(arys=tuple[numpy.ndarray, numpy.ndarray])",1,dask.array
Type[numpy.uint64] == Type[numpy.datetime64],1,dask.array
numpy.isscalar(element=numpy.str_),1,dask.array
numpy.str_(int),1,dask.array
"numpy.atleast_1d(arys=tuple[numpy.ndarray, numpy.ndarray])",1,dask.array
numpy.array(numpy.complex128),1,dask.array
numpy.ndarray.cumsum,1,skimage
Type[numpy.complex128] == Type[numpy.datetime64],1,dask.array
"numpy.atleast_3d(arys=tuple[numpy.ndarray, numpy.ndarray])",1,dask.array
"numpy.logspace(num=int, start=float, stop=float)",1,skimage
numpy.array(numpy.uint32),1,dask.array
"numpy.ones(shape=tuple[int, int, int, int])",1,dask.array
Type[numpy.uint32] == Type[numpy.datetime64],1,dask.array
numpy.dstack(tup=list[skimage.feature._hessian_det_appx._memoryviewslice]),1,skimage
numpy.polynomial.chebyshev.__warningregistry__,1,skimage
numpy.polynomial._polybase.__warningregistry__,1,skimage
numpy.int32(int),1,dask.array
numpy.fft.__warningregistry__,1,skimage
numpy.fft._pocketfft.__warningregistry__,1,skimage
Type[numpy.oType[numpy.int64]ject_] == Type[numpy.int64],1,dask.array
Type[numpy.complex256] == Type[numpy.datetime64],1,dask.array
"Type[numpy.matrix] in tuple[Type[builtins.tuple], Type[builtins.str]]",1,dask.array
numpy.nanmedian,1,dask.array
"numpy.ndarray.trace(numpy.ndarray, int, int, int, Type[builtins.int])",1,dask.array
"numpy.matrix[tuple[slice[int, int, NoneType], slice[int, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, int, NoneType]]] = builtins.bool",1,skimage
"numpy.ndarray.trace(numpy.ndarray, int, int, int, Type[builtins.float])",1,dask.array
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, int, NoneType]]] = builtins.bool",1,skimage
Type[numpy.matrix].__name__,1,dask.array
"numpy.median(a=tuple[int, int, int, int, int])",1,dask.array
"numpy.ndarray.cumsum(numpy.ndarray, axis=int)",1,skimage
numpy.polynomial.hermite.__warningregistry__,1,skimage
numpy.matrix(data=numpy.ndarray),1,dask.array
numpy.array(numpy.datetime64),1,dask.array
numpy.datetime64.ndim,1,dask.array
Type[numpy.datetime64] == Type[numpy.datetime64],1,dask.array
numpy.isscalar(element=numpy.ulonglong),1,dask.array
"numpy.nanmedian(a=numpy.ndarray, axis=builtins.bool, keepdims=int)",1,dask.array
numpy.ulonglong(int),1,dask.array
numpy.array(numpy.longlong),1,dask.array
numpy.longlong.ndim,1,dask.array
Type[numpy.longlong] == Type[numpy.datetime64],1,dask.array
numpy.array(numpy.void),1,dask.array
"numpy.median(a=numpy.ndarray, axis=builtins.bool, keepdims=list[int])",1,dask.array
"numpy.nanmedian(a=numpy.ndarray, axis=builtins.bool, keepdims=list[int])",1,dask.array
numpy.int64 *= int,1,dask.array
Type[numpy.void] == Type[numpy.datetime64],1,dask.array
numpy.bool_(int),1,dask.array
numpy.array(numpy.complex256),1,dask.array
numpy.complex256.ndim,1,dask.array
"numpy.save(arr=numpy.memmap, file=str)",1,dask.array
"numpy.load(file=str, mmap_mode=str)",1,dask.array
numpy.memmap._mmap,1,dask.array
"numpy.promote_types(numpy.dtype, numpy.dtype)",1,dask.array
"numpy.ndarray.std(numpy.ndarray, keepdims=builtins.bool)",1,dask.array
"numpy.allclose(a=numpy.float64, b=numpy.float64, equal_nan=builtins.bool)",1,dask.array
"numpy.generic.astype(numpy.uint16, Type[numpy.int64])",1,skimage
"numpy.true_divide(numpy.float64, numpy.float64, NoneType)",1,dask.array
"numpy.true_divide(numpy.ndarray, numpy.ndarray, NoneType)",1,dask.array
"numpy.issubdtype(arg1=Type[numpy.float64], arg2=Type[numpy.uint16])",1,skimage
"numpy.std(a=numpy.ndarray, axis=tuple[int, int])",1,dask.array
numpy.full_like,1,dask.array
numpy.nanmean(a=numpy.ndarray),1,dask.array
"numpy.nanmean(a=numpy.ndarray, keepdims=builtins.bool)",1,dask.array
"numpy.clip(a=numpy.float64, a_max=NoneType, a_min=int)",1,skimage
"numpy.nanmean(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple)",1,dask.array
numpy.nanvar,1,dask.array
"numpy.nanvar(a=numpy.ndarray, axis=tuple[int, int])",1,dask.array
"numpy.int64[tuple[NoneType, NoneType]]",1,dask.array
"numpy.ones(dtype=Type[builtins.float], shape=tuple[int, int])",1,skimage
"numpy.unravel_index(numpy.int64, tuple[int, int])",1,dask.array
"numpy.full_like(a=numpy.ndarray, dtype=Type[numpy.float64], fill_value=numpy.int64, shape=tuple[int])",1,dask.array
numpy.ndarray.__name__,1,dask.array
"numpy.ravel_multi_index(tuple[numpy.int64, numpy.int64], tuple[int, int])",1,dask.array
"numpy.ndarray.dot(numpy.ndarray, dask.array.core.Array)",1,dask.array
"numpy.random.mtrand.RandomState.random_sample(numpy.random.mtrand.RandomState, size=tuple[int, int, int])",1,dask.array
"numpy.product(args=tuple[tuple[int, int]])",1,skimage
"numpy.empty(dtype=tuple[int, int], shape=list[tuple[str, numpy.dtype]])",1,dask.array
numpy.dtype(Type[numpy.int16]),1,dask.array
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int16])",1,dask.array
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int32])",1,dask.array
"numpy.ndarray[slifloate[NoneType, NoneType, NoneType]] = float",1,dask.array
numpy.__version__,1,dask.array
"numpy.argmax(a=dask.array.core.Array, axis=dask.array.core.Array, out=int)",1,dask.array
numpy.ndarray.tolist,1,dask.array
"numpy.nanmin(a=numpy.ndarray, axis=builtins.bool, keepdims=NoneType)",1,dask.array
int // numpy.int64,1,skimage
"numpy.reshape(a=list[int], newshape=list[int])",1,skimage
numpy.any(a=numpy.bool_),1,dask.array
"numpy.clip(a=numpy.ndarray, a_max=int, a_min=numpy.ndarray, out=NoneType)",1,skimage
"numpy.reshape(a=numpy.ndarray, newshape=tuple[numpy.int64, numpy.int64])",1,skimage
"numpy.ndindex(shape=tuple[int, int])",1,skimage
numpy.ndarray.flatten(numpy.ndarray),1,dask.array
numpy.take_along_axis,1,skimage
"numpy.ndarray[slice[NoneType, NoneType, NoneType]]",1,dask.array
"numpy.array(list[list[list[tuple[str, int, int, int]]]], dtype=Type[builtins.object])",1,dask.array
"numpy.array(list[list[tuple[str, int, int]]], dtype=Type[builtins.object])",1,dask.array
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.nanmax(a=numpy.ndarray, axis=builtins.bool, keepdims=NoneType)",1,dask.array
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.product(args=tuple[list[numpy.ndarray], int])",1,skimage
"Type[numpy.uint16] in list[Type[Union[numpy.bool_, numpy.float16, numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int64, numpy.int8, numpy.longlong, numpy.uint16, numpy.uint32, numpy.uint64, numpy.uint8, numpy.ulonglong]]]",1,skimage
"numpy.nanargmax(a=numpy.ndarray, axis=NoneType)",1,dask.array
"Type[numpy.float64] in list[Type[Union[numpy.bool_, numpy.float16, numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int64, numpy.int8, numpy.longlong, numpy.uint16, numpy.uint32, numpy.uint64, numpy.uint8, numpy.ulonglong]]]",1,skimage
"numpy.array(tuple[int, int, int, int, int])",1,dask.array
"numpy.array(list[tuple[str, int]], dtype=Type[builtins.object])",1,dask.array
"numpy.asarray(a=tuple[int, int, int])",1,dask.array
"numpy.ndarray * tuple[int, int, int]",1,dask.array
numpy.ndarray * list[int],1,dask.array
numpy.asanyarray(a=list[tuple[int]]),1,dask.array
numpy.ones(shape=tuple[int]),1,dask.array
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.floating])",1,dask.array
numpy.ndindex,1,skimage
"numpy.take_along_axis(arr=numpy.ndarray, axis=int, indices=numpy.ndarray)",1,skimage
"numpy.lituple[slice[NoneType, int, NoneType]].index_tricks.OGridClass[tuple[slice[NoneType, int, NoneType]]]",1,dask.array
numpy.where,1,dask.array
numpy.timedelta64.shape,1,dask.array
Type[numpy.generic] in dict,1,dask.array
Type[numpy.integer] in dict,1,dask.array
Type[numpy.timedelta64].__module__,1,dask.array
"numpy.ndarray.argmin(numpy.ndarray, axis=int)",1,dask.array
"numpy.nanmean(a=numpy.ndarray, axis=int)",1,dask.array
numpy.testing._private.__warningregistry__,1,skimage
"numpy.ndarray(dtype=tuple, shape=Type[builtins.object])",1,dask.array
"numpy.empty(tuple, dtype=Type[builtins.object])",1,dask.array
"numpy.array(list[list[Union[float, int]]])",1,dask.array
"numpy.ndarray.transpose(numpy.ndarray, int, int, int)",1,skimage
"numpy.allclose(a=tuple[float, float, float], b=tuple[float, float, float], equal_nan=builtins.bool)",1,dask.array
"numpy.empty(tuple, dtype=numpy.dtype)",1,dask.array
"numpy.ndarray.sum(numpy.ndarray, axis=tuple[int, int, int], keepdims=builtins.bool)",1,dask.array
numpy.asfortranarray(a=numpy.ndarray),1,dask.array
"numpy.full_like(a=numpy.ndarray, dtype=numpy.dtype, fill_value=numpy.int64, shape=tuple[int, int, int])",1,dask.array
"numpy.ndarray.mean(numpy.ndarray, axis=tuple)",1,dask.array
numpy.ndarray.view(numpy.ndarray),1,dask.array
"numpy.ndarray[tuple[slinumpy.memmape[int, int, NoneType], slinumpy.memmape[int, int, NoneType], slinumpy.memmape[int, int, NoneType]]] = numpy.memmap",1,dask.array
numpy.memmap.shape,1,dask.array
"numpy.full_like(a=numpy.ndarray, dtype=numpy.dtype, fill_value=numpy.float64, shape=tuple[int, int, int])",1,dask.array
"numpy.ndarray.mean(numpy.ndarray, axis=int)",1,dask.array
"numpy.ndarray.sum(numpy.ndarray, axis=tuple[int, int, int], dtype=numpy.dtype, keepdims=builtins.bool)",1,dask.array
Type[numpy.memmap].__module__,1,dask.array
"numpy.sum(a=dask.array.core.Array, axis=dask.array.core.Array, out=int)",1,dask.array
numpy.save,1,dask.array
"numpy.flatiter[int] = tuple[str, int, int, int]",1,dask.array
numpy.timedelta64.ndim,1,dask.array
numpy.ndarray.argmin,1,dask.array
numpy.timedelta64 in dict,1,dask.array
numpy.testing._private.decorators.__warningregistry__,1,skimage
"numpy.product(args=tuple[tuple[int, int, int]])",1,skimage
"numpy.float64[tuple[builtins.ellipsis, NoneType, NoneType, NoneType]]",1,dask.array
"numpy.ndindex(shape=tuple[int, int, int])",1,skimage
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int, int, int, int])",1,skimage
"numpy.ndarray.mean(numpy.ndarray, axis=builtins.bool, keepdims=NoneType)",1,dask.array
numpy.dtype(Type[numpy.floating]),1,skimage
numpy.ndarray.cumprod,1,dask.array
numpy.ndarray.cumsum,1,dask.array
numpy.cumsum,1,dask.array
numpy.float64 += numpy.float64,1,dask.array
numpy.testing.__warningregistry__,1,skimage
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int)",1,dask.array
int ** numpy.ndarray,1,skimage
numpy.ndarray / numpy.timedelta64,1,dask.array
"numpy.percentile(a=numpy.ndarray, q=list[int])",1,skimage
"numpy.allclose(a=list[int], b=numpy.ndarray)",1,skimage
"numpy.allclose(a=list[int], b=dask.array.core.Array)",1,skimage
numpy.cumprod(a=numpy.ndarray),1,dask.array
numpy.cumprod,1,dask.array
float * numpy.ndarray,1,dask.array
"numpy.ndarray.mean(numpy.ndarray, axis=builtins.bool, keepdims=tuple[int, int])",1,dask.array
numpy.ndarray.cumsum(numpy.ndarray),1,dask.array
numpy.full,1,dask.array
"numpy.unique(ar=numpy.ndarray, return_counts=builtins.bool, return_inverse=builtins.bool)",1,skimage
"numpy.array(dask.delayed.Delayed, dtype=Type[builtins.object])",1,dask.array
"numpy.array(list[list[dask.delayed.Delayed]], dtype=Type[builtins.object])",1,dask.array
"numpy.any(numpy.ndarray, axis=tuple, computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.fft.ifft(numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.fft.rfft(numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.sum(a=numpy.ma.core.MaskedArray, axis=tuple[int], dtype=str, keepdims=builtins.bool)",1,dask.array
"numpy.var(a=numpy.ma.core.MaskedArray, keepdims=builtins.bool)",1,dask.array
numpy.ma.core.MaskedArray - int,1,dask.array
numpy.ma.floatore.MaskedArray[numpy.ma.floatore.MaskedArray] = float,1,dask.array
"numpy.sum(a=numpy.ma.core.MaskedArray, axis=tuple[int], keepdims=builtins.bool)",1,dask.array
"numpy.ma.core.MaskedArray.reshape(s=tuple[tuple[int]], self=numpy.ma.core.MaskedArray)",1,dask.array
"numpy.sum(a=numpy.ma.core.MaskedArray, axis=tuple[int, int], dtype=str, keepdims=builtins.bool)",1,dask.array
"numpy.empty(tuple[int, int, int, int, int], dtype=numpy.dtype)",1,skimage
numpy.ma.core.MaskedArray + numpy.ma.core.MaskedArray,1,dask.array
numpy.ma.core.MaskedArray * numpy.ma.core.MaskedArray,1,dask.array
"numpy.ndarray.take(numpy.ndarray, numpy.ndarray)",1,dask.array
"numpy.ma.core.MaskedArray[tuple[builtins.ellipsis, int]]",1,dask.array
numpy.int64 + numpy.ndarray,1,dask.array
"numpy.full(dtype=str, fill_value=int, shape=tuple[int, int])",1,skimage
numpy.ma.core.MaskedArray / numpy.ma.core.MaskedArray,1,dask.array
"numpy.ndarray.astype(numpy.ma.core.MaskedArray, Type[numpy.int64])",1,dask.array
"numpy.sum(a=numpy.ma.core.MaskedArray, axis=tuple[int, int], keepdims=builtins.bool)",1,dask.array
numpy.loadtxt,1,skimage
"numpy.mean(a=numpy.ma.core.MaskedArray, keepdims=builtins.bool)",1,dask.array
Type[numpy.float64] == Type[numpy.float64],1,dask.array
numpy.mean(a=numpy.ma.core.MaskedArray),1,dask.array
"numpy.searchsorted(a=tuple[int, int, int, int], side=str, v=numpy.ndarray)",1,dask.array
"numpy.ma.core.divide(a=numpy.ma.core.MaskedArray, b=numpy.ma.core.MaskedArray, kwargs=dict)",1,dask.array
"numpy.empty(tuple[int, int, int, int], dtype=numpy.dtype)",1,skimage
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, dtype=str, size=tuple[int])",1,dask.array
builtins.builtin_function_or_method.__doc__,1,dask.array
"numpy.random.mtrand.RandomState.standard_normal(numpy.random.mtrand.RandomState, dtype=str, size=tuple[int])",1,dask.array
numpy.ones_like(a=numpy.ma.core.MaskedArray),1,dask.array
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=numpy.bool_)",1,dask.array
numpy.asarray(a=list[float]),1,dask.array
"numpy.ndarray[tuple[int, int, int, int]] = tuple[str, int, int, int, int]",1,dask.array
"numpy.isclose(a=numpy.float64, atol=float, b=int, rtol=int)",1,dask.array
"numpy.any(numpy.ma.core.MaskedArray, axis=tuple[int, int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.random.mtrand.RandomState.standard_normal(numpy.random.mtrand.RandomState, size=tuple[int])",1,dask.array
int -= numpy.int64,1,skimage
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int, int])",1,dask.array
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[numpy.int64, numpy.int64, numpy.int64])",1,dask.array
"numpy.amax(a=numpy.ma.core.MaskedArray, keepdims=builtins.bool)",1,dask.array
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, numpy.float64, float, size=tuple[int])",1,dask.array
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, int, float, size=tuple)",1,dask.array
"numpy.amax(numpy.ma.core.MaskedArray, axis=tuple[int, int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.generic.astype(numpy.int64, numpy.dtype)",1,dask.array
numpy.random.multinomial,1,dask.array
numpy.amax(a=numpy.ma.core.MaskedArray),1,dask.array
"numpy.random.mtrand.RandomState.multinomial(numpy.random.mtrand.RandomState, int, list[float], size=tuple[int, int])",1,dask.array
"numpy.amin(a=numpy.ma.core.MaskedArray, keepdims=builtins.bool)",1,dask.array
"numpy.amin(numpy.ma.core.MaskedArray, axis=tuple[int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.amin(numpy.ma.core.MaskedArray, axis=tuple[int, int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.stack(arrays=list[numpy.float64], axis=int)",1,skimage
"numpy.empty(tuple[int, int, int, int, int, int], dtype=numpy.dtype)",1,skimage
numpy.amin(a=numpy.ma.core.MaskedArray),1,dask.array
numpy.sqrt(numpy.ma.core.MaskedArray),1,dask.array
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]] = tuple[int, int, int]",1,skimage
numpy.std(a=numpy.ma.core.MaskedArray),1,dask.array
"numpy.testing._private.utils.assert_equal(actual=numpy.bool_, desired=numpy.bool_)",1,dask.array
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, int, p=tuple, size=numpy.ndarray)",1,dask.array
numpy.var(a=numpy.ma.core.MaskedArray),1,dask.array
numpy.ma.core.MaskedArray.sum(self=numpy.ma.core.MaskedArray),1,dask.array
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, int, p=tuple, size=NoneType)",1,dask.array
"numpy.loadtxt(dtype=list[tuple[str, Type[Union[builtins.float, builtins.int]]]], fname=str)",1,skimage
"numpy.flatiter[int] = tuple[str, int, int, int, int]",1,dask.array
"numpy.fft.irfft(numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.ma.core.masked_less_equal(value=numpy.ndarray, x=numpy.ndarray)",1,dask.array
"numpy.ma.core.masked_greater_equal(value=int, x=numpy.ndarray)",1,dask.array
"numpy.ma.core.masked_greater_equal(value=numpy.ndarray, x=numpy.ndarray)",1,dask.array
"numpy.median(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int])",1,dask.array
numpy.float64 *= int,1,dask.array
numpy.rad2deg(numpy.float64),1,skimage
"numpy.ma.core.masked_greater(value=dask.array.core.Array, x=numpy.ndarray)",1,dask.array
numpy.ma.core.MaskedArray.fill_value = numpy.int64,1,dask.array
numpy.unique(ar=list[numpy.int64]),1,dask.array
"numpy.ma.core.masked_greater(value=numpy.ndarray, x=numpy.ndarray)",1,dask.array
"numpy.ma.core.masked_greater(value=dask.array.core.Array, x=dask.array.core.Array)",1,dask.array
numpy.ma.core.MaskedArray.fill_value = numpy.complex128,1,dask.array
numpy.unique(ar=list[numpy.complex128]),1,dask.array
numpy.ma.core.MaskedArray.fill_value = numpy.bool_,1,dask.array
numpy.unique(ar=list[numpy.bool_]),1,dask.array
"numpy.allclose(a=numpy.ndarray, b=numpy.ma.core.MaskedArray, equal_nan=builtins.bool)",1,dask.array
"numpy.full_like(a=numpy.ndarray, dtype=str, fill_value=numpy.int64, shape=tuple[int, int, int])",1,dask.array
"numpy.ma.core.concatenate(arrays=list[Union[numpy.ma.core.MaskedArray, numpy.ndarray]], axis=int)",1,dask.array
"numpy.sum(a=numpy.ndarray, axis=str, dtype=tuple[int], keepdims=builtins.bool)",1,dask.array
"numpy.concatenate(list[Union[numpy.ma.core.MaskedArray, numpy.ndarray]], axis=int)",1,dask.array
"numpy.ma.core.MaskedArray[tuple[slice[NoneType, NoneType, NoneType], NoneType, NoneType, slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType, NoneType, slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.ma.core.MaskedArray[tuple[slice[NoneType, NoneType, NoneType], NoneType, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.ma.core.MaskedArray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], NoneType, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.random.mtrand.RandomState.shuffle(numpy.random.mtrand.RandomState, list)",1,dask.array
"numpy.ma.core.dot(a=numpy.ma.core.MaskedArray, b=numpy.ma.core.MaskedArray)",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], NoneType, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.ma.core.masked_less(value=int, x=dask.array.core.Array)",1,dask.array
"numpy.ma.core.masked_less_equal(value=int, x=numpy.ndarray)",1,dask.array
numpy.float64.shape,1,skimage
"numpy.ma.core.masked_not_equal(value=numpy.ndarray, x=numpy.ndarray)",1,dask.array
"numpy.prod(a=numpy.ma.core.MaskedArray, keepdims=builtins.bool)",1,dask.array
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, int, float, size=tuple[int, int])",1,dask.array
"numpy.where(numpy.ndarray, numpy.ndarray, numpy.ndarray)",1,skimage
numpy.prod(a=numpy.ma.core.MaskedArray),1,dask.array
numpy.ndarray.prod(numpy.ndarray),1,dask.array
numpy.log(float),1,dask.array
"numpy.where(numpy.ndarray, float, numpy.ndarray)",1,skimage
"numpy.array(list[numpy.float64], dtype=numpy.dtype)",1,dask.array
"numpy.sum(a=numpy.ma.core.MaskedArray, keepdims=builtins.bool)",1,dask.array
numpy.ma.core.filled(a=numpy.ma.core.MaskedArray),1,dask.array
"numpy.testing._private.utils.assert_equal(actual=numpy.bool_, desired=numpy.ndarray)",1,dask.array
"numpy.isnan(tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float])",1,dask.array
numpy.sum(a=numpy.ma.core.MaskedArray),1,dask.array
numpy.float64 / numpy.int64,1,dask.array
"numpy.median(a=tuple[int, int])",1,dask.array
"numpy.median(a=tuple[int, int, int])",1,dask.array
"numpy.ma.core.fix_invalid(a=numpy.ndarray, fill_value=int)",1,dask.array
numpy.ma.core.masked_invalid(a=numpy.ndarray),1,dask.array
"numpy.ndarray[tuple[int, int]] = float",1,dask.array
"numpy.ma.core.masked_values(value=int, x=numpy.ndarray)",1,dask.array
numpy.ma.masked_values,1,dask.array
numpy.ma.masked_outside,1,dask.array
"numpy.isnan(tuple[int, int, int, int, int, int, int, int, int, int])",1,dask.array
numpy.ma.masked_inside,1,dask.array
"numpy.ma.core.masked_where(a=numpy.ndarray, condition=builtins.bool)",1,dask.array
numpy.asanyarray(a=builtins.bool),1,dask.array
"numpy.ma.core.masked_not_equal(value=int, x=numpy.ndarray)",1,dask.array
Type[numpy.Type[numpy.bool_]ool_] == Type[numpy.bool_],1,dask.array
"numpy.allclose(a=numpy.bool_, b=numpy.bool_, equal_nan=builtins.bool)",1,dask.array
"numpy.random.mtrand.RandomState.standard_exponential(numpy.random.mtrand.RandomState, size=tuple[int])",1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, dtype=dask.array.core.Array, fill_value=str)",1,dask.array
numpy.dtype.name,1,dask.array
"numpy.percentile(a=numpy.ndarray, interpolation=str, q=numpy.ndarray)",1,dask.array
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.datetime64])",1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, dtype=NoneType, fill_value=int, mask=numpy.ndarray)",1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, dtype=NoneType, fill_value=int, mask=numpy.bool_)",1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, dtype=str, fill_value=float, mask=numpy.bool_)",1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, fill_value=numpy.ndarray, mask=float)",1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, dtype=NoneType, fill_value=float, mask=numpy.ndarray)",1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, fill_value=float)",1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, dtype=NoneType, fill_value=str)",1,dask.array
numpy.number,1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, dtype=NoneType, fill_value=NoneType, mask=numpy.ndarray)",1,dask.array
numpy.ma.nomask,1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, dtype=NoneType, fill_value=NoneType, mask=numpy.bool_)",1,dask.array
numpy.ma.getdata,1,dask.array
numpy.ma.core.getmaskarray(arr=numpy.ndarray),1,dask.array
numpy.ma.core.MaskedArray.cumprod(axis=int),1,dask.array
"numpy.cumprod(a=numpy.ma.core.MaskedArray, axis=int)",1,dask.array
"numpy.array(tuple[float, int, float])",1,skimage
numpy.percentile,1,dask.array
"numpy.array(tuple[float, float, float])",1,skimage
numpy.diff(a=list[numpy.int64]),1,dask.array
"numpy.cumsum(a=numpy.ma.core.MaskedArray, axis=int)",1,dask.array
numpy.ma.core.MaskedArray.cumsum,1,dask.array
numpy.empty(int),1,dask.array
"numpy.ndarray[slinumpy.ndarraye[int, NoneType, NoneType]] = numpy.ndarray",1,dask.array
numpy.ndarray *= int,1,dask.array
numpy.all(a=dask.array.core.Array),1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, fill_value=NoneType)",1,dask.array
"numpy.random.mtrand.RandomState.zipf(numpy.random.mtrand.RandomState, int, size=tuple[int])",1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, dtype=str, fill_value=NoneType, mask=numpy.bool_)",1,dask.array
"numpy.ones(dtype=list[tuple[str, str]], shape=tuple[int, int])",1,dask.array
"numpy.dtype(list[tuple[str, str]])",1,dask.array
numpy.swapaxes,1,dask.array
numpy.bool_,1,dask.array
numpy.isscalar(element=numpy.void),1,dask.array
"numpy.ma.extras.average(a=numpy.ma.core.MaskedArray, axis=numpy.ndarray, weights=int)",1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, dtype=NoneType, fill_value=NoneType, mask=numpy.ndarray, options=dict)",1,dask.array
"numpy.void[tuple[builtins.ellipsis, NoneType, NoneType]]",1,dask.array
numpy.float64 += numpy.ndarray,1,skimage
numpy.ndarray + dask.array.core.Array,1,dask.array
numpy.ma.set_fill_value,1,dask.array
"numpy.ma.core.set_fill_value(a=numpy.ma.core.MaskedArray, fill_value=int)",1,dask.array
"numpy.ma.core.set_fill_value(a=numpy.ma.core.MaskedArray, fill_value=numpy.ndarray)",1,dask.array
"numpy.ma.core._check_fill_value(fill_value=int, ndtype=numpy.dtype)",1,dask.array
numpy.ma.core,1,dask.array
not numpy.int64,1,dask.array
numpy.ma.core.MaskError(str),1,dask.array
"numpy.ndarray[tuple[slice[numpy.int64, numpy.int64, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, int, NoneType]]]",1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, dtype=str, fill_value=int, mask=numpy.bool_)",1,dask.array
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, fill_value=dask.array.core.Array)",1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, dtype=float, fill_value=str)",1,dask.array
numpy.ma.core.MaskedArray.fill_value = numpy.float32,1,dask.array
numpy.unique(ar=list[numpy.float32]),1,dask.array
"numpy.ma.core.MaskedArray(data=numpy.ndarray, dtype=NoneType, fill_value=float, mask=numpy.bool_)",1,dask.array
"numpy.array(tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64])",1,dask.array
"numpy.array(list[tuple[int, int, int]])",1,skimage
"numpy.argmax(numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=int)",1,dask.array
"numpy.array(tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64])",1,dask.array
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, int, int, size=tuple[int])",1,dask.array
"numpy.random.mtrand.RandomState.exponential(numpy.random.mtrand.RandomState, int, size=tuple[int, int])",1,dask.array
"numpy.argmin(a=numpy.ma.core.MaskedArray, axis=NoneType)",1,dask.array
"numpy.argmin(numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=NoneType)",1,dask.array
"numpy.random.mtrand.RandomState.binomial(numpy.random.mtrand.RandomState, int, float, size=tuple[int])",1,dask.array
numpy.asanyarray(a=float),1,dask.array
"numpy.random.mtrand.RandomState.exponential(numpy.random.mtrand.RandomState, int, size=tuple[int])",1,dask.array
"numpy.ma.core.masked_greater(value=float, x=numpy.ndarray)",1,dask.array
"numpy.random.mtrand.RandomState.gamma(numpy.random.mtrand.RandomState, int, int, size=tuple[int])",1,dask.array
"numpy.all(a=numpy.ma.core.MaskedArray, keepdims=builtins.bool)",1,dask.array
"numpy.random.mtrand.RandomState.gumbel(numpy.random.mtrand.RandomState, int, float, size=tuple[int])",1,dask.array
numpy.all(a=numpy.ma.core.MaskedArray),1,dask.array
"numpy.random.mtrand.RandomState.laplace(numpy.random.mtrand.RandomState, float, float, size=tuple[int])",1,dask.array
"numpy.random.mtrand.RandomState.lognormal(numpy.random.mtrand.RandomState, float, float, size=tuple[int])",1,dask.array
"numpy.all(numpy.ma.core.MaskedArray, axis=tuple[int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.random.mtrand.RandomState.multinomial(numpy.random.mtrand.RandomState, int, list[float], size=tuple[int])",1,dask.array
"numpy.random.mtrand.RandomState.negative_binomial(numpy.random.mtrand.RandomState, int, float, size=tuple[int])",1,dask.array
"numpy.all(numpy.ma.core.MaskedArray, axis=tuple[int, int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.random.mtrand.RandomState.noncentral_f(numpy.random.mtrand.RandomState, int, int, int, size=tuple[int])",1,dask.array
"numpy.any(a=numpy.ma.core.MaskedArray, keepdims=builtins.bool)",1,dask.array
numpy.any(a=numpy.ma.core.MaskedArray),1,dask.array
"numpy.random.mtrand.RandomState.pareto(numpy.random.mtrand.RandomState, int, size=tuple[int])",1,dask.array
"numpy.random.mtrand.RandomState.power(numpy.random.mtrand.RandomState, int, size=tuple[int])",1,dask.array
"numpy.random.mtrand.RandomState.uniform(numpy.random.mtrand.RandomState, float, float, size=tuple[int])",1,dask.array
"numpy.any(numpy.ma.core.MaskedArray, axis=tuple[int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.random.mtrand.RandomState.wald(numpy.random.mtrand.RandomState, int, int, size=tuple[int])",1,dask.array
"numpy.ndarray.astype(numpy.ma.core.MaskedArray, str)",1,dask.array
"numpy.ndarray[slinumpy.int64e[NoneType, NoneType, NoneType]] = numpy.int64",1,dask.array
numpy.array(list[numpy.float64]),1,dask.array
numpy.ndarray[int] = numpy.float64,1,dask.array
numpy.ogrid,1,dask.array
"numpy.interp(fp=numpy.ndarray, x=numpy.ndarray, xp=numpy.ndarray)",1,dask.array
numpy.flatiter == int,1,skimage
"numpy.argmax(a=numpy.ndarray, axis=NoneType)",1,dask.array
numpy.ma.core.maximum_fill_value(obj=numpy.ma.core.MaskedArray),1,dask.array
"numpy.amax(a=numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=NoneType)",1,dask.array
"numpy.argmax(a=numpy.ma.core.MaskedArray, axis=NoneType)",1,dask.array
"numpy.str_[tuple[builtins.ellipsis, NoneType]]",1,dask.array
"numpy.argmax(numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=NoneType)",1,dask.array
"numpy.array(list[str], dtype=numpy.dtype)",1,dask.array
"numpy.array(tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64])",1,dask.array
"numpy.array(tuple[int, float, int])",1,skimage
"numpy.lituple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]].index_tricks.OGridClass[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[NoneType, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.amin(a=numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=NoneType)",1,dask.array
"numpy.argmin(numpy.ma.core.MaskedArray, axis=builtins.bool, keepdims=int)",1,dask.array
"numpy.array(tuple[int, float, float])",1,skimage
numpy.ndarray.flat = numpy.ndarray,1,skimage
"numpy.argmin(a=numpy.ndarray, axis=NoneType)",1,dask.array
"numpy.minimum(numpy.ndarray, int, numpy.ndarray)",1,dask.array
"numpy.array(tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64])",1,dask.array
"numpy.ma.core.filled(a=numpy.ma.core.MaskedArray, fill_value=float)",1,dask.array
numpy.ma.core.minimum_fill_value(obj=numpy.ma.core.MaskedArray),1,dask.array
"numpy.ravel_multi_index(tuple[numpy.int64, numpy.int64, numpy.int64], tuple[int, int, int])",1,dask.array
numpy.diff(a=list[numpy.float64]),1,dask.array
"numpy.unravel_index(numpy.int64, tuple[int, int, int])",1,dask.array
"numpy.int64[tuple[NoneType, NoneType, NoneType]]",1,dask.array
"numpy.ma.core.MaskedArray.reshape(s=tuple[tuple[int, int]])",1,dask.array
numpy.ma.core.MaskedArray * int,1,dask.array
numpy.ma.core.MaskedArray.astype,1,dask.array
"numpy.testing._private.utils.assert_equal(actual=tuple[list[tuple[str]], list[Union[tuple, tuple[str]]]], desired=tuple[list[tuple[str]], list[Union[tuple, tuple[str]]]])",1,dask.array
"numpy.fft.ifftshift(axes=NoneType, x=numpy.ndarray)",1,dask.array
"numpy.fft.ifftshift(axes=int, x=numpy.ndarray)",1,dask.array
"numpy.fft.fftshift(axes=tuple[int, int], x=numpy.ndarray)",1,dask.array
"numpy.sum(a=numpy.ndarray, axis=tuple[int], keepdims=builtins.bool)",1,dask.array
"numpy.fft.ifftshift(axes=tuple[int, int], x=numpy.ndarray)",1,dask.array
"numpy.fft.fftshift(axes=int, x=numpy.ndarray)",1,dask.array
"numpy.maximum(tuple[int, int], tuple[int, int])",1,skimage
"numpy.fft.rfftfreq(d=float, n=int)",1,dask.array
numpy.ndarray /= float,1,dask.array
numpy.ndarray -= int,1,dask.array
numpy.ndarray[numpy.ndarray] = numpy.ndarray,1,dask.array
"numpy.fft.fftfreq(d=float, n=int)",1,dask.array
numpy.fft.irfftn(a=numpy.ndarray),1,dask.array
"numpy.fft.rfftn(a=numpy.ndarray, axes=tuple[int, int], s=NoneType)",1,dask.array
numpy.fft.irfft2(a=numpy.ndarray),1,dask.array
"numpy.fft.rfft2(a=numpy.ndarray, axes=tuple[int, int], s=NoneType)",1,dask.array
"numpy.sum(a=numpy.ndarray, axis=tuple, keepdims=builtins.bool)",1,dask.array
"numpy.fft.fftn(a=numpy.ndarray, axes=tuple[int, int], s=NoneType)",1,dask.array
"numpy.complex64[tuple[builtins.ellipsis, NoneType, NoneType]]",1,dask.array
numpy.isscalar(element=numpy.complex64),1,dask.array
"numpy.where(numpy.bool_, float, int)",1,skimage
numpy.fft.__name__,1,dask.array
"numpy.fft.irfftn(a=numpy.ndarray, axes=tuple[int], s=NoneType)",1,dask.array
"numpy.nanmin(numpy.ndarray, axis=tuple[int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.fft.irfftn(a=numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.nanmin(numpy.ndarray, axis=tuple, computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.fft.ifftshift(axes=tuple[int, int, int], x=numpy.ndarray)",1,dask.array
"numpy.ndarray[tuple[NoneType, NoneType, slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.vectorize(pyfunc=builtins.function, signature=str)",1,dask.array
numpy.amin(a=list[int]),1,skimage
"numpy.diff(a=numpy.ndarray, axis=int)",1,dask.array
numpy.fft.ifft,1,dask.array
"numpy.ndarray[sliinte[int, int, NoneType]] = int",1,dask.array
"numpy.any(numpy.ndarray, axis=tuple[int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
numpy.flagsostrj[str],1,skimage
"numpy.round_(a=float, decimals=int)",1,skimage
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, float, float, size=tuple[int])",1,dask.array
"numpy.isscalar(element=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,dask.array
"numpy.vectorize(otypes=str, pyfunc=builtins.function, signature=list[Type[builtins.float]])",1,dask.array
"numpy.ones(dtype=Type[builtins.int], shape=tuple[int, int])",1,dask.array
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int)",1,dask.array
"numpy.isscalar(element=tuple[int, numpy.ndarray])",1,dask.array
"numpy.transpose(a=numpy.ndarray, axes=tuple)",1,dask.array
"numpy.isscalar(element=tuple[int, int])",1,dask.array
numpy.isscalar(element=tuple[numpy.ndarray]),1,dask.array
"numpy.array(list[int], dtype=Type[builtins.int])",1,dask.array
"numpy.array(list[list[list[Union[float, int]]]])",1,skimage
numpy.ndarray[int] = list[int],1,skimage
"numpy.asarray(a=tuple[float, float, float], dtype=numpy.dtype)",1,skimage
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, float, float, size=tuple[int, int])",1,dask.array
Type[numpy.float64] == Type[numpy.float32],1,dask.array
"numpy.ndarray[tuple[int, int, int, slice[NoneType, NoneType, NoneType]]]",1,skimage
~numpy.ndarray,1,dask.array
"numpy.ndarray[tuple[NoneType, NoneType, NoneType, slice[NoneType, NoneType, NoneType]]]",1,skimage
numpy.vectorize.pyfunc,1,dask.array
Type[numpy.vectorize].__module__,1,dask.array
"numpy.vectorize(otypes=str, pyfunc=builtins.function, signature=list[str])",1,dask.array
"numpy.fft.rfftn(a=numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.fft.irfft2(a=numpy.ndarray, axes=tuple[int], s=NoneType)",1,dask.array
"numpy.fft.irfft2(a=numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.arange(numpy.int64, numpy.int64)",1,skimage
"numpy.testing._private.utils.assert_allclose(actual=float, atol=float, desired=numpy.float64)",1,skimage
"numpy.asarray(a=tuple[float, int, float], dtype=Type[builtins.float])",1,skimage
"numpy.fft.rfft2(a=numpy.ndarray, s=tuple[int, int])",1,dask.array
"numpy.array(list[tuple[Union[float, numpy.float64], Union[float, numpy.float32], numpy.float32]])",1,skimage
"numpy.fft.ifftn(a=numpy.ndarray, axes=tuple[int, int], s=NoneType)",1,dask.array
"numpy.fft.ifftn(a=numpy.ndarray, axes=tuple[int, int])",1,dask.array
"numpy.fft.fftn(a=numpy.ndarray, s=tuple[int, int])",1,dask.array
"numpy.full_like(a=numpy.ndarray, dtype=numpy.dtype, fill_value=numpy.float64, shape=tuple[int])",1,dask.array
"numpy.fft.ifft2(a=numpy.ndarray, axes=tuple[int, int], s=NoneType)",1,dask.array
"numpy.fft.ifft2(a=numpy.ndarray, axes=tuple[int, int])",1,dask.array
"numpy.maximum(tuple[int, int, int], tuple[int, int, int])",1,skimage
"numpy.linspace(endpoint=builtins.bool, num=int, start=numpy.int64, stop=numpy.int64)",1,skimage
"numpy.fft.fft2(a=numpy.ndarray, s=tuple[int, int])",1,dask.array
"numpy.fft.ihfft(a=numpy.ndarray, axis=int, n=NoneType)",1,dask.array
"numpy.full_like(a=numpy.ndarray, dtype=str, fill_value=numpy.int64, shape=tuple[int])",1,dask.array
"numpy.fft.hfft(a=numpy.ndarray, axis=int, n=NoneType)",1,dask.array
"numpy.int32[tuple[builtins.ellipsis, NoneType]]",1,dask.array
numpy.obj2sctype(rep=Type[numpy.uint8]),1,skimage
"numpy.fft.irfft(a=numpy.ndarray, axis=int, n=NoneType)",1,dask.array
numpy.round,1,skimage
"numpy.fft.rfft(a=numpy.ndarray, axis=int, n=NoneType)",1,dask.array
"numpy.issubdtype(arg1=Type[numpy.uint8], arg2=Type[numpy.uint8])",1,skimage
"numpy.fft.ifft(a=numpy.ndarray, axis=int, n=NoneType)",1,dask.array
numpy.ceil(numpy.int64),1,skimage
"numpy.fft.fft(a=numpy.ndarray, axis=int, n=NoneType)",1,dask.array
"numpy.fft.ihfft(numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.fft.hfft(numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.fft.irfft2(a=numpy.ndarray, axes=tuple[int, int], s=NoneType)",1,dask.array
"numpy.fft.irfft2(a=numpy.ndarray, axes=tuple[int, int], s=tuple[int, int])",1,dask.array
"numpy.fft.rfftn(a=numpy.ndarray, s=tuple[int, int])",1,dask.array
"numpy.fft.ihfft(a=numpy.ndarray, axis=int)",1,dask.array
"numpy.fft.rfft2(a=numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.fft.ifftn(a=numpy.ndarray, axes=tuple[int], s=NoneType)",1,dask.array
"numpy.fft.ifftn(a=numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.maximum(tuple[int, int], numpy.ndarray)",1,skimage
"numpy.fft.fftn(a=numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.fft.ifft2(a=numpy.ndarray, axes=tuple[int], s=NoneType)",1,dask.array
"numpy.fft.ifft2(a=numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.zeros_like(a=tuple[int, int])",1,skimage
"numpy.fft.fft2(a=numpy.ndarray, axes=tuple[int])",1,dask.array
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], int]] = int",1,skimage
"numpy.complex128[tuple[builtins.ellipsis, NoneType, NoneType, NoneType]]",1,dask.array
"numpy.arange(numpy.int64, dtype=str)",1,dask.array
"numpy.nanmax(numpy.ndarray, axis=tuple[int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.ellipkinc(numpy.float64, float)",1,skimage
"numpy.vstack(tup=tuple[list[numpy.int64], list[numpy.int64]])",1,skimage
"numpy.minimum(tuple[int, int], tuple[int, int])",1,skimage
"numpy.asarray(a=tuple[float, float, float], dtype=Type[builtins.float])",1,skimage
"numpy.fft.irfft(a=numpy.ndarray, n=int)",1,dask.array
"numpy.arange(numpy.float64, numpy.float64, float)",1,skimage
"numpy.lituple[slice[numpy.float64, numpy.float64, float], slice[numpy.float64, numpy.float64, float], slice[numpy.float64, numpy.float64, float]].index_tricks.MGridClass[tuple[slice[numpy.float64, numpy.float64, float], slice[numpy.float64, numpy.float64, float], slice[numpy.float64, numpy.float64, float]]]",1,skimage
"numpy.fft.ifft(a=numpy.ndarray, n=int)",1,dask.array
numpy.arcsin(float),1,skimage
"numpy.ellipeinc(numpy.float64, float)",1,skimage
"numpy.fft.irfftn(a=numpy.ndarray, axes=tuple[int, int], s=tuple[int, int])",1,dask.array
"numpy.fft.irfftn(a=numpy.ndarray, axes=tuple[int, int], s=NoneType)",1,dask.array
"numpy.nanmax(numpy.ndarray, axis=tuple, computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
numpy.obj2sctype(rep=Type[numpy.float32]),1,skimage
"numpy.g(dask.array.core.Array, dask.array.core.Array, axis=int)",1,dask.array
numpy.dtype(Type[numpy.complex128]),1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, slinumpy.ndarraye[NoneType, int, NoneType]]] = numpy.ndarray",1,skimage
"numpy.ma.core.MaskedArray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType]]]",1,dask.array
numpy.ma.masked_equal,1,dask.array
"Type[numpy.ma.core.MaskedArray] in tuple[Type[builtins.tuple], Type[builtins.str]]",1,dask.array
"numpy.ma.core.masked_where(a=numpy.ndarray, condition=numpy.ndarray)",1,dask.array
numpy.ma.masked_where,1,dask.array
"numpy.full_like(a=numpy.ndarray, dtype=numpy.dtype, fill_value=numpy.int64, shape=tuple[int])",1,dask.array
Type[numpy.ma.core.MaskedArray].__module__,1,dask.array
"numpy.allclose(a=numpy.ma.core.MaskedArray, b=numpy.ma.core.MaskedArray, equal_nan=builtins.bool)",1,dask.array
Type[numpy.float32].__module__,1,dask.array
"numpy.ma.core.concatenate(arrays=list[numpy.ma.core.MaskedArray], axis=int)",1,dask.array
Type[numpy.inexact] in dict,1,dask.array
"numpy.generic.astype(numpy.float32, numpy.dtype)",1,dask.array
numpy.ndarray != float,1,skimage
numpy.asarray(a=imageio.core.util.Array),1,skimage
numpy.ma.core.MaskedArray.__class__,1,dask.array
numpy.dtype(Type[numpy.bool_]),1,skimage
"numpy.issubdtype(arg1=Type[numpy.float64], arg2=Type[numpy.bool_])",1,skimage
"numpy.true_divide(numpy.float32, numpy.float32, NoneType)",1,dask.array
numpy.ma.core.MaskedArray.data,1,dask.array
"numpy.ma.core.MaskedArray(data=list[int], fill_value=builtins.bool, mask=int)",1,dask.array
"numpy.ma.core.MaskedArray(data=list[int], fill_value=list[builtins.bool], mask=int)",1,dask.array
scipy.sparse.linalg.interface.MatrixLinearOperator * numpy.ndarray,1,dask.array
"Type[numpy.list[Type[Union[numpy.bool_, numpy.float16, numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int64, numpy.int8, numpy.longlong, numpy.uint16, numpy.uint32, numpy.uint64, numpy.uint8, numpy.ulonglong]]]ool_] in list[Type[Union[numpy.bool_, numpy.float16, numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int64, numpy.int8, numpy.longlong, numpy.uint16, numpy.uint32, numpy.uint64, numpy.uint8, numpy.ulonglong]]]",1,skimage
"numpy.amax(numpy.ndarray, axis=tuple[int, int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.concatenate(tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray], axis=int)",1,skimage
"numpy.linalg.norm(axis=NoneType, keepdims=str, ord=builtins.bool, x=numpy.ndarray)",1,dask.array
"numpy.linalg.norm(axis=tuple[int, int], keepdims=str, ord=builtins.bool, x=numpy.ndarray)",1,dask.array
numpy.ma.filled,1,dask.array
"numpy.can_cast(int, numpy.dtype)",1,skimage
"numpy.g(numpy.ndarray, numpy.ndarray)",1,dask.array
"numpy.where(numpy.bool_, float, numpy.float64)",1,skimage
"numpy.prod(a=tuple[int, int, int], dtype=str)",1,dask.array
numpy.complex128,1,dask.array
"numpy.amax(numpy.ma.core.MaskedArray, axis=tuple[int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.full_like(a=numpy.ndarray, dtype=str, fill_value=numpy.float32, shape=tuple[int, int, int])",1,dask.array
"numpy.sum(a=numpy.ndarray, axis=str, dtype=NoneType, keepdims=builtins.bool)",1,dask.array
"numpy.where(numpy.bool_, numpy.float64, numpy.float64)",1,skimage
"numpy.ma.core.MaskedArray[tuple[NoneType, NoneType, slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.random.mtrand.RandomState.shuffle(numpy.random.mtrand.RandomState, list[int])",1,dask.array
"numpy.ma.core.MaskedArray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], NoneType, slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.ma.core.dot(a=numpy.ma.core.MaskedArray, b=numpy.ndarray)",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, int]] = float",1,skimage
"numpy.ma.core.MaskedArray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], NoneType]]",1,dask.array
"numpy.full_like(a=numpy.ndarray, dtype=str, fill_value=numpy.int32, shape=tuple[int, int, int])",1,dask.array
"numpy.ma.core.MaskedArray.reshape(s=tuple[list[int]], self=numpy.ma.core.MaskedArray)",1,dask.array
numpy.ma.core.MaskedArray.__array_priority__,1,dask.array
"numpy.full_like(a=numpy.ndarray, dtype=str, fill_value=numpy.int64, shape=tuple[int, int])",1,dask.array
"numpy.can_cast(float, numpy.dtype)",1,skimage
"numpy.ones(dtype=numpy.dtype, shape=tuple[int, int, int, int])",1,dask.array
"numpy.allclose(a=numpy.float32, b=numpy.float32, equal_nan=builtins.bool)",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, int]] = int",1,skimage
"numpy.ma.core.MaskedArray[tuple[builtins.ellipsis, NoneType]]",1,dask.array
"numpy.allclose(a=numpy.int32, b=numpy.int32, equal_nan=builtins.bool)",1,dask.array
numpy.ma.core.MaskedArray.fill_value = numpy.float64,1,dask.array
numpy.unique(ar=list[numpy.float64]),1,dask.array
numpy.ma.concatenate,1,dask.array
float + numpy.float64,1,skimage
numpy.expm1(numpy.ma.core.MaskedArray),1,dask.array
"numpy.concatenate(tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], axis=int)",1,skimage
"numpy.asarray(a=tuple[float, int, float], dtype=numpy.dtype)",1,skimage
"numpy.linalg.norm(axis=tuple[int, int], keepdims=float, ord=builtins.bool, x=numpy.ndarray)",1,dask.array
"numpy.generic.astype(numpy.float64, str)",1,dask.array
"numpy.eye(N=int, dtype=Type[builtins.float])",1,dask.array
"numpy.lituple[slice[int, float, NoneType], slice[int, float, NoneType]].index_tricks.OGridClass[tuple[slice[int, float, NoneType], slice[int, float, NoneType]]]",1,skimage
numpy.int64 / int,1,dask.array
numpy.sqrt(numpy.int64),1,dask.array
"numpy.zeros(tuple[int, int, int], str)",1,skimage
"numpy.allclose(a=dask.array.core.Array, b=numpy.ndarray)",1,dask.array
"numpy.all(numpy.ndarray, axis=tuple[int, int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
numpy.float64.astype,1,dask.array
"numpy.all(numpy.ndarray, axis=tuple[int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.float32[tuple[builtins.ellipsis, NoneType]]",1,dask.array
"numpy.allclose(a=numpy.float64, atol=float, b=numpy.float64, equal_nan=builtins.bool, rtol=float)",1,dask.array
numpy.linalg.norm(x=numpy.ndarray),1,dask.array
"numpy.random.mtrand.RandomState.standard_normal(numpy.random.mtrand.RandomState, size=tuple[int, int])",1,dask.array
"numpy.amin(numpy.ndarray, axis=tuple, computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.dot(numpy.ndarray, numpy.ndarray)",1,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], int]] = numpy.ndarray",1,dask.array
"numpy.ndarray[tuple[slice[int, int, NoneType], int]]",1,dask.array
numpy.linalg.svd,1,dask.array
"numpy.array(tuple[int], dtype=str)",1,dask.array
"numpy.array(tuple[int, int], dtype=str)",1,dask.array
"numpy.uint8[tuple[builtins.ellipsis, NoneType, NoneType, NoneType]]",1,dask.array
"numpy.ndarray[sliinte[NoneType, NoneType, NoneType]] = int",1,dask.array
"numpy.amax(numpy.ndarray, axis=tuple, computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.ones(dtype=str, shape=tuple[int, int, int, int])",1,dask.array
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.float32])",1,skimage
"numpy.int8[tuple[builtins.ellipsis, NoneType, NoneType, NoneType, NoneType]]",1,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, size=tuple[int, int, int])",1,dask.array
"numpy.ndarray[tuple[sliinte[int, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1,skimage
numpy.ndarray.sort(numpy.ndarray),1,dask.array
numpy.double,1,dask.array
"numpy.array(tuple[int, int, int], copy=int, ndmin=builtins.bool)",1,skimage
"numpy.float64[tuple[builtins.ellipsis, NoneType, NoneType, NoneType, NoneType, NoneType]]",1,dask.array
"numpy.true_divide(numpy.int64, numpy.int64, NoneType)",1,dask.array
"numpy.empty(tuple[int, int, int, int, int], dtype=numpy.dtype)",1,dask.array
"numpy.empty(tuple[int, int, int, int], dtype=numpy.dtype)",1,dask.array
"numpy.linalg.norm(axis=tuple[int, int], keepdims=NoneType, ord=builtins.bool, x=numpy.ndarray)",1,dask.array
numpy.float32 - int,1,dask.array
"numpy.true_divide(numpy.float32, numpy.float64, NoneType)",1,dask.array
"numpy.array(int, copy=int, ndmin=builtins.bool)",1,skimage
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, slice[NoneType, int, NoneType]]]",1,skimage
numpy.int64 + numpy.int64,1,dask.array
numpy.float32 + numpy.float32,1,dask.array
numpy.float32.dtype,1,dask.array
numpy.sqrt(numpy.float32),1,dask.array
numpy.finfo.eps,1,dask.array
"numpy.linalg.norm(axis=tuple[int], keepdims=NoneType, ord=builtins.bool, x=numpy.ndarray)",1,dask.array
"numpy.ravel(a=tuple[int, int, int])",1,skimage
"numpy.linalg.norm(axis=NoneType, keepdims=NoneType, ord=builtins.bool, x=numpy.ndarray)",1,dask.array
"numpy.full_like(a=numpy.ndarray, dtype=Type[numpy.float64], fill_value=numpy.float64, shape=tuple[int])",1,dask.array
"numpy.linalg.svd(a=numpy.ndarray, full_matrices=int)",1,dask.array
"numpy.linalg.lstsq(a=numpy.ndarray, b=numpy.ndarray, rcond=int)",1,dask.array
numpy.linalg.eigvals,1,dask.array
numpy.sqrt,1,dask.array
numpy.linalg.matrix_rank,1,dask.array
numpy.int32 == int,1,dask.array
numpy.finfo(dtype=Type[numpy.float64]),1,dask.array
"numpy.linalg.lstsq(a=numpy.ndarray, b=numpy.ndarray, rcond=numpy.float64)",1,dask.array
numpy.bytes_(int),1,dask.array
Type[numpy.complex64] == Type[numpy.datetime64],1,dask.array
"numpy.ma.extras.masked_all(dtype=Type[builtins.bool], shape=tuple[int])",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[NoneType, int, NoneType], int, int]]",1,dask.array
numpy.timedelta64 / pandas.tseries.offsets.Nano,1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[NoneType, int, NoneType], int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, slice[NoneType, int, NoneType], int, NoneType]]",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
numpy.ndarray / pandas.tseries.offsets.Micro,1,pandas
numpy.timedelta64 / pandas.tseries.offsets.Milli,1,pandas
numpy.ndarray / pandas.tseries.offsets.Second,1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], NoneType]]",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, slice[NoneType, int, NoneType], NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, slice[NoneType, int, NoneType], NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
numpy.timedelta64 / pandas.tseries.offsets.Minute,1,pandas
numpy.ndarray / pandas.tseries.offsets.Hour,1,pandas
int * numpy.timedelta64,1,pandas
numpy.timedelta64 * float,1,pandas
pandas.tseries.offsets.Micro / numpy.timedelta64,1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, int, int, slice[NoneType, int, NoneType]]]",1,dask.array
pandas.tseries.offsets.Second / numpy.timedelta64,1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, int, NoneType]]",1,dask.array
pandas.tseries.offsets.Hour / numpy.timedelta64,1,pandas
numpy.ndim(a=builtins.dict_values),1,pandas
numpy.ndim(a=builtins.dict_keys),1,pandas
"numpy.ndim(a=tuple[datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime])",1,pandas
"numpy.asarray(a=tuple[datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime])",1,pandas
"numpy.ndim(a=tuple[datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime])",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
numpy.ndarray + pandas.tseries.offsets.CustomBusinessHour,1,pandas
"numpy.array(list[datetime.date], dtype=str)",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[NoneType, int, NoneType], int, slice[NoneType, int, NoneType]]]",1,dask.array
numpy.ndarray * pandas.tseries.offsets.Nano,1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
NoneType != numpy.float64,1,pandas
"numpy.asarray(a=pandas.core.indexes.numeric.Float64Index, dtype=numpy.dtype)",1,pandas
"numpy.asarray(a=pandas.core.indexes.numeric.Int64Index, dtype=numpy.dtype)",1,pandas
numpy.exp(numpy.float64),1,pandas
"numpy.ndarray[tuple[slice[int, int, int], numpy.ndarray]]",1,dask.array
numpy.log(float),1,pandas
"numpy.array(list[Union[float, numpy.float64]], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.full(dtype=str, fill_value=int, shape=int)",1,pandas
numpy.ndarray.index,1,pandas
"numpy.ndarray[slilist[Union[list[Union[float, int, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.timestamps.Timestamp, str]], pandas.core.indexes.datetimes.DatetimeIndex, pandas.core.indexes.timedeltas.TimedeltaIndex]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[float, int, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.timestamps.Timestamp, str]], pandas.core.indexes.datetimes.DatetimeIndex, pandas.core.indexes.timedeltas.TimedeltaIndex]]",1,pandas
numpy.Inf,1,pandas
numpy.geterr,1,pandas
"numpy.ndarray[tuple[slice[int, int, int], numpy.ndarray, slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.array(list, dtype=Type[numpy.uint64])",1,pandas
numpy.asarray(a=numpy.str_),1,pandas
numpy.asarray(a=numpy.int8),1,pandas
"numpy.round_(a=numpy.float64, decimals=int)",1,pandas
numpy.int64 * float,1,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], numpy.ndarray]]",1,dask.array
numpy.ndarray[tuple[builtins.ellipsis]],1,dask.array
"numpy.prod(a=tuple[int, int, int, int, int])",1,dask.array
numpy.str_ != numpy.str_,1,pandas
Type[Type[numpy.ndarray]uiltins.int] != Type[numpy.ndarray],1,pandas
Type[numpy.ndarray] != Type[builtins.list],1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], int]]",1,dask.array
numpy.asarray(a=numpy.int16),1,pandas
"numpy.array(list[pandas.tests.tslibs.test_array_to_datetime.SubDatetime], dtype=Type[builtins.object])",1,pandas
pandas.tseries.offsets.Nano * numpy.ndarray,1,pandas
numpy.array(list[list[pandas.tseries.offsets.Nano]]),1,pandas
pandas.tseries.offsets.Day * numpy.ndarray,1,pandas
numpy.array(list[list[pandas.tseries.offsets.BYearEnd]]),1,pandas
numpy.ndarray * pandas.tseries.offsets.BYearBegin,1,pandas
numpy.array(list[list[pandas.tseries.offsets.BYearBegin]]),1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, int, int]]",1,dask.array
pandas.tseries.offsets.CustomBusinessHour * numpy.ndarray,1,pandas
numpy.ndarray * pandas.tseries.offsets.CustomBusinessHour,1,pandas
numpy.array(list[list[pandas.tseries.offsets.CustomBusinessHour]]),1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, int, slice[int, NoneType, NoneType]]]",1,dask.array
pandas.tseries.offsets.SemiMonthBegin * numpy.ndarray,1,pandas
numpy.ndarray * pandas.tseries.offsets.SemiMonthBegin,1,pandas
numpy.array(list[list[pandas.tseries.offsets.SemiMonthBegin]]),1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
pandas.tseries.offsets.BusinessMonthEnd * numpy.ndarray,1,pandas
numpy.ndarray * pandas.tseries.offsets.BusinessMonthEnd,1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, NoneType, NoneType]]",1,dask.array
numpy.array(list[list[pandas.tseries.offsets.BusinessMonthEnd]]),1,pandas
pandas.tseries.offsets.BusinessMonthBegin * numpy.ndarray,1,pandas
numpy.ndarray * pandas.tseries.offsets.BusinessMonthBegin,1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], int]]",1,dask.array
numpy.array(list[list[pandas.tseries.offsets.BusinessMonthBegin]]),1,pandas
pandas.tseries.offsets.CustomBusinessMonthBegin * numpy.ndarray,1,pandas
numpy.ndarray * pandas.tseries.offsets.CustomBusinessMonthBegin,1,pandas
numpy.array(list[list[pandas.tseries.offsets.CustomBusinessMonthBegin]]),1,pandas
pandas.tseries.offsets.CustomBusinessDay * numpy.ndarray,1,pandas
numpy.ndarray * pandas.tseries.offsets.CustomBusinessDay,1,pandas
numpy.array(list[list[pandas.tseries.offsets.CustomBusinessDay]]),1,pandas
pandas.tseries.offsets.BusinessDay * numpy.ndarray,1,pandas
numpy.ndarray * pandas.tseries.offsets.BusinessDay,1,pandas
pandas.tseries.offsets.BYearBegin * numpy.ndarray,1,pandas
numpy.ndarray * pandas.tseries.offsets.BYearEnd,1,pandas
pandas.tseries.offsets.Milli * numpy.ndarray,1,pandas
pandas.tseries.offsets.BYearEnd * numpy.ndarray,1,pandas
numpy.ndarray * pandas.tseries.offsets.Milli,1,pandas
numpy.array(list[list[pandas.tseries.offsets.Milli]]),1,pandas
pandas.tseries.offsets.Minute * numpy.ndarray,1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, slice[int, NoneType, NoneType], int]]",1,dask.array
numpy.array(list[list[pandas.tseries.offsets.Minute]]),1,pandas
pandas.tseries.offsets.Easter * numpy.ndarray,1,pandas
numpy.ndarray * pandas.tseries.offsets.Easter,1,pandas
numpy.array(list[list[pandas.tseries.offsets.Easter]]),1,pandas
pandas.tseries.offsets.Week * numpy.ndarray,1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
numpy.ndarray * pandas.tseries.offsets.Week,1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, slice[int, NoneType, NoneType], NoneType]]",1,dask.array
numpy.array(list[list[pandas.tseries.offsets.Week]]),1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, NoneType, int]]",1,dask.array
pandas.tseries.offsets.FY5253Quarter * numpy.ndarray,1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, int, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
numpy.ndarray * pandas.tseries.offsets.FY5253Quarter,1,pandas
numpy.array(list[list[pandas.tseries.offsets.FY5253Quarter]]),1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
pandas.tseries.offsets.BQuarterEnd * numpy.ndarray,1,pandas
numpy.ndarray * pandas.tseries.offsets.BQuarterEnd,1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, int, slice[NoneType, int, NoneType], NoneType]]",1,dask.array
numpy.array(list[list[pandas.tseries.offsets.BQuarterEnd]]),1,pandas
pandas.tseries.offsets.BQuarterBegin * numpy.ndarray,1,pandas
numpy.ndarray * pandas.tseries.offsets.BQuarterBegin,1,pandas
numpy.array(list[list[pandas.tseries.offsets.BQuarterBegin]]),1,pandas
numpy.float64 != NoneType,1,pandas
numpy.int64 == str,1,pandas
"numpy.asarray(a=list[builtins.bool], dtype=Type[builtins.bool])",1,dask.array
"numpy.ndarray.ravel(numpy.ndarray, order=str)",1,dask.array
"numpy.broadcast_to(array=numpy.float64, shape=tuple[int, int, int, int])",1,dask.array
"numpy.frombuffer(builtins.bytes, dtype=Type[numpy.uint32])",1,dask.array
numpy.frombuffer,1,dask.array
"Type[numpy.ndarray] in tuple[Type[builtins.tuple], Type[builtins.str]]",1,dask.array
"numpy.dtype in tuple[Type[builtins.bool], Type[builtins.bool], Type[numpy.bool_]]",1,skimage
"numpy.ndarray(dtype=tuple, shape=str)",1,dask.array
"numpy.einsum_path(operands=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, str])",1,dask.array
"numpy.issubdtype(arg1=Type[numpy.bool_], arg2=Type[numpy.uint8])",1,skimage
numpy.uint8(int),1,skimage
"numpy.dtype in tuple[Type[numpy.uint8], Type[numpy.uint16]]",1,skimage
numpy.einsum_path,1,dask.array
"numpy.einsum_path(kwargs=dict, operands=tuple[str, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,dask.array
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int, int, int)",1,dask.array
"numpy.average(a=numpy.ndarray, returned=builtins.bool)",1,dask.array
Type[numpy.uint16] == Type[numpy.uint8],1,skimage
numpy.uint16 + int,1,skimage
"Type[numpy.float64] in tuple[Type[builtins.bool], Type[builtins.bool], Type[numpy.bool_]]",1,skimage
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, atol=float, desired=numpy.ndarray, rtol=int)",1,skimage
"numpy.ndarray[tuple[sliinte[int, int, NoneType]]] = int",1,dask.array
"numpy.array(tuple[numpy.float64, numpy.float64], dtype=str)",1,dask.array
"numpy.array(tuple[dask.array.core.Array, numpy.float64], dtype=str)",1,dask.array
"numpy.ones(dtype=Type[numpy.uint8], shape=tuple[numpy.int64, numpy.int64])",1,skimage
numpy.core.numerictypes.__warningregistry__,1,skimage
"numpy.empty_like(numpy.ndarray, dtype=Type[numpy.uint16])",1,skimage
"numpy.empty(tuple[int, int], dtype=Type[numpy.uint16])",1,skimage
"numpy.full(dtype=Type[numpy.uint16], fill_value=int, shape=tuple[int, int])",1,skimage
numpy.float64(x=float),1,dask.array
"numpy.broadcast_to(array=numpy.float64, shape=tuple[int, int])",1,dask.array
numpy.ndarray.strides,1,dask.array
"numpy.sum(a=tuple[int, int, int, int, int])",1,dask.array
"numpy.result_type(numpy.dtype, numpy.dtype, numpy.dtype, numpy.dtype)",1,dask.array
numpy.int64 >= int,1,skimage
"numpy.ascontiguousarray(a=list[Union[float, int]], dtype=Type[numpy.float64])",1,skimage
"numpy.result_type(numpy.dtype, numpy.dtype, numpy.dtype, numpy.dtype, numpy.dtype)",1,dask.array
"numpy.zeros(tuple[int, int], dtype=Type[numpy.uint32])",1,skimage
numpy.core._ufunc_config.__warningregistry__,1,skimage
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int, int, int, int, int, int])",1,dask.array
numpy.core.fromnumeric.__warningregistry__,1,skimage
numpy.result_type(numpy.dtype),1,dask.array
numpy.linalg._umath_linalg.eig,1,dask.array
"numpy.einsum(kwargs=dict, operands=tuple[str, numpy.ndarray])",1,dask.array
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, float, float, size=tuple[int, int, int])",1,dask.array
numpy.random.RandomState,1,dask.array
numpy.uint32,1,dask.array
"numpy.random.mtrand.RandomState.bytes(numpy.random.mtrand.RandomState, int)",1,dask.array
numpy.dtype(Type[numpy.float64]),1,dask.array
"numpy.generic.reshape(numpy.float64, tuple[int])",1,dask.array
"numpy.einsum(kwargs=dict, operands=tuple[str, numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",1,dask.array
"numpy.empty(dtype=tuple[int, int, int], shape=numpy.dtype)",1,dask.array
"numpy.ndarray[tuple[sliinte[NoneType, int, NoneType], sliinte[NoneType, int, NoneType]]] = int",1,skimage
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, size=int)",1,skimage
"numpy.generic.reshape(numpy.float64, tuple[int, int])",1,dask.array
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int, int, int, int])",1,dask.array
"numpy.inv(dask.array.core.Array, output_dtypes=Type[builtins.float])",1,dask.array
"numpy.einsum(kwargs=dict, operands=tuple[str, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,dask.array
numpy.random.mtrand.RandomState(numpy.ndarray),1,dask.array
numpy.core._exceptions.__warningregistry__,1,skimage
"Type[numpy.int8] in list[Type[Union[numpy.bool_, numpy.float16, numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int64, numpy.int8, numpy.longlong, numpy.uint16, numpy.uint32, numpy.uint64, numpy.uint8, numpy.ulonglong]]]",1,skimage
"numpy.empty(tuple[int, int], Type[numpy.uint8])",1,skimage
"numpy.empty(dtype=tuple[int, int], shape=numpy.dtype)",1,dask.array
"numpy.issubdtype(arg1=Type[numpy.int8], arg2=Type[numpy.uint8])",1,skimage
"numpy.nanvar(a=numpy.ndarray, ddof=int)",1,pandas
numpy.cumsum(a=tuple[int]),1,dask.array
"numpy.nanstd(a=numpy.ndarray, ddof=int)",1,pandas
numpy.nanvar,1,pandas
int += numpy.int64,1,dask.array
numpy.nanstd,1,pandas
"numpy.concatenate(tuple[pandas.core.indexes.datetimes.DatetimeIndex, pandas.core.indexes.datetimes.DatetimeIndex])",1,pandas
"numpy.ndarray[slilist[Union[list[Union[float, int]], pandas.core.series.Series]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[float, int]], pandas.core.series.Series]]",1,pandas
numpy.core.overrides.__warningregistry__,1,skimage
numpy.copy(a=numpy.ndarray),1,pandas
numpy.int64 += numpy.int64,1,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, high=int, size=int)",1,pandas
numpy.random.mtrand.RandomState(seed=int),1,pandas
"numpy.append(arr=list[float], values=numpy.ndarray)",1,pandas
"numpy.sum(a=tuple[int, int])",1,dask.array
NoneType == numpy.float64,1,pandas
NoneType == numpy.int64,1,pandas
numpy.int64 == NoneType,1,pandas
"numpy.sum(a=tuple[int, int, int])",1,dask.array
"numpy.asarray(a=tuple[float, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.searchsorted(a=tuple[int, int, int, int, int], side=str, v=numpy.ndarray)",1,dask.array
"numpy.asarray(a=tuple[int, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[float, float, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.cumsum(a=tuple[int, int, int, int, int])",1,dask.array
"numpy.asarray(a=tuple[int, int, str, str, str], dtype=Type[builtins.object])",1,pandas
str == numpy.float64,1,pandas
str == numpy.int64,1,pandas
numpy.complex,1,skimage
numpy.sum(a=tuple[int]),1,dask.array
"numpy.zeros(tuple[int, int, int], dtype=Type[builtins.float])",1,skimage
numpy.asarray(a=builtins.range),1,dask.array
"numpy.result_type(numpy.dtype, numpy.dtype, str)",1,dask.array
"numpy.maximum(numpy.ndarray, int, casting=numpy.ndarray, dtype=numpy.dtype, out=str)",1,skimage
numpy.core._dtype.__warningregistry__,1,skimage
numpy.iscomplexobj(x=dask.array.core.Array),1,dask.array
numpy.complexfloating,1,dask.array
"numpy.tile(A=list[int], reps=tuple[int, int])",1,skimage
"numpy.amax(a=tuple[int, int])",1,dask.array
numpy.iscomplexobj,1,dask.array
"numpy.testing._private.utils.assert_equal(actual=list[tuple[tuple[str, int, int], tuple[builtins.builtin_function_or_method, tuple[str, numpy.int64, int], tuple[numpy.ndarray, slice[NoneType, NoneType, NoneType]]]]], desired=list[tuple[tuple[str, int, int], tuple[builtins.builtin_function_or_method, tuple[str, int, int], tuple[numpy.ndarray, slice[NoneType, NoneType, NoneType]]]]])",1,dask.array
numpy.core.umath.__warningregistry__,1,skimage
"numpy.zeros(tuple[int, int, int])",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], list[int]]]",1,dask.array
"numpy.array(list[list[int]], dtype=Type[numpy.uint16])",1,skimage
"numpy.ndarray[tuple[dask.array.core.Array, slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.array(list[list[int]], dtype=Type[builtins.float])",1,skimage
numpy.int64 >= int,1,dask.array
"numpy.ndarray.argmax(numpy.ndarray, int)",1,skimage
"numpy.float64[tuple[builtins.ellipsis, NoneType, NoneType]]",1,dask.array
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.bool_])",1,skimage
"numpy.ones(dtype=str, shape=tuple[int, int, int])",1,dask.array
"numpy.ndarray[tuple[list, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], list]]",1,dask.array
"numpy.ndarray.reshape(numpy.ndarray, list[int])",1,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], dask.array.core.Array]]",1,dask.array
numpy.floor(float),1,skimage
"numpy.ndarray(dtype=tuple, shape=numpy.dtype)",1,dask.array
numpy.array(list[list[pandas.tseries.offsets.BusinessDay]]),1,pandas
numpy.ndarray * pandas.tseries.offsets.Day,1,pandas
numpy.float32(int),1,dask.array
"numpy.add(pandas.core.series.Series, list[int])",1,pandas
numpy.datetime64 == pandas._libs.tslibs.timestamps.Timestamp,1,pandas
"numpy.ufunc.reduce(numpy.ufunc, pandas.core.arrays.datetimes.DatetimeArray)",1,pandas
"numpy.ufunc.reduce(numpy.ufunc, pandas.core.series.Series)",1,pandas
"numpy.ufunc.reduce(numpy.ufunc, int)",1,pandas
"numpy.ufunc.reduce(numpy.ufunc, pandas.core.arrays.sparse.array.SparseArray)",1,pandas
numpy.modf(pandas.core.series.Series),1,pandas
numpy.divmod,1,pandas
"numpy.divmod(pandas.core.series.Series, pandas.core.series.Series)",1,pandas
"numpy.logaddexp(numpy.ndarray, int)",1,pandas
"numpy.logaddexp(pandas.core.series.Series, int)",1,pandas
"numpy.logaddexp(pandas.core.arrays.sparse.array.SparseArray, int)",1,pandas
"numpy.add(int, numpy.ndarray)",1,pandas
"numpy.logaddexp(int, pandas.core.series.Series)",1,pandas
"numpy.logaddexp(int, pandas.core.arrays.sparse.array.SparseArray)",1,pandas
"numpy.add(int, pandas.core.series.Series)",1,pandas
"numpy.logaddexp(pandas.core.series.Series, pandas.core.series.Series)",1,pandas
"numpy.add(pandas.core.arrays.sparse.array.SparseArray, pandas.core.arrays.sparse.array.SparseArray)",1,pandas
"numpy.logaddexp(pandas.core.series.Series, pandas.core.indexes.numeric.Int64Index)",1,pandas
"numpy.add(pandas.core.series.Series, pandas.core.indexes.numeric.Int64Index)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, int, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.add(pandas.core.series.Series, pandas.core.arrays.sparse.array.SparseArray)",1,pandas
"numpy.zeros(tuple[int, int], dtype=Type[builtins.complex])",1,skimage
numpy.hypot,1,skimage
numpy.floor(pandas.core.series.Series),1,pandas
numpy.positive(numpy.ndarray),1,pandas
numpy.positive(pandas.core.arrays.sparse.array.SparseArray),1,pandas
numpy.positive(pandas.core.series.Series),1,pandas
"numpy.ufunc.reduce(numpy.ufunc, pandas.core.arrays.period.PeriodArray)",1,pandas
"numpy.add(pandas.core.series.Series, collections.deque)",1,pandas
"numpy.asarray(a=pandas.core.series.Series, dtype=str)",1,pandas
"numpy.add(pandas.core.series.Series, tuple[int, int, int])",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, builtins.ellipsis, NoneType]]",1,dask.array
"numpy.resize(a=list[builtins.bool], new_shape=int)",1,pandas
"numpy.ndarray[slilist[int]e[int, int, NoneType]] = list[int]",1,pandas
"numpy.ndarray[slilist[int]e[int, int, int]] = list[int]",1,pandas
"numpy.asanyarray(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]])",1,pandas
numpy.asanyarray(a=list[str]),1,pandas
numpy.asanyarray(a=list[int]),1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.putmask(numpy.ndarray, numpy.ndarray, list[int])",1,pandas
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=list[int])",1,pandas
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=list[float])",1,pandas
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta != numpy.timedelta64,1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, int, builtins.ellipsis]]",1,dask.array
"numpy.ndarray[slilist[Union[numpy.timedelta64, str]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.timedelta64, str]]",1,pandas
numpy.timedelta64 != pandas._libs.tslibs.nattype.NaTType,1,pandas
"numpy.asarray(a=list[Union[int, slice[NoneType, NoneType, NoneType]]])",1,pandas
"numpy.ndarray[slilist[Union[int, slice[NoneType, NoneType, NoneType]]]e[NoneType, NoneType, NoneType]] = list[Union[int, slice[NoneType, NoneType, NoneType]]]",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, int, int]]",1,dask.array
numpy.fix(x=pandas.core.series.Series),1,pandas
numpy.ndarray[numpy.int64] = int,1,pandas
"numpy.where(numpy.ndarray, int, pandas.core.series.Series)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[sliinte[int, numpy.int64, NoneType]] = int",1,pandas
"numpy.repeat(a=builtins.function, repeats=int)",1,pandas
"numpy.may_share_memory(pandas.core.indexes.base.Index, pandas.core.indexes.base.Index)",1,pandas
"numpy.ufunc.outer(numpy.ufunc, numpy.ndarray, numpy.ndarray)",1,pandas
numpy.subtract,1,pandas
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, int, dtype=str)",1,pandas
"numpy.ndarray[slibuiltins.boole[int, int, NoneType]] = builtins.bool",1,pandas
"numpy.in1d(ar1=pandas.core.indexes.numeric.Int64Index, ar2=tuple[int, int, int, int])",1,pandas
"numpy.ndarray[slilist[Union[int, numpy.timedelta64]]e[NoneType, NoneType, NoneType]] = list[Union[int, numpy.timedelta64]]",1,pandas
"numpy.ndarray[slilist[Union[datetime.timedelta, numpy.timedelta64]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.timedelta, numpy.timedelta64]]",1,pandas
"numpy.array(tuple[int, NoneType], copy=builtins.bool)",1,pandas
"numpy.ndarray[slituple[tuple[int, int], tuple[int, int], tuple[int, int]]e[NoneType, NoneType, NoneType]] = tuple[tuple[int, int], tuple[int, int], tuple[int, int]]",1,pandas
"numpy.array(tuple[NoneType], copy=builtins.bool)",1,pandas
"numpy.asarray(a=tuple[datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.asarray(a=tuple[numpy.datetime64, numpy.datetime64, numpy.datetime64, numpy.datetime64], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int, NoneType, float, int], dtype=Type[builtins.object])",1,pandas
"numpy.array(tuple[int, float, float], copy=builtins.bool)",1,pandas
"numpy.asarray(a=tuple[int, int, float, int], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[list[list[int]]]e[NoneType, NoneType, NoneType]] = list[list[list[int]]]",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], builtins.ellipsis, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.array(list[Union[NoneType, pandas._libs.tslibs.period.Period]])",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], builtins.ellipsis, NoneType]]",1,dask.array
"numpy.array(list[Union[NoneType, pandas._libs.interval.Interval]])",1,pandas
"numpy.ndarray[slilist[Union[datetime.datetime, float]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.datetime, float]]",1,pandas
"numpy.array(list[Union[datetime.datetime, float]], copy=builtins.bool)",1,pandas
"numpy.array(list[Union[NoneType, datetime.datetime]])",1,pandas
"numpy.array_equal(a1=list[Union[float, int]], a2=numpy.ndarray)",1,pandas
"numpy.ndarray[slilist[Union[float, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[float, pandas._libs.tslibs.nattype.NaTType]]",1,pandas
numpy.dtype(NoneType),1,pandas
"numpy.ma.extras.masked_all(dtype=Type[builtins.float], shape=tuple[int])",1,pandas
"numpy.array(list[Union[datetime.datetime, int]], copy=builtins.bool)",1,pandas
"numpy.ma.core.MaskedArray.view(dtype=str, self=numpy.ma.core.MaskedArray)",1,pandas
numpy.ma.builtins.boolore.MaskedArray[int] = builtins.bool,1,pandas
"numpy.array(numpy.ma.core.MaskedArray, copy=NoneType, dtype=builtins.bool)",1,pandas
"numpy.array(list[Union[datetime.timedelta, float]], copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[Union[datetime.timedelta, str]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.timedelta, str]]",1,pandas
"numpy.ndarray[sliNoneTypee[NoneType, NoneType, int]] = NoneType",1,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=numpy.dtype)",1,pandas
"numpy.array(list[numpy.int64], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, int, NoneType]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, slice[int, NoneType, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.ndarray[slilist[Union[NoneType, builtins.bool, float]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, builtins.bool, float]]",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, slice[int, NoneType, NoneType], int]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
pandas.core.series.Series & numpy.ndarray,1,pandas
"numpy.where(numpy.ndarray, numpy.ndarray, pandas._libs.tslibs.timestamps.Timestamp)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, slice[int, NoneType, NoneType], NoneType]]",1,dask.array
numpy.asarray(a=list[numpy.timedelta64]),1,pandas
numpy.dtype == pandas.core.arrays.numpy_.PandasDtype,1,pandas
"numpy.array(list[Union[NoneType, int]], dtype=str)",1,pandas
"Type[numpy.datetime64] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
numpy.dtype(Type[pandas.core.arrays.categorical.Categorical]),1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, NoneType, NoneType]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, slice[NoneType, int, NoneType], builtins.ellipsis]]",1,dask.array
"numpy.ndarray[slilist[Union[datetime.time, float]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.time, float]]",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[sliinte[NoneType, numpy.int64, NoneType]] = int",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, slice[NoneType, int, NoneType], NoneType]]",1,dask.array
"numpy.ndarray[tuple[int, int]] = numpy.ndarray",1,skimage
numpy.cumprod(a=pandas.core.series.Series),1,pandas
numpy.cumsum(a=pandas.core.series.Series),1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, NoneType, builtins.ellipsis]]",1,dask.array
"numpy.arange(int, dtype=Type[builtins.float])",1,pandas
"numpy.where(numpy.ndarray, numpy.ndarray, list[float])",1,pandas
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=list[numpy.float64])",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[int, NoneType, NoneType], NoneType, int]]",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, slice[int, NoneType, NoneType], NoneType, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.array(tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, NoneType, slice[NoneType, int, NoneType], int]]",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, NoneType, slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, NoneType, int, int]]",1,dask.array
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, NoneType, int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, NoneType, int, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slidicte[NoneType, int, NoneType]]] = dict",1,pandas
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, int, NoneType]]] = numpy.float64",1,pandas
"numpy.ndarray[tuple[slifloate[NoneType, numpy.int64, NoneType]]] = float",1,pandas
"numpy.round_(a=pandas.core.series.Series, decimals=pandas.core.series.Series, out=int)",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, NoneType, int, NoneType]]",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, NoneType, slice[int, NoneType, NoneType], int]]",1,dask.array
"numpy.ndarray[slilist[Union[builtins.bool, int, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, int, pandas._libs.tslibs.timestamps.Timestamp, str]]",1,pandas
"numpy.ndarray[slilist[Union[float, list, list[int]]]e[NoneType, NoneType, NoneType]] = list[Union[float, list, list[int]]]",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, NoneType, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, NoneType, NoneType, int]]",1,dask.array
"numpy.asarray(a=list[Union[float, pandas._libs.tslibs.nattype.NaTType]])",1,pandas
numpy.ma.getmaskarray,1,dask.array
"numpy.array(list[Union[float, str]], dtype=numpy.dtype)",1,pandas
numpy.around(a=list[float]),1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], builtins.ellipsis, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.algos.Infinity, pandas._libs.algos.NegInfinity]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.algos.Infinity, pandas._libs.algos.NegInfinity]]",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], builtins.ellipsis, slice[NoneType, int, NoneType], NoneType]]",1,dask.array
"numpy.insert(arr=numpy.ndarray, obj=numpy.ndarray, values=NoneType)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], builtins.ellipsis, int, int]]",1,dask.array
"numpy.array(tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], copy=builtins.bool)",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], NoneType]]",1,dask.array
"numpy.where(numpy.ndarray, numpy.ndarray, list[numpy.float64])",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[builtins.ellipsis, slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
numpy.uint64 >= int,1,pandas
numpy.dtype.char,1,pandas
"numpy.ndarray[slilist[Union[float, list[Union[float, int]], str]]e[NoneType, NoneType, NoneType]] = list[Union[float, list[Union[float, int]], str]]",1,pandas
"numpy.ndarray[slilist[Union[float, numpy.ndarray]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.ndarray]]",1,pandas
"numpy.ndarray[slilist[Union[float, list[float]]]e[NoneType, NoneType, NoneType]] = list[Union[float, list[float]]]",1,pandas
"numpy.ndarray[slilist[Union[decimal.Decimal, float, str]]e[NoneType, NoneType, NoneType]] = list[Union[decimal.Decimal, float, str]]",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[int, NoneType, NoneType], int, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.array(list[pandas._libs.missing.NAType], dtype=str)",1,pandas
NoneType == numpy.dtype,1,pandas
numpy.datetime64 == str,1,pandas
numpy.ndarray > numpy.float64,1,pandas
numpy.ndarray[int] = datetime.datetime,1,pandas
"numpy.asarray(a=list[Union[pandas._libs.tslibs.timestamps.Timestamp, str]])",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[int, NoneType, NoneType], int, int]]",1,dask.array
"numpy.array(list[Union[float, pandas._libs.tslibs.timestamps.Timestamp]], dtype=str)",1,pandas
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[int, NoneType, NoneType], int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.array(list[Union[float, int, pandas._libs.tslibs.nattype.NaTType, str]], dtype=str)",1,pandas
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.tslibs.timestamps.Timestamp, str]]",1,pandas
"numpy.array(list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slicollections.dequee[NoneType, NoneType, NoneType]] = collections.deque",1,pandas
numpy.dtype(collections.deque),1,pandas
"numpy.ndarray[slituple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]e[NoneType, NoneType, NoneType]] = tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]",1,pandas
numpy.array(list[Type[builtins.bool]]),1,pandas
numpy.generic.item(numpy.datetime64),1,pandas
"numpy.ndarray[tuple[builtins.ellipsis, slice[int, NoneType, NoneType], int, NoneType]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], builtins.ellipsis, int, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.array(list[Union[pandas._libs.algos.Infinity, pandas._libs.algos.NegInfinity, str]], dtype=str)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], builtins.ellipsis, int, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.insert(arr=numpy.ndarray, obj=numpy.ndarray, values=float)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[slilist[builtins.range]e[NoneType, NoneType, NoneType]] = list[builtins.range]",1,pandas
"numpy.ndarray[slilist[Union[int, list[Union[int, list[int]]]]]e[NoneType, NoneType, NoneType]] = list[Union[int, list[Union[int, list[int]]]]]",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], NoneType]]",1,dask.array
"numpy.ndarray[slilist[Union[NoneType, float, list[int], numpy.ndarray, pandas.core.series.Series]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, float, list[int], numpy.ndarray, pandas.core.series.Series]]",1,pandas
"numpy.asarray(a=list[tuple[str]], dtype=str)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.repeat(a=float, repeats=int)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], NoneType, int]]",1,dask.array
numpy.isfinite(pandas.core.series.Series),1,pandas
"numpy.where(numpy.ndarray, numpy.ndarray, str)",1,pandas
numpy.ndarray >= numpy.float64,1,pandas
numpy.ndarray >= float,1,pandas
"numpy.argsort(a=numpy.ndarray, kind=NoneType)",1,pandas
"numpy.lituple[slice[numpy.float64, numpy.float64, NoneType], slice[numpy.float64, numpy.float64, NoneType]].index_tricks.MGridClass[tuple[slice[numpy.float64, numpy.float64, NoneType], slice[numpy.float64, numpy.float64, NoneType]]]",1,skimage
"numpy.where(numpy.ndarray, pandas.core.arrays.sparse.array.SparseArray, int)",1,pandas
"numpy.where(numpy.ndarray, numpy.ndarray, list[int])",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], NoneType, NoneType]]",1,dask.array
"numpy.where(numpy.ndarray, numpy.ndarray, tuple[numpy.float64])",1,pandas
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=tuple[numpy.float64])",1,pandas
numpy.asarray(a=tuple[numpy.float64]),1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, builtins.ellipsis, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.where(numpy.ndarray, numpy.ndarray, tuple[float])",1,pandas
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=tuple[float])",1,pandas
numpy.asarray(a=tuple[float]),1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, builtins.ellipsis, int]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, builtins.ellipsis, slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], int, NoneType]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], int, slice[int, NoneType, NoneType]]]",1,dask.array
numpy.ndarray.strides,1,pandas
"numpy.asarray(a=tuple[float, float], dtype=NoneType)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], builtins.ellipsis, int, NoneType]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], builtins.ellipsis, slice[int, NoneType, NoneType], int]]",1,dask.array
"numpy.insert(arr=numpy.ndarray, obj=numpy.ndarray, values=int)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], builtins.ellipsis, slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], builtins.ellipsis, NoneType, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], builtins.ellipsis, NoneType, int]]",1,dask.array
"numpy.array(builtins.range, dtype=str)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], builtins.ellipsis, NoneType, NoneType]]",1,dask.array
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, builtins.range, int)",1,pandas
numpy.int64 == numpy.float64,1,pandas
"numpy.percentile(a=numpy.ndarray, q=int)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.asarray(a=tuple[float, float])",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], int, slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.array(list[numpy.float32], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.nextafter(list[numpy.float32], int, dtype=str)",1,pandas
numpy.nextafter,1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis, NoneType]]",1,dask.array
numpy.finfo.min,1,pandas
numpy.ndarray[list[numpy.int64]] = float,1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[list[Union[int, numpy.int64]]] = float",1,pandas
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], NoneType]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], int, int]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], int, builtins.ellipsis]]",1,dask.array
"numpy.lib.stride_tricks.as_strided(shape=tuple[int, int], strides=tuple[int, int], x=numpy.ndarray)",1,pandas
numpy.core.numeric.__warningregistry__,1,skimage
numpy.int32 >= int,1,skimage
numpy.ScalarType,1,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, int, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
"numpy.digitize(bins=numpy.ndarray, right=builtins.bool, x=list[int])",1,dask.array
numpy.lib.index_tricks.__warningregistry__,1,skimage
numpy.int8(int),1,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, int, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
numpy.lib.function_base.__warningregistry__,1,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
"numpy.histogram(a=numpy.ndarray, bins=numpy.ndarray, range=NoneType, weights=NoneType)",1,dask.array
"numpy.concatenate(list[Union[list[int], numpy.ndarray]])",1,dask.array
numpy.matrixlib.__warningregistry__,1,skimage
numpy.histogram(a=list),1,dask.array
"numpy.linspace(endpoint=builtins.bool, num=int, start=int, stop=int)",1,dask.array
"numpy.histogram(a=numpy.ndarray, bins=numpy.ndarray, range=NoneType, weights=tuple[int, int])",1,dask.array
"numpy.histogram(a=dask.array.core.Array, bins=tuple[int, int], range=int)",1,dask.array
"numpy.arange(int, float, float)",1,dask.array
"numpy.histogram(a=dask.array.core.Array, bins=builtins.bool, density=numpy.ndarray)",1,dask.array
"numpy.searchsorted(a=tuple[int, int], side=str, v=numpy.ndarray)",1,dask.array
"numpy.histogram(a=dask.array.core.Array, bins=dask.array.core.Array, weights=numpy.ndarray)",1,dask.array
"numpy.histogram(a=numpy.ndarray, bins=numpy.ndarray, range=numpy.ndarray, weights=NoneType)",1,dask.array
numpy.iterable(y=NoneType),1,dask.array
"numpy.result_type(dask.array.core.Array, Type[numpy.float64])",1,dask.array
numpy.isscalar(element=Type[numpy.float64]),1,dask.array
"numpy.ones(dtype=Type[builtins.bool], shape=int)",1,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",1,skimage
"numpy.ndarray[tuple[int, int, slice[int, int, NoneType]]]",1,skimage
"numpy.array(list[int], copy=int, ndmin=builtins.bool)",1,skimage
"numpy.result_type(numpy.dtype, Type[numpy.float64])",1,dask.array
"numpy.array(tuple[float, int, float], copy=int, ndmin=builtins.bool)",1,skimage
"numpy.empty(tuple[int, int, int], dtype=Type[builtins.float])",1,skimage
numpy.lib.shape_base.__warningregistry__,1,skimage
numpy.searchsorted,1,dask.array
"numpy.bincount(list[int], weights=list[int])",1,dask.array
"numpy.gradient(f=int, varargs=tuple[numpy.ndarray])",1,dask.array
numpy.ndarray >= numpy.ndarray,1,dask.array
numpy.ndarray > numpy.ndarray,1,dask.array
numpy.ndarray ** numpy.ndarray,1,dask.array
numpy.bool8,1,dask.array
"numpy.ndarray.astype(numpy.ndarray, str, copy=builtins.bool)",1,dask.array
numpy.square,1,dask.array
"numpy.gradient(f=numpy.ndarray, kwargs=dict, varargs=tuple[float, float, float])",1,dask.array
"numpy.array(list[tuple[str, int]], dtype=list[tuple[str, str]])",1,dask.array
numpy.argmin(a=list[int]),1,dask.array
"numpy.gradient(f=numpy.ndarray, kwargs=dict, varargs=tuple[float])",1,dask.array
numpy.gradient(f=numpy.ndarray),1,dask.array
"numpy.gradient(f=numpy.ndarray, kwargs=dict, varargs=tuple[numpy.ndarray, numpy.ndarray])",1,dask.array
"numpy.empty(tuple[int, int, int, int], dtype=Type[builtins.float])",1,skimage
"numpy.float32[tuple[builtins.ellipsis, NoneType, NoneType]]",1,dask.array
"numpy.ndarray[tuple[int, int, slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
numpy.int64 -= int,1,dask.array
"numpy.gradient(f=numpy.ndarray, kwargs=dict, varargs=tuple[numpy.ndarray])",1,dask.array
"numpy.gradient(f=float, varargs=tuple[numpy.ndarray, numpy.ndarray])",1,dask.array
"numpy.amin(numpy.ndarray, axis=tuple[int, int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.gradient(f=numpy.ndarray, varargs=tuple[numpy.ndarray])",1,dask.array
numpy.lib.utils.__warningregistry__,1,skimage
numpy.bincount(list),1,dask.array
"numpy.zeros_like(a=numpy.ndarray, dtype=numpy.dtype, shape=int)",1,dask.array
"numpy.ndarray[slinumpy.ndarraye[NoneType, int, NoneType]] = numpy.ndarray",1,dask.array
numpy.sum(a=list[numpy.int64]),1,dask.array
numpy.ndarray in dask.highlevelgraph.HighLevelGraph,1,dask.array
"numpy.cov(m=numpy.ndarray, rowvar=int)",1,dask.array
numpy.cov,1,dask.array
numpy.ndarray.__class__,1,dask.array
"numpy.ndarray.min(numpy.ndarray, keepdims=numpy.ndarray, out=builtins.bool)",1,dask.array
numpy.linalg._umath_linalg.__warningregistry__,1,skimage
numpy.lib.twodim_base.__warningregistry__,1,skimage
numpy.ndarray.keys,1,dask.array
"numpy.empty(tuple[int, int], dtype=Type[numpy.object_])",1,dask.array
"numpy.arange(int, int, int, numpy.dtype)",1,dask.array
"numpy.isin(element=numpy.ndarray, invert=builtins.bool, test_elements=numpy.ndarray)",1,dask.array
numpy.dtype != Type[numpy.object_],1,dask.array
numpy.in1d,1,dask.array
"numpy.in1d(ar1=numpy.ndarray, ar2=numpy.ndarray, assume_unique=builtins.bool)",1,dask.array
"numpy.empty(tuple[int], dtype=Type[numpy.object_])",1,dask.array
"numpy.empty(tuple, dtype=Type[numpy.object_])",1,dask.array
"numpy.isin(element=dask.array.core.Array, invert=builtins.bool, test_elements=dask.array.core.Array)",1,dask.array
"numpy.ndarray(dtype=tuple, shape=Type[numpy.object_])",1,dask.array
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=list[list[list[tuple[int, int]]]])",1,skimage
numpy.dtype != Type[builtins.bool],1,dask.array
numpy.hstack(tup=tuple[numpy.ndarray]),1,skimage
"numpy.isin(assume_unique=builtins.bool, element=dask.array.core.Array, test_elements=numpy.ndarray)",1,dask.array
numpy.count_nonzero,1,skimage
"numpy.roll(a=numpy.ndarray, axis=NoneType, shift=int)",1,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",1,dask.array
"numpy.empty(dtype=tuple[int, int, int, int, int], shape=numpy.dtype)",1,dask.array
"numpy.roll(a=numpy.ndarray, axis=int, shift=int)",1,dask.array
"numpy.ndindex(shape=tuple[tuple[int, int, int, int]])",1,dask.array
"numpy.roll(a=numpy.ndarray, axis=tuple[int, int], shift=tuple[int, int])",1,dask.array
"numpy.ndarray.reshape(numpy.ndarray, tuple)",1,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, size=tuple[int, int, int, int])",1,dask.array
numpy.shape(a=dask.array.core.Array),1,dask.array
"numpy.ndarray.sum(numpy.ndarray, keepdims=numpy.ndarray, out=builtins.bool)",1,dask.array
"numpy.empty(tuple[int], dtype=list[tuple[str, Union[Type[numpy.int64], numpy.dtype]]])",1,dask.array
"numpy.cov(bias=int, m=numpy.ndarray)",1,dask.array
"numpy.array(list[list[int]], dtype=str)",1,dask.array
numpy.hstack(tup=list[numpy.int64]),1,skimage
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, desired=list[float])",1,skimage
"numpy.cov(m=numpy.ndarray, y=numpy.ndarray)",1,dask.array
numpy.hstack(tup=list[numpy.float32]),1,skimage
"numpy.result_type(dask.array.core.Array, dask.array.core.Array, Type[numpy.float64])",1,dask.array
"numpy.ones(dtype=Type[numpy.float64], shape=tuple[int, int])",1,skimage
"numpy.int8[tuple[builtins.ellipsis, NoneType]]",1,dask.array
numpy.isscalar(element=numpy.int8),1,dask.array
"numpy.ndarray(dtype=tuple, shape=Type[numpy.int8])",1,dask.array
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int8])",1,dask.array
numpy.int8,1,dask.array
"numpy.full(fill_value=tuple[int], shape=int)",1,dask.array
"numpy.arange(int, int, dtype=Type[numpy.float32])",1,dask.array
"numpy.result_type(numpy.dtype, numpy.dtype, Type[numpy.float64])",1,dask.array
numpy.corrcoef(x=numpy.ndarray),1,dask.array
numpy.hstack(tup=list[numpy.float64]),1,skimage
numpy.corrcoef,1,dask.array
numpy.linalg.__warningregistry__,1,skimage
"numpy.empty(tuple[int], dtype=list[tuple[str, numpy.dtype]])",1,dask.array
"numpy.amax(a=numpy.ndarray, axis=int, keepdims=builtins.bool)",1,dask.array
int - numpy.ndarray,1,dask.array
"numpy.ndarray(dtype=tuple, shape=list[tuple[str, Union[Type[numpy.int64], numpy.dtype]]])",1,dask.array
"numpy.void[tuple[builtins.ellipsis, NoneType]]",1,dask.array
numpy.ndarray == numpy.int64,1,dask.array
"numpy.sum(a=numpy.ndarray, axis=str, dtype=int)",1,dask.array
"numpy.uint32[tuple[builtins.ellipsis, NoneType]]",1,dask.array
numpy.isscalar(element=numpy.uint32),1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[int, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, int, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
numpy.ndarray != numpy.ndarray,1,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[NoneType, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.asarray(a=list[Union[float, int]], dtype=Type[builtins.float])",1,skimage
"numpy.ndarray[tuple[NoneType, NoneType, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,dask.array
Type[Type[numpy.datetime64]uiltins.Type[numpy.datetime64]ool] == Type[numpy.datetime64],1,dask.array
"numpy.ndarray[tuple[NoneType, slice[NoneType, NoneType, NoneType], NoneType, slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[NoneType, NoneType]]",1,dask.array
Type[Type[numpy.datetime64]uiltins.complex] == Type[numpy.datetime64],1,dask.array
numpy.delete,1,skimage
Type[Type[numpy.datetime64]uiltins.float] == Type[numpy.datetime64],1,dask.array
Type[Type[numpy.datetime64]uiltins.int] == Type[numpy.datetime64],1,dask.array
"numpy.ndarray[slice[NoneType, NoneType, NoneType]]",1,skimage
numpy.random.mtrand.RandomState(),1,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType]]]",1,dask.array
numpy.matrix[int],1,dask.array
"numpy.broadcast_to(array=int, shape=list[int])",1,dask.array
numpy.matrix,1,dask.array
numpy.asarray(a=numpy.matrix),1,dask.array
numpy.matrix(data=list[list[int]]),1,dask.array
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType]]]",1,dask.array
"numpy.tensordot(a=numpy.ndarray, axes=tuple[tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]], b=numpy.ndarray)",1,dask.array
"numpy.arange(int, dtype=numpy.dtype)",1,dask.array
"numpy.delete(arr=numpy.ndarray, axis=int, obj=tuple)",1,skimage
"numpy.zeros(tuple[int, int], dtype=str, order=Type[builtins.bool])",1,skimage
"numpy.ndarray[tuple[NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType, NoneType]]",1,dask.array
"numpy.vdot(numpy.ndarray, numpy.ndarray)",1,dask.array
"numpy.ndarray.view(numpy.ndarray, Type[numpy.uint8])",1,skimage
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=tuple[builtins.bool, builtins.bool, builtins.bool, builtins.bool])",1,skimage
Type[Type[numpy.datetime64]uiltins.Type[numpy.datetime64]ytes] == Type[numpy.datetime64],1,dask.array
numpy.isscalar(element=numpy.bytes_),1,dask.array
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
"numpy.tensordot(a=numpy.ndarray, axes=tuple[tuple, tuple], b=numpy.ndarray)",1,dask.array
numpy.array(numpy.uint16),1,dask.array
numpy.lib.__warningregistry__,1,skimage
"numpy.core._multiarray_umath.normalize_axis_index(int, int)",1,dask.array
numpy.fliplr(m=numpy.ndarray),1,dask.array
"numpy.matmul(numpy.float64, numpy.float64)",1,dask.array
numpy.uint16.ndim,1,dask.array
Type[numpy.uint16] == Type[numpy.datetime64],1,dask.array
numpy.isscalar(element=numpy.int16),1,dask.array
numpy.int16(int),1,dask.array
"numpy.matmul(numpy.float64, numpy.ndarray)",1,dask.array
Type[numpy.oType[numpy.datetime64]ject_] == Type[numpy.datetime64],1,dask.array
"numpy.matmul(numpy.ndarray, numpy.float64)",1,dask.array
"numpy.empty(tuple[int, int], Type[builtins.int])",1,skimage
numpy.timedelta64(int),1,dask.array
numpy.array(numpy.float16),1,dask.array
numpy.float16.ndim,1,dask.array
numpy.lib.arraypad.__warningregistry__,1,skimage
Type[numpy.float16] == Type[numpy.datetime64],1,dask.array
numpy.lib.financial.__warningregistry__,1,skimage
numpy.isscalar(element=numpy.uint8),1,dask.array
numpy.uint8(int),1,dask.array
numpy.array(numpy.int8),1,dask.array
numpy.int8.ndim,1,dask.array
numpy.lib._iotools.__warningregistry__,1,skimage
Type[numpy.int8] == Type[numpy.datetime64],1,dask.array
"numpy.isscalar(element=list[Union[float, int]])",1,skimage
numpy.str_.ndim,1,dask.array
numpy.lib.format.__warningregistry__,1,skimage
"numpy.arange(int, dtype=Type[numpy.int32])",1,skimage
numpy.ndarray[tuple[NoneType]],1,dask.array
"numpy.zeros(tuple[int], Type[builtins.bool])",1,skimage
"numpy.amax(numpy.ndarray, axis=tuple[int, int, int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.amin(numpy.ndarray, axis=tuple[int, int, int], computing_meta=builtins.bool, keepdims=builtins.bool)",1,dask.array
"numpy.ptp(a=numpy.ndarray, axis=NoneType)",1,dask.array
numpy.array(skimage.feature._hessian_det_appx._memoryviewslice),1,skimage
numpy.obj2sctype(rep=Type[numpy.float64]),1,skimage
"numpy.ptp(a=numpy.ndarray, axis=int)",1,dask.array
"numpy.diff(a=numpy.ndarray, axis=int, n=int)",1,dask.array
"numpy.ediff1d(ary=numpy.ndarray, to_begin=int, to_end=int)",1,dask.array
"numpy.ediff1d(ary=numpy.ndarray, to_begin=list[int], to_end=list[int])",1,dask.array
numpy.int64 + numpy.float64,1,skimage
"numpy.gradient(f=numpy.ndarray, kwargs=dict)",1,dask.array
numpy.amin(a=int),1,dask.array
numpy.spacing(int),1,skimage
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.object_])",1,dask.array
"numpy.delete(arr=numpy.ndarray, axis=int, obj=tuple[int, int, int, int, int, int, int, int, int, int, int, int])",1,skimage
"numpy.delete(arr=numpy.ndarray, axis=int, obj=tuple[int, int, int, int, int, int, int, int, int, int, int])",1,skimage
"numpy.delete(arr=numpy.ndarray, axis=int, obj=tuple[int, int, int, int, int, int, int, int])",1,skimage
"numpy.gradient(f=numpy.ndarray, kwargs=dict, varargs=tuple[int])",1,dask.array
int == numpy.ndarray,1,dask.array
int % numpy.ndarray,1,dask.array
int // numpy.ndarray,1,dask.array
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,dask.array
numpy.ndarrayuiltins.numpy.ndarrayool | numpy.ndarray,1,dask.array
numpy.ndarray != int,1,dask.array
"numpy.isfinite(tuple[numpy.ndarray, numpy.ndarray])",1,skimage
numpy.ndarray ^ builtins.bool,1,dask.array
numpy.ndarray & builtins.bool,1,dask.array
numpy.gradient,1,skimage
"numpy.gradient(f=numpy.ndarray, kwargs=dict)",1,skimage
"numpy.apply_over_axes(a=numpy.ndarray, axes=tuple[int, int, int], func=builtins.function)",1,dask.array
numpy.flatiter[list[int]] = numpy.ndarray,1,skimage
"numpy.allclose(a=numpy.complex128, b=numpy.complex128, equal_nan=builtins.bool)",1,dask.array
"numpy.ndarray.strides = tuple[int, int, int]",1,skimage
numpy.conjugate(numpy.complex128),1,dask.array
"numpy.ndarray.__array_wrap__(numpy.ndarray, numpy.ndarray)",1,dask.array
"numpy.angle(deg=numpy.ndarray, z=builtins.bool)",1,dask.array
numpy.isscalar(element=builtins.function),1,dask.array
numpy.float64(),1,dask.array
numpy.isscalar(element=builtins.complex),1,dask.array
numpy.ndarray - float,1,dask.array
numpy.fix(x=numpy.ndarray),1,dask.array
"numpy.array(list[list[Union[float, int, int, numpy.float64]]])",1,skimage
"numpy.ndarray[tuple[sliinte[int, NoneType, NoneType], int]] = int",1,skimage
"numpy.outer(a=numpy.float64, b=numpy.float64)",1,dask.array
"numpy.apply_over_axes(a=numpy.ndarray, axes=tuple[int, int], func=builtins.function)",1,dask.array
numpy.outer,1,dask.array
numpy.apply_along_axis,1,dask.array
"numpy.clip(a=numpy.ndarray, a_max=numpy.float64, a_min=numpy.float64, out=numpy.ndarray)",1,skimage
numpy.array(list[list[numpy.int64]]),1,dask.array
"numpy.ndarray[tuple[int, int, slice[NoneType, NoneType, NoneType]]]",1,dask.array
"numpy.apply_along_axis(args=tuple[numpy.ndarray], arr=int, axis=builtins.function, func1d=int)",1,dask.array
"numpy.apply_along_axis(args=tuple[int], arr=numpy.ndarray, axis=int, func1d=builtins.function)",1,dask.array
numpy.ndarray.max,1,dask.array
"numpy.ndarray.min(numpy.ndarray, axis=builtins.bool, keepdims=int)",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType, slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.ndarray.max(numpy.ndarray, axis=builtins.bool, keepdims=int)",1,dask.array
"numpy.apply_over_axes(a=numpy.ndarray, axes=tuple[int], func=builtins.function)",1,dask.array
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.ndarray(dtype=tuple, shape=list[tuple[str, numpy.dtype]])",1,dask.array
"numpy.minimum(numpy.ndarray, float)",1,skimage
"numpy.count_nonzero(a=numpy.ndarray, axis=tuple[int, int])",1,dask.array
numpy.asanyarray(a=int),1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
numpy.ndarray.nonzero(numpy.ndarray),1,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,dask.array
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[int, NoneType, NoneType]]] = builtins.bool",1,skimage
"numpy.array(int, dtype=Type[builtins.int])",1,dask.array
numpy.ndarray.item(numpy.ndarray),1,dask.array
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, numpy.int64, size=int)",1,dask.array
numpy.broadcast_arrays(args=tuple[numpy.ndarray]),1,dask.array
numpy.empty(tuple[int]),1,dask.array
"numpy.prod(a=tuple[int], dtype=Type[builtins.int])",1,dask.array
numpy.block(arrays=list[list[dask.array.core.Array]]),1,dask.array
"numpy.zeros(list[int], dtype=Type[builtins.bool])",1,skimage
"numpy.array(list[numpy.ndarray], dtype=Type[builtins.int])",1,skimage
"numpy.unravel_index(numpy.ndarray, tuple[int], str)",1,dask.array
"numpy.float64 in tuple[int, int]",1,skimage
builtins.builtin_function_or_method.__name__,1,dask.array
"numpy.unravel_index(numpy.ndarray, order=str, shape=tuple[int])",1,dask.array
numpy.unravel_index,1,dask.array
"numpy.int64[tuple[builtins.ellipsis, NoneType]]",1,dask.array
"numpy.float64[tuple[builtins.ellipsis, NoneType]]",1,dask.array
"numpy.zeros(int, dtype=Type[builtins.int])",1,dask.array
numpy.stack(arrays=tuple[numpy.ndarray]),1,dask.array
"numpy.array(dask.array.core.Array, copy=builtins.bool)",1,dask.array
"numpy.stack(arrays=tuple[numpy.ndarray, numpy.ndarray])",1,dask.array
"numpy.zeros(int, dtype=Type[builtins.float])",1,dask.array
numpy.block(arrays=int),1,dask.array
numpy.block(arrays=numpy.ndarray),1,dask.array
"numpy.full(dtype=str, fill_value=int, shape=int)",1,skimage
"numpy.isnan(tuple[float, int])",1,dask.array
"numpy.full(dtype=Type[numpy.uint8], fill_value=int, shape=tuple[int, int])",1,skimage
numpy.ndarray > numpy.uint8,1,skimage
"numpy.uint8[tuple[builtins.ellipsis, NoneType, NoneType]]",1,dask.array
"numpy.ones_like(a=numpy.ndarray, dtype=Type[builtins.bool])",1,skimage
numpy.ufunc.nout,1,dask.array
"numpy.ndarray.fill(numpy.ndarray, builtins.bool)",1,skimage
"numpy.array(list[int], dtype=Type[numpy.int16])",1,dask.array
"numpy.where(numpy.ndarray, numpy.int32, numpy.ndarray)",1,dask.array
"numpy.can_cast(numpy.ndarray, numpy.dtype, casting=str)",1,dask.array
numpy.ndarray[NoneType] = numpy.ndarray,1,skimage
numpy.int64 * numpy.ndarray,1,dask.array
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, int, NoneType]]] = builtins.bool",1,skimage
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[int, NoneType, NoneType]]] = builtins.bool",1,skimage
"Type[numpy.int32] in tuple[Type[builtins.list], Type[builtins.tuple], Type[builtins.set]]",1,dask.array
"numpy.result_type(numpy.int32, numpy.dtype)",1,dask.array
"numpy.ndarray[tuple[list[int], list[int], list[int]]] = int",1,skimage
"numpy.allclose(a=numpy.int64, b=numpy.int64, equal_nan=builtins.bool)",1,dask.array
numpy.int64 ** int,1,dask.array
"numpy.where(int, numpy.ndarray, numpy.ndarray)",1,dask.array
"numpy.ndarray[tuple[int, int, int]] = builtins.bool",1,skimage
numpy.float64 >= int,1,dask.array
"numpy.count_nonzero(a=numpy.ndarray, axis=NoneType)",1,dask.array
"numpy.amax(a=tuple[int, int, int])",1,dask.array
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, int, NoneType]]] = builtins.bool",1,skimage
"numpy.isnan(tuple[int, float])",1,dask.array
"numpy.count_nonzero(a=numpy.ndarray, axis=int)",1,dask.array
"numpy.count_nonzero(a=numpy.ndarray, axis=tuple[int])",1,dask.array
"numpy.unravel_index(numpy.ndarray, order=str, shape=tuple[int, int])",1,dask.array
"numpy.mean(a=numpy.ndarray, axis=tuple[int, int], dtype=str)",1,dask.array
"numpy.flatiter[int] = tuple[str, int, int]",1,dask.array
"numpy.amin(a=numpy.ndarray, axis=tuple[int])",1,dask.array
"numpy.ndarray[tuple[int]] = tuple[str, int]",1,dask.array
numpy.isscalar(element=Type[numpy.float32]),1,dask.array
"numpy.result_type(numpy.dtype, Type[numpy.float32])",1,dask.array
"numpy.can_cast(numpy.dtype, numpy.dtype, casting=str)",1,dask.array
numpy.core.function_base.__warningregistry__,1,skimage
"Type[numpy.dtype] in tuple[Type[builtins.list], Type[builtins.tuple], Type[builtins.set]]",1,dask.array
"numpy.testing._private.utils.assert_equal(actual=tuple[numpy.int64, numpy.int64, numpy.int64], desired=tuple[int, int, int])",1,skimage
"numpy.less(tuple[int, int, int], tuple[int, int])",1,skimage
"numpy.asanyarray(a=list[Union[float, int]])",1,skimage
Type[numpy.dtype] in builtins.set,1,dask.array
"numpy.ones(dtype=Type[numpy.int64], shape=tuple)",1,dask.array
numpy.dtype == Type[numpy.int16],1,dask.array
numpy.core.records.__warningregistry__,1,skimage
"Type[numpy.dtype] in tuple[Type[builtins.tuple], Type[builtins.list], Type[builtins.set]]",1,dask.array
Type[numpy.dtype].__module__,1,dask.array
"numpy.zeros(tuple[int, int, int, int], dtype=str, order=Type[numpy.uint32])",1,skimage
numpy.asanyarray(a=list[int]),1,skimage
"numpy.zeros(int, dtype=numpy.dtype)",1,dask.array
"numpy.einsum(kwargs=dict, operands=tuple[str, numpy.ndarray, numpy.ndarray])",1,dask.array
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int, int, int, int, int])",1,dask.array
"numpy.ascontiguousarray(a=list[float], dtype=Type[numpy.float64])",1,skimage
numpy.asanyarray(a=list[float]),1,skimage
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int, int, int, int, int])",1,dask.array
numpy.uint16 >= int,1,skimage
numpy.uint32 >= int,1,skimage
numpy.uint64 >= int,1,skimage
numpy.int16 >= int,1,skimage
"numpy.less(tuple[int, int, int], tuple[int, int, int])",1,skimage
numpy.dtype == Type[numpy.float64],1,dask.array
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=numpy.float64)",1,skimage
"numpy.array(numpy.ndarray, copy=Type[numpy.float64], dtype=builtins.bool)",1,skimage
"numpy.random.mtrand.RandomState.random_sample(numpy.random.mtrand.RandomState, size=tuple[int, int])",1,dask.array
"numpy.sum(a=numpy.ndarray, axis=tuple[int])",1,dask.array
"numpy.ndarray[tuple[int, int]] = tuple[str, int, int]",1,dask.array
"numpy.less(tuple[int, int], tuple[int, int])",1,skimage
numpy.divide,1,skimage
numpy.core._multiarray_tests.__warningregistry__,1,skimage
numpy.bincount(numpy.ndarray),1,dask.array
numpy.core.getlimits.__warningregistry__,1,skimage
"numpy.int64[tuple[builtins.ellipsis, NoneType, NoneType]]",1,dask.array
"numpy.array(list[numpy.int64], dtype=numpy.dtype)",1,dask.array
"numpy.insert(arr=numpy.ndarray, axis=int, obj=slice[int, int, NoneType], values=int)",1,dask.array
Type[numpy.dtype] in dict,1,dask.array
"Type[numpy.ndarray] in tuple[Type[builtins.tuple], Type[builtins.list], Type[builtins.set]]",1,dask.array
numpy.dtype == Type[numpy.int64],1,dask.array
"numpy.multiply(numpy.ndarray, numpy.ndarray, out=numpy.ndarray)",1,skimage
"numpy.insert(arr=numpy.ndarray, axis=int, obj=list[int], values=numpy.ndarray)",1,dask.array
numpy.asarray(a=pandas.core.arrays.numpy_.PandasArray),1,dask.array
"numpy.zeros(int, dtype=str)",1,dask.array
"numpy.true_divide(numpy.ndarray, numpy.int64, out=numpy.ndarray)",1,skimage
"numpy.random.mtrand.RandomState.random_sample(numpy.random.mtrand.RandomState, size=tuple[int])",1,dask.array
Type[numpy.ndarray] in builtins.set,1,dask.array
numpy.flatiter[int],1,dask.array
"numpy.insert(arr=numpy.ndarray, axis=int, obj=int, values=numpy.ndarray)",1,dask.array
"numpy.ones(dtype=Type[numpy.int16], shape=int)",1,dask.array
"numpy.maximum(numpy.ndarray, int, out=numpy.ndarray)",1,skimage
"numpy.ones(dtype=Type[numpy.int64], shape=int)",1,dask.array
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=list[tuple[int, int]])",1,skimage
"numpy.round_(a=tuple[int, int])",1,skimage
"numpy.ndarray[tuple[builtins.ellipsis, NoneType, NoneType]]",1,dask.array
"numpy.int64[tuple[builtins.ellipsis, NoneType, NoneType, NoneType, NoneType, NoneType]]",1,dask.array
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int, int, int, int, int])",1,dask.array
"numpy.int64[tuple[builtins.ellipsis, NoneType, NoneType, NoneType, NoneType]]",1,dask.array
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int, int, int, int])",1,dask.array
numpy.compress,1,dask.array
"numpy.compress(a=numpy.ndarray, axis=int, condition=numpy.ndarray)",1,dask.array
numpy.count_nonzero,1,dask.array
numpy.ndarray.argmax,1,skimage
"numpy.ndarray.argmax(numpy.ndarray, axis=int)",1,skimage
numpy.ndarray.any,1,dask.array
"numpy.ndarray[tuple[int, int, int]] = tuple[str, int, int, int]",1,dask.array
"numpy.searchsorted(a=tuple[int], side=str, v=numpy.ndarray)",1,dask.array
"numpy.ndindex(shape=tuple[tuple[int, int, int]])",1,dask.array
numpy.asarray(a=list[builtins.bool]),1,dask.array
"numpy.compress(a=numpy.ndarray, axis=int, condition=list[builtins.bool])",1,dask.array
numpy.dtype(Type[builtins.bool]),1,dask.array
"numpy.tensordot(a=numpy.ndarray, axes=tuple[tuple[int], tuple[int]], b=numpy.ndarray)",1,dask.array
numpy.generic.all(numpy.bool_),1,dask.array
numpy.bool_.all,1,dask.array
numpy.ndarray.__array_priority__,1,dask.array
"numpy.isnan(tuple[float, float, float, float])",1,dask.array
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",1,dask.array
"numpy.empty(dtype=tuple[int, int, int, int], shape=numpy.dtype)",1,dask.array
"numpy.compress(a=numpy.ndarray, axis=NoneType, condition=list[builtins.bool])",1,dask.array
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]] = float",1,skimage
numpy.dtype.base,1,dask.array
"numpy.ones(dtype=list[tuple[str, tuple[str, Union[int, tuple[int, int]]]]], shape=tuple[int, int])",1,dask.array
"numpy.extract(arr=numpy.ndarray, condition=numpy.ndarray)",1,dask.array
"numpy.searchsorted(a=tuple[int, int, int], side=str, v=numpy.ndarray)",1,dask.array
numpy.lib.mixins.__warningregistry__,1,skimage
"numpy.where(builtins.bool, numpy.ndarray, int)",1,dask.array
"numpy.compress(a=numpy.ndarray, axis=NoneType, condition=numpy.ndarray)",1,dask.array
"numpy.ndarray[tuple[int, int, slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
"numpy.union1d(ar1=numpy.ndarray, ar2=numpy.ndarray)",1,dask.array
"numpy.ndarray[sliinte[int, NoneType, NoneType]] = int",1,skimage
"numpy.union1d(ar1=dask.array.core.Array, ar2=dask.array.core.Array)",1,dask.array
"numpy.generic.reshape(numpy.int64, tuple[int])",1,dask.array
numpy.ravel(a=numpy.ndarray),1,dask.array
numpy.squeeze,1,dask.array
"numpy.ndarray[tuple[int, int, numpy.int64]]",1,skimage
"numpy.ndarray[tuple[NoneType, slice[NoneType, NoneType, NoneType], NoneType, NoneType]]",1,dask.array
"numpy.ndarray.squeeze(numpy.ndarray, axis=NoneType)",1,dask.array
numpy.bool_.dtype,1,dask.array
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.ndarray, decimal=int, desired=list[int])",1,skimage
"numpy.array(list[dask.array.core.Array], dtype=str)",1,dask.array
"numpy.ndarray.squeeze(numpy.ndarray, axis=int)",1,dask.array
"numpy.ndarray.squeeze(numpy.ndarray, axis=tuple[int, int])",1,dask.array
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.ndarray, decimal=int, desired=numpy.float64)",1,skimage
numpy.int64 != int,1,dask.array
"numpy.vstack(tup=tuple[numpy.ndarray, numpy.ndarray])",1,dask.array
"numpy.ndarray[tuple[list[int], slice[NoneType, NoneType, NoneType]]]",1,skimage
numpy.lib.type_check.__warningregistry__,1,skimage
"numpy.broadcast_to(array=int, shape=tuple[int, int, int, int])",1,dask.array
"numpy.broadcast_to(array=int, shape=tuple[int, int])",1,dask.array
"numpy.broadcast_to(array=int, shape=tuple[int])",1,dask.array
numpy.take,1,dask.array
"numpy.take(a=numpy.ndarray, axis=int, indices=list[int])",1,dask.array
"numpy.int64[tuple[builtins.ellipsis, NoneType, NoneType, NoneType]]",1,dask.array
"numpy.take(a=numpy.ndarray, axis=int, indices=numpy.ndarray)",1,dask.array
numpy.ndarray[numpy.ndarray] = numpy.float64,1,skimage
numpy.dtype(dict),1,dask.array
"numpy.choose(a=numpy.ndarray, choices=tuple[int, numpy.ndarray])",1,dask.array
numpy.dtype[str],1,dask.array
"numpy.maximum(int, numpy.int64)",1,dask.array
"numpy.result_type(int, float)",1,dask.array
"numpy.piecewise(args=tuple[list[builtins.function]], condlist=numpy.ndarray, funclist=list[numpy.ndarray], x=int)",1,dask.array
"numpy.maximum(int, float)",1,dask.array
"numpy.result_type(int, int)",1,dask.array
"numpy.result_type(int, numpy.dtype)",1,dask.array
"numpy.ndarray[tuple[sliinte[NoneType, int, NoneType], int]] = int",1,skimage
"numpy.prod(a=tuple[int, int])",1,dask.array
"Type[numpy.ndarray] in tuple[Type[builtins.list], Type[builtins.tuple], Type[builtins.set]]",1,dask.array
"numpy.result_type(numpy.dtype, numpy.int64)",1,dask.array
"numpy.zeros(tuple, dtype=numpy.dtype)",1,dask.array
"numpy.result_type(numpy.dtype, float)",1,dask.array
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], list[int]]]",1,skimage
"numpy.result_type(numpy.dtype, int)",1,dask.array
"Type[numpy.vectorize] in tuple[Type[builtins.tuple], Type[builtins.list], Type[builtins.set]]",1,dask.array
"numpy.isclose(a=numpy.float64, b=int)",1,skimage
"numpy.result_type(numpy.dtype, numpy.ndarray)",1,dask.array
numpy.count_nonzero(a=str),1,dask.array
numpy.ndarray.nbytes,1,dask.array
numpy.True_,1,dask.array
"Type[numpy.int64] in tuple[Type[builtins.list], Type[builtins.tuple], Type[builtins.set]]",1,dask.array
numpy.core._dtype_ctypes.__warningregistry__,1,skimage
Type[numpy.numdicter] in dict,1,dask.array
Type[numpy.signedinteger] in dict,1,dask.array
"numpy.where(int, numpy.ndarray, int)",1,dask.array
"Type[numpy.ufunc] in tuple[Type[builtins.tuple], Type[builtins.list], Type[builtins.set]]",1,dask.array
"Type[numpy.ufunc] in tuple[Type[builtins.list], Type[builtins.tuple], Type[builtins.set]]",1,dask.array
"numpy.piecewise(args=tuple[int], condlist=list[numpy.ndarray], funclist=list[Union[builtins.function, int]], kw=dict, x=numpy.ndarray)",1,dask.array
"numpy.result_type(float, numpy.dtype)",1,dask.array
"numpy.maximum(float, int)",1,dask.array
"numpy.result_type(numpy.int64, numpy.ndarray)",1,dask.array
"numpy.array(list[tuple[int, float]], dtype=list[tuple[str, str]])",1,dask.array
"numpy.choose(a=numpy.ndarray, choices=list[Union[int, numpy.ndarray]])",1,dask.array
"numpy.choose(a=numpy.ndarray, choices=tuple[numpy.ndarray, numpy.ndarray])",1,dask.array
"numpy.choose(a=numpy.ndarray, choices=list[numpy.ndarray])",1,dask.array
+numpy.ndarray,1,dask.array
"numpy.array(numpy.ndarray, copy=Type[numpy.float64], dtype=builtins.bool, order=str)",1,skimage
"numpy.ones(dtype=Type[numpy.int64], shape=int)",1,skimage
"numpy.ndarray.choose(numpy.ndarray, list[Union[int, numpy.ndarray]])",1,dask.array
"numpy.result_type(numpy.ndarray, numpy.int64)",1,dask.array
"numpy.result_type(numpy.ndarray, float)",1,dask.array
"numpy.result_type(numpy.ndarray, int)",1,dask.array
"numpy.result_type(numpy.ndarray, numpy.dtype)",1,dask.array
"numpy.result_type(numpy.int64, numpy.int64)",1,dask.array
"numpy.result_type(float, float)",1,dask.array
"numpy.maximum(numpy.int64, float)",1,dask.array
"numpy.result_type(numpy.int64, float)",1,dask.array
"numpy.ndarray.choose(numpy.ndarray, list[numpy.ndarray])",1,dask.array
"numpy.maximum(numpy.int64, int)",1,dask.array
"numpy.result_type(numpy.int64, numpy.dtype)",1,dask.array
numpy._pytesttester.__warningregistry__,1,skimage
"numpy.maximum(float, numpy.int64)",1,dask.array
"numpy.result_type(float, int)",1,dask.array
"numpy.result_type(float, numpy.ndarray)",1,dask.array
"numpy.piecewise(args=tuple[list[Union[builtins.function, int]]], condlist=numpy.ndarray, funclist=list[numpy.ndarray], x=int)",1,dask.array
"numpy.result_type(float, numpy.int64)",1,dask.array
"numpy.maximum(float, float)",1,dask.array
"numpy.empty_like(numpy.ndarray, dtype=numpy.dtype, shape=tuple[int])",1,dask.array
"numpy.arange(int, dtype=Type[builtins.int])",1,xarray
"Type[numpy.int64] in tuple[Type[numpy.float32], Type[numpy.float64]]",1,skimage
numpy.ndarray.newbyteorder(numpy.ma.core.MaskedArray),1,matplotlib
"numpy.logspace(base=float, num=int, start=int, stop=int)",1,matplotlib
numpy.atleast_1d(arys=tuple[numpy.float64]),1,xarray
"numpy.logspace(num=int, start=int, stop=int)",1,matplotlib
numpy.ndarray.max,1,matplotlib
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, desired=list[float])",1,matplotlib
"numpy.interp(fp=list[Union[float, int]], x=numpy.ma.core.MaskedArray, xp=list[float])",1,matplotlib
numpy.isfinite(numpy.int16),1,matplotlib
"numpy.array(list[list[numpy.int16]], copy=builtins.bool, subok=builtins.bool)",1,matplotlib
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=list[Union[float, int]])",1,matplotlib
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=list[int])",1,matplotlib
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.float64, y=list[int])",1,matplotlib
"numpy.array(list[Union[float, int]], copy=builtins.bool)",1,matplotlib
"numpy.ma.core.is_masked(x=list[Union[float, int]])",1,matplotlib
"numpy.array(list[Union[float, int]], dtype=str)",1,matplotlib
numpy.ndarray.byteswap(numpy.ma.core.MaskedArray),1,matplotlib
numpy.logspace,1,matplotlib
"numpy.array(list[list[int]], copy=builtins.bool, subok=builtins.bool)",1,matplotlib
"builtins.str.encode(encoding=str, self=numpy.str_)",1,xarray
numpy.atleast_1d(arys=tuple[list[matplotlib.axes._subplots.AxesSubplot]]),1,matplotlib
numpy.transpose(a=numpy.ma.core.MaskedArray),1,matplotlib
numpy.atleast_1d(arys=tuple[matplotlib.axes._subplots.AxesSubplot]),1,matplotlib
numpy.float64 + numpy.ma.core.MaskedArray,1,matplotlib
numpy.cumprod(a=tuple[int]),1,xarray
numpy.isnan(numpy.int64),1,matplotlib
numpy.iterable(y=list[matplotlib.axes._subplots.AxesSubplot]),1,matplotlib
"numpy.random.mtrand.RandomState.seed(numpy.random.mtrand.RandomState, seed=int)",1,matplotlib
"numpy.array(numpy.ndarray, copy=Type[numpy.bytes_], dtype=builtins.bool, order=str)",1,xarray
"numpy.testing._private.utils.assert_almost_equal(actual=list, desired=numpy.ndarray)",1,matplotlib
"numpy.random.mtrand.RandomState.uniform(numpy.random.mtrand.RandomState, high=int, low=tuple[int, int], size=int)",1,matplotlib
"numpy.ma.core.power(a=float, b=numpy.ma.core.MaskedArray)",1,matplotlib
"numpy.ma.core.power(a=numpy.float64, b=numpy.ma.core.MaskedArray)",1,matplotlib
"numpy.testing._private.utils.assert_equal(actual=list[numpy.float64], desired=list[numpy.float64])",1,matplotlib
"numpy.testing._private.utils.assert_equal(actual=list, desired=list)",1,matplotlib
numpy.ndarray.newbyteorder(numpy.ndarray),1,matplotlib
numpy.ndarray.byteswap(numpy.ndarray),1,matplotlib
numpy.int64 == float,1,matplotlib
numpy.isnan(int),1,matplotlib
"numpy.testing._private.utils.assert_array_almost_equal(x=list[numpy.float64], y=numpy.ma.core.MaskedArray)",1,matplotlib
"numpy.array(list[int], dtype=Type[numpy.int8])",1,matplotlib
numpy.generic.item(numpy.int8),1,matplotlib
"numpy.array(list[float], dtype=Type[numpy.float128])",1,matplotlib
numpy.generic.item(numpy.float128),1,matplotlib
numpy.iterable(y=numpy.float128),1,matplotlib
numpy.asarray(a=list[numpy.float128]),1,matplotlib
numpy.min_scalar_type(list[numpy.float128]),1,matplotlib
numpy.ma.core.getmask(a=list[numpy.float128]),1,matplotlib
numpy.float128 == numpy.float128,1,matplotlib
numpy.float128 - numpy.float128,1,matplotlib
numpy.finfo.resolution,1,matplotlib
int + numpy.float128,1,matplotlib
int * numpy.float128,1,matplotlib
numpy.float64 > numpy.float128,1,matplotlib
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ma.core.MaskedArray, y=list[Union[float, int]])",1,matplotlib
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ma.core.MaskedArray, y=list[int])",1,matplotlib
"numpy.ma.core.array(data=numpy.ndarray, mask=numpy.bool_)",1,matplotlib
numpy.min_scalar_type(list[int]),1,matplotlib
"numpy.array(numpy.ndarray, dtype=Type[numpy.int64])",1,xarray
"numpy.array(float, copy=builtins.bool)",1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64], y=numpy.ndarray)",1,matplotlib
numpy.ma.core.is_masked(x=float),1,matplotlib
"numpy.min_scalar_type(list[Union[float, int]])",1,matplotlib
"numpy.ma.core.getmask(a=list[Union[float, int]])",1,matplotlib
numpy.ma.core.getmask(a=list[int]),1,matplotlib
"numpy.ma.core.power(a=numpy.ma.core.MaskedArray, b=float)",1,matplotlib
numpy.Inf,1,matplotlib
numpy.random.mtrand.RandomState.normal,1,xarray
"numpy.clip(a=numpy.ndarray, a_max=float, a_min=numpy.float64)",1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=numpy.ma.core.MaskedArray, y=list[Union[float, int]])",1,matplotlib
numpy.random.mtrand.RandomState(NoneType),1,xarray
"numpy.power(numpy.ndarray, int, numpy.ndarray)",1,matplotlib
numpy.iterable(y=matplotlib.ticker.FixedLocator),1,matplotlib
numpy.iterable(y=matplotlib.axes._subplots.AxesSubplot),1,matplotlib
numpy.asarray(a=list[list[numpy.int64]]),1,matplotlib
"numpy.zeros(tuple[int], dtype=Type[numpy.int16])",1,matplotlib
Type[numpy.bytes_].__mro__,1,matplotlib
"builtins.bytes.decode(encoding=str, self=numpy.bytes_)",1,matplotlib
numpy.bytes_.decode,1,matplotlib
numpy.floatytes_ + float,1,matplotlib
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, numpy.ndarray, list[float], numpy.ndarray, NoneType])",1,matplotlib
"numpy.array(list[Union[float, str]], dtype=Type[builtins.object])",1,matplotlib
"numpy.array(list[Union[int, str]], dtype=Type[builtins.object])",1,matplotlib
"numpy.ma.core.array(data=list[Union[float, int]], mask=list[builtins.bool])",1,matplotlib
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.testing._private.utils.assert_approx_equal(actual=numpy.float64, desired=float)",1,matplotlib
numpy.zeros(shape=int),1,matplotlib
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=list)",1,matplotlib
"numpy.array(numpy.ndarray, copy=numpy.dtype, dtype=builtins.bool)",1,xarray
"numpy.ndarray[tuple[slituple[numpy.ndarray, numpy.ndarray]e[int, NoneType, NoneType], slituple[numpy.ndarray, numpy.ndarray]e[int, NoneType, int]]] = tuple[numpy.ndarray, numpy.ndarray]",1,matplotlib
"numpy.ndarray[tuple[int, sliliste[int, NoneType, int]]] = list",1,matplotlib
numpy.atleast_1d(arys=tuple[list[builtins.bytes]]),1,matplotlib
numpy.iterable(y=builtins.bytes),1,matplotlib
numpy.iterable(y=list[builtins.bytes]),1,matplotlib
numpy.vectorize,1,matplotlib
"numpy.array(tuple[float, int, float, numpy.float64], dtype=Type[builtins.float])",1,matplotlib
"numpy.array(list[tuple[int, Union[float, int]]])",1,matplotlib
"numpy.generic.astype(numpy.int64, Type[numpy.float64])",1,matplotlib
numpy.ndarray -= numpy.int64,1,matplotlib
"numpy.array(tuple[list[int]], dtype=Type[builtins.float])",1,matplotlib
"numpy.array(tuple[list[str], list[int]], dtype=Type[builtins.object])",1,matplotlib
"numpy.vectorize(otypes=list[Type[builtins.float]], pyfunc=builtins.builtin_function_or_method)",1,matplotlib
"numpy.array(list[builtins.bytes], dtype=Type[builtins.object])",1,matplotlib
"numpy.array(str, dtype=Type[builtins.object])",1,matplotlib
Type[numpy.str_].__mro__,1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=list[int], y=builtins.range)",1,matplotlib
numpy.atleast_1d(arys=tuple[list[str]]),1,matplotlib
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, numpy.ndarray, numpy.float64, numpy.ndarray, NoneType])",1,matplotlib
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, list[numpy.int64], list[float], numpy.ndarray, NoneType])",1,matplotlib
"numpy.asarray(a=list[Union[float, int]], dtype=str)",1,matplotlib
"numpy.ndarray[tuple[slituple[str]e[int, NoneType, NoneType], slituple[str]e[int, NoneType, int]]] = tuple[str]",1,matplotlib
numpy.flatiter[int],1,matplotlib
NoneType != numpy.int64,1,matplotlib
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, size=int)",1,matplotlib
numpy.unique(ar=numpy.ma.core.MaskedArray),1,matplotlib
numpy.isnan(numpy.float64),1,matplotlib
float / numpy.int64,1,xarray
numpy.any(a=numpy.bool_),1,matplotlib
"numpy.array(numpy.float64, copy=builtins.bool)",1,matplotlib
"numpy.isclose(a=numpy.float64, b=float)",1,matplotlib
numpy.generic.ravel(numpy.float64),1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=str)",1,matplotlib
"numpy.testing._private.utils.assert_array_almost_equal(x=list[float], y=numpy.ndarray)",1,matplotlib
"numpy.asarray(a=list[tuple[numpy.int64, float]], dtype=Type[builtins.float])",1,matplotlib
"numpy.ma.core.filled(a=numpy.ma.core.MaskedArray, fill_value=float)",1,matplotlib
"numpy.lituple[int, numpy.ndarray].index_tricks.RClass[tuple[int, numpy.ndarray]]",1,xarray
"numpy.ndarray[slilist[float]e[NoneType, NoneType, NoneType]] = list[float]",1,matplotlib
"numpy.ndarray[tuple[sliinte[NoneType, int, NoneType], sliinte[int, NoneType, NoneType]]] = int",1,matplotlib
"numpy.asanyarray(a=list[tuple[int, int]], dtype=Type[builtins.float])",1,matplotlib
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], builtins.ellipsis]]",1,xarray
numpy.fliplr(m=numpy.ndarray),1,matplotlib
numpy.ndarray.data,1,matplotlib
"numpy.asarray(a=list[builtins.bool], dtype=Type[builtins.bool])",1,matplotlib
"numpy.asarray(a=list[tuple[numpy.float64, float]], dtype=Type[builtins.float])",1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=list[int], y=numpy.ndarray)",1,matplotlib
"numpy.hstack(tup=list[Union[list[numpy.float64], numpy.ndarray]])",1,matplotlib
"numpy.hstack(tup=list[Union[numpy.float64, numpy.ndarray]])",1,matplotlib
"numpy.ma.core.mask_or(copy=builtins.bool, m1=numpy.ndarray, m2=numpy.ndarray, shrink=builtins.bool)",1,matplotlib
"numpy.asanyarray(a=list[numpy.ndarray], dtype=Type[builtins.float])",1,matplotlib
"tuple[slice[NoneType, NoneType, NoneType]] * numpy.int64",1,xarray
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int])",1,matplotlib
-numpy.ma.core.MaskedArray,1,matplotlib
numpy.ndenumerate(arr=numpy.ma.core.MaskedArray),1,matplotlib
numpy.iterable(y=mpl_toolkits.mplot3d.axes3d.Axes3D),1,matplotlib
"numpy.lituple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]].index_tricks.MGridClass[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,matplotlib
numpy.ndarray /= numpy.float128,1,matplotlib
"numpy.ma.core.MaskedArray(data=numpy.ndarray, mask=numpy.bool_)",1,matplotlib
"numpy.asarray(a=list[numpy.int64], dtype=Type[builtins.float])",1,matplotlib
"builtins.str.find(numpy.str_, numpy.str_)",1,xarray
numpy.float64 > numpy.ma.core.MaskedArray,1,matplotlib
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",1,matplotlib
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.uint8])",1,matplotlib
"builtins.str.find(numpy.str_, numpy.str_, int)",1,xarray
"numpy.ndarray[slibuiltins.boole[int, int, NoneType]] = builtins.bool",1,matplotlib
"numpy.ndarray[slibuiltins.boole[numpy.int64, numpy.int64, NoneType]] = builtins.bool",1,matplotlib
"numpy.lituple[slice[int, float, float], slice[int, float, float]].index_tricks.MGridClass[tuple[slice[int, float, float], slice[int, float, float]]]",1,matplotlib
numpy.iterable(y=matplotlib.ticker.MaxNLocator),1,matplotlib
numpy.iterable(y=matplotlib.axes._axes.Axes),1,matplotlib
kiwisolver.Varianumpy.float64le - numpy.float64,1,matplotlib
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType]]]",1,matplotlib
"builtins.str.rfind(numpy.str_, numpy.str_)",1,xarray
numpy.ma.core.asarray(a=list[float]),1,matplotlib
"numpy.ndarray[slice[int, numpy.int64, NoneType]]",1,matplotlib
"numpy.take(a=list[float], indices=list[int])",1,matplotlib
numpy.ndarray -= numpy.ma.core.MaskedArray,1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=list[tuple[int, int, int, int]])",1,matplotlib
numpy.array(numpy.ma.core.MaskedArray),1,matplotlib
"numpy.array(tuple[tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float]])",1,matplotlib
numpy.tensordot,1,matplotlib
numpy.ndarray.ptp(numpy.ndarray),1,matplotlib
"numpy.lituple[slice[int, int, int], slice[NoneType, int, NoneType]].index_tricks.MGridClass[tuple[slice[int, int, int], slice[NoneType, int, NoneType]]]",1,matplotlib
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ndarray, y=numpy.float64)",1,matplotlib
"numpy.array(tuple[tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float]])",1,matplotlib
"numpy.iterable(y=list[tuple[float, float, float]])",1,matplotlib
"numpy.array(numpy.ndarray, dtype=Type[builtins.float])",1,matplotlib
"numpy.ndarray.any(numpy.ndarray, axis=int)",1,matplotlib
"numpy.array(list[tuple[float, numpy.float64, numpy.float64]])",1,matplotlib
"numpy.array(list[tuple[float, int, int]])",1,matplotlib
"numpy.concatenate(list[Union[list[numpy.int64], numpy.ndarray]])",1,matplotlib
"numpy.array(list[tuple[float, Union[float, int], Union[float, int]]])",1,matplotlib
"numpy.array(tuple[tuple[float, float, float], tuple[float, float, float]])",1,matplotlib
"builtins.str.rfind(numpy.str_, numpy.str_, int)",1,xarray
"numpy.take(a=numpy.ndarray, indices=list[int])",1,matplotlib
numpy.ndarrayuiltins.numpy.ndarrayool | numpy.ndarray,1,xarray
"numpy.interp(fp=list[Union[float, int]], x=numpy.ma.core.MaskedArray, xp=list[Union[int, numpy.float64]])",1,matplotlib
"numpy.zeros(int, dtype=Type[builtins.float])",1,matplotlib
"numpy.ma.core.asarray(a=numpy.ma.core.MaskedArray, dtype=Type[numpy.float64])",1,matplotlib
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=numpy.ndarray)",1,matplotlib
"numpy.array(datetime.datetime, dtype=str)",1,matplotlib
numpy.ndarray - numpy.datetime64,1,matplotlib
numpy.iterable(y=list[list[datetime.datetime]]),1,matplotlib
"numpy.array(list[list[datetime.datetime]], dtype=str)",1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=list[float], y=numpy.ndarray)",1,matplotlib
"numpy.array(list[Union[datetime.datetime, str]], dtype=str)",1,matplotlib
numpy.isnan,1,matplotlib
"numpy.asarray(a=tuple[tuple[int, numpy.float64], tuple[int, numpy.float64], tuple[int, numpy.float64], tuple[int, numpy.float64]])",1,matplotlib
"numpy.iterable(y=tuple[datetime.datetime, datetime.datetime])",1,matplotlib
"numpy.asarray(a=tuple[datetime.datetime, datetime.datetime])",1,matplotlib
"numpy.array(list[tuple[int, int, int, int, int, int]])",1,matplotlib
"numpy.testing._private.utils.assert_allclose(actual=list[float], desired=numpy.ndarray)",1,matplotlib
numpy.asarray(a=list[numpy.datetime64]),1,matplotlib
numpy.ptp,1,matplotlib
numpy.argsort(a=numpy.ndarray),1,matplotlib
"numpy.ptp(a=numpy.ndarray, axis=int)",1,matplotlib
numpy.min_scalar_type(list[numpy.ma.core.MaskedArray]),1,matplotlib
"numpy.vectorize(otypes=list[Type[numpy.str_]], pyfunc=builtins.function)",1,xarray
numpy.interp,1,matplotlib
"numpy.interp(fp=numpy.ndarray, left=int, right=int, x=numpy.ndarray, xp=numpy.ndarray)",1,matplotlib
"numpy.generic.astype(numpy.float64, Type[builtins.int])",1,matplotlib
numpy.str_,1,xarray
numpy.ma.core.asarray(a=numpy.float64),1,matplotlib
numpy.ma.core.getmask(a=list[numpy.ma.core.MaskedArray]),1,matplotlib
"numpy.empty(dtype=tuple[int], shape=Type[builtins.int])",1,xarray
"numpy.vectorize(otypes=list[Type[builtins.int]], pyfunc=builtins.function)",1,xarray
"numpy.empty(dtype=tuple[int], shape=str)",1,xarray
numpy.float64.ndim,1,matplotlib
numpy.asarray(a=list[numpy.ma.core.MaskedArray]),1,matplotlib
"numpy.array(list[tuple[float, float]])",1,matplotlib
numpy.ma.core.asarray(a=int),1,matplotlib
numpy.linalg.norm,1,matplotlib
"builtins.str.find(numpy.str_, numpy.str_, int, int)",1,xarray
"numpy.gradient(f=numpy.ndarray, varargs=tuple[int, int])",1,matplotlib
"numpy.where(numpy.ndarray, numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray)",1,matplotlib
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int, int])",1,matplotlib
"numpy.ndarray.max(numpy.ndarray, int)",1,matplotlib
"numpy.ndarray.ptp(numpy.ndarray, int)",1,matplotlib
numpy.str_ += numpy.str_,1,xarray
numpy.str_ += str,1,xarray
numpy.ndarray % float,1,matplotlib
"numpy.slice[NoneType, NoneType, int]ytes_[slice[NoneType, NoneType, int]]",1,xarray
"numpy.slice[int, int, int]ytes_[slice[int, int, int]]",1,xarray
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int])",1,matplotlib
"numpy.str_[slice[NoneType, NoneType, int]]",1,xarray
"numpy.ma.extras.masked_all(shape=tuple[int, int])",1,matplotlib
numpy.min_scalar_type(list[NoneType]),1,matplotlib
numpy.ma.core.getmask(a=list[NoneType]),1,matplotlib
"numpy.str_[slice[int, int, int]]",1,xarray
numpy.generic.item(numpy.int16),1,matplotlib
"numpy.array(list[Union[str, tuple[int, int, int]]])",1,matplotlib
"numpy.ma.core.array(data=list[int], mask=builtins.bool)",1,matplotlib
"numpy.testing._private.utils.assert_array_equal(err_msg=str, x=tuple[float, float, float, float], y=numpy.ndarray)",1,matplotlib
numpy.bytes_,1,xarray
"numpy.array(list[int], dtype=Type[builtins.float])",1,matplotlib
numpy.ma.core.MaskedArray + numpy.float64,1,matplotlib
numpy.ma.core.MaskedArray > float,1,matplotlib
numpy.asarray(a=list[builtins.bytes]),1,xarray
"numpy.vectorize(otypes=list[Type[numpy.bytes_]], pyfunc=builtins.function)",1,xarray
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ma.core.MaskedArray, y=list[float])",1,matplotlib
numpy.numpy.bytes_ytes_ += numpy.bytes_,1,xarray
"numpy.testing._private.utils.assert_array_equal(err_msg=str, x=numpy.ndarray, y=numpy.ndarray)",1,matplotlib
numpy.builtins.bytesytes_ += builtins.bytes,1,xarray
"numpy.power(float, numpy.ma.core.MaskedArray)",1,matplotlib
numpy.ma.core.MaskedArray *= numpy.ma.core.MaskedArray,1,matplotlib
numpy.ma.core.MaskedArray /= float,1,matplotlib
"numpy.iterable(y=list[Union[str, tuple[Union[float, int], Union[float, int], Union[float, int]]]])",1,matplotlib
"numpy.array(list[Union[str, tuple[Union[float, int], Union[float, int], Union[float, int]]]])",1,matplotlib
"numpy.array(tuple[tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float]])",1,matplotlib
"numpy.array(tuple[tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float]])",1,matplotlib
"numpy.array(tuple[tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float], tuple[float, float, float]])",1,matplotlib
"numpy.ndarray.view(numpy.ndarray, Type[numpy.ma.core.MaskedArray])",1,matplotlib
"numpy.ndarray[tuple[slinumpy.ma.core.MaskedArraye[NoneType, NoneType, NoneType], slinumpy.ma.core.MaskedArraye[NoneType, NoneType, NoneType], slinumpy.ma.core.MaskedArraye[NoneType, int, NoneType]]] = numpy.ma.core.MaskedArray",1,matplotlib
"builtins.bytes.rfind(numpy.bytes_, numpy.bytes_)",1,xarray
"numpy.zeros(tuple[int, int, int], dtype=numpy.dtype)",1,matplotlib
"builtins.bytes.find(numpy.bytes_, numpy.bytes_)",1,xarray
"numpy.zeros(tuple[int, int, int], numpy.dtype)",1,matplotlib
"numpy.lituple[slice[float, float, builtins.complex], slice[float, float, builtins.complex]].index_tricks.MGridClass[tuple[slice[float, float, builtins.complex], slice[float, float, builtins.complex]]]",1,matplotlib
"numpy.ma.core.MaskedArray[tuple[builtins.ellipsis, int, NoneType]]",1,matplotlib
"numpy.ma.core.MaskedArray[tuple[builtins.ellipsis, int]]",1,matplotlib
int += numpy.ma.core.MaskedArray,1,matplotlib
numpy.ma.core.MaskedArray += numpy.ma.core.MaskedArray,1,matplotlib
numpy.ma.core.MaskedArray /= numpy.ma.core.MaskedArray,1,matplotlib
numpy.ma.core.MaskedArray *= int,1,matplotlib
"numpy.ma.core.MaskedArray[tuple[builtins.ellipsis, NoneType]]",1,matplotlib
"builtins.str.rfind(numpy.str_, numpy.str_, int, int)",1,xarray
"numpy.ma.core.MaskedArray[tuple[builtins.ellipsis, slice[NoneType, int, NoneType]]]",1,matplotlib
"numpy.where(numpy.ndarray, numpy.ndarray, numpy.ndarray)",1,matplotlib
"numpy.ndarray.view(numpy.ndarray, Type[numpy.ndarray])",1,matplotlib
"builtins.bytes.rfind(numpy.bytes_, numpy.bytes_, int)",1,xarray
"numpy.ndarray[tuple[builtins.ellipsis, int, NoneType]]",1,matplotlib
int += numpy.ndarray,1,matplotlib
numpy.ndarray /= numpy.ndarray,1,matplotlib
"builtins.bytes.rfind(numpy.bytes_, numpy.bytes_, int, int)",1,xarray
"builtins.bytes.find(numpy.bytes_, numpy.bytes_, int, int)",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[int, int, NoneType]]]",1,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,matplotlib
"builtins.bytes.find(numpy.bytes_, numpy.bytes_, int)",1,xarray
"numpy.ndarray[tuple[builtins.ellipsis, slinumpy.ndarraye[NoneType, int, NoneType]]] = numpy.ndarray",1,matplotlib
"numpy.gradient(f=numpy.ndarray, varargs=tuple[numpy.float64, numpy.float64])",1,matplotlib
"numpy.ndarray[tuple[builtins.ellipsis, int]] = int",1,matplotlib
numpy.square(numpy.ndarray),1,matplotlib
"numpy.ndarray.dot(numpy.ndarray, numpy.ndarray)",1,matplotlib
"numpy.moveaxis(a=numpy.ndarray, destination=int, source=int)",1,matplotlib
numpy.uint8 in list[numpy.uint8],1,matplotlib
"numpy.array(tuple[float, numpy.float64, float, numpy.float64], dtype=Type[builtins.float])",1,matplotlib
numpy.iterable(y=matplotlib.patches.Rectangle),1,matplotlib
numpy.isscalar(element=list[float]),1,matplotlib
numpy.int64 != str,1,matplotlib
numpy.random.lognormal,1,matplotlib
float * numpy.int64,1,matplotlib
"numpy.ndarray[slituple[numpy.float64, numpy.float64]e[NoneType, NoneType, NoneType]] = tuple[numpy.float64, numpy.float64]",1,matplotlib
numpy.array(list[numpy.int64]),1,matplotlib
numpy.ravel(a=numpy.float32),1,xarray
numpy.atleast_1d(arys=tuple[numpy.float32]),1,xarray
numpy.around(a=numpy.ndarray),1,xarray
numpy.column_stack(tup=list[list[numpy.float64]]),1,matplotlib
"numpy.append(arr=numpy.ndarray, axis=int, values=list[tuple[int, int]])",1,matplotlib
numpy.atleast_1d(arys=tuple[list[numpy.int64]]),1,matplotlib
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, size=tuple[int, int])",1,matplotlib
numpy.median,1,matplotlib
"numpy.median(a=numpy.ndarray, axis=builtins.bool, overwrite_input=int)",1,matplotlib
numpy.dtype != numpy.dtype,1,xarray
"numpy.full(dtype=Type[numpy.float64], fill_value=numpy.int64, shape=int)",1,matplotlib
numpy.ndarray * numpy.int64,1,matplotlib
"numpy.clip(a=numpy.float64, a_max=float, a_min=float)",1,matplotlib
numpy.broadcast_arrays,1,xarray
"numpy.array(list[tuple[Union[float, numpy.float64], Union[float, numpy.float64], Union[float, numpy.float64], Union[float, int, numpy.float64]]])",1,matplotlib
"numpy.asanyarray(a=list[Union[list[Union[float, int]], str]], dtype=Type[builtins.float])",1,matplotlib
"numpy.array(list[Union[list[Union[float, int]], str]])",1,matplotlib
"numpy.linspace(start=float, stop=int)",1,matplotlib
"numpy.ndarray[tuple[slituple[numpy.float64, int]e[NoneType, NoneType, NoneType], int]] = tuple[numpy.float64, int]",1,matplotlib
numpy.isscalar(element=xarray.core.indexing.LazilyVectorizedIndexedArray),1,xarray
numpy.cumsum,1,matplotlib
numpy.isreal(x=float),1,matplotlib
"numpy.cumsum(a=numpy.ndarray, axis=numpy.dtype, dtype=int)",1,matplotlib
numpy.ma.core.masked_invalid(a=float),1,matplotlib
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, numpy.ndarray])",1,xarray
numpy.vstack(tup=tuple[numpy.ndarray]),1,matplotlib
numpy.isscalar(element=xarray.core.indexing.LazilyOuterIndexedArray),1,xarray
"numpy.random.mtrand.RandomState.lognormal(numpy.random.mtrand.RandomState, mean=tuple[int, int], sigma=float, size=float)",1,matplotlib
"numpy.isscalar(element=tuple[int, int])",1,matplotlib
"numpy.ravel(a=list[Union[NoneType, float]])",1,matplotlib
builtins.builtin_function_or_methoduiltins.function != builtins.builtin_function_or_method,1,matplotlib
"numpy.array(list[int], dtype=Type[numpy.float64])",1,matplotlib
numpy.float64 %= numpy.float64,1,matplotlib
numpy.amin(a=list[float]),1,matplotlib
numpy.atleast_3d(arys=tuple[list]),1,matplotlib
"numpy.asarray(a=tuple[tuple[numpy.int64, int], tuple[numpy.int64, int]], dtype=Type[builtins.float])",1,matplotlib
"numpy.asarray(a=tuple[tuple[int, int], tuple[int, int]], dtype=Type[builtins.float])",1,matplotlib
numpy.amax(a=list[int]),1,matplotlib
numpy.amin(a=list[int]),1,matplotlib
"numpy.asarray(a=tuple[tuple[numpy.float64, int], tuple[numpy.float64, int]], dtype=Type[builtins.float])",1,matplotlib
"numpy.isscalar(element=tuple[numpy.ndarray, numpy.ndarray])",1,matplotlib
numpy.isscalar(element=list[list[int]]),1,matplotlib
"numpy.reshape(a=list[int], newshape=int)",1,matplotlib
"numpy.array(tuple[float, float, float])",1,matplotlib
"numpy.size(a=list[Union[builtins.range, list]])",1,matplotlib
"numpy.asarray(a=list[Union[builtins.range, list]])",1,matplotlib
numpy.ndim(a=list),1,matplotlib
"numpy.iterable(y=list[Union[float, numpy.float64]])",1,matplotlib
numpy.numpy.bool_ool_ & numpy.bool_,1,xarray
"numpy.size(a=tuple[numpy.ndarray, numpy.ndarray])",1,matplotlib
"numpy.asarray(a=tuple[tuple[numpy.float64, numpy.int64], tuple[numpy.float64, numpy.int64]], dtype=Type[builtins.float])",1,matplotlib
numpy.ravel(a=list[int]),1,matplotlib
"numpy.dtype in tuple[str, Type[builtins.str]]",1,xarray
"numpy.array(list[Union[numpy.float64, numpy.int64]])",1,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.percentile(a=numpy.ndarray, q=list)",1,matplotlib
numpy.asarray(a=list[list[float]]),1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=tuple[numpy.float64, numpy.float64], y=tuple[numpy.float64, numpy.float64])",1,matplotlib
"numpy.timedelta64(numpy.ndarray, str)",1,xarray
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int, int])",1,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.maximum(float, numpy.ndarray)",1,matplotlib
"numpy.array(list[float], dtype=str)",1,xarray
"numpy.asarray(a=tuple[tuple[numpy.int64, numpy.int64], tuple[numpy.int64, numpy.int64]], dtype=Type[builtins.float])",1,matplotlib
"numpy.ndarray == tuple[numpy.float64, numpy.float64, numpy.float64, int]",1,matplotlib
"numpy.asanyarray(a=list[list[Union[float, int, int]]], dtype=Type[builtins.float])",1,matplotlib
"numpy.asanyarray(a=list[list[Union[float, int]]], dtype=Type[builtins.float])",1,matplotlib
"numpy.array(list[Union[float, str]])",1,matplotlib
numpy.array(float),1,matplotlib
"numpy.histogram_bin_edges(a=numpy.ndarray, bins=numpy.ndarray, range=tuple[numpy.float64, numpy.float64], weights=NoneType)",1,matplotlib
numpy.atleast_1d(arys=tuple[tuple[int]]),1,xarray
numpy.isscalar(element=list[list[datetime.datetime]]),1,matplotlib
"numpy.sum(a=numpy.ndarray, axis=tuple[int])",1,xarray
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int64])",1,matplotlib
numpy.ndarray == numpy.int64,1,matplotlib
numpy.size(a=list[list]),1,matplotlib
numpy.asarray(a=list[list]),1,matplotlib
"numpy.histogram(a=numpy.ndarray, bins=int, range=NoneType, weights=NoneType)",1,matplotlib
numpy.isscalar(element=list[list]),1,matplotlib
"numpy.histogram(a=numpy.ndarray, bins=numpy.ndarray, range=NoneType, weights=NoneType)",1,matplotlib
numpy.int64 -= int,1,matplotlib
"numpy.asarray(a=list[Union[float, numpy.float64]])",1,matplotlib
"numpy.array(tuple[tuple[float, int, int], tuple[float, int, int]])",1,matplotlib
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, int, NoneType], int]] = numpy.float64",1,matplotlib
float += numpy.ndarray,1,matplotlib
numpy.asarray(a=list[list[datetime.datetime]]),1,matplotlib
numpy.size(a=list[list[datetime.datetime]]),1,matplotlib
numpy.isnan(list[float]),1,matplotlib
numpy.iterable(y=list[datetime.timedelta]),1,matplotlib
"numpy.asarray(a=list[tuple[Union[numpy.float64, numpy.ndarray], int]])",1,matplotlib
numpy.ndarray += numpy.ndarray,1,xarray
numpy.isnan(list[numpy.float64]),1,matplotlib
"numpy.histogram(a=numpy.ndarray, bins=int, range=tuple[numpy.float64, numpy.float64], weights=NoneType)",1,matplotlib
numpy.size(a=list),1,matplotlib
numpy.isscalar(element=list),1,matplotlib
numpy.ndarray.cumsum,1,matplotlib
"numpy.histogram(a=list, bins=int, range=NoneType, weights=NoneType)",1,matplotlib
"numpy.ndarray.cumsum(numpy.ndarray, axis=int)",1,matplotlib
"numpy.array(tuple[int, float, int])",1,matplotlib
int == numpy.float64,1,matplotlib
"numpy.histogram_bin_edges(a=numpy.ndarray, bins=int, range=tuple[numpy.float64, numpy.float64], weights=NoneType)",1,matplotlib
"numpy.histogram(a=numpy.ndarray, bins=numpy.ndarray, weights=NoneType)",1,matplotlib
numpy.asarray(a=list[list[numpy.float64]]),1,matplotlib
"numpy.array(list[tuple[numpy.float64, numpy.float64, numpy.float64, float]])",1,matplotlib
numpy.ndarray.transpose,1,xarray
"numpy.ndarray[tuple[slice[int, int, int], builtins.ellipsis]]",1,xarray
"numpy.meshgrid(xi=tuple[list[numpy.float64], numpy.ndarray])",1,matplotlib
numpy.histogram2d,1,matplotlib
"numpy.histogram2d(bins=NoneType, normed=NoneType, range=builtins.bool, weights=int, x=numpy.ndarray, y=numpy.ndarray)",1,matplotlib
numpy.dtype != Type[builtins.object],1,xarray
"numpy.array(list[tuple[Union[float, numpy.float64], Union[float, numpy.float64], Union[float, numpy.float64], Union[float, int]]])",1,matplotlib
numpy.ma.extras.column_stack(x=list[numpy.ma.core.MaskedArray]),1,matplotlib
"numpy.asanyarray(a=numpy.ma.core.MaskedArray, dtype=Type[builtins.float])",1,matplotlib
numpy.ma.core.getmask(a=numpy.ndarray),1,matplotlib
numpy.sign(int),1,xarray
"numpy.ma.core.array(data=numpy.ma.core.MaskedArray, mask=numpy.ndarray)",1,matplotlib
"numpy.asanyarray(a=list[int], dtype=Type[builtins.float])",1,matplotlib
"numpy.asanyarray(a=int, dtype=Type[builtins.float])",1,matplotlib
numpy.asanyarray(a=list[str]),1,matplotlib
"numpy.asarray(a=xarray.core.indexing.LazilyVectorizedIndexedArray, dtype=NoneType)",1,xarray
"numpy.iterable(y=list[tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64]])",1,matplotlib
numpy.min_scalar_type(numpy.ndarray),1,matplotlib
"numpy.ndarray[tuple[slice[int, int, int], numpy.ndarray]]",1,xarray
"numpy.asarray(a=str, dtype=numpy.dtype)",1,xarray
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int, int, int])",1,xarray
numpy.min_scalar_type(list[float]),1,matplotlib
numpy.ma.core.getmask(a=list[float]),1,matplotlib
"numpy.ones(dtype=Type[builtins.float], shape=tuple[int, int])",1,matplotlib
"numpy.concatenate(list[Union[list[numpy.float64], numpy.ndarray]])",1,matplotlib
numpy.ma.core.asarray(a=list[int]),1,matplotlib
numpy.isscalar(element=str),1,xarray
"numpy.asarray(a=list[tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64]])",1,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.meshgrid(xi=tuple[numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray])",1,matplotlib
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.interp(fp=numpy.ma.core.MaskedArray, x=numpy.ndarray, xp=numpy.ndarray)",1,matplotlib
"numpy.array(numpy.ma.core.MaskedArray, copy=builtins.bool, subok=builtins.bool)",1,matplotlib
numpy.array(str),1,xarray
"numpy.reshape(a=builtins.range, newshape=int)",1,matplotlib
"numpy.asarray(a=xarray.backends.scipy_.ScipyArrayWrapper, dtype=NoneType)",1,xarray
"numpy.array(tuple[int, int, int, float])",1,matplotlib
numpy.ma.core.MaskedArray == numpy.ma.core.MaskedArray,1,matplotlib
*numpy.ndenumerate,1,matplotlib
numpy.ma.mask_or,1,matplotlib
numpy.ndarray | numpy.bool_,1,xarray
"numpy.asanyarray(a=list[tuple[float, float, float]], dtype=Type[builtins.float])",1,matplotlib
numpy.amin(a=tuple[numpy.float64]),1,matplotlib
numpy.float64 + numpy.int64,1,matplotlib
numpy.asanyarray(a=float),1,matplotlib
"numpy.power(float, numpy.ndarray)",1,matplotlib
"numpy.array(tuple[float, int, float, float], dtype=Type[builtins.float])",1,matplotlib
"numpy.allclose(a=numpy.float64, b=float)",1,matplotlib
"numpy.asanyarray(a=list[tuple[int, int]])",1,matplotlib
"numpy.array(numpy.ndarray, copy=str, order=builtins.bool)",1,xarray
"numpy.array(tuple[int, int, float, int], dtype=Type[builtins.float])",1,matplotlib
"numpy.array(tuple[int, float, int, float], dtype=Type[builtins.float])",1,matplotlib
"numpy.array(tuple[numpy.float64, numpy.float64])",1,matplotlib
"numpy.ma.core.arctan2(a=numpy.ndarray, b=numpy.ndarray)",1,matplotlib
"numpy.atleast_1d(arys=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,matplotlib
numpy.atleast_1d(arys=tuple[builtins.bool]),1,matplotlib
"numpy.random.mtrand.RandomState.random_sample(numpy.random.mtrand.RandomState, tuple[int, int])",1,matplotlib
numpy.int64 == numpy.ndarray,1,matplotlib
numpy.int64 - list[int],1,matplotlib
numpy.int64 + list[int],1,matplotlib
numpy.int64 + numpy.ndarray,1,matplotlib
numpy.float64 - list[int],1,matplotlib
numpy.float64 + list[int],1,matplotlib
"numpy.array(list[builtins.bytes], dtype=Type[builtins.bytes])",1,xarray
numpy.atleast_1d(arys=tuple[list[datetime.datetime]]),1,matplotlib
numpy.float64 * numpy.int64,1,matplotlib
numpy.array(builtins.range),1,matplotlib
numpy.uint8 + numpy.float64,1,matplotlib
numpy.iterable(y=numpy.uint8),1,matplotlib
"numpy.array(tuple[numpy.uint8, numpy.int64, numpy.float64, numpy.int64], dtype=Type[builtins.float])",1,matplotlib
numpy.uint8 == int,1,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
numpy.isscalar(element=xarray.core.indexing.CopyOnWriteArray),1,xarray
"numpy.array(tuple[tuple[int], tuple[numpy.float64]])",1,matplotlib
"numpy.dot(numpy.ndarray, list[numpy.float64])",1,matplotlib
"numpy.asanyarray(a=list[tuple[numpy.float64, numpy.float64]], dtype=Type[builtins.float])",1,matplotlib
numpy.iterable(y=matplotlib.axes._subplots.Axes3DSubplot),1,matplotlib
"numpy.asarray(a=tuple[numpy.float64, numpy.float64], dtype=Type[builtins.float])",1,matplotlib
"numpy.array(tuple[numpy.ndarray, numpy.ndarray])",1,matplotlib
"numpy.array(tuple[tuple[numpy.float64], tuple[int]])",1,matplotlib
"numpy.array(tuple[tuple[int], tuple[int]])",1,matplotlib
"numpy.generic.astype(numpy.timedelta64, str)",1,matplotlib
"numpy.array(tuple[tuple[numpy.float64], tuple[int, float]])",1,matplotlib
"numpy.array(tuple[tuple[int, int], tuple[numpy.float64]])",1,matplotlib
"numpy.array(tuple[tuple[numpy.float64, numpy.float64], tuple[numpy.float64, numpy.float64]])",1,matplotlib
numpy.ndarray.ctypes,1,matplotlib
"numpy.ones(shape=tuple[int, int, int])",1,matplotlib
numpy.core._internal._ctypes.data,1,matplotlib
numpy.float64[numpy.bool_] = float,1,matplotlib
numpy.datetime64.tzinfo,1,matplotlib
"builtins.bytes.decode(encoding=str, self=numpy.bytes_)",1,xarray
numpy.shape(a=list[numpy.int64]),1,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int64])",1,xarray
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.complexfloating])",1,xarray
"numpy.ma.core.masked_greater(value=int, x=numpy.ndarray)",1,matplotlib
numpy.size(a=list[list[int]]),1,matplotlib
numpy.ndim(a=list[int]),1,matplotlib
"numpy.size(a=list[Union[float, int]])",1,matplotlib
numpy.ravel(a=numpy.float64),1,xarray
Type[numpy.datetime64].__mro__,1,matplotlib
"numpy.bincount(list[int], minlength=int)",1,matplotlib
numpy.ravel(a=NoneType),1,xarray
"numpy.bincount(list, minlength=int)",1,matplotlib
"numpy.array_equal(a1=NoneType, a2=NoneType)",1,matplotlib
"numpy.array(list[tuple[Union[int, numpy.float64], Union[float, int]]])",1,matplotlib
"numpy.ndarray + list[Union[float, int]]",1,matplotlib
"numpy.ma.core.reshape(a=numpy.ndarray, new_shape=tuple[int, int])",1,matplotlib
"numpy.ma.core.MaskedArray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], int]]",1,matplotlib
"numpy.array(tuple[int, int, int, int])",1,matplotlib
numpy.array(list[list[numpy.int64]]),1,matplotlib
"numpy.amin(a=tuple[numpy.float64, numpy.float64])",1,matplotlib
numpy.iterable(y=list[list]),1,matplotlib
numpy.amax(a=tuple[numpy.int64]),1,matplotlib
"numpy.asarray(a=list[tuple[numpy.float64, numpy.int64]], dtype=Type[builtins.float])",1,matplotlib
numpy.amin(a=tuple[numpy.int64]),1,matplotlib
numpy.empty(int),1,matplotlib
"numpy.asarray(a=tuple[tuple[int, int], tuple[int, int], tuple[int, int], tuple[int, int]], dtype=Type[builtins.float])",1,matplotlib
numpy.ndarray[numpy.ndarray] = str,1,xarray
numpy.ndarray[builtins.ellipsis] = numpy.ndarray,1,xarray
"numpy.asarray(a=tuple[tuple[numpy.int64, numpy.int64], tuple[numpy.float64, numpy.int64]], dtype=Type[builtins.float])",1,matplotlib
"numpy.ndarray[tuple[int, slinumpy.ndarraye[int, int, int]]] = numpy.ndarray",1,matplotlib
"numpy.dtype(str, metadata=dict)",1,xarray
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, int, int]]]",1,matplotlib
"numpy.ndarray[tuple[int, slice[int, int, int]]]",1,matplotlib
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, int, NoneType]]] = numpy.ndarray",1,matplotlib
numpy.asarray(a=numpy.int64),1,matplotlib
"numpy.amin(a=tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64])",1,matplotlib
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.bytes_])",1,xarray
"numpy.amax(a=tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64])",1,matplotlib
"numpy.empty(tuple[int], dtype=Type[builtins.float])",1,matplotlib
"numpy.empty(tuple[int, int], dtype=Type[builtins.float])",1,matplotlib
numpy.prod(a=tuple),1,xarray
"numpy.concatenate(list[list[Union[float, int]]])",1,xarray
"numpy.iterable(y=list[list[Union[float, int, int]]])",1,matplotlib
"numpy.ndarray[tuple[int, builtins.ellipsis]] = numpy.ndarray",1,xarray
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int, int])",1,matplotlib
numpy.array(NoneType),1,matplotlib
numpy.cumsum(a=list[int]),1,xarray
"numpy.asarray(a=list[tuple[numpy.int64, numpy.float64]], dtype=Type[builtins.float])",1,matplotlib
"numpy.amax(a=tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64])",1,matplotlib
numpy.ceil(float),1,xarray
"numpy.array(tuple[str, str, str, str])",1,matplotlib
"numpy.iterable(y=tuple[str, tuple[int, int, int], NoneType, tuple[int, int, int, float]])",1,matplotlib
"numpy.ndarray[tuple[int, slinumpy.ndarraye[int, NoneType, NoneType]]] = numpy.ndarray",1,matplotlib
"numpy.ndarray[tuple[int, slice[int, NoneType, int]]]",1,matplotlib
"numpy.asarray(a=tuple[float, float, float, float])",1,matplotlib
numpy.iterable(y=matplotlib.text.Text),1,matplotlib
"numpy.asarray(a=tuple[numpy.float64, numpy.float64, numpy.float64])",1,matplotlib
numpy.float64 + numpy.float32,1,matplotlib
"numpy.asarray(a=list[int], dtype=Type[numpy.float32])",1,matplotlib
numpy.ndarray / numpy.float32,1,matplotlib
float * numpy.float32,1,matplotlib
int + numpy.float32,1,matplotlib
numpy.size(a=list[builtins.range]),1,matplotlib
float + numpy.float32,1,matplotlib
numpy.asarray(a=list[builtins.range]),1,matplotlib
"numpy.histogram_bin_edges(a=numpy.ndarray, bins=int, range=tuple[numpy.int64, numpy.int64], weights=NoneType)",1,matplotlib
"numpy.diff(a=tuple[numpy.float64, numpy.float64])",1,matplotlib
tuple[int] * numpy.int64,1,xarray
numpy.ceil(numpy.float64),1,xarray
numpy.ndarray[numpy.int64],1,xarray
"numpy.nextafter(int, float)",1,matplotlib
numpy.float32 > int,1,matplotlib
numpy.ndarray[numpy.ndarray] = numpy.float64,1,xarray
numpy.iscomplexobj(x=numpy.ndarray),1,matplotlib
"numpy.empty(tuple[int], numpy.dtype)",1,xarray
"numpy.array(list[builtins.bytes], dtype=Type[builtins.object])",1,xarray
"numpy.fft.fftfreq(d=float, n=int)",1,matplotlib
"numpy.asarray(a=xarray.core.indexing.LazilyOuterIndexedArray, dtype=NoneType)",1,xarray
"numpy.arange(float, float, int)",1,matplotlib
numpy.flipud(m=numpy.ndarray),1,matplotlib
numpy.ndarray |= numpy.ndarray,1,matplotlib
"numpy.atleast_1d(arys=tuple[tuple[float, float]])",1,matplotlib
"numpy.copyto(numpy.ndarray, int, where=numpy.ndarray)",1,matplotlib
pandas.core.indexes.timedeltas.TimedeltaIndex / numpy.timedelta64,1,xarray
"numpy.ndarray[tuple[slice[int, numpy.int64, NoneType], slice[NoneType, NoneType, NoneType]]]",1,matplotlib
"numpy.array(list[Union[float, int]], Type[builtins.float])",1,matplotlib
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, size=tuple[int, int])",1,xarray
"numpy.isclose(a=numpy.ndarray, atol=float, b=numpy.ndarray, equal_nan=builtins.bool, rtol=float)",1,xarray
numpy.asarray(a=list[matplotlib.axes._subplots.AxesSubplot]),1,matplotlib
numpy.builtins.bytesytes_ in builtins.bytes,1,xarray
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.bytes_])",1,xarray
"numpy.issubdtype(arg1=Type[numpy.int16], arg2=Type[numpy.float32])",1,skimage
"numpy.ndarray[slilist[str]e[NoneType, NoneType, NoneType]] = list[str]",1,pandas
"numpy.issubdtype(arg1=Type[numpy.int32], arg2=Type[numpy.int8])",1,skimage
numpy.dtype(Type[numpy.int32]),1,skimage
numpy.obj2sctype(rep=Type[numpy.int32]),1,skimage
"numpy.empty(tuple[int], Type[numpy.uint32])",1,skimage
numpy.dtype(Type[numpy.uint32]),1,skimage
numpy.obj2sctype(rep=Type[numpy.uint32]),1,skimage
"numpy.issubdtype(arg1=Type[numpy.float64], arg2=Type[numpy.int16])",1,skimage
"numpy.issubdtype(arg1=Type[numpy.float32], arg2=Type[numpy.uint8])",1,skimage
Type[numpy.ndarray] != Type[numpy.ndarray],1,pandas
"numpy.multiply(numpy.ndarray, int, dtype=Type[numpy.float32])",1,skimage
"numpy.issubdtype(arg1=Type[numpy.float32], arg2=Type[numpy.uint16])",1,skimage
numpy.float32 > float,1,skimage
"numpy.issubdtype(arg1=Type[numpy.float32], arg2=Type[numpy.int16])",1,skimage
"numpy.empty(tuple[int], Type[numpy.uint16])",1,skimage
"numpy.ndarray.view(numpy.ndarray, Type[numpy.int16])",1,skimage
numpy.bool8,1,skimage
"numpy.asarray(a=list[Union[int, numpy.float64]], dtype=Type[builtins.float])",1,matplotlib
numpy.ndarray - list[numpy.float64],1,matplotlib
"numpy.asarray(a=tuple[float, int, float, int], dtype=Type[builtins.float])",1,matplotlib
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, desired=list[list[Union[float, int, int]]], err_msg=numpy.ndarray)",1,matplotlib
"numpy.array(list[tuple[int, int, int, int]])",1,matplotlib
"numpy.array(list[tuple[Union[float, int], Union[float, int], Union[float, int], Union[float, int]]])",1,matplotlib
"numpy.asarray(a=tuple[float, float, float, float], dtype=Type[builtins.float])",1,matplotlib
"numpy.asarray(a=numpy.float64, dtype=Type[builtins.float])",1,matplotlib
numpy.column_stack(tup=list[numpy.float64]),1,matplotlib
"numpy.iterable(y=list[Union[int, numpy.float64]])",1,matplotlib
float *= numpy.float64,1,matplotlib
"numpy.array(list[tuple[Union[float, numpy.float64], Union[float, numpy.float64], Union[float, numpy.float64], Union[float, numpy.float64]]])",1,matplotlib
"numpy.asanyarray(a=list[Union[float, numpy.float64]])",1,matplotlib
"numpy.asarray(a=list[tuple[int, int]])",1,matplotlib
"numpy.asarray(a=tuple[tuple[int, int], tuple[int, int], tuple[int, int], tuple[int, int]])",1,matplotlib
numpy.array(list[list]),1,matplotlib
"numpy.add(numpy.ndarray, float, dtype=Type[numpy.float32])",1,skimage
"numpy.issubdtype(arg1=Type[numpy.int16], arg2=Type[numpy.int16])",1,skimage
"numpy.ones(dtype=Type[builtins.bool], shape=int)",1,skimage
"numpy.empty(tuple[int], Type[numpy.uint8])",1,skimage
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=tuple[int, int, int, int])",1,skimage
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=tuple[tuple[int, int], tuple[int, int], tuple[int, int]])",1,skimage
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=numpy.ndarray)",1,skimage
"numpy.ndarray[sliinte[numpy.int64, NoneType, NoneType]] = int",1,skimage
"numpy.ndarray[sliinte[NoneType, numpy.int64, NoneType]] = int",1,skimage
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=tuple[int], pad_width=tuple[tuple[int, int], tuple[int, int]])",1,skimage
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=tuple[tuple[int, int]])",1,skimage
"numpy.pad(array=list[list[int]], kwargs=dict, mode=str, pad_width=tuple[int, int])",1,skimage
"numpy.may_share_memory(numpy.ndarray, numpy.ndarray)",1,skimage
numpy.may_share_memory,1,skimage
numpy.alltrue(args=tuple[list[numpy.ndarray]]),1,skimage
numpy.transpose(a=tuple[numpy.ndarray]),1,skimage
numpy.ndim(a=list[pandas._libs.tslibs.timestamps.Timestamp]),1,pandas
numpy.ceil(int),1,skimage
numpy.ndarray in list[int],1,skimage
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=tuple[tuple[int, int, int], tuple[int, int, int]])",1,skimage
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=tuple[tuple[tuple[int], tuple[int], tuple[int]], tuple[tuple[int], tuple[int], tuple[int]]])",1,skimage
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=tuple[tuple[int, int, int], tuple[int, int]])",1,skimage
numpy.void,1,pandas
"numpy.issubdtype(arg1=Type[numpy.int8], arg2=Type[numpy.uint16])",1,skimage
"numpy.issubdtype(arg1=Type[numpy.int8], arg2=Type[numpy.float64])",1,skimage
"numpy.issubdtype(arg1=Type[numpy.int8], arg2=Type[numpy.int16])",1,skimage
"numpy.issubdtype(arg1=Type[numpy.uint16], arg2=Type[numpy.uint16])",1,skimage
"numpy.issubdtype(arg1=Type[numpy.uint16], arg2=Type[numpy.float32])",1,skimage
"numpy.issubdtype(arg1=Type[numpy.uint16], arg2=Type[numpy.int16])",1,skimage
"numpy.testing._private.utils.assert_equal(actual=numpy.float32, desired=int)",1,skimage
"numpy.ndarray[slilist[numpy.float64]e[NoneType, NoneType, NoneType]] = list[numpy.float64]",1,pandas
"numpy.issubdtype(arg1=Type[numpy.uint8], arg2=Type[numpy.float32])",1,skimage
"numpy.can_cast(int, numpy.dtype)",1,pandas
"numpy.pad(array=numpy.ndarray, pad_width=str)",1,skimage
"numpy.pad(array=numpy.ndarray, pad_width=tuple[tuple[float, int], tuple[int, int]])",1,skimage
"numpy.empty(tuple[int], dtype=str, order=numpy.dtype)",1,pandas
"numpy.pad(array=numpy.ndarray, pad_width=builtins.complex)",1,skimage
"numpy.asarray(a=tuple[int, float, int, float], dtype=Type[builtins.float])",1,matplotlib
"numpy.asarray(a=tuple[int, int, int, int], dtype=Type[builtins.float])",1,matplotlib
"numpy.arange(str, str, dtype=str)",1,matplotlib
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, list[float], list[numpy.float64], numpy.ndarray, NoneType])",1,matplotlib
"numpy.unique(ar=numpy.ndarray, return_index=builtins.bool, return_inverse=builtins.bool)",1,matplotlib
"numpy.empty(list[int], dtype=Type[numpy.float64])",1,matplotlib
numpy.amax(a=numpy.ma.core.MaskedArray),1,matplotlib
"numpy.dot(numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray)",1,matplotlib
numpy.obj2sctype(rep=str),1,skimage
numpy.obj2sctype(rep=Type[builtins.float]),1,skimage
numpy.ma.core.MaskedArray - numpy.float64,1,matplotlib
"numpy.ndarray[tuple[numpy.int32, numpy.int32]] = numpy.float64",1,matplotlib
"numpy.concatenate(list[Union[list[float], numpy.ndarray]])",1,matplotlib
"numpy.ndarray[tuple[numpy.int32, numpy.int32]]",1,matplotlib
"numpy.ones(dtype=Type[numpy.float64], shape=int)",1,matplotlib
"numpy.array(list[int], dtype=Type[numpy.int32])",1,matplotlib
"numpy.array(list[float], dtype=Type[numpy.float64])",1,matplotlib
"numpy.testing._private.utils.assert_array_almost_equal(x=numpy.ma.core.MaskedArray, y=numpy.ma.core.MaskedArray)",1,matplotlib
numpy.dtype,1,skimage
numpy.ndarray + builtins.bool,1,skimage
"numpy.ma.testutils.assert_array_almost_equal(x=numpy.ma.core.MaskedArray, y=numpy.ndarray)",1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=list[list[builtins.bool]])",1,matplotlib
"numpy.array(tuple[int, int], dtype=Type[numpy.uint32])",1,skimage
"numpy.array(tuple[int, int], dtype=Type[numpy.ulonglong])",1,skimage
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, int]]",1,matplotlib
"numpy.empty(list[int], dtype=numpy.dtype)",1,matplotlib
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], int, slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType, NoneType]]",1,matplotlib
"numpy.array(tuple[int, int], dtype=Type[numpy.uint64])",1,skimage
numpy.unique,1,matplotlib
"numpy.meshgrid(xi=tuple[numpy.ndarray, list[float]])",1,matplotlib
"numpy.array(tuple[int, int], dtype=Type[numpy.uint16])",1,skimage
"numpy.array(tuple[int, int], dtype=Type[numpy.uint8])",1,skimage
"numpy.maximum(numpy.ndarray, float)",1,matplotlib
"numpy.bincount(numpy.ndarray, minlength=numpy.ndarray, weights=int)",1,matplotlib
"numpy.array(tuple[int, int], dtype=Type[numpy.float64])",1,skimage
"numpy.array(tuple[int, int], dtype=Type[numpy.float16])",1,skimage
"numpy.issubdtype(arg1=Type[numpy.float32], arg2=Type[numpy.float32])",1,skimage
"numpy.issubdtype(arg1=Type[numpy.float32], arg2=Type[numpy.float64])",1,skimage
"numpy.issubdtype(arg1=Type[numpy.int16], arg2=Type[numpy.float64])",1,skimage
"numpy.ma.core.asarray(a=list[Union[float, int]])",1,matplotlib
"numpy.around(a=numpy.ndarray, decimals=int)",1,matplotlib
"numpy.in1d(ar1=numpy.ndarray, ar2=numpy.ndarray)",1,matplotlib
"numpy.dstack(tup=tuple[numpy.ndarray, numpy.ndarray, numpy.ma.core.MaskedArray])",1,matplotlib
"numpy.lexsort(tuple[numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray])",1,matplotlib
"numpy.array(numpy.ndarray, copy=str, order=builtins.bool)",1,matplotlib
numpy.isfinite(numpy.ma.core.MaskedArray),1,matplotlib
"numpy.ma.core.array(data=list[int], mask=list[int])",1,matplotlib
numpy.ma.core.MaskedArray & numpy.ma.core.MaskedArray,1,matplotlib
numpy.arctan(int),1,matplotlib
"numpy.eye(M=int, N=int)",1,matplotlib
numpy.ndarray *= numpy.int16,1,skimage
"numpy.ma.core.asarray(a=matplotlib.tests.test_units.Quantity, dtype=Type[builtins.float])",1,matplotlib
numpy.iterable(y=list[matplotlib.testing.jpl_units.Duration.Duration]),1,matplotlib
numpy.iterable(y=matplotlib.testing.jpl_units.Duration.Duration),1,matplotlib
"numpy.ma.core.filled(a=numpy.ma.core.MaskedArray, fill_value=builtins.bool)",1,matplotlib
numpy.ndarray[numpy.ma.intore.MaskedArray] = int,1,matplotlib
"numpy.arange(numpy.int64, dtype=Type[numpy.int32])",1,matplotlib
numpy.logical_not(numpy.ndarray),1,matplotlib
int += numpy.int64,1,matplotlib
numpy.int64 += numpy.int64,1,matplotlib
"numpy.outer(a=numpy.ndarray, b=numpy.ndarray)",1,matplotlib
numpy.ndarray *= numpy.uint16,1,skimage
numpy.ma.core.MaskedArray.all(self=numpy.ma.core.MaskedArray),1,matplotlib
int == numpy.ndarray,1,matplotlib
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]] = numpy.ndarray",1,matplotlib
numpy.sum(a=numpy.ma.core.MaskedArray),1,matplotlib
numpy.ma.core.MaskedArray / numpy.ma.core.MaskedArray,1,matplotlib
"numpy.ma.core.MaskedArray(data=list[Union[float, numpy.float64]], mask=numpy.ndarray)",1,matplotlib
"numpy.ndarray[tuple[numpy.ndarray, sliinte[NoneType, NoneType, NoneType]]] = int",1,matplotlib
"numpy.where(numpy.ndarray, int, numpy.ndarray)",1,matplotlib
numpy.ndarray[int] = builtins.bool,1,matplotlib
numpy.ndarray & numpy.ma.core.MaskedArray,1,matplotlib
"numpy.round_(a=tuple[float, float])",1,skimage
"numpy.ndarray[slilist[pandas._libs.tslibs.period.Period]e[NoneType, NoneType, NoneType]] = list[pandas._libs.tslibs.period.Period]",1,pandas
"numpy.asarray(a=tuple[numpy.float64, numpy.float64])",1,skimage
numpy.ndarray + numpy.uint64,1,pandas
"numpy.ndarray += list[Union[int, numpy.float64]]",1,skimage
"numpy.ndarray[slilist[numpy.timedelta64]e[NoneType, NoneType, NoneType]] = list[numpy.timedelta64]",1,pandas
"numpy.array(list[Union[numpy.uint64, numpy.uint8]])",1,skimage
numpy.ndarray += list[int],1,skimage
numpy.ndarray += list[numpy.float64],1,skimage
numpy.invert(list[builtins.bool]),1,skimage
numpy.dtype == pandas.core.dtypes.dtypes.CategoricalDtype,1,pandas
int * numpy.uint64,1,skimage
"numpy.asarray(a=list[float], dtype=Type[numpy.float64])",1,pandas
"numpy.dtype(list[Union[int, str]])",1,pandas
numpy.iterable(y=int),1,pandas
"numpy.tile(A=tuple[int, int], reps=list[int])",1,skimage
"numpy.ndarray.max(numpy.ndarray, NoneType)",1,pandas
"numpy.hypot(int, int)",1,skimage
"numpy.array(list, dtype=Type[builtins.int])",1,skimage
numpy.uint64 * numpy.uint64,1,pandas
numpy.absolute(int),1,pandas
"numpy.round_(a=tuple[int, int, int])",1,skimage
"numpy.empty(tuple[int, int, int, int], dtype=Type[numpy.float64])",1,skimage
numpy.ndarray += numpy.uint64,1,pandas
"numpy.ndarray[tuple[slituple[float, float]e[int, int, NoneType], int]] = tuple[float, float]",1,skimage
"numpy.ndarray[slilist[int]e[NoneType, NoneType, NoneType]] = list[int]",1,pandas
"numpy.ndarray[slilist[pandas._libs.tslibs.timestamps.Timestamp]e[NoneType, NoneType, NoneType]] = list[pandas._libs.tslibs.timestamps.Timestamp]",1,pandas
numpy.dtype == pandas.core.dtypes.dtypes.DatetimeTZDtype,1,pandas
numpy.dstack(tup=list[numpy.ndarray]),1,skimage
"numpy.array(list[Union[NoneType, float]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[numpy.datetime64]e[NoneType, NoneType, NoneType]] = list[numpy.datetime64]",1,pandas
"numpy.testing._private.utils.assert_array_equal(x=tuple[int, int, int], y=tuple[int, int, int])",1,skimage
numpy.dtype(list[str]),1,pandas
numpy.fabs(int),1,pandas
numpy.absolute(numpy.uint64),1,pandas
numpy.ndarray.ptp(numpy.ndarray),1,skimage
"numpy.arange(int, numpy.int64, int, dtype=Type[numpy.int64])",1,pandas
numpy.isfinite(numpy.float64),1,pandas
numpy.modf(numpy.float64),1,pandas
numpy.log10(numpy.float64),1,pandas
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, numpy.int64])",1,skimage
"numpy.ndarray.min(numpy.ndarray, NoneType)",1,pandas
"numpy.ndarray.var(numpy.ndarray, axis=int)",1,skimage
numpy.linalg.matrix_rank(M=numpy.ndarray),1,skimage
"numpy.eye(N=int, dtype=Type[numpy.float64])",1,skimage
"numpy.ones(dtype=Type[numpy.float64], shape=tuple[int])",1,skimage
"numpy.asarray(a=pandas.core.arrays.interval.IntervalArray, dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType], numpy.int64]] = numpy.ndarray",1,skimage
"numpy.ndarray[tuple[numpy.ndarray, sliinte[NoneType, NoneType, NoneType]]] = int",1,skimage
"numpy.ndarray[slilist[float]e[NoneType, NoneType, NoneType]] = list[float]",1,pandas
"numpy.tri(N=int, dtype=Type[numpy.int32])",1,skimage
numpy.tri,1,skimage
numpy.int32 == int,1,skimage
"numpy.asanyarray(a=tuple[int, int])",1,skimage
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.series.Series, side=str)",1,pandas
"numpy.empty_like(numpy.ndarray, Type[numpy.float64])",1,skimage
numpy.ndim(a=pandas._libs.interval.Interval),1,pandas
"numpy.around(a=numpy.float64, decimals=int)",1,pandas
"numpy.ndarray[tuple[int, numpy.ndarray]] = numpy.ndarray",1,skimage
"numpy.zeros(tuple[int, int], dtype=Type[numpy.bool_])",1,skimage
numpy.uint64 > numpy.float64,1,skimage
numpy.array(list[numpy.uint64]),1,skimage
float * numpy.uint64,1,skimage
"numpy.array2string(a=numpy.ndarray, separator=str)",1,skimage
numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState),1,skimage
"numpy.ndarray[tuple[int, numpy.ndarray]]",1,skimage
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
"numpy.zeros(tuple[int, numpy.int64])",1,skimage
numpy.int64 * numpy.int64,1,skimage
"Type[numpy.float64] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
numpy.dtype == pandas.core.dtypes.dtypes.IntervalDtype,1,pandas
"numpy.array(list[Union[int, numpy.int64]])",1,skimage
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.ndarray, desired=list[Union[float, int]])",1,skimage
numpy.uint64 += numpy.uint64,1,pandas
"numpy.amax(a=tuple[int, int, int, int])",1,skimage
"numpy.ndarray[tuple[int, builtins.ellipsis]] = builtins.range",1,skimage
"numpy.testing._private.utils.assert_array_equal(x=tuple[int, int], y=tuple[int, int])",1,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], int]] = numpy.ndarray",1,skimage
"numpy.round_(a=tuple[numpy.int64, numpy.int64])",1,skimage
"numpy.asarray(a=tuple[numpy.int64, numpy.int64], dtype=Type[builtins.float])",1,skimage
numpy.atleast_1d(arys=tuple[int]),1,skimage
"numpy.asarray(a=tuple[numpy.int64, numpy.int64])",1,skimage
"numpy.array(list[list[Union[int, numpy.int64]]])",1,skimage
"numpy.array(tuple[int, int, int, int, int, int, int])",1,skimage
"numpy.array(list[Union[NoneType, float, pandas._libs.tslibs.nattype.NaTType, str]], dtype=Type[builtins.object])",1,pandas
"numpy.lituple[slice[int, int, int], slice[int, int, int], slice[int, int, int], slice[int, int, int], slice[int, int, int], slice[int, int, int]].index_tricks.MGridClass[tuple[slice[int, int, int], slice[int, int, int], slice[int, int, int], slice[int, int, int], slice[int, int, int], slice[int, int, int]]]",1,skimage
"numpy.ndarray.take(numpy.ndarray, numpy.ndarray, mode=str)",1,pandas
"numpy.lituple[slice[int, int, int], slice[int, int, int], slice[int, int, int], slice[int, int, int]].index_tricks.MGridClass[tuple[slice[int, int, int], slice[int, int, int], slice[int, int, int], slice[int, int, int]]]",1,skimage
"numpy.lituple[slice[int, int, int], slice[int, int, int]].index_tricks.MGridClass[tuple[slice[int, int, int], slice[int, int, int]]]",1,skimage
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, numpy.int64, numpy.int64])",1,skimage
numpy.indices,1,skimage
"numpy.indices(dimensions=tuple[numpy.int64, numpy.int64], dtype=Type[numpy.float64])",1,skimage
"numpy.around(a=tuple[numpy.float64, numpy.float64])",1,skimage
"numpy.atleast_1d(arys=tuple[tuple[int, int]])",1,skimage
"numpy.round_(a=tuple[numpy.int64, numpy.int64, numpy.int64])",1,skimage
numpy.ones(shape=numpy.ndarray),1,skimage
"numpy.transpose(a=numpy.ndarray, axes=tuple[int, int, int])",1,skimage
"numpy.maximum(int, numpy.ndarray)",1,skimage
"numpy.testing._private.utils.assert_equal(actual=tuple[int, int, int, int], desired=numpy.ndarray)",1,skimage
"numpy.ndarray[slilist[pandas._libs.tslibs.timedeltas.Timedelta]e[NoneType, NoneType, NoneType]] = list[pandas._libs.tslibs.timedeltas.Timedelta]",1,pandas
"numpy.testing._private.utils.assert_equal(actual=tuple[int, int, int], desired=numpy.ndarray)",1,skimage
"numpy.testing._private.utils.assert_equal(actual=tuple[int, int], desired=numpy.ndarray)",1,skimage
"numpy.ndarray[tuple[sliinte[int, int, NoneType], sliinte[int, int, NoneType], builtins.ellipsis]] = int",1,skimage
"numpy.array(list[builtins.complex], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64], dtype=Type[builtins.float])",1,skimage
numpy.ndarray[builtins.ellipsis] = numpy.ndarray,1,pandas
"numpy.asarray(a=tuple[numpy.int64, numpy.int64, numpy.int64], dtype=Type[builtins.float])",1,skimage
"numpy.ndarray[slilist[Union[str, tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[str, tuple[int, int]]]",1,pandas
"numpy.ndarray[slilist[Union[tuple[int, int, int], tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[tuple[int, int, int], tuple[int, int]]]",1,pandas
"numpy.ndarray[slilist[tuple[int, int]]e[NoneType, NoneType, NoneType]] = list[tuple[int, int]]",1,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.floating])",1,pandas
"numpy.empty(list[Union[int, numpy.int64]], dtype=Type[numpy.float64])",1,skimage
"numpy.eye(M=int, N=int)",1,skimage
"numpy.arange(float, int, int, dtype=Type[builtins.int])",1,skimage
numpy.array_equal,1,skimage
numpy.hanning(M=int),1,skimage
numpy.hamming(M=int),1,skimage
numpy.fft.fftfreq(n=int),1,skimage
numpy.deg2rad(list[int]),1,skimage
"numpy.lituple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]].index_tricks.MGridClass[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,skimage
numpy.std(a=numpy.ndarray),1,skimage
"numpy.array(pandas.core.arrays.datetimes.DatetimeArray, copy=numpy.dtype, dtype=builtins.bool)",1,pandas
numpy.interp,1,skimage
"numpy.arange(int, float, int, dtype=Type[builtins.int])",1,skimage
numpy.bitwise_xor,1,pandas
numpy.ndarray.__getitem__,1,pandas
"numpy.array(list[list[Union[int, numpy.float64]]])",1,skimage
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.complex128])",1,pandas
"numpy.linspace(endpoint=builtins.bool, num=int, start=int, stop=float)",1,skimage
"numpy.ndarray[sliliste[NoneType, NoneType, NoneType]] = list",1,pandas
"numpy.asarray(a=list[int], dtype=numpy.dtype)",1,skimage
"numpy.searchsorted(a=numpy.ndarray, v=numpy.float64)",1,skimage
"numpy.issubdtype(arg1=Type[numpy.object_], arg2=Type[numpy.integer])",1,pandas
"numpy.random.mtrand.RandomState.uniform(numpy.random.mtrand.RandomState, int, int, int)",1,skimage
"numpy.asarray(a=tuple[int, int], dtype=numpy.dtype)",1,skimage
"numpy.zeros(tuple[int], dtype=numpy.dtype)",1,skimage
"numpy.asarray(a=tuple[numpy.float64, numpy.float64], dtype=Type[builtins.float])",1,skimage
numpy.int64 %= int,1,skimage
numpy.ndarray[list[numpy.int64]],1,skimage
"numpy.array_equal(a1=list[int], a2=numpy.ndarray)",1,pandas
numpy.s_,1,skimage
"numpy.lituple[slice[int, int, NoneType], slice[int, int, NoneType]].index_tricks.IndexExpression[tuple[slice[int, int, NoneType], slice[int, int, NoneType]]]",1,skimage
numpy.ndarray.std,1,skimage
numpy.unravel_index,1,skimage
"numpy.array(pandas.core.indexes.numeric.Int64Index, copy=builtins.bool)",1,pandas
"numpy.allclose(a=numpy.ndarray, b=numpy.float64, rtol=float)",1,skimage
"numpy.arange(int, int, NoneType)",1,skimage
"numpy.ndarray.mean(numpy.ndarray, axis=tuple[int, int, int])",1,skimage
"numpy.clip(a=numpy.ndarray, a_max=numpy.ndarray, a_min=numpy.ndarray)",1,matplotlib
numpy.ndarray & numpy.ndarray,1,xarray
"numpy.vstack(tup=tuple[list[Union[float, numpy.float64]], numpy.ndarray, list[Union[float, numpy.float64]], list[Union[float, numpy.float64]]])",1,matplotlib
"numpy.vstack(tup=tuple[list[Union[float, numpy.float64]], numpy.ndarray, list[Union[float, numpy.float64]]])",1,matplotlib
"numpy.linspace(num=int, start=float, stop=int)",1,matplotlib
"numpy.isfinite(tuple[float, float])",1,matplotlib
numpy.asarray(a=matplotlib.ft2font.FT2Image),1,matplotlib
numpy.prod(a=tuple),1,matplotlib
"numpy.ndarray.reshape(numpy.ndarray, tuple)",1,matplotlib
numpy.arange(numpy.int64),1,matplotlib
"numpy.prod(a=tuple[int, int])",1,matplotlib
"numpy.full(fill_value=float, shape=int)",1,matplotlib
numpy.core.records.fromrecords,1,matplotlib
numpy.recarray.dtype,1,matplotlib
numpy.rec,1,matplotlib
"numpy.core.records.fromrecords(names=list[str], recList=list[list[datetime.datetime]])",1,matplotlib
numpy.recarray[str],1,matplotlib
"numpy.ndarray[tuple[tuple[int, int, int, int], slice[NoneType, NoneType, NoneType]]]",1,matplotlib
"numpy.ndarray[tuple[tuple[int, int, int, int, int], slice[NoneType, NoneType, NoneType]]]",1,matplotlib
"numpy.ndarray[tuple[int, builtins.ellipsis]]",1,xarray
numpy.concatenate(list),1,matplotlib
"numpy.clip(a=numpy.ndarray, a_max=numpy.ma.core.MaskedConstant, a_min=numpy.ma.core.MaskedConstant, out=numpy.ndarray)",1,matplotlib
numpy.iterable(y=numpy.ma.core.MaskedConstant),1,matplotlib
numpy.asarray(a=list[numpy.ma.core.MaskedConstant]),1,matplotlib
numpy.min_scalar_type(list[numpy.ma.core.MaskedConstant]),1,matplotlib
numpy.ma.core.getmask(a=list[numpy.ma.core.MaskedConstant]),1,matplotlib
numpy.ndarray.tobytes(numpy.ndarray),1,matplotlib
numpy.atleast_3d(arys=tuple[list[numpy.ndarray]]),1,matplotlib
"numpy.asarray(a=list[Union[list[Union[int, numpy.float64]], numpy.ndarray]], dtype=Type[builtins.float])",1,matplotlib
"numpy.full_like(a=list[numpy.float64], fill_value=float)",1,matplotlib
"numpy.array(list[list[Union[float, float, int, numpy.float64]]], Type[builtins.float])",1,matplotlib
"numpy.asanyarray(a=list[tuple[float, numpy.float64]], dtype=Type[builtins.float])",1,matplotlib
numpy.iterable(y=matplotlib.axis.YAxis),1,matplotlib
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, list, float, numpy.ndarray, NoneType])",1,matplotlib
"numpy.iterable(y=list[tuple[int, tuple[int, int]]])",1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=list[datetime.datetime], y=list[datetime.datetime])",1,matplotlib
numpy.void,1,xarray
"numpy.ones(dtype=Type[numpy.int32], shape=list[int])",1,matplotlib
numpy.inexact,1,xarray
numpy.atleast_2d(arys=tuple[list[numpy.ndarray]]),1,matplotlib
numpy.ndarray /= numpy.int64,1,matplotlib
"numpy.append(arr=list[numpy.float64], values=numpy.ndarray)",1,matplotlib
"numpy.array(tuple[int, int, float, numpy.float64], dtype=Type[builtins.float])",1,matplotlib
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=list[list[list[list[int]]]])",1,skimage
"numpy.inner(numpy.ndarray, numpy.ndarray)",1,matplotlib
numpy.ndarray -= list[int],1,matplotlib
numpy.ndarray *= list[int],1,matplotlib
"numpy.asarray(a=tuple[numpy.uint8, numpy.uint8, numpy.uint8], dtype=Type[numpy.uint8])",1,matplotlib
"numpy.array(tuple[float, int, float, int], dtype=Type[builtins.float])",1,matplotlib
numpy.array(list[list[list[list[int]]]]),1,skimage
numpy.array(list[builtins.bool]),1,matplotlib
"numpy.asanyarray(a=tuple[tuple[int, float], tuple[float, float]])",1,matplotlib
numpy.dtype == str,1,matplotlib
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=list[builtins.bool])",1,matplotlib
numpy.atleast_2d(arys=tuple[list[list[int]]]),1,matplotlib
"numpy.testing._private.utils.assert_array_almost_equal(decimal=int, x=numpy.ndarray, y=list[float])",1,matplotlib
"numpy.power(float, float)",1,matplotlib
"numpy.zeros_like(a=numpy.ndarray, dtype=Type[builtins.bool])",1,xarray
"numpy.ndarray.mean(numpy.ndarray, NoneType, keepdims=builtins.bool)",1,matplotlib
"numpy.ndarray.mean(numpy.ndarray, int, keepdims=builtins.bool)",1,matplotlib
"numpy.array(float, dtype=numpy.dtype)",1,matplotlib
"numpy.cov(bias=int, m=numpy.ndarray, y=numpy.ndarray)",1,matplotlib
numpy.apply_along_axis,1,matplotlib
"numpy.apply_along_axis(arr=int, axis=numpy.ndarray, func1d=builtins.function)",1,matplotlib
numpy.ndarray.argmax,1,matplotlib
numpy.atleast_2d(arys=tuple[list]),1,matplotlib
numpy.character,1,xarray
"numpy.testing._private.utils.assert_array_almost_equal_nulp(x=numpy.ndarray, y=numpy.ndarray)",1,matplotlib
"numpy.ndarray[sliinte[numpy.int64, numpy.int64, NoneType]] = int",1,matplotlib
"numpy.roll(a=numpy.ndarray, shift=int)",1,matplotlib
"numpy.testing._private.utils.assert_allclose(actual=numpy.float64, atol=float, desired=float)",1,matplotlib
numpy.isreal(x=numpy.float64),1,matplotlib
numpy.ma.core.MaskedConstant - numpy.float64,1,matplotlib
numpy.asarray(a=numpy.bool_),1,xarray
numpy.isnat(numpy.ndarray),1,xarray
numpy.int32(int),1,matplotlib
"numpy.vectorize(otypes=list[Type[builtins.bool]], pyfunc=builtins.function)",1,xarray
"numpy.ones(shape=tuple[int, int])",1,matplotlib
builtins.str.upper(self=numpy.str_),1,xarray
"numpy.ones(dtype=Type[numpy.uint8], shape=tuple[int, int])",1,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[NoneType, NoneType, NoneType]]]",1,matplotlib
"numpy.zeros(tuple[int, int, int], dtype=Type[numpy.uint8])",1,matplotlib
"numpy.vectorize(otypes=list[numpy.dtype], pyfunc=builtins.function)",1,xarray
numpy.dtype == Type[numpy.uint16],1,matplotlib
numpy.asarray(a=PIL.JpegImagePlugin.JpegImageFile),1,matplotlib
numpy.asarray(a=PIL.TiffImagePlugin.TiffImageFile),1,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,matplotlib
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int, int)",1,matplotlib
numpy.ma.core.asarray(a=list[list[int]]),1,matplotlib
"numpy.asarray(a=list[Union[list[int], tuple[int, int]]], dtype=Type[builtins.float])",1,matplotlib
"numpy.ma.core.MaskedArray[tuple[numpy.int64, numpy.int64]]",1,matplotlib
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, int, NoneType]]] = numpy.ndarray",1,matplotlib
numpy.ndarray -= numpy.uint16,1,matplotlib
"numpy.generic.astype(numpy.uint16, Type[numpy.float64])",1,matplotlib
numpy.float64 > numpy.uint16,1,matplotlib
"numpy.isfinite(tuple[float, int])",1,matplotlib
numpy.str_ in str,1,xarray
"numpy.testing._private.utils.assert_allclose(actual=tuple[int, int], desired=tuple[int, int], rtol=float)",1,matplotlib
numpy.asarray(a=PIL.Image.Image),1,matplotlib
numpy.float64(x=numpy.uint16),1,matplotlib
numpy.uint16 + numpy.float64,1,matplotlib
numpy.min_scalar_type(list[numpy.uint16]),1,matplotlib
"numpy.frombuffer(builtins.bytes, str)",1,matplotlib
numpy.ma.core.getmask(a=list[numpy.uint16]),1,matplotlib
numpy.iterable(y=numpy.uint16),1,matplotlib
numpy.asarray(a=list[numpy.uint16]),1,matplotlib
numpy.float32 > numpy.float32,1,matplotlib
numpy.ndarray -= numpy.float32,1,matplotlib
numpy.ndarray /= numpy.float32,1,matplotlib
"numpy.asarray(a=list[list[Union[float, int]]], dtype=Type[builtins.float])",1,matplotlib
numpy.int64[int],1,matplotlib
str % numpy.int64,1,matplotlib
"numpy.arange(int, dtype=numpy.dtype)",1,matplotlib
"numpy.ndarray.newbyteorder(numpy.ndarray, str)",1,matplotlib
"numpy.array(list[list[Union[float, int, int]]], copy=builtins.bool, subok=builtins.bool)",1,matplotlib
"numpy.vectorize(otypes=list[Type[builtins.int]], pyfunc=builtins.builtin_function_or_method)",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=pandas.core.indexes.timedeltas.TimedeltaIndex, y=xarray.core.dataarray.DataArray)",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=pandas.core.indexes.datetimes.DatetimeIndex, y=xarray.core.dataarray.DataArray)",1,xarray
"numpy.ndarray.astype(numpy.ma.core.MaskedArray, Type[numpy.uint8])",1,matplotlib
"numpy.array(list[list[Union[float, int, int]]], dtype=Type[numpy.uint64])",1,matplotlib
numpy.float32(int),1,matplotlib
"numpy.clip(a=numpy.ndarray, a_max=numpy.float64, a_min=NoneType, out=numpy.ndarray)",1,matplotlib
"numpy.array(list[list], copy=builtins.bool, subok=builtins.bool)",1,matplotlib
numpy.ndarray // int,1,xarray
numpy.float128 - numpy.float64,1,matplotlib
"numpy.clip(a=numpy.ndarray, a_max=numpy.float128, a_min=numpy.float128, out=numpy.ndarray)",1,matplotlib
"numpy.array(list[list[builtins.bool]], dtype=Type[builtins.bool])",1,matplotlib
"numpy.clip(a=numpy.ndarray, a_max=numpy.float64, a_min=numpy.float64, out=numpy.ndarray)",1,matplotlib
"numpy.where(numpy.ndarray, numpy.float32, numpy.float32)",1,matplotlib
"numpy.array(list[list[float]], copy=builtins.bool, subok=builtins.bool)",1,matplotlib
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,matplotlib
numpy.isfinite(list[int]),1,matplotlib
"numpy.asarray(a=tuple[tuple[int, int], tuple[int, int]])",1,matplotlib
numpy.ndarray /= list[numpy.float64],1,matplotlib
"numpy.zeros(tuple[int, int, int], dtype=Type[builtins.float])",1,matplotlib
numpy.float64 == numpy.float32,1,matplotlib
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType]]]",1,matplotlib
"numpy.concatenate(tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray], axis=int)",1,matplotlib
numpy.float32(float),1,matplotlib
numpy.frombuffer,1,matplotlib
"numpy.frombuffer(numpy.ndarray, dtype=Type[numpy.uint8])",1,matplotlib
"numpy.ndarray[sliinte[NoneType, NoneType, int]] = int",1,matplotlib
"numpy.ma.core.concatenate(arrays=tuple[numpy.ndarray, numpy.ma.core.MaskedArray], axis=int)",1,matplotlib
"numpy.identity(dtype=Type[builtins.float], n=int)",1,matplotlib
"numpy.identity(dtype=Type[builtins.bool], n=int)",1,matplotlib
"numpy.ma.core.concatenate(arrays=tuple[numpy.ma.core.MaskedArray, numpy.ndarray], axis=int)",1,matplotlib
numpy.deg2rad(numpy.int64),1,matplotlib
"numpy.asarray(a=list[tuple[float, int]], dtype=Type[builtins.float])",1,matplotlib
numpy.zeros(numpy.int64),1,skimage
"numpy.testing._private.utils.assert_allclose(actual=list[Union[float, int]], desired=numpy.ndarray)",1,matplotlib
numpy.log10(numpy.int64),1,matplotlib
"numpy.asarray(a=tuple[int, float])",1,matplotlib
"numpy.testing._private.utils.assert_almost_equal(actual=list[numpy.float64], desired=list[float])",1,matplotlib
float in numpy.ndarray,1,matplotlib
numpy.all(a=list[builtins.bool]),1,matplotlib
numpy.log10(list[numpy.float64]),1,matplotlib
numpy.float64 in list,1,matplotlib
list[numpy.float64] / numpy.ndarray,1,matplotlib
numpy.float64 in list[int],1,matplotlib
"numpy.arange(int, float)",1,matplotlib
numpy.float64 in numpy.ndarray,1,matplotlib
"numpy.minimum(numpy.ndarray, numpy.ndarray)",1,matplotlib
"numpy.concatenate(tuple[numpy.ndarray, tuple[int]])",1,matplotlib
"numpy.concatenate(tuple[tuple[float], numpy.ndarray])",1,matplotlib
"numpy.testing._private.utils.assert_almost_equal(actual=list[numpy.float64], desired=numpy.ndarray)",1,matplotlib
"numpy.testing._private.utils.assert_almost_equal(actual=tuple[float, float], desired=tuple[int, int])",1,matplotlib
numpy.arange(float),1,matplotlib
numpy.bool_uiltins.numpy.bool_ool == numpy.bool_,1,matplotlib
numpy.float64 + numpy.ma.core.MaskedConstant,1,matplotlib
numpy.ma.extras.hstack(x=list[numpy.ma.core.MaskedArray]),1,matplotlib
"numpy.iterable(y=tuple[NoneType, float])",1,matplotlib
"numpy.asanyarray(a=list[list[float]], dtype=Type[builtins.float])",1,matplotlib
"numpy.ones(dtype=Type[builtins.bool], shape=tuple[int, int])",1,matplotlib
numpy.array(list[list[builtins.bool]]),1,matplotlib
"numpy.array(tuple[numpy.float64, int, numpy.float64, numpy.float64], dtype=Type[builtins.float])",1,matplotlib
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray, rtol=float)",1,matplotlib
"numpy.array(tuple[int, numpy.float64, float, numpy.float64], dtype=Type[builtins.float])",1,matplotlib
numpy.atleast_1d(arys=tuple[datetime.datetime]),1,matplotlib
numpy.atleast_1d(arys=tuple[numpy.float64]),1,matplotlib
numpy.float64.shape,1,matplotlib
"numpy.testing._private.utils.assert_almost_equal(actual=float, desired=float)",1,matplotlib
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, desired=numpy.ndarray, rtol=float)",1,matplotlib
"numpy.concatenate(tuple[numpy.ndarray, tuple[float]])",1,matplotlib
"numpy.concatenate(tuple[tuple[int], numpy.ndarray])",1,matplotlib
numpy.abs,1,matplotlib
Type[numpy.float32] in dict,1,skimage
numpy.int32 >= int,1,matplotlib
"numpy.ndarray[sliinte[int, int, NoneType]] = int",1,matplotlib
"numpy.array(list[list[int]], dtype=str, order=Type[numpy.int32])",1,matplotlib
"numpy.asarray(a=list[Union[float, int]], dtype=Type[numpy.float64])",1,matplotlib
"numpy.asarray(a=list[int], dtype=Type[builtins.bool])",1,matplotlib
"numpy.ndarray[tuple[builtins.ellipsis, int]] = numpy.int64",1,skimage
"numpy.ndarray[tuple[builtins.ellipsis, int]] = numpy.float32",1,skimage
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[builtins.bool], p=tuple[int, int], size=list[int])",1,skimage
"numpy.ndarray.reshape(numpy.ndarray, int, int, int, int)",1,skimage
"numpy.ndarray[tuple[builtins.ellipsis, NoneType, slice[NoneType, NoneType, NoneType]]]",1,matplotlib
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
numpy.ndarray - numpy.int64,1,matplotlib
"numpy.empty(list[Union[int, numpy.int64]], dtype=numpy.dtype)",1,matplotlib
numpy.zeros(list[int]),1,matplotlib
"numpy.array(numpy.ndarray, dtype=str, order=Type[numpy.int32])",1,matplotlib
numpy.ones(shape=numpy.int64),1,skimage
float ** numpy.int64,1,matplotlib
"numpy.flatiter[slice[int, NoneType, int]]",1,matplotlib
numpy.float64 /= int,1,matplotlib
numpy.int64 += int,1,matplotlib
numpy.int64 / numpy.float64,1,matplotlib
"numpy.asarray(a=list[str], dtype=Type[builtins.float])",1,matplotlib
float -= numpy.float64,1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=list[list[float]])",1,matplotlib
numpy.vstack(tup=list[numpy.flatiter]),1,matplotlib
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int]]",1,matplotlib
"numpy.testing._private.utils.assert_allclose(actual=tuple[numpy.uint8, numpy.uint8, numpy.uint8, numpy.uint8, numpy.uint8], desired=list[numpy.uint8])",1,matplotlib
"numpy.array(tuple[float, float, int, float], dtype=Type[builtins.float])",1,matplotlib
"numpy.ma.core.array(data=list[Union[NoneType, int]], dtype=Type[builtins.float], mask=list[builtins.bool])",1,matplotlib
"numpy.delete(arr=numpy.ndarray, obj=int)",1,matplotlib
"numpy.append(arr=numpy.ndarray, values=float)",1,matplotlib
"numpy.asarray(a=list, dtype=Type[numpy.float64])",1,matplotlib
numpy.ma.core.is_masked(x=numpy.ma.core.MaskedConstant),1,matplotlib
"numpy.broadcast_to(array=int, shape=int)",1,matplotlib
"numpy.asarray(a=list[tuple[int, Union[float, int]]], dtype=Type[builtins.float])",1,matplotlib
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, int, numpy.ndarray)",1,skimage
"numpy.array(numpy.ma.core.MaskedArray, dtype=numpy.dtype)",1,matplotlib
numpy.float64(x=numpy.float32),1,matplotlib
numpy.float32 + numpy.float64,1,matplotlib
numpy.dtype == Type[numpy.float64],1,matplotlib
numpy.float64 > numpy.float32,1,matplotlib
numpy.min_scalar_type(list[numpy.float32]),1,matplotlib
numpy.ma.core.getmask(a=list[numpy.float32]),1,matplotlib
numpy.iterable(y=numpy.float32),1,matplotlib
numpy.asarray(a=list[numpy.float32]),1,matplotlib
"numpy.atleast_1d(arys=tuple[numpy.ndarray, numpy.ndarray])",1,matplotlib
"numpy.atleast_1d(arys=tuple[list[int], list[int], list[int], list[int]])",1,matplotlib
numpy.ndarrayuiltins.complex * numpy.ndarray,1,matplotlib
"numpy.atleast_1d(arys=tuple[list[int], list[int], numpy.ndarray, numpy.ndarray])",1,matplotlib
numpy.ndarray -= numpy.ndarray,1,matplotlib
"numpy.asanyarray(a=list[tuple[float, int]], dtype=Type[builtins.float])",1,matplotlib
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",1,matplotlib
"numpy.ndarray[tuple[sliinte[numpy.int64, NoneType, numpy.int64], sliinte[numpy.int64, NoneType, numpy.int64], sliinte[numpy.int64, NoneType, numpy.int64]]] = int",1,skimage
numpy.ndarray += numpy.int64,1,matplotlib
numpy.c_,1,matplotlib
numpy.iterable(y=matplotlib.collections.LineCollection),1,matplotlib
"numpy.take(a=list[int], indices=list[int])",1,matplotlib
"numpy.lituple[numpy.ndarray, numpy.ndarray].index_tricks.CClass[tuple[numpy.ndarray, numpy.ndarray]]",1,matplotlib
"numpy.lib.stride_tricks.as_strided(shape=tuple[int, numpy.int64], strides=tuple[numpy.int64, numpy.int64], x=numpy.ndarray)",1,skimage
numpy.ma.core.asarray(a=numpy.int64),1,matplotlib
numpy.iterable(y=matplotlib.contour.ClabelText),1,matplotlib
"numpy.array(tuple[int], dtype=numpy.dtype)",1,skimage
"builtins.ndarray.__setitem__(key=tuple[int, int], self=numpy.ndarray, value=int)",1,matplotlib
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], int, int]]",1,skimage
numpy.ma.core.MaskedArray ** int,1,matplotlib
"numpy.lib.stride_tricks.as_strided(shape=tuple[numpy.int64, int], strides=tuple[numpy.int64, numpy.int64], x=numpy.ndarray)",1,skimage
numpy.ndarray.__getitem__,1,matplotlib
numpy.shape(a=numpy.ma.core.MaskedArray),1,matplotlib
tuple[int] * numpy.ndarray,1,skimage
"numpy.asanyarray(a=list[tuple[int, float]], dtype=Type[builtins.float])",1,matplotlib
"numpy.atleast_1d(arys=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,matplotlib
"numpy.atleast_1d(arys=tuple[numpy.ndarray, numpy.ndarray, numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray])",1,matplotlib
"numpy.array(tuple[list[numpy.float64], list[numpy.float64]])",1,matplotlib
numpy.blackman(M=int),1,matplotlib
"numpy.frombuffer(builtins.bytes, dtype=str)",1,matplotlib
"numpy.iterable(y=tuple[int, int, float, float])",1,matplotlib
"numpy.ndarray[slifloate[NoneType, NoneType, int]] = float",1,matplotlib
numpy.asanyarray(a=list[list[float]]),1,matplotlib
"numpy.iterable(y=tuple[float, int])",1,matplotlib
"numpy.ndarray.reshape(numpy.ndarray, int, int, int)",1,matplotlib
"numpy.asarray(a=list[int], dtype=Type[numpy.uint8])",1,matplotlib
"numpy.searchsorted(a=numpy.ndarray, v=numpy.float64)",1,matplotlib
numpy.ma.core.sqrt(a=numpy.ma.core.MaskedArray),1,matplotlib
"numpy.ma.core.MaskedArray[slice[NoneType, int, NoneType]]",1,matplotlib
numpy.ma.core.MaskedArray[numpy.int64],1,matplotlib
"numpy.broadcast_to(array=list[float], shape=int)",1,matplotlib
"numpy.zeros(tuple[numpy.int64, numpy.int64])",1,matplotlib
"numpy.asarray(a=list[tuple[Union[float, int], int]], dtype=Type[builtins.float])",1,matplotlib
"numpy.logspace(start=int, stop=int)",1,matplotlib
"numpy.ma.core.masked_invalid(a=int, copy=builtins.bool)",1,matplotlib
"numpy.tile(A=tuple[float, numpy.float64], reps=tuple[int, int])",1,matplotlib
"numpy.testing._private.utils.assert_equal(actual=list[numpy.ndarray], desired=numpy.ndarray)",1,matplotlib
"numpy.testing._private.utils.assert_equal(actual=list[float], desired=numpy.ndarray)",1,matplotlib
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1,skimage
"numpy.array(tuple[list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[numpy.float64], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[numpy.float64], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]]])",1,matplotlib
numpy.tan(float),1,matplotlib
"numpy.broadcast_to(array=list[int], shape=int)",1,matplotlib
"numpy.array(tuple[list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[float], list[float], list[float], list[float], list[float], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], list[Union[float, numpy.float64]], numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, list[Union[float, numpy.float64]], list[numpy.float64], list[numpy.float64], numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, list[Union[float, numpy.float64]]])",1,matplotlib
numpy.isfinite,1,matplotlib
"numpy.ma.core.asarray(a=numpy.ma.core.MaskedArray, dtype=Type[builtins.float])",1,matplotlib
"numpy.array(list[tuple[Union[int, numpy.float64], Union[int, numpy.float64]]])",1,matplotlib
numpy.asanyarray(a=int),1,matplotlib
Type[numpy.ndarray] == Type[numpy.ndarray],1,matplotlib
numpy.ma.core.MaskedArray / numpy.float64,1,matplotlib
numpy.ma.core.MaskedArray * int,1,matplotlib
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, numpy.float64, list[numpy.float64], numpy.ndarray, NoneType])",1,matplotlib
int += numpy.int64,1,xarray
"numpy.arange(numpy.int64, numpy.int64, NoneType, dtype=str)",1,pandas
"numpy.add(xarray.core.dataarray.DataArray, int, dtype=Type[numpy.float64])",1,xarray
numpy.cos(int),1,xarray
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int])",1,xarray
"numpy.maximum(xarray.core.dataset.Dataset, int)",1,xarray
"numpy.maximum(xarray.core.variable.Variable, numpy.ndarray)",1,xarray
"numpy.maximum(xarray.core.dataarray.DataArray, numpy.ndarray)",1,xarray
numpy.asarray(a=xarray.core.dataset.Dataset),1,xarray
"numpy.maximum(xarray.core.dataset.Dataset, xarray.core.variable.Variable)",1,xarray
numpy.float32(list[int]),1,xarray
"numpy.maximum(xarray.core.dataarray.DataArray, xarray.core.dataset.Dataset)",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=numpy.float64, y=float)",1,xarray
numpy.frexp(xarray.core.variable.Variable),1,xarray
"numpy.maximum(numpy.ndarray, numpy.float64)",1,xarray
"numpy.maximum(numpy.float64, numpy.ndarray)",1,xarray
"numpy.maximum(xarray.core.dataarray.DataArray, xarray.core.groupby.DataArrayGroupBy)",1,xarray
"numpy.add(xarray.core.dataset.Dataset, xarray.core.dataset.Dataset)",1,xarray
xarray.core.varianumpy.str_le.Varianumpy.str_le == numpy.str_,1,xarray
numpy.asarray(a=numpy.ma.core.MaskedArray),1,xarray
numpy.ma.core.MaskedArray * numpy.float64,1,xarray
numpy.empty_like(xarray.core.variable.IndexVariable),1,xarray
numpy.float64 > float,1,xarray
numpy.float64 + int,1,xarray
"numpy.prod(a=tuple[int, int, int, int])",1,xarray
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, size=tuple[int, int, int])",1,xarray
"numpy.linspace(num=numpy.int64, start=float, stop=float)",1,xarray
"numpy.minimum(numpy.ndarray, int)",1,xarray
"numpy.minimum(xarray.core.dataarray.DataArray, int)",1,xarray
numpy.sort(a=numpy.ndarray),1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], int, builtins.ellipsis]]",1,xarray
xarray.core.varianumpy.datetime64le.Varianumpy.datetime64le == numpy.datetime64,1,xarray
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]]",1,xarray
numpy.int64 += int,1,xarray
numpy.int64 > numpy.int64,1,xarray
numpy.float64 + numpy.ma.core.MaskedArray,1,xarray
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.dataarray.DataArray, y=pandas.core.series.Series)",1,xarray
"numpy.add(numpy.ndarray, dask.array.core.Array)",1,xarray
"numpy.logaddexp2(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
"numpy.add(dask.array.core.Array, numpy.ndarray)",1,xarray
numpy.ceil(numpy.ndarray),1,xarray
numpy.floor(xarray.core.dataarray.DataArray),1,xarray
"numpy.fmax(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
"numpy.fmin(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
"numpy.fmod(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
numpy.frexp(xarray.core.dataarray.DataArray),1,xarray
"numpy.hypot(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
numpy.iscomplex(x=xarray.core.dataarray.DataArray),1,xarray
numpy.isfinite(xarray.core.dataarray.DataArray),1,xarray
numpy.isinf(xarray.core.dataarray.DataArray),1,xarray
"numpy.ldexp(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
numpy.log(xarray.core.dataarray.DataArray),1,xarray
numpy.log10(xarray.core.dataarray.DataArray),1,xarray
numpy.log1p(xarray.core.dataarray.DataArray),1,xarray
numpy.log2(xarray.core.dataarray.DataArray),1,xarray
numpy.fabs(xarray.core.dataarray.DataArray),1,xarray
numpy.expm1(xarray.core.dataarray.DataArray),1,xarray
numpy.exp(xarray.core.dataarray.DataArray),1,xarray
numpy.arctan(xarray.core.dataarray.DataArray),1,xarray
numpy.angle(z=numpy.ndarray),1,xarray
numpy.angle(z=xarray.core.dataarray.DataArray),1,xarray
numpy.arccos(xarray.core.dataarray.DataArray),1,xarray
numpy.arccosh(xarray.core.dataarray.DataArray),1,xarray
numpy.arcsin(xarray.core.dataarray.DataArray),1,xarray
numpy.arcsinh(xarray.core.dataarray.DataArray),1,xarray
"numpy.arctan2(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
numpy.degrees(xarray.core.dataarray.DataArray),1,xarray
numpy.arctanh(xarray.core.dataarray.DataArray),1,xarray
numpy.ceil(xarray.core.dataarray.DataArray),1,xarray
numpy.conjugate(xarray.core.dataarray.DataArray),1,xarray
"numpy.copysign(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
numpy.cosh(xarray.core.dataarray.DataArray),1,xarray
numpy.deg2rad(xarray.core.dataarray.DataArray),1,xarray
numpy.float64 > int,1,xarray
numpy.float64 += builtins.bool,1,xarray
numpy.ndarray - float,1,xarray
numpy.float64 > xarray.core.dataarray.DataArray,1,xarray
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,xarray
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType]]]",1,xarray
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType], int]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, slice[NoneType, NoneType, NoneType]]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, slice[NoneType, int, NoneType]]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], numpy.ndarray, numpy.ndarray]]",1,xarray
numpy.asarray(a=pandas._libs.tslibs.timedeltas.Timedelta),1,xarray
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[NoneType, NoneType, int], builtins.ellipsis]]",1,xarray
numpy.ravel(a=xarray.core.variable.IndexVariable),1,xarray
numpy.ravel(a=xarray.core.variable.Variable),1,xarray
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.stack(arrays=list[xarray.core.dataarray.DataArray], axis=int)",1,xarray
"numpy.stack(arrays=list[float], axis=int)",1,xarray
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,xarray
"numpy.ndarray[tuple[numpy.ndarray, slice[NoneType, int, NoneType], numpy.ndarray]]",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=numpy.float64, y=numpy.float64)",1,xarray
"numpy.array(list[Union[int, numpy.float64]])",1,xarray
"numpy.ndarray[tuple[int, slice[int, int, NoneType], slice[int, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[int, int, int], slice[int, int, int]]]",1,xarray
numpy.int64 + float,1,xarray
numpy.float64 / int,1,xarray
int != numpy.int64,1,xarray
"numpy.ndarray[tuple[numpy.ndarray, slice[int, int, NoneType]]]",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=numpy.float64)",1,xarray
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, slice[NoneType, int, NoneType]]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], int]]",1,xarray
"numpy.moveaxis(a=numpy.ndarray, destination=list[int], source=builtins.range)",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, slice[NoneType, NoneType, NoneType]]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, slice[NoneType, int, NoneType]]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType], numpy.ndarray]]",1,xarray
"numpy.moveaxis(a=numpy.float64, destination=numpy.ndarray, source=numpy.ndarray)",1,xarray
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], int, builtins.ellipsis]] = numpy.ndarray",1,xarray
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[NoneType, NoneType, NoneType], slice[int, int, NoneType], builtins.ellipsis]]",1,xarray
numpy.atleast_1d(arys=tuple[pandas.core.indexes.datetimes.DatetimeIndex]),1,xarray
numpy.array(list[numpy.int64]),1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[int, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=list[float], y=numpy.ndarray)",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=pandas.core.indexes.datetimes.DatetimeIndex, y=numpy.ndarray)",1,xarray
numpy.ndarray >= numpy.ndarray,1,xarray
numpy.array(list[list[float]]),1,xarray
numpy.ravel(a=list[numpy.float64]),1,xarray
"numpy.percentile(a=numpy.ndarray, q=float)",1,xarray
"numpy.linspace(num=numpy.int64, start=int, stop=int)",1,xarray
numpy.empty_like(xarray.core.variable.Variable),1,xarray
"numpy.percentile(a=numpy.ndarray, q=int)",1,xarray
numpy.isfinite(numpy.ndarray),1,xarray
numpy.float64 > numpy.float64,1,xarray
-numpy.float64,1,xarray
numpy.float64 > numpy.int64,1,xarray
numpy.ndarray != numpy.ndarray,1,xarray
numpy.flatiter[int],1,xarray
numpy.atleast_1d(arys=tuple[list[float]]),1,xarray
"numpy.ndarray[tuple[list[int], slice[NoneType, NoneType, NoneType], list[int]]]",1,xarray
numpy.atleast_1d(arys=tuple[list[str]]),1,xarray
numpy.amin(a=numpy.datetime64),1,xarray
numpy.amax(a=numpy.datetime64),1,xarray
numpy.atleast_1d(arys=tuple[str]),1,xarray
numpy.broadcast(int),1,xarray
"numpy.broadcast(list[int], list[int])",1,xarray
"numpy.moveaxis(a=int, destination=tuple, source=tuple)",1,xarray
"numpy.issubdtype(arg1=Type[numpy.generic], arg2=Type[numpy.datetime64])",1,xarray
"numpy.ndarray[tuple[list[int], list[int], slice[NoneType, NoneType, NoneType]]]",1,xarray
"numpy.array(list[list[Union[float, int]]], dtype=Type[builtins.float])",1,xarray
numpy.stack(arrays=list[numpy.ndarray]),1,xarray
"numpy.issubdtype(arg1=Type[numpy.generic], arg2=Type[numpy.floating])",1,xarray
"numpy.issubdtype(arg1=Type[numpy.generic], arg2=Type[numpy.integer])",1,xarray
"numpy.issubdtype(arg1=Type[numpy.generic], arg2=Type[numpy.timedelta64])",1,xarray
"numpy.logaddexp(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
"numpy.logical_and(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
numpy.iterable(y=datetime.timedelta),1,matplotlib
"numpy.ndarray[tuple[list[int], list[int]]]",1,xarray
numpy.asarray(a=list[numpy.int32]),1,xarray
"numpy.testing._private.utils.assert_equal(actual=numpy.float64, desired=float)",1,xarray
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=numpy.float32)",1,xarray
numpy.float32.dtype,1,xarray
numpy.isnat(dask.array.core.Array),1,xarray
"numpy.result_type(dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array)",1,xarray
"numpy.multiply(numpy.ndarray, dask.array.core.Array)",1,xarray
"numpy.subtract(numpy.ndarray, dask.array.core.Array)",1,xarray
"numpy.asarray(a=numpy.datetime64, dtype=NoneType)",1,xarray
numpy.ndarray.ravel,1,xarray
numpy.ndarray | dask.array.core.Array,1,xarray
numpy.ndarrayuiltins.complex * numpy.ndarray,1,xarray
"numpy.array(tuple[int, int, int])",1,xarray
"numpy.array_equal(a1=numpy.ndarray, a2=tuple[int, int, int])",1,xarray
"numpy.broadcast(dask.array.core.Array, str)",1,xarray
"numpy.sum(a=numpy.ndarray, axis=tuple[int], dtype=NoneType)",1,xarray
"numpy.amax(a=numpy.ndarray, axis=tuple[int, int])",1,xarray
"numpy.median(a=numpy.ndarray, axis=tuple[int])",1,xarray
"numpy.nanmedian(a=numpy.ndarray, axis=NoneType)",1,xarray
numpy.std(a=numpy.ndarray),1,xarray
numpy.std,1,xarray
"numpy.nanpercentile(a=numpy.ndarray, axis=NoneType, q=numpy.float64)",1,xarray
"numpy.nanpercentile(a=numpy.ndarray, axis=NoneType, q=numpy.ndarray)",1,xarray
"numpy.nanpercentile(a=numpy.ndarray, axis=list[int], q=numpy.ndarray)",1,xarray
"numpy.nancumprod(a=numpy.ndarray, axis=int, dtype=NoneType)",1,xarray
"numpy.all(a=numpy.ndarray, axis=int)",1,xarray
numpy.median,1,xarray
"numpy.nanargmax(a=numpy.ndarray, axis=NoneType)",1,xarray
"numpy.ndarray[tuple[xarray.xarray.core.variable.Variableore.variable.Variable, xarray.xarray.core.variable.Variableore.variable.Variable]] = xarray.core.variable.Variable",1,xarray
"numpy.ndarray[tuple[slixarray.core.variable.Variablee[NoneType, NoneType, NoneType], xarray.xarray.core.variable.Variableore.variable.Variable]] = xarray.core.variable.Variable",1,xarray
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], numpy.ndarray]] = numpy.ndarray",1,xarray
"numpy.ndarray[tuple[xarray.list[int]ore.variable.Variable, xarray.list[int]ore.variable.Variable]] = list[int]",1,xarray
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.ndarraye[NoneType, NoneType, NoneType], numpy.ndarray]] = numpy.ndarray",1,xarray
"numpy.ones(dtype=Type[builtins.bool], shape=tuple[int])",1,xarray
"numpy.ndarray[tuple[tuple[list[int], list[int]], builtins.ellipsis]]",1,xarray
numpy.logical_not(xarray.core.dataarray.DataArray),1,xarray
"numpy.broadcast_to(array=float, shape=tuple)",1,xarray
"numpy.ndarray[tuple[xarray.core.variable.Variable, xarray.core.variable.Variable]]",1,xarray
numpy.isscalar(element=xarray.core.indexing.MemoryCachedArray),1,xarray
"numpy.asarray(a=xarray.core.indexing.DaskIndexingAdapter, dtype=NoneType)",1,xarray
"numpy.asarray(a=dask.array.core.Array, dtype=NoneType)",1,xarray
numpy.ndarray != float,1,xarray
"numpy.transpose(a=numpy.ndarray, axes=tuple[int, int, int])",1,xarray
"numpy.sum(a=numpy.ndarray, axis=tuple[int, int, int], dtype=NoneType)",1,xarray
"numpy.atleast_1d(arys=tuple[tuple[int, int, int]])",1,xarray
"numpy.sum(a=numpy.ndarray, axis=tuple[int, int, int])",1,xarray
"numpy.isfinite(list[Union[float, int]])",1,matplotlib
"numpy.nanmean(a=numpy.ndarray, axis=int)",1,xarray
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=builtins.bool, pad_width=list[tuple[int, int]])",1,xarray
"numpy.lib.stride_tricks.as_strided(shape=builtins.bool, strides=tuple[int, int, int, int], writeable=tuple[int, int, int, int], x=numpy.ndarray)",1,xarray
"numpy.ndarray[sliinte[NoneType, int, NoneType]] = int",1,xarray
"numpy.lib.stride_tricks.as_strided(shape=builtins.bool, strides=tuple[int, int], writeable=tuple[int, int], x=numpy.ndarray)",1,xarray
"numpy.full_like(a=xarray.core.variable.Variable, dtype=Type[builtins.bool], fill_value=builtins.bool)",1,xarray
numpy.array(list[numpy.datetime64]),1,xarray
numpy.ma.core.MaskedArray(data=numpy.ndarray),1,xarray
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.variable.IndexVariable, y=xarray.core.variable.Variable)",1,xarray
numpy.array(numpy.datetime64),1,xarray
numpy.isscalar(element=numpy.datetime64),1,xarray
"numpy.empty(tuple[int], dtype=Type[builtins.object])",1,xarray
numpy.ndarray.squeeze(numpy.ndarray),1,xarray
numpy.isscalar(element=list[int]),1,xarray
numpy.ndarray[tuple] = list[int],1,xarray
numpy.isscalar(element=pandas._libs.tslibs.period.Period),1,xarray
numpy.asarray(a=pandas.core.frame.DataFrame),1,xarray
numpy.ndarray[tuple] = pandas._libs.tslibs.period.Period,1,xarray
xarray.core.varianumpy.ndarrayle.IndexVarianumpy.ndarrayle * numpy.ndarray,1,xarray
"numpy.multiply(numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.take(a=numpy.ndarray, axis=int, indices=numpy.ndarray)",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=xarray.core.variable.IndexVariable)",1,xarray
"numpy.nanstd(a=numpy.ndarray, axis=int, ddof=int, dtype=NoneType)",1,xarray
"numpy.ndarray.std(numpy.ndarray, axis=tuple[int, int])",1,xarray
"numpy.std(a=numpy.ndarray, axis=tuple[int, int])",1,xarray
"numpy.ndarray.std(numpy.ndarray, axis=int)",1,xarray
"numpy.std(a=numpy.ndarray, axis=int)",1,xarray
"numpy.array(list[Union[float, int]], dtype=Type[builtins.float])",1,xarray
"numpy.isclose(a=numpy.float64, b=numpy.float64, rtol=float)",1,xarray
numpy.logical_not(builtins.bool),1,xarray
"numpy.broadcast_to(array=float, shape=tuple[int])",1,xarray
numpy.int_,1,xarray
"numpy.testing._private.utils.assert_equal(actual=numpy.int64, desired=int)",1,xarray
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=numpy.int32)",1,xarray
numpy.int32.dtype,1,xarray
numpy.asarray(a=list[numpy.float32]),1,xarray
"numpy.testing._private.utils.assert_equal(actual=numpy.float32, desired=numpy.float32)",1,xarray
"numpy.testing._private.utils.assert_equal(actual=numpy.str_, desired=str)",1,xarray
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int)",1,xarray
numpy.ravel(a=pandas.core.indexes.range.RangeIndex),1,xarray
numpy.asarray(a=datetime.datetime),1,xarray
numpy.asarray(a=list[numpy.timedelta64]),1,xarray
"numpy.array(list[int], dtype=Type[builtins.float])",1,xarray
"numpy.isclose(a=numpy.float64, b=numpy.float64)",1,xarray
numpy.isclose,1,xarray
numpy.rint(numpy.ndarray),1,xarray
"numpy.logical_or(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
"numpy.logical_xor(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
"numpy.minimum(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
"numpy.nextafter(xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray)",1,xarray
numpy.rad2deg(xarray.core.dataarray.DataArray),1,xarray
numpy.radians(xarray.core.dataarray.DataArray),1,xarray
numpy.sign(numpy.ndarray),1,xarray
numpy.cos(float),1,xarray
numpy.signbit(numpy.ndarray),1,xarray
numpy.sinh(numpy.ndarray),1,xarray
numpy.square(numpy.ndarray),1,xarray
numpy.tan(numpy.ndarray),1,xarray
numpy.tanh(numpy.ndarray),1,xarray
numpy.trunc(numpy.ndarray),1,xarray
numpy.ndarray[int] = list[int],1,xarray
numpy.asarray(a=NoneType),1,xarray
xarray.core.varianumpy.ndarrayle.Varianumpy.ndarrayle * numpy.ndarray,1,xarray
numpy.asarray(a=xarray.core.dtypes.AlwaysLessThan),1,xarray
numpy.ndarray.attrs,1,xarray
str % numpy.ndarray,1,xarray
numpy.array(list[datetime.datetime]),1,xarray
numpy.ndarray[list],1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int]]",1,xarray
numpy.ndarray[tuple[builtins.ellipsis]] = numpy.ndarray,1,xarray
numpy.asarray(a=numpy.str_),1,xarray
"numpy.timedelta64(datetime.timedelta, str)",1,xarray
numpy.roll,1,xarray
"numpy.roll(a=numpy.ndarray, axis=int, shift=int)",1,xarray
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int, int, int, int)",1,xarray
"numpy.ndarray[tuple] = tuple[str, int]",1,xarray
numpy.asarray(a=builtins.object),1,xarray
"numpy.ndarray[int] = tuple[str, int]",1,xarray
"numpy.ndarray[slinumpy.ndarraye[NoneType, NoneType, NoneType]] = numpy.ndarray",1,xarray
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], builtins.ellipsis]] = numpy.ndarray",1,xarray
xarray.core.varianumpy.ndarrayle.Varianumpy.ndarrayle - numpy.ndarray,1,xarray
"numpy.ndarray.ravel(numpy.ndarray, order=str)",1,xarray
numpy.ndarray - xarray.core.variable.Variable,1,xarray
"numpy.subtract(numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.number])",1,xarray
numpy.ndarray == numpy.datetime64,1,xarray
"numpy.arange(int, dtype=Type[numpy.float32])",1,xarray
numpy.ndarray != str,1,xarray
numpy.dtype(pandas.core.dtypes.dtypes.DatetimeTZDtype),1,xarray
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=builtins.bool, pad_width=tuple[tuple[int, int], tuple[int, int], tuple[int, int]])",1,xarray
numpy.uint64(int),1,xarray
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType]]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], tuple[list[int], list[int]]]]",1,xarray
"numpy.ndarray[tuple[NoneType, builtins.ellipsis]]",1,xarray
numpy.asarray(a=list[list[list[list[int]]]]),1,xarray
"numpy.full_like(a=numpy.ndarray, dtype=Type[builtins.bool], fill_value=builtins.bool)",1,xarray
"numpy.ndarray[tuple[slice[int, int, NoneType], numpy.ndarray]]",1,xarray
"numpy.ndarray[tuple[slice[int, int, NoneType], numpy.ndarray, slice[int, int, NoneType]]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[NoneType, NoneType, NoneType]]]",1,xarray
"numpy.issubdtype(arg1=Type[numpy.bool_], arg2=Type[numpy.bool_])",1,xarray
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray, rtol=float)",1,xarray
Type[Type[numpy.bool_]uiltins.float] == Type[numpy.bool_],1,xarray
Type[Type[numpy.float32]uiltins.float] == Type[numpy.float32],1,xarray
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, builtins.range, int)",1,xarray
numpy.flatiter[numpy.ndarray] = float,1,xarray
"numpy.issubdtype(arg1=Type[builtins.int], arg2=Type[numpy.floating])",1,xarray
"numpy.issubdtype(arg1=Type[builtins.int], arg2=Type[numpy.integer])",1,xarray
Type[Type[numpy.bool_]uiltins.int] == Type[numpy.bool_],1,xarray
Type[Type[numpy.float32]uiltins.int] == Type[numpy.float32],1,xarray
"numpy.issubdtype(arg1=Type[numpy.float32], arg2=Type[numpy.floating])",1,xarray
Type[numpy.float32] == Type[numpy.bool_],1,xarray
Type[numpy.float32] == Type[numpy.float32],1,xarray
numpy.array(numpy.float32),1,xarray
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.bool_])",1,xarray
"numpy.issubdtype(arg1=Type[numpy.bool_], arg2=Type[numpy.floating])",1,xarray
numpy.nansum(a=numpy.ndarray),1,xarray
"numpy.issubdtype(arg1=Type[builtins.float], arg2=Type[numpy.floating])",1,xarray
"numpy.sum(a=numpy.ndarray, axis=NoneType, dtype=Type[builtins.float])",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, int]]]",1,xarray
numpy.dtype == Type[numpy.timedelta64],1,xarray
numpy.dtype == Type[numpy.datetime64],1,xarray
numpy.str_ in xarray.core.utils.SortedKeysDict,1,xarray
"numpy.take(a=numpy.ndarray, axis=int, indices=int)",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, int]]]",1,xarray
"numpy.ix_(args=tuple[numpy.ndarray, numpy.ndarray])",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, int]]]",1,xarray
numpy.random.mtrand.RandomState.randn,1,xarray
"numpy.array(list[int], Type[numpy.float32])",1,xarray
numpy.isnan(numpy.float64),1,xarray
"numpy.cumprod(a=numpy.ndarray, axis=int)",1,xarray
"numpy.generic.astype(numpy.float64, str)",1,xarray
numpy.timedelta64 + numpy.ndarray,1,xarray
"numpy.generic.astype(numpy.timedelta64, Type[builtins.float])",1,xarray
"numpy.issubdtype(arg1=Type[numpy.bool_], arg2=Type[numpy.integer])",1,xarray
Type[numpy.Type[numpy.bool_]ool_] == Type[numpy.bool_],1,xarray
"numpy.ndarray[tuple[int, slice[int, int, NoneType], builtins.ellipsis]]",1,xarray
Type[numpy.Type[numpy.float32]ool_] == Type[numpy.float32],1,xarray
"numpy.nanvar(a=numpy.ndarray, axis=NoneType, ddof=int, dtype=NoneType)",1,xarray
"numpy.nanvar(a=numpy.ndarray, axis=NoneType, ddof=int, dtype=Type[builtins.float])",1,xarray
"numpy.nanvar(a=numpy.ndarray, axis=NoneType)",1,xarray
"numpy.sum(a=numpy.ndarray, axis=NoneType, dtype=NoneType, keepdims=builtins.bool)",1,xarray
numpy.float64 / numpy.int64,1,xarray
"numpy.sum(a=numpy.ndarray, axis=NoneType, dtype=Type[builtins.float], keepdims=builtins.bool)",1,xarray
numpy.ndarray / numpy.int64,1,xarray
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=str)",1,xarray
"numpy.sum(a=numpy.ndarray, axis=int, dtype=Type[builtins.float])",1,xarray
"numpy.var(a=numpy.ndarray, axis=int, ddof=int)",1,xarray
"numpy.var(a=numpy.ndarray, axis=int, dtype=Type[builtins.float])",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=pandas.core.indexes.numeric.Int64Index)",1,xarray
"numpy.sum(a=dask.array.core.Array, axis=int)",1,xarray
"numpy.amin(a=dask.array.core.Array, axis=int)",1,xarray
"numpy.amax(a=dask.array.core.Array, axis=int)",1,xarray
"numpy.nanmean(a=numpy.ndarray, axis=Type[builtins.float], dtype=NoneType)",1,xarray
"numpy.amax(a=dask.array.core.Array, axis=NoneType)",1,xarray
"numpy.sum(a=dask.array.core.Array, axis=NoneType)",1,xarray
numpy.nanmean(a=numpy.ndarray),1,xarray
Type[numpy.float32] in tuple[Type[numpy.bool_]],1,xarray
Type[numpy.tuple[Type[numpy.bool_]]ool_] in tuple[Type[numpy.bool_]],1,xarray
numpy.nanmin(a=numpy.ndarray),1,xarray
numpy.array(numpy.bool_),1,xarray
numpy.nanmax(a=numpy.ndarray),1,xarray
"numpy.mean(a=numpy.ndarray, axis=NoneType, dtype=Type[builtins.float])",1,xarray
"numpy.var(a=numpy.ndarray, axis=NoneType, ddof=int)",1,xarray
numpy.array(builtins.bool),1,xarray
"numpy.var(a=numpy.ndarray, axis=NoneType, dtype=Type[builtins.float])",1,xarray
numpy.nanvar(a=numpy.ndarray),1,xarray
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray, equal_nan=float, rtol=builtins.bool)",1,xarray
"numpy.nansum(a=numpy.ndarray, axis=NoneType)",1,xarray
numpy.ndarray[tuple] = builtins.bool,1,xarray
"numpy.amin(a=dask.array.core.Array, axis=NoneType)",1,xarray
numpy.timedelta64(str),1,xarray
numpy.dtype == Type[numpy.complex64],1,xarray
"numpy.result_type(numpy.ndarray, float)",1,xarray
numpy.dtype == Type[numpy.str_],1,xarray
"numpy.argmin(a=numpy.ndarray, axis=int)",1,xarray
"numpy.var(a=numpy.ndarray, axis=int)",1,xarray
"numpy.var(a=numpy.ndarray, axis=NoneType)",1,xarray
"numpy.var(a=numpy.ndarray, axis=tuple)",1,xarray
"numpy.sum(a=numpy.ndarray, axis=tuple)",1,xarray
numpy.dtype == Type[numpy.bool_],1,xarray
"numpy.mean(a=numpy.ndarray, axis=NoneType, dtype=NoneType)",1,xarray
"numpy.float64[tuple[NoneType, NoneType]]",1,xarray
"numpy.mean(a=xarray.core.dataarray.DataArray, axis=builtins.bool, keepdims=int)",1,xarray
"numpy.sum(a=numpy.bool_, axis=NoneType)",1,xarray
numpy.ndarray.round(numpy.ndarray),1,xarray
"numpy.ones(shape=tuple[int, int, int, int])",1,xarray
numpy.str_ == str,1,xarray
"numpy.diff(a=numpy.ndarray, axis=int, n=int)",1,xarray
numpy.ndarray.real,1,xarray
numpy.asarray(a=numpy.complex128),1,xarray
"numpy.asarray(a=list[Union[builtins.complex, int]])",1,xarray
numpy.asarray(a=numpy.uint64),1,xarray
numpy.e,1,xarray
"numpy.meshgrid(xi=tuple[numpy.ndarray, numpy.ndarray])",1,xarray
"numpy.asarray(a=list[Union[NoneType, datetime.datetime]])",1,xarray
"numpy.ndarray[tuple[slice[int, NoneType, int], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
~numpy.bool_,1,xarray
"numpy.where(builtins.bool, numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.any(a=numpy.ndarray, axis=int)",1,xarray
"numpy.zeros(tuple[int], dtype=str)",1,xarray
numpy.asarray(a=xarray.core.dtypes.AlwaysGreaterThan),1,xarray
"numpy.nanmin(a=numpy.ndarray, axis=tuple)",1,xarray
"numpy.nanmean(a=numpy.ndarray, axis=NoneType, dtype=tuple)",1,xarray
"numpy.nancumsum(a=numpy.ndarray, axis=int, dtype=NoneType)",1,xarray
numpy.prod(a=list),1,xarray
numpy.ndarray[tuple] = str,1,xarray
"numpy.array(list[str], str)",1,xarray
numpy.dtype == Type[builtins.int],1,xarray
"numpy.full_like(a=xarray.core.dataarray.DataArray, dtype=Type[builtins.bool], fill_value=builtins.bool)",1,xarray
"numpy.lexsort(tuple[xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray])",1,xarray
"builtins.str.split(maxsplit=int, self=numpy.str_, sep=str)",1,xarray
"numpy.gradient(f=xarray.core.dataarray.DataArray, kwargs=dict, varargs=tuple[xarray.core.variable.IndexVariable])",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], NoneType]]",1,xarray
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], NoneType]]",1,xarray
numpy.ndarray * dask.array.core.Array,1,xarray
"numpy.allclose(a=xarray.core.dataarray.DataArray, b=list[int])",1,xarray
"numpy.trapz(axis=int, x=numpy.ndarray, y=dask.array.core.Array)",1,xarray
numpy.result_type(Type[builtins.bool]),1,xarray
"numpy.allclose(a=xarray.core.dataarray.DataArray, b=float)",1,xarray
numpy.dtype == Type[numpy.object_],1,xarray
"numpy.result_type(Type[numpy.float32], Type[numpy.float64])",1,xarray
numpy.result_type(Type[numpy.float32]),1,xarray
numpy.result_type(Type[numpy.bytes_]),1,xarray
numpy.result_type(Type[numpy.str_]),1,xarray
numpy.result_type(Type[numpy.int64]),1,xarray
numpy.datetime_data(numpy.dtype),1,xarray
"numpy.allclose(a=xarray.core.dataarray.DataArray, b=xarray.core.dataarray.DataArray)",1,xarray
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=int)",1,xarray
"numpy.nanmax(a=numpy.ndarray, axis=tuple[int])",1,xarray
"numpy.isin(element=numpy.ndarray, test_elements=list[int])",1,xarray
"numpy.isin(element=numpy.ndarray, test_elements=numpy.ndarray)",1,xarray
"numpy.isin(element=dask.array.core.Array, test_elements=list[int])",1,xarray
"numpy.isin(element=dask.array.core.Array, test_elements=numpy.ndarray)",1,xarray
numpy.random.uniform,1,xarray
"numpy.nanmean(a=numpy.ndarray, axis=NoneType, dtype=tuple[int])",1,xarray
"numpy.array(tuple[int, int])",1,xarray
"numpy.gradient(f=numpy.ndarray, kwargs=dict, varargs=tuple[xarray.core.variable.IndexVariable])",1,xarray
"numpy.array_equal(a1=numpy.ndarray, a2=tuple[int, int])",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, int], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.nanstd(a=numpy.ndarray, axis=int)",1,xarray
"numpy.nanvar(a=numpy.ndarray, axis=int, ddof=int, dtype=NoneType)",1,xarray
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], int, builtins.ellipsis]]",1,xarray
"numpy.sum(a=numpy.ndarray, axis=int, dtype=Type[builtins.float], keepdims=builtins.bool)",1,xarray
numpy.ndarray / numpy.ndarray,1,xarray
"numpy.sum(a=numpy.ndarray, axis=int, dtype=NoneType, keepdims=builtins.bool)",1,xarray
"numpy.ndarray[slice[numpy.int64, NoneType, int]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType], int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[int, int, int], slice[NoneType, NoneType, NoneType], int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.dataarray.DataArray, y=list[int])",1,xarray
"numpy.ndarray[tuple[slice[int, int, int], int, slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[int, int, int], int, int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, slice[NoneType, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[int, int, int], int, slice[int, int, int], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[int, int, int], slice[int, int, int], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[int, int, int], slice[int, int, int], int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis]]",1,xarray
numpy.asarray(a=pandas.core.indexes.base.Index),1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[int, int, int], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[int, int, slice[int, int, int], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[int, slice[int, int, int], slice[int, int, int], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[int, int, int], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, slice[int, int, int], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, int], int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType], int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, int], slice[int, int, int], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[int, int, int], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[int, int, slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[int, int, slice[NoneType, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[int, slice[int, int, int], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[int, slice[int, int, int], int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, int, NoneType], builtins.ellipsis]] = numpy.ndarray",1,xarray
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType], builtins.ellipsis]] = numpy.ndarray",1,xarray
"numpy.array(tuple[str, str])",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=tuple[numpy.ndarray], y=list[numpy.ndarray])",1,xarray
"numpy.ndarray[tuple[slice[int, int, int], slice[int, int, int], slice[int, int, int]]]",1,xarray
"numpy.ndarray[tuple[slice[int, int, int], slice[NoneType, NoneType, NoneType], slice[int, int, int]]]",1,xarray
"numpy.ndarray[tuple[slice[int, int, int], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, int], slice[int, int, int]]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, int], slice[NoneType, NoneType, NoneType]]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[int, int, int]]]",1,xarray
numpy.random.randint,1,xarray
"numpy.ndarray[tuple[numpy.ndarray, slice[NoneType, NoneType, NoneType], numpy.ndarray]]",1,xarray
numpy.ravel(a=pandas.core.indexes.datetimes.DatetimeIndex),1,xarray
"numpy.asarray(a=float, dtype=numpy.dtype)",1,xarray
numpy.asarray(a=list[numpy.ndarray]),1,xarray
numpy.array(pandas.core.indexes.multi.MultiIndex),1,xarray
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray)",1,xarray
"numpy.ndarray[tuple[slice[int, int, NoneType], int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[int, int, int], numpy.ndarray, numpy.ndarray]]",1,xarray
"numpy.ndarray[tuple[numpy.ndarray, slice[int, int, int], numpy.ndarray]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
numpy.array(xarray.core.indexing.NumpyIndexingAdapter),1,xarray
"numpy.array(tuple[str, str, str])",1,xarray
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, int, int)",1,xarray
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], builtins.ellipsis]] = numpy.ndarray",1,xarray
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int, int])",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], int, slice[NoneType, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,xarray
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], builtins.ellipsis]] = int",1,xarray
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, slice[int, int, int]]]",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.indexing.MemoryCachedArray, y=numpy.ndarray)",1,xarray
numpy.array(xarray.core.indexing.MemoryCachedArray),1,xarray
"numpy.array(list[list[int]], dtype=Type[numpy.int64])",1,xarray
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, int, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], builtins.ellipsis]] = numpy.ndarray",1,xarray
"numpy.arange(int, dtype=Type[numpy.int32])",1,xarray
"numpy.array(int, dtype=Type[numpy.int64])",1,xarray
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int, int)",1,xarray
"numpy.ndarray[slice[numpy.int64, numpy.int64, int]]",1,xarray
"numpy.issubdtype(arg1=Type[builtins.str], arg2=Type[numpy.floating])",1,xarray
numpy.flagsobj.owndata,1,xarray
"numpy.reshape(a=list[float], newshape=tuple)",1,xarray
numpy.atleast_1d(arys=tuple[numpy.timedelta64]),1,xarray
numpy.float64 * numpy.ndarray,1,xarray
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, desired=float)",1,xarray
"numpy.generic.astype(numpy.float64, Type[builtins.float])",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], builtins.ellipsis]]",1,xarray
numpy.str_ != str,1,xarray
numpy.get_printoptions,1,xarray
"numpy.isscalar(element=tuple[str, numpy.int64])",1,xarray
"numpy.ndarray[tuple] = tuple[str, numpy.int64]",1,xarray
numpy.str_ in list[str],1,xarray
"numpy.result_type(numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.asarray(a=list[int], dtype=Type[numpy.float64])",1,xarray
"numpy.asarray(a=int, dtype=Type[numpy.float64])",1,xarray
numpy.asarray(a=list[numpy.datetime64]),1,xarray
numpy.asarray(a=datetime.timedelta),1,xarray
numpy.ndarray - numpy.datetime64,1,xarray
"numpy.nanprod(a=numpy.ndarray, axis=int, dtype=NoneType, out=NoneType)",1,xarray
numpy.dtype(Type[builtins.int]),1,xarray
"numpy.issubdtype(arg1=Type[builtins.str], arg2=Type[numpy.integer])",1,xarray
"numpy.issubdtype(arg1=Type[builtins.str], arg2=Type[numpy.bool_])",1,xarray
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[str], size=list[int])",1,xarray
numpy.random.mtrand.RandomState.choice,1,xarray
numpy.dtype(Type[builtins.str]),1,xarray
"numpy.nanargmin(a=numpy.ndarray, axis=int)",1,xarray
numpy.dtype(Type[numpy.bool_]),1,xarray
int - numpy.ndarray,1,xarray
"numpy.testing._private.utils.assert_equal(actual=numpy.ndarray, desired=numpy.ndarray)",1,xarray
numpy.isscalar(element=float),1,xarray
numpy.exp(numpy.ndarray),1,xarray
"numpy.gradient(f=numpy.ndarray, kwargs=dict, varargs=tuple[numpy.ndarray])",1,xarray
"numpy.dtype in tuple[numpy.datetime64, numpy.timedelta64]",1,xarray
"numpy.nanprod(a=numpy.ndarray, axis=NoneType, dtype=NoneType, out=NoneType)",1,xarray
"numpy.full(fill_value=int, shape=tuple[int])",1,xarray
"numpy.nanmean(a=numpy.ndarray, axis=NoneType, dtype=tuple[int, int])",1,xarray
"numpy.mean(a=numpy.ndarray, axis=tuple[int, int])",1,xarray
numpy.int32(int),1,xarray
numpy.ndarray.item,1,xarray
numpy.asarray(a=list[tuple[int]]),1,xarray
"numpy.ndarray[slilist[tuple[int]]e[NoneType, NoneType, NoneType]] = list[tuple[int]]",1,xarray
"numpy.isscalar(element=tuple[numpy.int64, numpy.int64])",1,xarray
"numpy.ndarray[tuple] = tuple[numpy.int64, numpy.int64]",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=int, y=int)",1,xarray
numpy.asarray(a=numpy.int32),1,xarray
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], numpy.ndarray, numpy.ndarray]] = int",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=NoneType, y=NoneType)",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=list[builtins.bool])",1,xarray
"numpy.empty(int, dtype=Type[builtins.object])",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=slice[numpy.int64, numpy.int64, NoneType], y=slice[int, int, NoneType])",1,xarray
"numpy.ndarray[tuple[int, int, int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[int, int, int, builtins.ellipsis]] = numpy.ndarray",1,xarray
"numpy.ndarray[tuple[int, int, int, int, int]]",1,xarray
"numpy.ndarray[tuple[builtins.ellipsis, numpy.ndarray, numpy.ndarray]] = int",1,xarray
"numpy.result_type(numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], int]]",1,xarray
"numpy.ndarray[sliinte[NoneType, NoneType, NoneType]] = int",1,xarray
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,xarray
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], int]]",1,xarray
"numpy.ndarray[tuple[int, sliinte[NoneType, NoneType, NoneType], int]] = int",1,xarray
"numpy.ndarray[tuple[int, sliinte[NoneType, NoneType, NoneType], int, sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], builtins.ellipsis, int]]",1,xarray
"numpy.ndarray[tuple[builtins.ellipsis, numpy.ndarray, numpy.ndarray]]",1,xarray
"numpy.ndarray[tuple[sliinte[NoneType, int, NoneType], builtins.ellipsis, int]] = int",1,xarray
"numpy.ndarray[tuple[sliinte[NoneType, int, NoneType], sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], int]] = int",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], int, slice[NoneType, NoneType, NoneType]]]",1,xarray
numpy.ndarray[numpy.ndarray] = int,1,xarray
"numpy.ndarray[tuple[numpy.ndarray, sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1,xarray
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,xarray
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=float, pad_width=list[tuple[int, int]])",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.array(tuple[float, float, int])",1,matplotlib
numpy.ndim(a=numpy.int64),1,matplotlib
numpy.nanmax(a=numpy.ndarray),1,matplotlib
"numpy.array(list[numpy.ndarray], Type[builtins.float])",1,matplotlib
numpy.float64 /= float,1,matplotlib
numpy.asarray(a=xarray.coding.strings.StackedBytesArray),1,xarray
"numpy.array(list[str], dtype=numpy.dtype)",1,xarray
"numpy.array(list, dtype=Type[builtins.object])",1,xarray
"numpy.array(xarray.core.indexing.NumpyIndexingAdapter, copy=Type[numpy.float32], dtype=builtins.bool)",1,xarray
numpy.ndarray /= int,1,xarray
numpy.ndarray *= int,1,xarray
numpy.ravel(a=int),1,xarray
numpy.float64 == numpy.ndarray,1,matplotlib
numpy.linalg.det(a=numpy.ndarray),1,matplotlib
numpy.ndarray |= numpy.ndarray,1,xarray
numpy.float64(x=numpy.float64),1,xarray
numpy.size(a=list[int]),1,matplotlib
"numpy.histogram(a=numpy.ndarray, bins=int, range=tuple[numpy.int64, numpy.int64], weights=NoneType)",1,matplotlib
"numpy.array(list[builtins.bytes], dtype=str)",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=numpy.ndarray, y=xarray.coding.strings.StackedBytesArray)",1,xarray
float * numpy.timedelta64,1,xarray
"numpy.ndarray[tuple[int, int]] = matplotlib.axes._subplots.PolarAxesSubplot",1,matplotlib
"numpy.zeros(tuple[int], dtype=Type[numpy.bytes_])",1,xarray
"numpy.asarray(a=list[decimal.Decimal], dtype=Type[builtins.float])",1,matplotlib
numpy.iterable(y=decimal.Decimal),1,matplotlib
"numpy.array(tuple[numpy.float64, numpy.int64, numpy.float64, numpy.float64], dtype=Type[builtins.float])",1,matplotlib
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, list[numpy.float64], numpy.float64, numpy.ndarray, NoneType])",1,matplotlib
numpy.isnan(list[numpy.int64]),1,matplotlib
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, list[Union[float, int]], list[numpy.float64], numpy.ndarray, NoneType])",1,matplotlib
"numpy.array(tuple[numpy.int64, numpy.float64, numpy.float64, numpy.float64], dtype=Type[builtins.float])",1,matplotlib
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, list[numpy.float64], list[numpy.float64], numpy.ndarray, NoneType])",1,matplotlib
numpy.array(builtins.bytes),1,xarray
"numpy.asarray(a=tuple[float], dtype=Type[builtins.float])",1,matplotlib
numpy.nanmin(a=numpy.ndarray),1,matplotlib
numpy.float64(x=numpy.float32),1,xarray
"numpy.array(list[tuple[numpy.float64, numpy.float64, numpy.float64, float]], Type[builtins.float])",1,matplotlib
numpy.ma.core.MaskedArray.min(axis=int),1,matplotlib
"numpy.ndarray[slinumpy.uint8e[NoneType, NoneType, NoneType]] = numpy.uint8",1,matplotlib
numpy.ndarray & dask.array.core.Array,1,xarray
"numpy.asarray(a=tuple[tuple[numpy.int64, numpy.float64], tuple[numpy.int64, numpy.float64]], dtype=Type[builtins.float])",1,matplotlib
"numpy.ndarray[slibuiltins.boole[int, NoneType, int]] = builtins.bool",1,matplotlib
"numpy.ndarray[tuple[slice[int, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.asarray(a=list[numpy.float64], dtype=Type[builtins.float])",1,matplotlib
numpy.atleast_1d(arys=tuple[list[list[int]]]),1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.zeros(int, Type[builtins.bool])",1,matplotlib
"numpy.ndarray[tuple[NoneType, NoneType]]",1,xarray
"numpy.str_ in tuple[str, str]",1,xarray
numpy.ndarray == numpy.float64,1,matplotlib
"numpy.arange(float, dtype=str)",1,xarray
"numpy.array(list[tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64]], Type[builtins.float])",1,matplotlib
"numpy.asarray(a=tuple[tuple[numpy.float64, int], tuple[numpy.float64, numpy.float64]], dtype=Type[builtins.float])",1,matplotlib
numpy.atleast_1d(arys=tuple[list[numpy.float64]]),1,matplotlib
"numpy.asarray(a=xarray.core.indexing.CopyOnWriteArray, dtype=NoneType)",1,xarray
"numpy.result_type(dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array)",1,xarray
numpy.median(a=numpy.ndarray),1,matplotlib
"numpy.ndarray[tuple[slice[int, int, int], slice[int, int, int], builtins.ellipsis]]",1,xarray
dask.array.core.Array | numpy.ndarray,1,xarray
numpy.logical_and,1,matplotlib
numpy.ndarray.nonzero(numpy.ndarray),1,matplotlib
"numpy.result_type(dask.array.core.Array, dask.array.core.Array)",1,xarray
"numpy.asarray(a=tuple[tuple[numpy.float64, numpy.float64], tuple[numpy.float64, numpy.float64]], dtype=Type[builtins.float])",1,matplotlib
"numpy.result_type(numpy.ndarray, dask.array.core.Array)",1,xarray
"numpy.asarray(a=tuple[builtins.bool], dtype=Type[builtins.bool])",1,matplotlib
"numpy.cov(bias=int, m=numpy.ndarray, rowvar=builtins.bool)",1,matplotlib
dask.array.core.Array & numpy.ndarray,1,xarray
"numpy.asarray(a=tuple[tuple[numpy.int64, numpy.float64], tuple[numpy.int64, numpy.float64]])",1,matplotlib
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int, int])",1,xarray
"numpy.reshape(a=numpy.ndarray, newshape=int)",1,matplotlib
"numpy.percentile(a=numpy.ndarray, q=numpy.ndarray)",1,matplotlib
"numpy.power(int, float)",1,matplotlib
"numpy.where(builtins.bool, float, numpy.float64)",1,xarray
"numpy.vstack(tup=list[Union[list[Union[numpy.ndarray, tuple[int, int]]], numpy.ndarray]])",1,matplotlib
"numpy.deg2rad(list[Union[float, numpy.float64]])",1,matplotlib
numpy.atleast_1d(arys=tuple[list[matplotlib.testing.jpl_units.UnitDbl.UnitDbl]]),1,matplotlib
"numpy.array(tuple[tuple[float, int, int], tuple[float, int, int], tuple[float, int, int], tuple[float, int, int], tuple[int, float, float]])",1,matplotlib
"numpy.array(tuple[tuple[float, int, int], tuple[float, int, int], tuple[float, int, int], tuple[float, int, int], tuple[float, int, int], tuple[int, int, int]])",1,matplotlib
"numpy.array(tuple[tuple[float, float, float], tuple[float, int, int], tuple[float, int, int], tuple[float, int, int], tuple[int, int, int]])",1,matplotlib
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.float32])",1,matplotlib
numpy.ndarray[tuple[NoneType]],1,xarray
"numpy.transpose(a=numpy.ndarray, axes=tuple[int, int])",1,xarray
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, list[numpy.int64], numpy.float64, numpy.ndarray, NoneType])",1,matplotlib
"numpy.result_type(numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.array(tuple[numpy.int64, numpy.int64, numpy.float64, numpy.int64], dtype=Type[builtins.float])",1,matplotlib
"numpy.asarray(a=list[tuple[int, int]], dtype=Type[builtins.float])",1,matplotlib
"numpy.empty(int, dtype=Type[numpy.int64])",1,xarray
"numpy.asarray(a=list, dtype=Type[builtins.float])",1,matplotlib
numpy.iterable(y=matplotlib.lines.Line2D),1,matplotlib
numpy.iterable(y=list[NoneType]),1,matplotlib
numpy.iterable(y=matplotlib.spines.Spine),1,matplotlib
numpy.array(list[list[list[int]]]),1,xarray
numpy.dtype.type,1,matplotlib
"numpy.ones_like(a=numpy.ma.core.MaskedArray, dtype=Type[numpy.float32])",1,matplotlib
"numpy.cumprod(a=tuple[int, int])",1,xarray
"numpy.full(fill_value=float, shape=tuple)",1,xarray
"numpy.empty(int, Type[numpy.uint8])",1,matplotlib
numpy.concatenate(list[xarray.core.dataarray.DataArray]),1,xarray
"numpy.concatenate(tuple[numpy.ndarray, numpy.ndarray], axis=int)",1,xarray
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.array(numpy.ma.core.MaskedArray, dtype=Type[numpy.float32])",1,matplotlib
"numpy.ndarray[tuple[int, slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
numpy.float64(x=numpy.int64),1,matplotlib
"numpy.ndarray[tuple[int, slice[int, NoneType, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
Type[numpy.float32] == Type[numpy.float64],1,matplotlib
numpy.float64 > numpy.int64,1,matplotlib
"numpy.cumprod(a=tuple[int, int, int])",1,xarray
"numpy.zeros(tuple[int, int], numpy.dtype)",1,matplotlib
numpy.iterable(y=Type[matplotlib.tests.test_artist.test_artist_inspector]),1,matplotlib
"numpy.asarray(a=numpy.int64, dtype=numpy.dtype)",1,xarray
numpy.ndarray.variable,1,xarray
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int, int, int])",1,xarray
"numpy.deg2rad(list[Union[int, numpy.float64]])",1,matplotlib
"numpy.result_type(numpy.ndarray, numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.linspace(endpoint=builtins.bool, num=int, start=numpy.float64, stop=numpy.float64)",1,matplotlib
numpy.ndarray[int] = list[numpy.float64],1,matplotlib
"numpy.vstack(tup=list[Union[numpy.ndarray, tuple[int, int]]])",1,matplotlib
"numpy.hstack(tup=list[Union[numpy.ndarray, numpy.uint8]])",1,matplotlib
numpy.asarray(a=list[datetime.datetime]),1,xarray
"numpy.array_equal(a1=numpy.ndarray, a2=numpy.ndarray)",1,xarray
"numpy.concatenate(list[Union[list[float], numpy.ndarray]])",1,xarray
numpy.sign(numpy.float64),1,matplotlib
"numpy.where(numpy.ndarray, numpy.ndarray, float)",1,matplotlib
numpy.deg2rad(list[numpy.float64]),1,matplotlib
numpy.atleast_2d(arys=tuple[numpy.ndarray]),1,xarray
"numpy.where(numpy.ndarray, numpy.ndarray, numpy.ma.core.MaskedArray)",1,matplotlib
numpy.ravel(a=pandas.core.indexes.numeric.Int64Index),1,xarray
"numpy.where(numpy.bool_, numpy.ndarray, numpy.ndarray)",1,xarray
numpy.ndarray.coords,1,xarray
"numpy.broadcast(numpy.ndarray, str)",1,xarray
"numpy.isclose(a=numpy.float64, b=list[float])",1,matplotlib
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.float], copy=builtins.bool)",1,matplotlib
"numpy.result_type(numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.asarray(a=tuple[tuple[numpy.float64, numpy.float64], tuple[numpy.float64, numpy.float64]])",1,matplotlib
"numpy.ma.core.array(data=list[NoneType], dtype=Type[builtins.float], mask=list[builtins.bool])",1,matplotlib
numpy.int64 >= int,1,xarray
"numpy.empty(tuple[int, int], Type[builtins.float])",1,matplotlib
numpy.ndarray & numpy.bool_,1,xarray
"numpy.zeros(tuple[int], dtype=Type[builtins.bool])",1,xarray
"numpy.ndarray.transpose(numpy.ndarray, tuple[int, int, int])",1,xarray
"numpy.asarray(a=list[list[Union[float, int]]])",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.hstack(tup=list[Union[list[numpy.uint8], numpy.ndarray]])",1,matplotlib
numpy.numpy.ndarrayool_ | numpy.ndarray,1,xarray
"numpy.atleast_1d(arys=tuple[list[Union[int, numpy.float64]]])",1,matplotlib
numpy.atleast_1d(arys=tuple[list[decimal.Decimal]]),1,matplotlib
numpy.atleast_1d(arys=tuple[int]),1,matplotlib
numpy.str_ in tuple[str],1,xarray
numpy.float64 * numpy.ma.core.MaskedArray,1,matplotlib
numpy.ndarray /= numpy.float32,1,xarray
"numpy.ndarray.astype(numpy.ndarray, copy=Type[numpy.float32], dtype=builtins.bool)",1,xarray
"numpy.log(numpy.ndarray, numpy.ndarray)",1,matplotlib
numpy.ndarray *= numpy.float32,1,xarray
"numpy.dtype in tuple[Type[numpy.float32], Type[numpy.float16]]",1,matplotlib
"numpy.array(numpy.ma.core.MaskedArray, dtype=Type[numpy.float64])",1,matplotlib
Type[numpy.float64] == Type[numpy.float64],1,matplotlib
numpy.ndarrayuiltins.numpy.ndarrayool |= numpy.ndarray,1,xarray
numpy.ma.core.min(obj=numpy.ndarray),1,matplotlib
numpy.ma.core.max(obj=numpy.ndarray),1,matplotlib
"numpy.ndarray.fill(numpy.ma.core.MaskedArray, int)",1,matplotlib
"numpy.array(tuple[tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64]])",1,matplotlib
"numpy.array(tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64])",1,matplotlib
"numpy.asarray(a=xarray.core.indexing.NumpyIndexingAdapter, dtype=numpy.dtype)",1,xarray
"numpy.ma.core.masked_less_equal(copy=builtins.bool, value=int, x=numpy.ndarray)",1,matplotlib
numpy.result_type,1,xarray
numpy.ndarray[builtins.ellipsis],1,xarray
"numpy.asarray(a=tuple[tuple[int, float], tuple[int, float], tuple[int, float], tuple[int, float]])",1,matplotlib
"numpy.asanyarray(a=tuple[int, float])",1,matplotlib
numpy.atleast_1d(arys=tuple[numpy.flatiter]),1,matplotlib
numpy.arccos(numpy.ndarray),1,matplotlib
"numpy.arange(int, int, dtype=Type[builtins.float])",1,xarray
numpy.ravel(a=numpy.int32),1,xarray
"numpy.asarray(a=list[tuple[float, int]])",1,matplotlib
numpy.ravel(a=numpy.int16),1,xarray
"numpy.ndarray.astype(numpy.ndarray, dtype=numpy.dtype)",1,xarray
numpy.atleast_1d(arys=tuple[numpy.int16]),1,xarray
list[float] * numpy.ndarray,1,matplotlib
numpy.asarray(a=numpy.int16),1,xarray
numpy.int16(int),1,xarray
numpy.ndarray == numpy.int32,1,xarray
numpy.ndarray == numpy.int8,1,xarray
"numpy.array(xarray.coding.variables._ElementwiseFunctionArray, copy=Type[numpy.float32], dtype=builtins.bool)",1,xarray
numpy.ravel(a=numpy.int8),1,xarray
numpy.atleast_1d(arys=tuple[numpy.int8]),1,xarray
numpy.isscalar(element=xarray.core.indexing.NumpyIndexingAdapter),1,xarray
"numpy.asarray(a=list[list[Union[float, float, int, int]]], dtype=Type[builtins.float])",1,matplotlib
"numpy.ndarray[tuple[int, sliinte[NoneType, NoneType, NoneType]]] = int",1,matplotlib
-numpy.int64,1,xarray
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,matplotlib
numpy.int64 // int,1,xarray
"numpy.ndarray.argmin(numpy.ndarray, axis=int)",1,matplotlib
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, int], builtins.ellipsis]]",1,xarray
"numpy.atleast_1d(arys=tuple[list[Union[float, numpy.float64]]])",1,matplotlib
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, numpy.int64, numpy.float64, numpy.ndarray, NoneType])",1,matplotlib
"numpy.array(tuple[numpy.float64, numpy.int64, numpy.float64, numpy.int64], dtype=Type[builtins.float])",1,matplotlib
"numpy.broadcast_to(array=list[str], shape=int)",1,matplotlib
float - numpy.int64,1,matplotlib
"numpy.array(tuple[numpy.int64, numpy.float64, numpy.int64, numpy.float64], dtype=Type[builtins.float])",1,matplotlib
numpy.shape(a=list[numpy.float64]),1,matplotlib
"numpy.asanyarray(a=tuple[int, int])",1,matplotlib
"numpy.asarray(a=tuple[tuple[numpy.float64, numpy.int64], tuple[numpy.float64, numpy.int64]])",1,matplotlib
numpy.ndarray += numpy.int32,1,xarray
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, int, NoneType]]]",1,matplotlib
"numpy.asarray(a=numpy.ma.core.MaskedArray, dtype=Type[builtins.bool])",1,matplotlib
numpy.ndarray == numpy.uint8,1,xarray
numpy.uint8(numpy.int32),1,xarray
numpy.atleast_1d(arys=tuple[numpy.int32]),1,xarray
numpy.asarray(a=numpy.int8),1,xarray
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, NoneType, NoneType]]]",1,matplotlib
numpy.int8(int),1,xarray
numpy.bytes_(builtins.bytes),1,xarray
numpy.ndarray -= int,1,xarray
numpy.object_(builtins.bytes),1,xarray
numpy.ndarray == numpy.bytes_,1,xarray
"numpy.asarray(a=tuple[tuple[numpy.int64, numpy.int64], tuple[numpy.int64, numpy.int64]])",1,matplotlib
"numpy.array(tuple[int, float, float, float], dtype=Type[builtins.float])",1,matplotlib
"numpy.result_type(numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.asanyarray(a=tuple[float, int])",1,matplotlib
"numpy.array(list[list[Union[float, numpy.float64]]])",1,matplotlib
"numpy.correlate(a=numpy.ndarray, mode=str, v=numpy.ndarray)",1,matplotlib
str in numpy.str_,1,xarray
numpy.prod(a=list[int]),1,xarray
"numpy.ma.core.array(copy=numpy.ndarray, data=numpy.ndarray, dtype=numpy.dtype, mask=builtins.bool)",1,matplotlib
numpy.iterable(y=numpy.bool_),1,matplotlib
numpy.asarray(a=list[numpy.bool_]),1,matplotlib
numpy.min_scalar_type(list[numpy.bool_]),1,matplotlib
numpy.ma.core.getmask(a=list[numpy.bool_]),1,matplotlib
numpy.float32 - numpy.float32,1,matplotlib
"numpy.zeros(int, dtype=Type[numpy.int64])",1,xarray
numpy.isnan(numpy.ma.core.MaskedArray),1,matplotlib
"numpy.ndarray[tuple[int, int, builtins.ellipsis]]",1,xarray
numpy.broadcast_arrays(args=tuple[numpy.ndarray]),1,xarray
"numpy.ndarray.take(numpy.ndarray, numpy.ndarray, axis=str, mode=int)",1,matplotlib
"numpy.ndarray.astype(numpy.ndarray, copy=str, dtype=builtins.bool)",1,xarray
numpy.float16,1,matplotlib
numpy.dtype != Type[numpy.float64],1,matplotlib
numpy.bool_,1,matplotlib
numpy.min_scalar_type(numpy.ma.core.MaskedArray),1,matplotlib
numpy.bool_.shape,1,matplotlib
"numpy.cumsum(a=list[Union[float, int, numpy.float64]])",1,matplotlib
"numpy.asarray(a=tuple[tuple[numpy.int64, numpy.int64], tuple[numpy.int64, numpy.float64]], dtype=Type[builtins.float])",1,matplotlib
numpy.ndarray == numpy.int16,1,xarray
numpy.int16(list[int]),1,xarray
"numpy.asarray(a=xarray.coding.variables._ElementwiseFunctionArray, dtype=numpy.dtype)",1,xarray
"numpy.ndarray.all(numpy.ndarray, axis=int)",1,matplotlib
numpy.ravel(a=numpy.uint8),1,xarray
numpy.int32(numpy.int8),1,xarray
numpy.ndarray -= numpy.bool_,1,matplotlib
"numpy.ndarray[sliinte[NoneType, int, NoneType]] = int",1,matplotlib
"numpy.random.mtrand.RandomState.shuffle(numpy.random.mtrand.RandomState, numpy.ndarray)",1,matplotlib
numpy.float64 % float,1,matplotlib
"numpy.generic.astype(numpy.bool_, Type[numpy.float64])",1,matplotlib
numpy.ravel(a=builtins.bytes),1,xarray
numpy.float64(x=numpy.bool_),1,matplotlib
numpy.min_scalar_type(list[numpy.float64]),1,matplotlib
numpy.ma.core.getmask(a=list[numpy.float64]),1,matplotlib
"numpy.atleast_1d(arys=tuple[list[Union[float, int]]])",1,matplotlib
"numpy.column_stack(tup=tuple[numpy.ndarray, list[float]])",1,matplotlib
numpy.ndarray == numpy.uint8,1,matplotlib
"numpy.split(ary=numpy.ndarray, indices_or_sections=numpy.ndarray)",1,matplotlib
numpy.where(numpy.ndarray),1,matplotlib
numpy.iterable(y=datetime.date),1,matplotlib
numpy.atleast_1d(arys=tuple[list[matplotlib.testing.jpl_units.Epoch.Epoch]]),1,matplotlib
"numpy.column_stack(tup=tuple[list[float], numpy.ndarray])",1,matplotlib
"numpy.column_stack(tup=tuple[list[float], list[float]])",1,matplotlib
"numpy.concatenate(list[Union[list, list[int]]])",1,matplotlib
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.atleast_1d(arys=tuple[tuple[numpy.ndarray, numpy.ndarray]])",1,matplotlib
"numpy.array(list[tuple[int, int]], dtype=list[tuple[str, Type[builtins.float]]])",1,matplotlib
numpy.ndarray[str],1,matplotlib
numpy.ndarray.name,1,matplotlib
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], builtins.ellipsis]] = numpy.ndarray",1,xarray
"numpy.set_printoptions(edgeitems=int, linewidth=int, precision=int, threshold=int)",1,xarray
"numpy.atleast_1d(arys=tuple[tuple[int, int]])",1,matplotlib
"numpy.isclose(a=numpy.int64, atol=int, b=numpy.ndarray, rtol=numpy.float64)",1,matplotlib
"numpy.datetime64(int, str)",1,xarray
numpy.asanyarray(a=numpy.int64),1,matplotlib
"numpy.asarray(a=tuple[numpy.int64], dtype=Type[builtins.float])",1,matplotlib
"numpy.datetime64(numpy.ndarray, str)",1,xarray
numpy.iterable(y=matplotlib.transforms.Bbox),1,matplotlib
"numpy.asarray(a=tuple[tuple[float, float], tuple[float, float]])",1,matplotlib
"numpy.concatenate(list[Union[list[int], numpy.ndarray]])",1,xarray
int // numpy.int64,1,matplotlib
"numpy.array(list[list[Union[float, float, int, numpy.float64]]])",1,matplotlib
int - numpy.int64,1,matplotlib
"numpy.arange(numpy.int64, numpy.int64, numpy.int64)",1,matplotlib
numpy.ndarray[numpy.ndarray] = builtins.bytes,1,xarray
numpy.ndarray * list[int],1,matplotlib
"numpy.dot(numpy.ndarray, list[list[numpy.float64]])",1,matplotlib
"numpy.set_printoptions(edgeitems=int, floatmode=str, formatter=NoneType, infstr=str, kwarg=dict, linewidth=int, nanstr=str, precision=int, sign=str, suppress=builtins.bool, threshold=int)",1,xarray
numpy.ma.core.MaskedArray.max(axis=int),1,matplotlib
"numpy.vstack(tup=tuple[numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray])",1,matplotlib
"numpy.array(tuple[int, int, float])",1,matplotlib
"numpy.add(numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.where(list[builtins.bool], numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.array(list[tuple[Union[float, int], Union[float, int]]])",1,matplotlib
"numpy.ndarray - tuple[numpy.float64, numpy.float64]",1,matplotlib
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], int, slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
numpy.asarray(a=list[list[float]]),1,xarray
"numpy.asarray(a=tuple[numpy.float64], dtype=Type[builtins.float])",1,matplotlib
"numpy.asarray(a=tuple[int], dtype=Type[builtins.float])",1,matplotlib
numpy.ravel(a=pandas.core.indexes.multi.MultiIndex),1,xarray
"numpy.ndarray.transpose(numpy.ndarray, tuple[int, int, int, int, int])",1,xarray
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int, int, int])",1,xarray
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int, int, int, int)",1,xarray
numpy.bool_uiltins.numpy.bool_ool | numpy.bool_,1,xarray
numpy.float64 + numpy.float64,1,xarray
"numpy.round_(a=numpy.ndarray, decimals=int)",1,matplotlib
"numpy.cumsum(a=numpy.ndarray, axis=int)",1,xarray
"numpy.mean(a=numpy.ndarray, axis=tuple[int])",1,xarray
"numpy.arange(numpy.float64, numpy.float64)",1,matplotlib
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.float64])",1,xarray
"numpy.quantile(a=numpy.ndarray, axis=numpy.ndarray, interpolation=str, q=numpy.ndarray)",1,xarray
"numpy.percentile(a=numpy.ndarray, axis=int, q=numpy.float64)",1,xarray
numpy.quantile,1,xarray
"numpy.percentile(a=numpy.ndarray, axis=NoneType, q=numpy.ndarray)",1,xarray
"numpy.percentile(a=numpy.ndarray, axis=NoneType, q=numpy.float64)",1,xarray
"numpy.moveaxis(a=numpy.ndarray, destination=int, source=int)",1,xarray
"numpy.nanquantile(a=numpy.ndarray, axis=numpy.ndarray, interpolation=str, q=numpy.ndarray)",1,xarray
"numpy.ndarray.mean(numpy.ndarray, keepdims=builtins.bool)",1,xarray
numpy.round,1,matplotlib
numpy.nanquantile,1,xarray
"numpy.nanmean(a=numpy.ndarray, axis=Type[numpy.float64], dtype=NoneType)",1,xarray
numpy.dtype == Type[numpy.float16],1,xarray
numpy.asarray(a=numpy.float16),1,xarray
"numpy.nanmean(a=numpy.ndarray, axis=Type[numpy.float16], dtype=NoneType)",1,xarray
numpy.ndarray + numpy.float64,1,xarray
numpy.ndarray + xarray.core.dataarray.DataArray,1,xarray
numpy.ma.core.MaskedArray.max,1,matplotlib
"numpy.array(tuple[numpy.float64, numpy.float64, numpy.float64, int])",1,matplotlib
"numpy.empty(tuple, dtype=Type[builtins.object])",1,xarray
"numpy.ndarray[tuple] = tuple[str, numpy.int64, numpy.int64]",1,xarray
"numpy.isscalar(element=tuple[str, numpy.int64, numpy.int64])",1,xarray
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,xarray
"numpy.ndarray[tuple[NoneType, NoneType, NoneType]]",1,xarray
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, slice[NoneType, NoneType, NoneType]]]",1,xarray
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType], builtins.ellipsis]] = numpy.ndarray",1,xarray
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], builtins.ellipsis]] = numpy.ndarray",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[NoneType, NoneType, int], builtins.ellipsis]]",1,xarray
"numpy.asarray(a=list[list[numpy.float64]], dtype=Type[builtins.float])",1,matplotlib
"numpy.asarray(a=list[float], dtype=numpy.dtype)",1,xarray
numpy.log2,1,matplotlib
"numpy.asarray(a=list[float], dtype=str)",1,xarray
numpy.array(numpy.timedelta64),1,xarray
numpy.isscalar(element=numpy.timedelta64),1,xarray
"numpy.asarray(a=list[tuple[str, int, int]])",1,xarray
"numpy.ndarray[slilist[tuple[str, int, int]]e[NoneType, NoneType, NoneType]] = list[tuple[str, int, int]]",1,xarray
Type[numpy.int64].__mro__,1,matplotlib
"numpy.ma.core.power(a=float, b=numpy.ndarray)",1,matplotlib
numpy.ndarray.argsort(numpy.ndarray),1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], int, int, builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, int, slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
numpy.log,1,matplotlib
numpy.log10,1,matplotlib
"numpy.ndarray[tuple[int, int, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray.transpose(numpy.ndarray, tuple[int, int, int, int])",1,xarray
Type[numpy.ndarray].__mro__,1,matplotlib
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int, int, int, int])",1,xarray
"numpy.full(fill_value=int, shape=tuple[int, int, int])",1,xarray
Type[numpy.float64].__mro__,1,matplotlib
numpy.ndarray.index,1,matplotlib
numpy.complex,1,xarray
"numpy.mean(a=numpy.ndarray, axis=NoneType)",1,xarray
"numpy.percentile(a=numpy.ndarray, axis=int, q=numpy.ndarray)",1,xarray
"numpy.percentile(a=numpy.ndarray, axis=list[int], q=numpy.float64)",1,xarray
"numpy.percentile(a=numpy.ndarray, axis=list[int], q=numpy.ndarray)",1,xarray
"numpy.nanmean(a=numpy.ndarray, axis=NoneType, dtype=NoneType)",1,xarray
numpy.ndarray[tuple] = datetime.date,1,xarray
numpy.isscalar(element=datetime.date),1,xarray
numpy.asarray(a=datetime.date),1,xarray
numpy.asarray(a=list[datetime.date]),1,xarray
"numpy.ma.core.MaskedArray(copy=numpy.ndarray, data=builtins.bool, mask=numpy.ndarray)",1,xarray
"numpy.ma.core.MaskedArray(copy=numpy.ndarray, data=builtins.bool, mask=numpy.bool_)",1,xarray
"numpy.ma.floatore.MaskedArray[tuple[int, int]] = float",1,xarray
"numpy.unravel_index(list[numpy.int64], tuple[int, int])",1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=numpy.ma.core.MaskedArray, y=numpy.ndarray)",1,xarray
"numpy.ma.core.MaskedArray.filled(fill_value=float, self=numpy.ma.core.MaskedArray)",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=numpy.ma.core.MaskedArray, y=numpy.ma.core.MaskedArray)",1,xarray
"numpy.asarray(a=numpy.ma.core.MaskedArray, dtype=numpy.dtype)",1,xarray
"numpy.array(tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64], dtype=Type[builtins.float])",1,matplotlib
numpy.ma.core.MaskedArray.dtype,1,xarray
numpy.ma.core.getmaskarray(arr=numpy.ma.core.MaskedArray),1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, int, builtins.ellipsis]]",1,xarray
"numpy.array(tuple[int, int, int, int], dtype=Type[builtins.float])",1,matplotlib
numpy.ndarray[int] = int,1,xarray
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=float, pad_width=tuple[int, int])",1,xarray
"numpy.nanmean(a=numpy.ndarray, axis=NoneType, dtype=int)",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, int], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=list[tuple[int, int]])",1,xarray
"numpy.array(tuple[int, int, int])",1,matplotlib
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=tuple[int, int])",1,xarray
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=NoneType)",1,xarray
"numpy.array(tuple[numpy.float64, numpy.float64, numpy.float64, float])",1,matplotlib
numpy.ndarray.imag,1,xarray
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=int, pad_width=tuple[tuple[int, int], tuple[int, int], tuple[int, int]])",1,xarray
"numpy.ma.core.filled(a=numpy.ndarray, fill_value=float)",1,matplotlib
"numpy.full_like(a=xarray.core.variable.Variable, dtype=NoneType, fill_value=int)",1,xarray
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, size=tuple[int, int])",1,xarray
numpy.numpy.ndarrayool_ & numpy.ndarray,1,xarray
"numpy.array(tuple[int, int, numpy.float64, numpy.float64], dtype=Type[builtins.float])",1,matplotlib
"numpy.ma.core.masked_where(a=numpy.ndarray, condition=numpy.ndarray)",1,xarray
numpy.random.mtrand.RandomState.random_sample,1,xarray
"numpy.asarray(a=pandas.core.arrays.categorical.Categorical, dtype=numpy.dtype)",1,xarray
"numpy.asarray(a=builtins.bool, dtype=Type[builtins.bool])",1,matplotlib
"numpy.asarray(a=tuple[int, int], dtype=Type[builtins.float])",1,matplotlib
numpy.mean(a=numpy.ndarray),1,xarray
numpy.ndarray.sum,1,xarray
"numpy.array(tuple[float, float, float, float], dtype=Type[builtins.float])",1,matplotlib
"numpy.array(list[tuple[numpy.float64, numpy.float64, numpy.float64, int]], Type[builtins.float])",1,matplotlib
"numpy.sum(a=numpy.ndarray, axis=int, dtype=NoneType)",1,xarray
numpy.sum(a=xarray.core.dataarray.DataArray),1,xarray
numpy.hstack(tup=list[numpy.ndarray]),1,xarray
"numpy.sum(a=numpy.ndarray, axis=NoneType, dtype=NoneType)",1,xarray
numpy.sum(a=numpy.ndarray),1,xarray
"numpy.isclose(a=float, b=float)",1,matplotlib
"numpy.result_type(numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.arange(numpy.int64, numpy.int64, NoneType)",1,xarray
numpy.int64 == numpy.int64,1,xarray
numpy.ndarray - numpy.float64,1,xarray
"numpy.broadcast_arrays(args=tuple[numpy.ndarray, numpy.ndarray])",1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=list[int], y=numpy.ndarray)",1,xarray
numpy.ravel(a=pandas.core.indexes.interval.IntervalIndex),1,xarray
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int, int, int, int, int)",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=pandas.core.indexes.base.Index, y=pandas.core.indexes.base.Index)",1,xarray
"numpy.hstack(tup=tuple[numpy.ndarray, numpy.ndarray, numpy.int64])",1,matplotlib
numpy.ndarray.base,1,xarray
numpy.dtype(pandas.core.dtypes.dtypes.IntervalDtype),1,xarray
numpy.finfo(dtype=Type[builtins.float]),1,matplotlib
numpy.finfo.tiny,1,matplotlib
"numpy.asarray(a=tuple[int, float], dtype=Type[builtins.float])",1,matplotlib
"numpy.asarray(a=pandas.core.arrays.interval.IntervalArray, dtype=numpy.dtype)",1,xarray
int += numpy.float64,1,xarray
numpy.asarray(a=pandas.core.arrays.categorical.Categorical),1,xarray
numpy.asarray(a=list[list[list[float]]]),1,xarray
numpy.asarray(a=list[list[list[int]]]),1,xarray
"numpy.asarray(a=tuple[float, float], dtype=Type[builtins.float])",1,matplotlib
"numpy.full(fill_value=int, shape=tuple)",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], numpy.ndarray, numpy.ndarray]]",1,xarray
numpy.asanyarray(a=list[list[numpy.float64]]),1,matplotlib
"numpy.array(list[tuple[numpy.float64, numpy.float64, numpy.float64]])",1,matplotlib
numpy.asarray(a=list[list]),1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int])",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, builtins.ellipsis]]",1,xarray
"numpy.asarray(a=numpy.float64, dtype=numpy.dtype)",1,xarray
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, NoneType, NoneType], builtins.ellipsis]]",1,xarray
"numpy.result_type(numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.result_type(numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray)",1,xarray
"numpy.ndarray.transpose(numpy.ndarray, tuple[int, int])",1,xarray
"numpy.sum(a=numpy.ndarray, axis=tuple[int, int], dtype=NoneType)",1,xarray
"numpy.append(arr=numpy.ndarray, values=numpy.ndarray)",1,matplotlib
"numpy.searchsorted(a=numpy.ndarray, v=numpy.ndarray)",1,xarray
"numpy.result_type(dask.array.core.Array, numpy.ndarray)",1,xarray
"numpy.array_equal(a1=numpy.ndarray, a2=numpy.ndarray)",1,matplotlib
"numpy.array(tuple[int, int, int, float], dtype=Type[builtins.float])",1,matplotlib
numpy.ravel(a=pandas.core.indexes.numeric.Float64Index),1,xarray
numpy.ravel(a=pandas.core.indexes.base.Index),1,xarray
numpy.any(a=numpy.ma.core.MaskedArray),1,matplotlib
"numpy.nanargmax(a=numpy.ndarray, axis=int)",1,xarray
"numpy.searchsorted(a=numpy.ndarray, v=numpy.ndarray)",1,matplotlib
"numpy.nanstd(a=numpy.ndarray, axis=NoneType, ddof=int, dtype=NoneType)",1,xarray
"numpy.array(list[tuple[numpy.float64, int, int]])",1,matplotlib
"numpy.ones(dtype=Type[numpy.int64], shape=int)",1,xarray
"numpy.sum(a=list[tuple[int, int]], axis=int)",1,xarray
"numpy.array(numpy.ma.core.MaskedArray, copy=builtins.bool)",1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=xarray.conventions.BoolTypeArray, y=numpy.ndarray)",1,xarray
"numpy.pad(array=numpy.ndarray, kwargs=dict, mode=str, pad_width=list[tuple[int, int]])",1,xarray
numpy.ravel(a=float),1,xarray
numpy.ndarray.take,1,matplotlib
numpy.atleast_1d(arys=tuple[list]),1,matplotlib
"numpy.array(list[int], dtype=numpy.dtype)",1,matplotlib
"numpy.asarray(a=list[int], dtype=Type[builtins.float])",1,matplotlib
"numpy.asarray(a=list[tuple[numpy.float64, Union[float, numpy.float64]]], dtype=Type[builtins.float])",1,matplotlib
"numpy.asarray(a=list[tuple[Union[float, numpy.float64], Union[float, numpy.float64]]], dtype=Type[builtins.float])",1,matplotlib
"numpy.concatenate(list[Union[list[tuple[float, float]], numpy.ndarray]], axis=int)",1,matplotlib
numpy.empty(tuple[int]),1,matplotlib
"numpy.vectorize(otypes=str, pyfunc=builtins.function, signature=list[Type[builtins.float]])",1,xarray
"numpy.array(list[tuple[float, float, float, float]], Type[builtins.float])",1,matplotlib
"numpy.asarray(a=list[Union[list[numpy.float64], numpy.ndarray]], dtype=Type[builtins.float])",1,matplotlib
numpy.asarray(a=matplotlib.transforms.Bbox),1,matplotlib
"numpy.ndarray.mean(numpy.ndarray, axis=builtins.bool, keepdims=int)",1,xarray
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType, slice[NoneType, NoneType, NoneType]]]",1,xarray
Type[numpy.ndarray] in dict,1,xarray
"numpy.ndarray[tuple[builtins.ellipsis, NoneType]]",1,xarray
"numpy.testing._private.utils.assert_array_equal(x=dict, y=dict)",1,xarray
numpy.floating,1,matplotlib
numpy.ndarray + list[list[float]],1,matplotlib
"numpy.asanyarray(a=list[tuple[float, float]], dtype=Type[builtins.float])",1,matplotlib
"numpy.ndarray[tuple[NoneType, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,xarray
numpy.ma.core.MaskedArray.min,1,matplotlib
"numpy.ndarray[slifloate[int, NoneType, int]] = float",1,matplotlib
"numpy.array(list[Union[list[numpy.float64], numpy.ndarray]])",1,matplotlib
"numpy.asarray(a=list[tuple[Union[float, numpy.float64], float]], dtype=Type[builtins.float])",1,matplotlib
"numpy.asanyarray(a=tuple[tuple[int, int], tuple[float, float]])",1,matplotlib
"numpy.asanyarray(a=tuple[tuple[float, float], tuple[float, float]])",1,matplotlib
"numpy.hypot(float, float)",1,matplotlib
"numpy.atleast_1d(arys=tuple[tuple[int, int]])",1,xarray
"numpy.hstack(tup=tuple[numpy.ndarray, numpy.ndarray, numpy.float64])",1,matplotlib
"numpy.einsum(kwargs=dict, operands=tuple[str, numpy.ndarray, numpy.ndarray])",1,xarray
"numpy.einsum(kwargs=dict, operands=tuple[str, numpy.ndarray])",1,xarray
numpy.zeros(tuple),1,xarray
"numpy.array(tuple[numpy.ndarray, numpy.ndarray], dtype=Type[builtins.float])",1,matplotlib
dask.array.core.Array == numpy.int64,1,xarray
"numpy.asanyarray(a=tuple[tuple[float, int], tuple[float, int]])",1,matplotlib
"numpy.asarray(a=list[Union[numpy.ndarray, tuple[numpy.float64, numpy.float64]]], dtype=Type[builtins.float])",1,matplotlib
"numpy.asanyarray(a=tuple[tuple[float, int], tuple[float, float]])",1,matplotlib
"numpy.asarray(a=list, dtype=numpy.dtype)",1,xarray
numpy.atleast_3d(arys=tuple[numpy.ndarray]),1,matplotlib
numpy.ufunc.signature,1,xarray
numpy.ufunc.nout,1,xarray
"numpy.ndarray[tuple[int, int, int]]",1,xarray
"numpy.result_type(numpy.ndarray, numpy.ndarray, numpy.ndarray, dask.array.core.Array)",1,xarray
numpy.atleast_1d(arys=tuple[list[float]]),1,matplotlib
"numpy.array(list[list[Union[float, numpy.float64]]], dtype=Type[builtins.float])",1,matplotlib
"numpy.ndarray + tuple[int, int]",1,matplotlib
"numpy.asarray(a=list[numpy.uint8], dtype=Type[numpy.uint8])",1,matplotlib
numpy.asarray(a=list[list[str]]),1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int, builtins.ellipsis]]",1,xarray
numpy.array(matplotlib.backends._backend_agg.BufferRegion),1,matplotlib
"numpy.frombuffer(numpy.ndarray, Type[numpy.uint8])",1,matplotlib
"numpy.testing._private.utils.assert_array_equal(x=xarray.core.variable.Variable, y=xarray.core.dataarray.DataArray)",1,xarray
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], builtins.ellipsis]] = numpy.ndarray",1,xarray
numpy.convolve,1,matplotlib
"numpy.array(list[tuple[str, int]], dtype=list[tuple[str, Union[Type[builtins.object], str]]])",1,xarray
"numpy.full_like(a=xarray.core.dataarray.DataArray, dtype=NoneType, fill_value=int)",1,xarray
numpy.lexsort(tuple[xarray.core.dataarray.DataArray]),1,xarray
"numpy.ndarray[tuple[int, int, builtins.ellipsis]] = numpy.ndarray",1,xarray
numpy.ndarray.item(numpy.ndarray),1,matplotlib
"numpy.ndarray[tuple[int, int]] = matplotlib.axes._subplots.AxesSubplot",1,matplotlib
"numpy.ndarray[tuple[int, int]] = int",1,xarray
numpy.ceil(list[float]),1,matplotlib
numpy.isinf(int),1,matplotlib
numpy.round_(a=float),1,matplotlib
numpy.absolute(int),1,matplotlib
"numpy.isclose(a=numpy.float64, atol=int, b=numpy.ndarray, rtol=numpy.float64)",1,matplotlib
~numpy.bool_,1,matplotlib
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], list[int]]] = int",1,xarray
"numpy.ndarray[tuple[list[int], sliinte[NoneType, NoneType, NoneType]]] = int",1,xarray
"numpy.ndarray[tuple[int, sliinte[NoneType, NoneType, NoneType]]] = int",1,xarray
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], int]] = int",1,xarray
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1,xarray
"numpy.array(tuple[int, int, float, float], dtype=Type[builtins.float])",1,matplotlib
"numpy.empty(tuple[int, int], dtype=Type[builtins.object])",1,matplotlib
"numpy.ravel_multi_index(list[tuple[int, int]], tuple[int, int])",1,matplotlib
numpy.iterable(y=matplotlib.gridspec.SubplotSpec),1,matplotlib
"numpy.cumsum(a=tuple[int, int, int])",1,xarray
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int32])",1,xarray
"numpy.result_type(dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, numpy.ndarray, numpy.ndarray)",1,xarray
numpy.lib.stride_tricks.as_strided,1,xarray
numpy.ix_(args=tuple[numpy.ndarray]),1,xarray
numpy.ma.core.MaskedArray.shrink_mask(self=numpy.ma.core.MaskedArray),1,matplotlib
numpy.ndarray.astype,1,matplotlib
numpy.argmax,1,xarray
"numpy.lib.stride_tricks.as_strided(shape=builtins.bool, strides=tuple[int, int, int], writeable=tuple[int, int, int], x=numpy.ndarray)",1,xarray
numpy.lib.stride_tricks,1,xarray
numpy.lib,1,xarray
numpy.ix_,1,xarray
numpy.ndarray.strides,1,xarray
numpy.min_scalar_type(list[numpy.int64]),1,matplotlib
"numpy.result_type(numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray)",1,xarray
numpy.ma.core.getmask(a=list[numpy.int64]),1,matplotlib
"numpy.ma.core.array(copy=numpy.bool_, data=numpy.ndarray, dtype=numpy.dtype, mask=builtins.bool)",1,matplotlib
"numpy.result_type(dask.array.core.Array, numpy.ndarray, dask.array.core.Array)",1,xarray
"numpy.array(numpy.ndarray, copy=builtins.bool, subok=builtins.bool)",1,matplotlib
"numpy.result_type(dask.array.core.Array, dask.array.core.Array, dask.array.core.Array, dask.array.core.Array)",1,xarray
"numpy.full_like(a=xarray.core.dataarray.DataArray, dtype=NoneType, fill_value=float)",1,xarray
numpy.sin(builtins.range),1,matplotlib
"numpy.full_like(a=xarray.core.variable.Variable, dtype=NoneType, fill_value=float)",1,xarray
"numpy.pad(array=numpy.ndarray, mode=str, pad_width=list[tuple[int, int]])",1,matplotlib
"numpy.ndarray[tuple[slituple[int, int, int]e[NoneType, NoneType, NoneType], slituple[int, int, int]e[NoneType, NoneType, NoneType], slituple[int, int, int]e[NoneType, int, NoneType]]] = tuple[int, int, int]",1,matplotlib
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.cumsum(a=tuple[int, int, int, int])",1,xarray
"numpy.isfinite(tuple[int, int])",1,matplotlib
dask.array.core.Array & numpy.bool_,1,xarray
"numpy.meshgrid(kwargs=dict, xi=tuple[numpy.ndarray, numpy.ndarray])",1,xarray
numpy.atleast_1d(arys=tuple[builtins.range]),1,matplotlib
"numpy.cumsum(a=tuple[int, int, int, int, int])",1,xarray
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], builtins.ellipsis]]",1,xarray
"numpy.ndarray[tuple[slice[numpy.int64, numpy.int64, NoneType], slice[NoneType, NoneType, NoneType]]]",1,matplotlib
"numpy.unravel_index(list[int], tuple[int, int])",1,matplotlib
numpy.atleast_1d(arys=tuple[list[int]]),1,matplotlib
"numpy.ndarray[tuple[slinumpy.ndarraye[numpy.int64, NoneType, numpy.int64], slinumpy.ndarraye[numpy.int64, NoneType, numpy.int64]]] = numpy.ndarray",1,skimage
"numpy.ndarray.any(numpy.ndarray, NoneType)",1,pandas
"numpy.amin(a=numpy.ndarray, axis=int)",1,skimage
numpy.dtype(pandas.core.frame.DataFrame),1,pandas
"numpy.dtype in list[Type[Union[numpy.float32, numpy.float64]]]",1,pandas
"numpy.result_type(Type[builtins.int], numpy.dtype)",1,pandas
numpy.float64.values,1,pandas
Type[numpy.dtypeuiltins.int] == numpy.dtype,1,pandas
"numpy.result_type(numpy.dtype, numpy.dtype)",1,pandas
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
Type[numpy.Type[builtins.object]ool_] == Type[builtins.object],1,pandas
numpy.ndarray.values,1,pandas
numpy.dtype(Type[pandas._libs.tslibs.timestamps.Timestamp]),1,pandas
numpy.dtype(Type[builtins.list]),1,pandas
numpy.int64 - float,1,skimage
"numpy.testing._private.utils.assert_array_less(x=numpy.ndarray, y=numpy.ndarray)",1,skimage
"numpy.testing._private.utils.assert_almost_equal(actual=tuple[int, int], decimal=int, desired=list[float])",1,skimage
numpy.float64 += float,1,skimage
numpy.dtype(Type[numpy.timedelta64]),1,pandas
numpy.float32.values,1,pandas
numpy.float32.ndim,1,pandas
"numpy.array(list[list[Union[float, numpy.float64]]])",1,skimage
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[float, float, float, float, float, float], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int, int, int, int], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[float, float, float, float], dtype=Type[builtins.object])",1,pandas
"numpy.result_type(Type[builtins.int], Type[builtins.int])",1,pandas
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1,pandas
numpy.array(list[list[numpy.float64]]),1,skimage
"numpy.asarray(a=tuple[pandas._libs.interval.Interval], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[numpy.datetime64, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.datetime64, pandas._libs.tslibs.nattype.NaTType]]",1,pandas
"numpy.asarray(a=list[Union[int, pandas._libs.tslibs.nattype.NaTType]])",1,pandas
numpy.result_type,1,pandas
"numpy.array(list, dtype=Type[numpy.timedelta64])",1,pandas
Type[numpy.str_] == Type[numpy.str_],1,pandas
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.ndarray, desired=numpy.float64)",1,skimage
numpy.arctan(numpy.float64),1,skimage
"numpy.ndarray[slilist[list]e[NoneType, NoneType, NoneType]] = list[list]",1,pandas
"numpy.ndarray[slilist[tuple[int]]e[NoneType, NoneType, NoneType]] = list[tuple[int]]",1,pandas
"numpy.ndarray[slilist[dict]e[NoneType, NoneType, NoneType]] = list[dict]",1,pandas
"numpy.ndarray[slilist[pandas.core.strings.StringMethods]e[NoneType, NoneType, NoneType]] = list[pandas.core.strings.StringMethods]",1,pandas
"numpy.array(list[tuple[int, int]])",1,pandas
numpy.array(list[builtins.set]),1,pandas
numpy.array(list[builtins.generator]),1,pandas
"numpy.ndarray[slilist[Union[builtins.bytes, float]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bytes, float]]",1,pandas
"numpy.array(list[Union[float, list[Union[float, int]], str]], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[int, numpy.int32, numpy.int64]], dtype=str)",1,pandas
"numpy.array(list[Union[int, numpy.int32, numpy.int64, str]], dtype=str)",1,pandas
"numpy.array(list[Union[builtins.bool, float]], dtype=str)",1,pandas
"numpy.array(list[Union[float, numpy.float32, numpy.float64]], dtype=str)",1,pandas
"numpy.array(list[Union[int, numpy.float32, numpy.float64, str]], dtype=str)",1,pandas
"numpy.array(list[Union[decimal.Decimal, float]])",1,pandas
"numpy.ndarray[slilist[Union[builtins.bool, float, int, str]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, float, int, str]]",1,pandas
Type[numpy.str_] == pandas.core.dtypes.dtypes.PeriodDtype,1,pandas
pandas.core.dtypes.dtypes.PeriodDtype == Type[numpy.str_],1,pandas
"Type[numpy.int8] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
numpy.real(val=float),1,skimage
numpy.nan_to_num(x=list[numpy.float64]),1,skimage
"Type[numpy.uint8] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
"numpy.dtype in tuple[numpy.dtype, numpy.dtype]",1,pandas
"Type[numpy.uint16] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
"Type[numpy.uint32] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
"numpy.power(numpy.ndarray, int)",1,skimage
numpy.dtype(pandas.core.dtypes.dtypes.PeriodDtype),1,pandas
"Type[numpy.float16] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
"numpy.array(list[Union[builtins.bool, str]], copy=builtins.bool)",1,pandas
"numpy.asarray(a=list[Union[builtins.bool, str]], dtype=Type[builtins.object])",1,pandas
numpy.dtype(pandas.core.dtypes.dtypes.DatetimeTZDtype),1,pandas
pandas.core.dtypes.dtypes.DatetimeTZDtype == Type[numpy.str_],1,pandas
Type[numpy.str_] == pandas.core.dtypes.dtypes.DatetimeTZDtype,1,pandas
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1,pandas
"numpy.array(tuple[str, str, str, str, str, str], copy=builtins.bool)",1,pandas
"numpy.array(tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",1,pandas
"numpy.array(tuple[int, int, int, int, int, int, int, int, int, int, int, int], copy=builtins.bool)",1,pandas
"numpy.asarray(a=list[tuple[Union[float, int], Union[float, int], Union[float, int]]])",1,skimage
"numpy.ones(dtype=Type[numpy.float64], shape=int)",1,skimage
numpy.transpose(a=pandas.core.indexes.base.Index),1,pandas
"numpy.transpose(a=pandas.core.indexes.base.Index, axes=int)",1,pandas
"numpy.transpose(a=pandas.core.indexes.datetimes.DatetimeIndex, axes=int)",1,pandas
"numpy.transpose(a=pandas.core.indexes.period.PeriodIndex, axes=int)",1,pandas
"numpy.transpose(a=pandas.core.indexes.timedeltas.TimedeltaIndex, axes=int)",1,pandas
numpy.transpose(a=pandas.core.indexes.numeric.UInt64Index),1,pandas
"numpy.transpose(a=pandas.core.indexes.numeric.UInt64Index, axes=int)",1,pandas
"numpy.transpose(a=pandas.core.indexes.range.RangeIndex, axes=int)",1,pandas
numpy.transpose(a=pandas.core.indexes.interval.IntervalIndex),1,pandas
"numpy.transpose(a=pandas.core.indexes.interval.IntervalIndex, axes=int)",1,pandas
numpy.transpose(a=pandas.core.indexes.multi.MultiIndex),1,pandas
"numpy.transpose(a=pandas.core.indexes.multi.MultiIndex, axes=int)",1,pandas
numpy.transpose(a=pandas.core.indexes.numeric.Int64Index),1,pandas
numpy.c_,1,skimage
numpy.iinfo(int_type=Type[numpy.uint8]),1,pandas
numpy.frombuffer,1,skimage
"numpy.ndarray.searchsorted(numpy.ndarray, builtins.bool, side=NoneType, sorter=str)",1,pandas
"numpy.searchsorted(a=pandas.core.indexes.period.PeriodIndex, sorter=builtins.range, v=pandas._libs.tslibs.period.Period)",1,pandas
"numpy.searchsorted(a=pandas.core.indexes.timedeltas.TimedeltaIndex, v=pandas._libs.tslibs.timedeltas.Timedelta)",1,pandas
"numpy.searchsorted(a=pandas.core.indexes.numeric.Int64Index, v=int)",1,pandas
"numpy.searchsorted(a=pandas.core.indexes.numeric.Int64Index, sorter=builtins.range, v=int)",1,pandas
"numpy.searchsorted(a=pandas.core.indexes.numeric.UInt64Index, v=int)",1,pandas
"numpy.searchsorted(a=pandas.core.indexes.numeric.UInt64Index, sorter=builtins.range, v=int)",1,pandas
"numpy.searchsorted(a=pandas.core.indexes.base.Index, sorter=builtins.range, v=builtins.bool)",1,pandas
"numpy.searchsorted(a=pandas.core.series.Series, sorter=builtins.range, v=int)",1,pandas
"numpy.searchsorted(a=pandas.core.indexes.base.Index, sorter=builtins.range, v=int)",1,pandas
"numpy.searchsorted(a=pandas.core.series.Series, v=float)",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, float, side=NoneType, sorter=str)",1,pandas
"numpy.searchsorted(a=pandas.core.series.Series, sorter=builtins.range, v=float)",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, float, side=numpy.ndarray, sorter=str)",1,pandas
"numpy.searchsorted(a=pandas.core.series.Series, v=int)",1,pandas
"numpy.transpose(a=pandas.core.indexes.numeric.Int64Index, axes=int)",1,pandas
numpy.transpose(a=pandas.core.series.Series),1,pandas
numpy.random.mtrand._rand,1,skimage
numpy.asanyarray(a=pandas.core.arrays.datetimes.DatetimeArray),1,pandas
"numpy.array(list[Union[float, numpy.float64]], dtype=numpy.dtype)",1,pandas
"numpy.array(list[Union[float, numpy.float16]], dtype=numpy.dtype)",1,pandas
"numpy.array(list[Union[float, numpy.float32]], dtype=numpy.dtype)",1,pandas
"numpy.repeat(a=pandas.core.indexes.timedeltas.TimedeltaIndex, repeats=builtins.range)",1,pandas
"numpy.repeat(a=pandas.core.indexes.numeric.UInt64Index, repeats=builtins.range)",1,pandas
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[float, numpy.timedelta64]], copy=builtins.bool)",1,pandas
numpy.asanyarray(a=pandas.core.arrays.timedeltas.TimedeltaArray),1,pandas
"numpy.repeat(a=pandas.core.indexes.range.RangeIndex, repeats=builtins.range)",1,pandas
"numpy.repeat(a=pandas.core.indexes.numeric.Float64Index, repeats=builtins.range)",1,pandas
"numpy.asarray(a=tuple[builtins.bool, builtins.bool], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval], dtype=Type[builtins.object])",1,pandas
"numpy.array(tuple[str, str, str], copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.interval.Interval]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.interval.Interval]]",1,pandas
"numpy.ndim(a=list[Union[float, numpy.timedelta64]])",1,pandas
"numpy.ndarray == tuple[int, int, int]",1,skimage
"numpy.ndarray.repeat(numpy.ndarray, builtins.range)",1,pandas
numpy.ndim(a=list[numpy.datetime64]),1,pandas
"numpy.ndarray.repeat(numpy.ndarray, builtins.range, axis=NoneType)",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, int]] = numpy.float64",1,skimage
"numpy.vstack(tup=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,skimage
numpy.random.RandomState,1,skimage
"numpy.ndarray[int] = tuple[int, int]",1,skimage
numpy.int64 >= float,1,skimage
"numpy.asarray(a=list[Union[float, pandas._libs.tslibs.period.Period]])",1,pandas
numpy.array(list[numpy.float16]),1,pandas
numpy.array(list[numpy.int16]),1,pandas
numpy.linalg.pinv(a=numpy.ndarray),1,skimage
"numpy.asarray(a=list[Union[float, numpy.datetime64]])",1,pandas
"numpy.ndim(a=list[Union[NoneType, numpy.datetime64]])",1,pandas
"numpy.ndim(a=list[Union[float, numpy.datetime64]])",1,pandas
"numpy.array(list[Union[decimal.Decimal, float]], dtype=str)",1,pandas
numpy.complex64,1,pandas
"numpy.sqrt(numpy.ndarray, numpy.ndarray)",1,skimage
"numpy.array(list[builtins.bytes], dtype=numpy.dtype)",1,pandas
numpy.float32 == numpy.float32,1,pandas
"numpy.array(list[numpy.uint32], dtype=numpy.dtype)",1,pandas
numpy.float32(numpy.uint32),1,pandas
numpy.fromfile,1,skimage
"numpy.array(list[numpy.int16], dtype=numpy.dtype)",1,pandas
numpy.float32(numpy.int16),1,pandas
"numpy.array(list[numpy.float64], dtype=numpy.dtype)",1,pandas
numpy.complex64(builtins.complex),1,pandas
numpy.complex64 == numpy.complex64,1,pandas
"numpy.array(list[numpy.complex128], dtype=numpy.dtype)",1,pandas
numpy.complex128 == numpy.complex128,1,pandas
numpy.bool_(numpy.bool_),1,pandas
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.uint8])",1,skimage
"numpy.issubdtype(arg1=Type[numpy.int16], arg2=Type[numpy.uint16])",1,skimage
numpy.str_ == numpy.str_,1,pandas
numpy.float32(numpy.uint8),1,pandas
"numpy.array(list[numpy.uint8], dtype=numpy.dtype)",1,pandas
numpy.float64(x=numpy.int32),1,pandas
numpy.ulonglong == numpy.uint64,1,pandas
"numpy.mean(a=numpy.ndarray, axis=tuple[int, int])",1,skimage
numpy.ndarray % numpy.ndarray,1,skimage
"numpy.lib.stride_tricks.as_strided(shape=tuple[numpy.int64, numpy.int64, int, int], strides=tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64], x=numpy.ndarray)",1,skimage
"tuple[int, int] * numpy.ndarray",1,skimage
"numpy.ndarray.view(numpy.ndarray, numpy.dtype)",1,skimage
numpy.ulonglong(int),1,pandas
numpy.float64(x=numpy.float32),1,pandas
"numpy.array(list[numpy.int32], dtype=numpy.dtype)",1,pandas
"numpy.array(list[numpy.uint16], dtype=numpy.dtype)",1,pandas
numpy.float64(x=numpy.uint16),1,pandas
"numpy.array(list[numpy.uint64], dtype=numpy.dtype)",1,pandas
numpy.float64(x=numpy.uint64),1,pandas
"numpy.array(list[numpy.int8], dtype=numpy.dtype)",1,pandas
numpy.float64(x=numpy.int8),1,pandas
"numpy.array(list[builtins.bool], dtype=numpy.dtype)",1,pandas
numpy.numpy.bytes_ytes_ == numpy.bytes_,1,pandas
"numpy.array(list[Union[builtins.complex, float]])",1,pandas
"numpy.array(list[datetime.date], copy=builtins.bool)",1,pandas
"numpy.asarray(a=list[Union[numpy.float64, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1,pandas
numpy.pandas.core.arrays.boolean.BooleanArrayool_ ** pandas.core.arrays.boolean.BooleanArray,1,pandas
numpy.pandas.core.arrays.boolean.BooleanArrayool_ % pandas.core.arrays.boolean.BooleanArray,1,pandas
"numpy.ndarray[slilist[Union[numpy.float64, pandas._libs.missing.NAType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.float64, pandas._libs.missing.NAType]]",1,pandas
"numpy.asarray(a=list[Union[numpy.bool_, numpy.int8]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[numpy.bool_, numpy.int8]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.bool_, numpy.int8]]",1,pandas
numpy.bool_.index,1,pandas
"numpy.arange(float, float, dtype=str)",1,xarray
numpy.pandas.core.arrays.boolean.BooleanArrayool_ - pandas.core.arrays.boolean.BooleanArray,1,pandas
numpy.numpy.ndarrayool_ * numpy.ndarray,1,pandas
numpy.numpy.ndarrayool_ / numpy.ndarray,1,pandas
"numpy.asarray(a=tuple[int, int])",1,pandas
"numpy.asarray(a=tuple[int, int, int])",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int])",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int])",1,pandas
numpy.pandas.core.arrays.boolean.BooleanArrayool_ / pandas.core.arrays.boolean.BooleanArray,1,pandas
numpy.pandas.core.arrays.boolean.BooleanArrayool_ // pandas.core.arrays.boolean.BooleanArray,1,pandas
"numpy.asarray(a=list[Union[numpy.int8, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1,pandas
numpy.array(list[pandas.core.arrays.boolean.BooleanArray]),1,pandas
"numpy.array(list[numpy.datetime64], copy=builtins.bool)",1,pandas
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=numpy.datetime64)",1,pandas
"numpy.empty(tuple[int, int], Type[numpy.uint16])",1,skimage
"numpy.asarray(a=list[numpy.bool_], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=list[Union[numpy.bool_, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1,pandas
list[pandas.core.arrays.numpy.int64oolean.BooleanArray] * numpy.int64,1,pandas
"numpy.array(PIL.BmpImagePlugin.BmpImageFile, dtype=NoneType)",1,skimage
numpy.pandas.core.arrays.boolean.BooleanArrayool_ * pandas.core.arrays.boolean.BooleanArray,1,pandas
"numpy.issubdtype(arg1=Type[numpy.uint16], arg2=Type[numpy.uint8])",1,skimage
pandas.core.arrays.integer.Int64Dtype == Type[numpy.object_],1,pandas
pandas.core.arrays.numpy.bool_oolean.BooleanArray == numpy.bool_,1,pandas
"numpy.issubdtype(arg1=Type[numpy.uint8], arg2=Type[numpy.uint16])",1,skimage
numpy.pandas.core.arrays.boolean.BooleanArrayool_ + pandas.core.arrays.boolean.BooleanArray,1,pandas
numpy.numpy.ndarrayool_ - numpy.ndarray,1,pandas
numpy.median,1,skimage
"numpy.median(a=numpy.ndarray, axis=tuple[int, int])",1,skimage
"numpy.testing._private.utils.assert_equal(actual=int, desired=numpy.ndarray)",1,skimage
"numpy.amin(a=numpy.ndarray, axis=tuple[int, int])",1,skimage
"numpy.array(list[Union[NoneType, numpy.datetime64, pandas._libs.tslibs.nattype.NaTType]])",1,pandas
"numpy.array(list[Union[NoneType, numpy.timedelta64]])",1,pandas
"numpy.array(list[Union[NoneType, numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]])",1,pandas
"numpy.ndarray[slilist[Union[datetime.date, float]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.date, float]]",1,pandas
"tuple[int, int] + numpy.ndarray",1,skimage
"numpy.array(list[list[Union[NoneType, int]]], dtype=Type[builtins.object])",1,pandas
numpy.complex64(int),1,pandas
numpy.object_(str),1,pandas
numpy.bytes_(builtins.bytes),1,pandas
numpy.array(list[list]),1,pandas
numpy.matrix(data=str),1,pandas
"numpy.ndarray[tuple[slifloate[int, int, NoneType]]] = float",1,pandas
"numpy.empty(tuple, dtype=Type[builtins.bool])",1,pandas
not numpy.ndarray,1,pandas
"numpy.array(int, dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[NoneType, numpy.datetime64]])",1,pandas
"numpy.array(list[Union[float, numpy.datetime64, pandas._libs.tslibs.nattype.NaTType]])",1,pandas
"numpy.array(list[Union[float, numpy.datetime64]])",1,pandas
"numpy.array(list[Union[datetime.datetime, float]])",1,pandas
"numpy.array(list[Union[builtins.complex, float, int]])",1,pandas
"numpy.array(list[Union[builtins.complex, float]], dtype=Type[numpy.complex64])",1,pandas
"numpy.testing._private.utils.assert_almost_equal(actual=tuple[int, int, int], decimal=int, desired=tuple[numpy.float64, numpy.float64, numpy.float64])",1,skimage
"numpy.array(list[NoneType], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[float, pandas._libs.tslibs.timestamps.Timestamp]])",1,pandas
"numpy.array(list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]])",1,pandas
"numpy.array(list[Union[float, pandas._libs.tslibs.timedeltas.Timedelta]])",1,pandas
numpy.linalg.svd,1,skimage
"numpy.array(list[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType]])",1,pandas
"numpy.array(list[Union[datetime.timedelta, float]])",1,pandas
"numpy.einsum(operands=tuple[str, numpy.ndarray, numpy.ndarray])",1,skimage
"numpy.array(list[Union[numpy.datetime64, pandas._libs.tslibs.period.Period]], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[float, pandas._libs.tslibs.period.Period]])",1,pandas
"numpy.array(list[Union[NoneType, float]])",1,pandas
"numpy.asarray(a=list[list[builtins.bool]], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[NoneType, numpy.ndarray]], dtype=str)",1,pandas
"numpy.array(list[numpy.datetime64], dtype=Type[builtins.object])",1,pandas
"numpy.find_common_type(array_types=list[Type[Union[numpy.complex128, numpy.int32]]], scalar_types=list)",1,pandas
"numpy.find_common_type(array_types=list[Type[Union[numpy.int32, numpy.uint32]]], scalar_types=list)",1,pandas
"numpy.mean(a=numpy.ndarray, axis=tuple[int, int], dtype=Type[numpy.float16])",1,skimage
"numpy.find_common_type(array_types=list[Type[Union[numpy.float16, numpy.float32]]], scalar_types=list)",1,pandas
"numpy.find_common_type(array_types=list[Type[Union[numpy.float32, numpy.int16]]], scalar_types=list)",1,pandas
"numpy.find_common_type(array_types=list[Type[Union[numpy.float64, numpy.int16]]], scalar_types=list)",1,pandas
"numpy.array(list[list[float]], dtype=Type[numpy.float64])",1,skimage
"numpy.find_common_type(array_types=list[Type[Union[builtins.object, numpy.int16]]], scalar_types=list)",1,pandas
"numpy.array(list, dtype=Type[builtins.float])",1,pandas
"numpy.array(list[list[Union[int, pandas._libs.tslibs.nattype.NaTType, str]]])",1,pandas
"numpy.mean(a=numpy.ndarray, axis=tuple[int, int], dtype=Type[numpy.uint8])",1,skimage
"numpy.ndarray.fill(numpy.ndarray, pandas._libs.tslibs.timestamps.Timestamp)",1,pandas
"numpy.amax(a=numpy.ndarray, axis=tuple[int, int])",1,skimage
"numpy.ndarray.fill(numpy.ndarray, pandas._libs.tslibs.period.Period)",1,pandas
numpy.min_scalar_type(int),1,pandas
Type[numpy.uint64] == Type[numpy.uint64],1,pandas
numpy.array(list[numpy.float32]),1,pandas
numpy.datetime64 != pandas._libs.tslibs.timestamps.Timestamp,1,pandas
"numpy.ndarray[slilist[Union[list[int], str]]e[NoneType, NoneType, NoneType]] = list[Union[list[int], str]]",1,pandas
"numpy.can_cast(numpy.dtype, Type[builtins.bool], casting=str)",1,skimage
numpy.can_cast,1,skimage
numpy.array(collections.deque),1,skimage
numpy.empty_like(list[NoneType]),1,pandas
"numpy.ndarray[slilist[Union[int, list[int]]]e[NoneType, NoneType, NoneType]] = list[Union[int, list[int]]]",1,pandas
"numpy.ndarray[slilist[Union[float, list[int]]]e[NoneType, NoneType, NoneType]] = list[Union[float, list[int]]]",1,pandas
"numpy.ndarray[slilist[Union[int, tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[int, tuple[int, int]]]",1,pandas
"numpy.array(list[float], dtype=Type[builtins.int])",1,pandas
"numpy.ndarray[slilist[Union[list[int], tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[list[int], tuple[int, int]]]",1,pandas
"numpy.ndarray[slilist[Union[NoneType, list[int]]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, list[int]]]",1,pandas
numpy.ndarray.round(numpy.ndarray),1,pandas
numpy.array(list[numpy.uint8]),1,pandas
numpy.array(list[numpy.uint16]),1,pandas
numpy.array(list[numpy.uint32]),1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, int, side=builtins.range, sorter=str)",1,pandas
"numpy.searchsorted(a=pandas.core.indexes.datetimes.DatetimeIndex, sorter=builtins.range, v=pandas._libs.tslibs.timestamps.Timestamp)",1,pandas
"numpy.searchsorted(a=pandas.core.indexes.datetimes.DatetimeIndex, v=pandas._libs.tslibs.timestamps.Timestamp)",1,pandas
numpy.ndarray[int] = numpy.uint16,1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int16], casting=builtins.bool, copy=str)",1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int16], copy=builtins.bool)",1,pandas
"numpy.arctan2(numpy.int64, numpy.int64)",1,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int32], casting=builtins.bool, copy=str)",1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int32], copy=builtins.bool)",1,pandas
pandas.core.arrays.integer.Int32Dtype == numpy.dtype,1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint8], casting=builtins.bool, copy=str)",1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint8], copy=builtins.bool)",1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint16], casting=builtins.bool, copy=str)",1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint16], copy=builtins.bool)",1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint32], casting=builtins.bool, copy=str)",1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint32], copy=builtins.bool)",1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint64], casting=builtins.bool, copy=str)",1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint64], copy=builtins.bool)",1,pandas
pandas.core.arrays.integer.Int16Dtype == numpy.dtype,1,pandas
numpy.ndarray[int] = numpy.int16,1,pandas
pandas.core.arrays.integer.Int8Dtype == numpy.dtype,1,pandas
"numpy.array(list[pandas._libs.missing.NAType], copy=builtins.bool)",1,pandas
pandas.core.arrays.categorical.Categorical > numpy.int64,1,pandas
"numpy.array(pandas.core.indexes.numeric.Int64Index, copy=Type[numpy.float64], dtype=builtins.bool)",1,pandas
"numpy.ndarray[slice[numpy.int64, numpy.int64, NoneType]]",1,skimage
"numpy.asarray(a=list[Union[int, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1,pandas
numpy.ndarray >= str,1,pandas
"numpy.ndarray[tuple[slice[numpy.int64, numpy.int64, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
numpy.array(list[pandas.core.dtypes.dtypes.CategoricalDtype]),1,pandas
numpy.int64 in pandas._libs.index.Int64Engine,1,pandas
pandas.core.arrays.Type[numpy.object_]oolean.BooleanDtype == Type[numpy.object_],1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.CategoricalDtype]])",1,pandas
"numpy.ndarray[slice[int, numpy.int64, NoneType]]",1,skimage
numpy.int64 in numpy.ndarray,1,pandas
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int])",1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int8], casting=builtins.bool, copy=str)",1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int8], copy=builtins.bool)",1,pandas
"numpy.zeros(int, str)",1,skimage
numpy.ndarray[int] = numpy.uint64,1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, str, side=numpy.ndarray, sorter=str)",1,pandas
pandas.core.arrays.integer.UInt8Dtype == numpy.dtype,1,pandas
"numpy.ones(dtype=Type[numpy.uint8], shape=int)",1,pandas
"numpy.ones(dtype=Type[numpy.uint16], shape=int)",1,pandas
"numpy.ones(dtype=Type[numpy.uint32], shape=int)",1,pandas
numpy.ndarray + pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.ndarray - pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.ndarray * pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.ndarray // pandas.core.arrays.integer.IntegerArray,1,pandas
"numpy.where(numpy.ndarray, builtins.bool, pandas.core.series.Series)",1,pandas
numpy.ndarray % pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.isinf(pandas.core.series.Series),1,pandas
"numpy.ndarray[tuple[tuple[int, int, int], slice[NoneType, NoneType, NoneType]]]",1,skimage
float % numpy.ndarray,1,pandas
numpy.float64 + pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.float64 + numpy.ndarray,1,pandas
numpy.float64 * pandas.core.arrays.integer.IntegerArray,1,pandas
"numpy.ones(dtype=Type[numpy.int64], shape=int)",1,pandas
"numpy.ones(dtype=Type[numpy.int16], shape=int)",1,pandas
"numpy.ones(dtype=Type[numpy.int8], shape=int)",1,pandas
numpy.dtype == pandas.core.arrays.integer.Int32Dtype,1,pandas
pandas.core.arrays.integer.UInt32Dtype == numpy.dtype,1,pandas
"numpy.asarray(a=pandas.core.arrays.boolean.BooleanArray, dtype=NoneType)",1,pandas
"numpy.ndarray[tuple[tuple[int, int, int, int, int, int, int, int, int, int], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.where(pandas.core.series.Series, builtins.bool, pandas.core.series.Series)",1,pandas
numpy.dtype == pandas.core.arrays.integer.Int8Dtype,1,pandas
numpy.dtype == pandas.core.arrays.integer.Int16Dtype,1,pandas
numpy.dtype == pandas.core.arrays.integer.Int64Dtype,1,pandas
"numpy.where(builtins.bool, builtins.bool, pandas.core.series.Series)",1,pandas
numpy.dtype == pandas.core.arrays.integer.UInt8Dtype,1,pandas
numpy.dtype == pandas.core.arrays.integer.UInt16Dtype,1,pandas
numpy.dtype == pandas.core.arrays.integer.UInt32Dtype,1,pandas
numpy.dtype == pandas.core.arrays.integer.UInt64Dtype,1,pandas
pandas.core.arrays.integer.UInt16Dtype == numpy.dtype,1,pandas
pandas.core.arrays.integer.UInt64Dtype == numpy.dtype,1,pandas
"numpy.array(list[Union[NoneType, builtins.bool]], copy=builtins.bool)",1,pandas
"numpy.asarray(a=pandas.core.arrays.categorical.Categorical, dtype=Type[builtins.bool])",1,pandas
numpy.asanyarray(a=list[builtins.bool]),1,pandas
"numpy.ndarray[tuple[slice[numpy.int64, int, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.add(pandas.core.arrays.boolean.BooleanArray, pandas.core.arrays.boolean.BooleanArray)",1,pandas
"numpy.ndarray.dot(numpy.ndarray, numpy.ndarray)",1,skimage
"numpy.add(pandas.core.series.Series, pandas.core.arrays.boolean.BooleanArray)",1,pandas
"numpy.add(pandas.core.arrays.boolean.BooleanArray, numpy.ndarray)",1,pandas
"numpy.add(numpy.ndarray, pandas.core.arrays.boolean.BooleanArray)",1,pandas
numpy.dtype(builtins.bool),1,pandas
"numpy.add(builtins.bool, pandas.core.arrays.boolean.BooleanArray)",1,pandas
"numpy.add(pandas.core.arrays.boolean.BooleanArray, str)",1,pandas
"numpy.logical_or(numpy.ndarray, builtins.bool)",1,pandas
"numpy.logical_or(builtins.bool, numpy.ndarray)",1,pandas
"numpy.logical_and(pandas.core.arrays.boolean.BooleanArray, pandas.core.arrays.boolean.BooleanArray)",1,pandas
"numpy.logical_and(pandas.core.series.Series, pandas.core.arrays.boolean.BooleanArray)",1,pandas
"numpy.logical_and(pandas.core.arrays.boolean.BooleanArray, numpy.ndarray)",1,pandas
"numpy.logical_and(numpy.ndarray, pandas.core.arrays.boolean.BooleanArray)",1,pandas
"numpy.logical_and(pandas.core.arrays.boolean.BooleanArray, builtins.bool)",1,pandas
"numpy.array(list[Union[NoneType, builtins.bool]], dtype=str)",1,pandas
"numpy.all(a=numpy.ndarray, axis=int)",1,skimage
"numpy.testing._private.utils.assert_almost_equal(actual=tuple[numpy.float64, numpy.float64, numpy.float64], desired=tuple[numpy.float64, numpy.float64, numpy.float64])",1,skimage
str / numpy.ndarray,1,pandas
"numpy.array(list[int], copy=str, dtype=builtins.bool)",1,pandas
numpy.int64 == numpy.uint64,1,skimage
numpy.fabs(float),1,pandas
numpy.sum(a=pandas.core.indexes.timedeltas.TimedeltaIndex),1,pandas
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timestamps.Timestamp * numpy.ndarray,1,pandas
str // numpy.ndarray,1,pandas
str ** numpy.ndarray,1,pandas
"numpy.asarray(a=list[Union[dict, float]], dtype=Type[builtins.object])",1,pandas
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timestamps.Timestamp % numpy.ndarray,1,pandas
numpy.ndarray % pandas.core.arrays.boolean.BooleanArray,1,pandas
"numpy.asarray(a=list[pandas._libs.missing.NAType], dtype=Type[builtins.object])",1,pandas
numpy.uint,1,skimage
numpy.dtype == pandas.core.arrays.boolean.BooleanDtype,1,pandas
"numpy.testing._private.utils.assert_almost_equal(actual=numpy.uint8, desired=numpy.uint8)",1,skimage
"numpy.logical_and(builtins.bool, pandas.core.arrays.boolean.BooleanArray)",1,pandas
"numpy.logical_and(pandas.core.arrays.boolean.BooleanArray, str)",1,pandas
"numpy.testing._private.utils.assert_almost_equal(actual=tuple[int, int, int, int, int, int], desired=tuple[int, int, int, int, int, int])",1,skimage
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]], copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[Union[numpy.str_, str]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.str_, str]]",1,pandas
"numpy.unique(ar=numpy.ndarray, return_inverse=builtins.bool)",1,pandas
"numpy.array(list[Union[tuple[int, int], tuple[int]]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[tuple[int, int], tuple[int]]]e[NoneType, NoneType, NoneType]] = list[Union[tuple[int, int], tuple[int]]]",1,pandas
"numpy.array(list[Union[tuple[pandas._libs.tslibs.timestamps.Timestamp], tuple[str, str]]], dtype=Type[builtins.object])",1,pandas
"numpy.array(builtins.range, copy=builtins.bool)",1,pandas
"numpy.ndarray[slice[numpy.int64, int, NoneType]]",1,skimage
"numpy.flip(axis=int, m=numpy.ndarray)",1,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.int], copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[Union[builtins.complex, int]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, int]]",1,pandas
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=Type[builtins.float], dtype=builtins.bool)",1,pandas
"numpy.array(pandas.core.arrays.categorical.Categorical, dtype=Type[builtins.object])",1,pandas
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=Type[builtins.int], dtype=builtins.bool)",1,pandas
"numpy.array(pandas.core.arrays.categorical.Categorical, dtype=Type[builtins.float])",1,pandas
numpy.flip,1,skimage
numpy.array(list[pandas.core.arrays.boolean.BooleanDtype]),1,pandas
"numpy.logical_xor(numpy.ndarray, builtins.bool)",1,pandas
"numpy.ndarray[slibuiltins.boole[NoneType, NoneType, NoneType]] = builtins.bool",1,pandas
"numpy.logical_xor(builtins.bool, numpy.ndarray)",1,pandas
numpy.logical_not(pandas.core.arrays.boolean.BooleanArray),1,pandas
"numpy.ufunc.reduce(numpy.ufunc, pandas.core.arrays.boolean.BooleanArray)",1,pandas
"numpy.asarray(a=list[Union[builtins.bool, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slipandas.core.series.Seriese[NoneType, int, NoneType]] = pandas.core.series.Series",1,pandas
"numpy.zeros(int, dtype=Type[numpy.float64])",1,skimage
numpy.ndarray ^ builtins.bool,1,pandas
"numpy.testing._private.utils.assert_almost_equal(actual=int, desired=int)",1,skimage
"numpy.testing._private.utils.assert_almost_equal(actual=list[numpy.float64], desired=list[numpy.float64])",1,skimage
pandas.core.arrays.numpy.bool_oolean.BooleanArray | numpy.bool_,1,pandas
"numpy.testing._private.utils.assert_almost_equal(actual=tuple[numpy.float64, numpy.float64], desired=tuple[numpy.float64, numpy.float64])",1,skimage
numpy.pandas.core.arrays.boolean.BooleanArrayool_ | pandas.core.arrays.boolean.BooleanArray,1,pandas
numpy.pandas.core.arrays.boolean.BooleanArrayool_ & pandas.core.arrays.boolean.BooleanArray,1,pandas
pandas.core.arrays.numpy.bool_oolean.BooleanArray ^ numpy.bool_,1,pandas
numpy.float64 / pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.float64 / numpy.ndarray,1,pandas
numpy.float64 % pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.exp(float),1,pandas
numpy.all(a=int),1,pandas
numpy.any(a=int),1,pandas
"numpy.ascontiguousarray(a=numpy.ndarray, dtype=Type[numpy.float32])",1,skimage
"numpy.any(a=pandas.core.arrays.sparse.array.SparseArray, out=builtins.bool)",1,pandas
numpy.any(a=float),1,pandas
"numpy.ndarray[tuple[numpy.ndarray, slice[NoneType, NoneType, int]]]",1,skimage
"numpy.sum(a=pandas.core.arrays.sparse.array.SparseArray, out=numpy.float64)",1,pandas
numpy.cumsum(a=pandas.core.arrays.sparse.array.SparseArray),1,pandas
"numpy.lituple[numpy.ndarray, numpy.ndarray, numpy.ndarray].index_tricks.CClass[tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]]",1,skimage
"numpy.cumsum(a=pandas.core.arrays.sparse.array.SparseArray, out=pandas.core.arrays.sparse.array.SparseArray)",1,pandas
"numpy.mean(a=pandas.core.arrays.sparse.array.SparseArray, dtype=Type[numpy.int64])",1,pandas
"numpy.array(numpy.ndarray, dtype=str, order=Type[numpy.float64])",1,skimage
numpy.sin(list[int]),1,pandas
numpy.ndarray != numpy.float64,1,pandas
numpy.sin(pandas.core.arrays.sparse.array.SparseArray),1,pandas
numpy.all(a=float),1,pandas
"numpy.array(list[tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64]])",1,skimage
"numpy.full(dtype=numpy.dtype, fill_value=str, shape=tuple[int])",1,pandas
"numpy.array(list[Union[builtins.bool, float, int]], dtype=Type[builtins.object])",1,pandas
"numpy.greater(numpy.ndarray, numpy.ndarray)",1,pandas
"numpy.greater(pandas.core.arrays.sparse.array.SparseArray, numpy.ndarray)",1,pandas
numpy.ndarray += pandas.core.arrays.sparse.array.SparseArray,1,pandas
"numpy.result_type(numpy.ndarray, Type[builtins.bool])",1,pandas
numpy.generic.item(numpy.float64),1,pandas
"numpy.ndarray[slilist[Union[builtins.bool, float, int]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, float, int]]",1,pandas
"numpy.asarray(a=pandas.core.indexes.datetimes.DatetimeIndex, dtype=str)",1,pandas
numpy.isnan(builtins.bool),1,pandas
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, int, NoneType], slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, NoneType, NoneType]]] = builtins.bool",1,skimage
"numpy.asarray(a=list[int], dtype=Type[numpy.int32])",1,pandas
"numpy.result_type(int, numpy.dtype)",1,pandas
"numpy.result_type(float, numpy.dtype)",1,pandas
"numpy.allclose(a=numpy.ndarray, atol=float, b=numpy.ndarray, rtol=int)",1,skimage
"numpy.issubdtype(arg1=Type[numpy.bool_], arg2=Type[numpy.integer])",1,pandas
numpy.sin(int),1,pandas
"numpy.add(pandas.core.arrays.sparse.array.SparseArray, int)",1,pandas
numpy.modf(numpy.ndarray),1,pandas
"numpy.ndarray.shape = tuple[int, int, int]",1,skimage
"numpy.lexsort(tuple[pandas.core.indexes.numeric.Float64Index, pandas.core.indexes.numeric.Float64Index])",1,pandas
numpy.float16.dtype,1,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.float16)",1,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.float32)",1,pandas
"numpy.ndarray[slistre[int, int, NoneType]] = str",1,pandas
"numpy.array_equal(a1=tuple[float, float, float], a2=tuple[int, int, int])",1,skimage
"numpy.frombuffer(builtins.bytes, dtype=str)",1,skimage
numpy.float32 / float,1,skimage
pandas.core.dtypes.dtypes.IntervalDtype == numpy.dtype,1,pandas
"numpy.putmask(pandas.core.arrays.interval.IntervalArray, numpy.ndarray, pandas._libs.interval.Interval)",1,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, pandas._libs.interval.Interval)",1,pandas
"numpy.ndarray[slinumpy.float16e[int, int, NoneType]] = numpy.float16",1,pandas
"numpy.ndarray[slinumpy.float32e[int, int, NoneType]] = numpy.float32",1,pandas
"numpy.searchsorted(a=pandas.core.indexes.base.Index, v=str)",1,pandas
"numpy.asarray(a=pandas.core.arrays.sparse.array.SparseArray, dtype=Type[builtins.object])",1,pandas
numpy.linumpy.ndarray.index_tricks.RClass[numpy.ndarray],1,skimage
"numpy.result_type(numpy.dtype, Type[numpy.datetime64])",1,pandas
numpy.float64 -= numpy.float64,1,skimage
"numpy.full(dtype=numpy.dtype, fill_value=numpy.datetime64, shape=tuple[int])",1,pandas
"numpy.lituple[slice[numpy.float64, numpy.float64, numpy.float64], slice[numpy.float64, numpy.float64, numpy.float64], slice[numpy.float64, numpy.float64, numpy.float64]].index_tricks.MGridClass[tuple[slice[numpy.float64, numpy.float64, numpy.float64], slice[numpy.float64, numpy.float64, numpy.float64], slice[numpy.float64, numpy.float64, numpy.float64]]]",1,skimage
numpy.ndarray[pandas.builtins.boolore.arrays.sparse.array.SparseArray] = builtins.bool,1,pandas
"numpy.searchsorted(a=numpy.ndarray, v=int)",1,pandas
"numpy.ndarray[slilist[Union[float, numpy.float64]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.float64]]",1,pandas
"numpy.ndarray[slilist[Union[int, numpy.float64]]e[NoneType, NoneType, NoneType]] = list[Union[int, numpy.float64]]",1,pandas
"numpy.arange(numpy.float64, numpy.float64, numpy.float64)",1,skimage
"numpy.array_equal(a1=list, a2=numpy.ndarray)",1,pandas
pandas._linumpy.ndarrays.missing.NAType + numpy.ndarray,1,pandas
"numpy.empty_like(pandas.core.arrays.string_.StringArray, dtype=str)",1,pandas
"numpy.asarray(a=list[Union[pandas._libs.missing.NAType, str]], dtype=str)",1,pandas
numpy.amin(a=pandas.core.arrays.string_.StringArray),1,pandas
numpy.amax(a=pandas.core.arrays.string_.StringArray),1,pandas
numpy.ndarray % float,1,pandas
"numpy.add(pandas.core.arrays.sparse.array.SparseArray, numpy.ndarray)",1,pandas
numpy.exp(int),1,pandas
numpy.float64 % numpy.ndarray,1,pandas
numpy.ndarray != numpy.int64,1,pandas
numpy.sin(pandas.core.arrays.integer.IntegerArray),1,pandas
numpy.sqrt(pandas.core.arrays.integer.IntegerArray),1,pandas
"numpy.add(pandas.core.arrays.integer.IntegerArray, numpy.ndarray)",1,pandas
numpy.cos,1,skimage
"numpy.subtract(pandas.core.arrays.integer.IntegerArray, numpy.ndarray)",1,pandas
"numpy.subtract(numpy.ndarray, int)",1,pandas
"numpy.ufunc.reduce(numpy.ufunc, pandas.core.arrays.integer.IntegerArray)",1,pandas
numpy.sum(a=pandas.core.arrays.integer.IntegerArray),1,pandas
"numpy.sum(a=numpy.ndarray, where=numpy.ndarray)",1,pandas
numpy.array(list[pandas.core.arrays.integer.Int8Dtype]),1,pandas
numpy.array(list[pandas.core.arrays.integer.Int16Dtype]),1,pandas
numpy.array(list[pandas.core.arrays.integer.Int32Dtype]),1,pandas
numpy.array(list[pandas.core.arrays.integer.Int64Dtype]),1,pandas
numpy.array(list[pandas.core.arrays.integer.UInt8Dtype]),1,pandas
numpy.array(list[pandas.core.arrays.integer.UInt16Dtype]),1,pandas
"numpy.allclose(a=numpy.ndarray, atol=float, b=numpy.ndarray, rtol=float)",1,skimage
numpy.log(pandas.core.arrays.integer.IntegerArray),1,pandas
numpy.sign(pandas.core.arrays.integer.IntegerArray),1,pandas
"numpy.array(list[Union[float, int]], dtype=Type[builtins.object])",1,pandas
pandas.core.arrays.integer.IntegerArray + numpy.ndarray,1,pandas
numpy.ndarray / pandas.core.arrays.integer.IntegerArray,1,pandas
"numpy.ndarray[tuple[tuple[int, int, int, int, int], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.ones(dtype=str, shape=tuple[int])",1,pandas
"numpy.ndarray[tuple[slice[int, numpy.int64, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.array(list[Union[NoneType, int]], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.array(list[Union[int, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1,pandas
numpy.absolute(pandas.core.arrays.integer.IntegerArray),1,pandas
"numpy.array(str, copy=builtins.bool)",1,pandas
numpy.int64 * numpy.float64,1,skimage
"numpy.array(numpy.ndarray, copy=Type[builtins.int], dtype=builtins.bool)",1,pandas
"numpy.asarray(a=pandas.core.arrays.integer.IntegerArray, dtype=Type[builtins.object])",1,pandas
numpy.tril(m=numpy.ndarray),1,skimage
"numpy.clip(a=numpy.ndarray, a_max=NoneType, a_min=int, out=numpy.ndarray)",1,skimage
numpy.array(list[pandas.core.arrays.integer.UInt32Dtype]),1,pandas
numpy.array(list[pandas.core.arrays.integer.UInt64Dtype]),1,pandas
"numpy.ndarray[slilist[Union[float, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[float, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
numpy.ndarray // pandas.core.arrays.sparse.array.SparseArray,1,pandas
"numpy.asarray(a=float, dtype=numpy.dtype)",1,pandas
"numpy.asarray(a=int, dtype=numpy.dtype)",1,pandas
numpy.ndarray + pandas.core.arrays.sparse.array.SparseArray,1,pandas
numpy.ndarray - pandas.core.arrays.sparse.array.SparseArray,1,pandas
numpy.ndarray * pandas.core.arrays.sparse.array.SparseArray,1,pandas
numpy.ndarray / pandas.core.arrays.sparse.array.SparseArray,1,pandas
numpy.ndarray % pandas.core.arrays.sparse.array.SparseArray,1,pandas
numpy.mean(a=list[float]),1,pandas
numpy.ndarray ** pandas.core.arrays.sparse.array.SparseArray,1,pandas
"numpy.asarray(a=builtins.bool, dtype=numpy.dtype)",1,pandas
numpy.ndarray != builtins.bool,1,pandas
pandas.core.arrays.sparse.array.SparseArray & numpy.ndarray,1,pandas
"numpy.full(dtype=numpy.dtype, fill_value=numpy.int64, shape=tuple[int])",1,pandas
pandas.core.arrays.sparse.array.SparseArray * numpy.ndarray,1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
"numpy.testing._private.utils.assert_allclose(actual=numpy.float64, desired=float, rtol=float)",1,skimage
"numpy.ndarray[slilist[Union[float, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[float, pandas._libs.tslibs.timedeltas.Timedelta]]",1,pandas
"numpy.ndarray[tuple[int, int, int]] = numpy.float64",1,skimage
"numpy.concatenate(list[Union[pandas.core.indexes.numeric.Float64Index, pandas.core.indexes.numeric.Int64Index]])",1,pandas
"numpy.allclose(a=numpy.ndarray, b=list[int])",1,skimage
numpy.dtype == pandas.core.arrays.sparse.dtype.SparseDtype,1,pandas
numpy.ndarray != float,1,pandas
"numpy.testing._private.utils.assert_allclose(actual=numpy.float64, atol=float, desired=int, rtol=float)",1,skimage
"numpy.ndarray[tuple[int, slifloate[int, int, NoneType]]] = float",1,skimage
"numpy.result_type(numpy.ndarray, Type[builtins.float])",1,pandas
"numpy.array(list[list[int]], dtype=Type[numpy.float64])",1,skimage
"numpy.eye(N=int, dtype=str)",1,pandas
numpy.matrix.dtype,1,pandas
numpy.asarray(a=numpy.matrix),1,pandas
numpy.result_type(Type[builtins.float]),1,pandas
numpy.array(list[pandas.core.arrays.sparse.dtype.SparseDtype]),1,pandas
"numpy.ndarray - tuple[float, float]",1,skimage
"numpy.empty(tuple[int, int, int], Type[numpy.uint8])",1,skimage
"numpy.asarray(a=tuple[int, int, int, int])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.lib.stride_tricks.as_strided(shape=tuple[int, int, int], strides=tuple[int, int, int], x=numpy.ndarray)",1,skimage
"numpy.array(list[Union[tuple, tuple[tuple[str, int]]]], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[tuple, tuple[tuple[str, int], tuple[str, int]], tuple[tuple[str, int]]]], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[tuple], dtype=Type[builtins.object])",1,pandas
"numpy.repeat(a=pandas.tests.extension.json.array.JSONArray, axis=int, repeats=int)",1,pandas
"numpy.repeat(pandas.tests.extension.json.array.JSONArray, int, foo=str)",1,pandas
"numpy.argsort(a=pandas.tests.extension.json.array.JSONArray, kind=str)",1,pandas
"numpy.asarray(a=pandas.tests.extension.json.array.JSONArray, dtype=NoneType)",1,pandas
"numpy.ndarray[slilist[pandas.tests.extension.json.array.JSONArray]e[NoneType, NoneType, NoneType]] = list[pandas.tests.extension.json.array.JSONArray]",1,pandas
"numpy.ndarray[slilist[collections.UserDict]e[NoneType, NoneType, NoneType]] = list[collections.UserDict]",1,pandas
numpy.int_,1,skimage
numpy.int64 in dict,1,pandas
"numpy.asarray(a=tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[numpy.float64, str]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.float64, str]]",1,pandas
numpy.nansum(a=numpy.ndarray),1,pandas
numpy.asarray(a=pandas.tests.extension.json.array.JSONArray),1,pandas
"numpy.array(list[Union[tuple, tuple[tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int]]]], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[tuple, tuple[tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int]], tuple[tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int]]]], dtype=Type[builtins.object])",1,pandas
numpy.array(list[pandas.tests.extension.json.array.JSONDtype]),1,pandas
"numpy.add(pandas.tests.extension.decimal.array.DecimalArray, decimal.Decimal)",1,pandas
"numpy.add(pandas.core.series.Series, pandas.tests.extension.decimal.array.DecimalArray)",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.tests.extension.json.array.JSONDtype]])",1,pandas
numpy.array(pandas.tests.extension.json.array.JSONArray),1,pandas
"numpy.asarray(a=list[collections.UserDict], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[dict], copy=Type[builtins.object], dtype=builtins.bool)",1,pandas
"numpy.asarray(a=list[collections.UserDict], dtype=numpy.dtype)",1,pandas
"numpy.array(list[dict], copy=str, dtype=builtins.bool)",1,pandas
list[pandas.tests.extension.json.array.JSONArray] * numpy.int64,1,pandas
numpy.array(list[pandas.tests.extension.json.array.JSONArray]),1,pandas
numpy.ndarray[numpy.ndarray] = list[pandas.tests.extension.json.array.JSONArray],1,pandas
"numpy.array(list, copy=Type[builtins.object], dtype=builtins.bool)",1,pandas
pandas.tests.extension.json.array.JSONDtype == numpy.dtype,1,pandas
"numpy.array(list[dict], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
numpy.nanprod(a=numpy.ndarray),1,pandas
"numpy.ndarray[slilist[Union[numpy.int64, str]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.int64, str]]",1,pandas
numpy.ndarray[numpy.ndarray] = list[pandas.core.arrays.period.PeriodArray],1,pandas
"numpy.reciprocal(numpy.ndarray, out=numpy.ndarray)",1,skimage
float != numpy.float64,1,pandas
numpy.uint8 == numpy.int64,1,skimage
"numpy.ndarray[slilist[builtins.set]e[NoneType, NoneType, NoneType]] = list[builtins.set]",1,pandas
"numpy.ndarray[slituple[float, float, float, float]e[NoneType, NoneType, NoneType]] = tuple[float, float, float, float]",1,pandas
"numpy.ndarray[slilist[Union[builtins.range, numpy.ndarray]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.range, numpy.ndarray]]",1,pandas
numpy.asarray(a=dict),1,pandas
numpy.uint8(numpy.int64),1,skimage
"numpy.array(list[numpy.float64], copy=builtins.bool)",1,pandas
"numpy.array(numpy.bool_, copy=NoneType, dtype=builtins.bool)",1,pandas
"numpy.ndarray.fill(numpy.ndarray, numpy.bool_)",1,pandas
numpy.min_scalar_type(numpy.int64),1,skimage
"numpy.ndarray[tuple[slilist[int]e[NoneType, NoneType, NoneType], int]] = list[int]",1,pandas
"numpy.ndarray[tuple[slipandas.core.series.Seriese[NoneType, NoneType, NoneType], int]] = pandas.core.series.Series",1,pandas
"numpy.isclose(a=numpy.ndarray, b=numpy.ndarray)",1,pandas
numpy.str_ + str,1,pandas
"numpy.full(dtype=numpy.dtype, fill_value=pandas._libs.tslibs.nattype.NaTType, shape=tuple[int])",1,pandas
"numpy.concatenate(list[Union[list[int], numpy.ndarray]])",1,skimage
numpy.bool_(pandas._libs.tslibs.timedeltas.Timedelta),1,pandas
"numpy.ndarray[slilist[Union[float, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.int64]]",1,pandas
"numpy.asarray(a=tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64], dtype=Type[builtins.object])",1,pandas
numpy.timedelta64(),1,pandas
"numpy.ndarray[slilist[Union[float, int, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[float, int, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp, str]]",1,pandas
numpy.float64 != float,1,pandas
"numpy.ndarray[slilist[Union[float, numpy.float64, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.float64, numpy.int64]]",1,pandas
"numpy.ndarray[slilist[Union[numpy.float64, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.float64, numpy.int64]]",1,pandas
"numpy.asanyarray(a=tuple[int, int, int])",1,skimage
"numpy.ndarray.reshape(numpy.ndarray, int)",1,skimage
numpy.ndarray.mean,1,pandas
"numpy.asarray(a=tuple[numpy.int64], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[Union[numpy.datetime64, numpy.float64, numpy.timedelta64]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.datetime64, numpy.float64, numpy.timedelta64]]",1,pandas
numpy.ndarray.view(numpy.ndarray),1,skimage
"numpy.array(list[numpy.bool_], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.asarray(a=tuple[numpy.int64, numpy.int64, numpy.int64], dtype=Type[builtins.object])",1,pandas
"numpy.add(pandas.core.series.Series, decimal.Decimal)",1,pandas
"numpy.asarray(a=tuple[decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal], dtype=Type[builtins.object])",1,pandas
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[int], int)",1,pandas
"numpy.asarray(a=tuple[decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal], dtype=Type[builtins.object])",1,pandas
"numpy.repeat(pandas.core.arrays.sparse.array.SparseArray, int, foo=str)",1,pandas
"numpy.where(numpy.ndarray, pandas.core.arrays.sparse.array.SparseArray, float)",1,pandas
"numpy.where(numpy.ndarray, pandas.core.arrays.sparse.array.SparseArray, pandas.core.arrays.sparse.array.SparseArray)",1,pandas
"numpy.asarray(a=pandas.core.arrays.sparse.array.SparseArray, dtype=Type[numpy.bool_])",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.ndarray, str, NoneType)",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.ndarray, str, numpy.ndarray)",1,pandas
"numpy.result_type(numpy.dtype, Type[builtins.str])",1,pandas
"numpy.result_type(numpy.ndarray, Type[builtins.str])",1,pandas
"numpy.result_type(numpy.ndarray, Type[numpy.int64])",1,pandas
numpy.float64 + pandas.core.arrays.sparse.array.SparseArray,1,pandas
numpy.float64 * pandas.core.arrays.sparse.array.SparseArray,1,pandas
numpy.float64 // numpy.ndarray,1,pandas
numpy.float64 / pandas.core.arrays.sparse.array.SparseArray,1,pandas
numpy.float64 ** numpy.ndarray,1,pandas
numpy.float64 % pandas.core.arrays.sparse.array.SparseArray,1,pandas
"numpy.repeat(a=pandas.core.arrays.sparse.array.SparseArray, axis=int, repeats=int)",1,pandas
"numpy.ndarray[sliinte[int, NoneType, int]] = int",1,pandas
"numpy.array(pandas.core.arrays.sparse.array.SparseArray, copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[Union[int, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[int, numpy.int64]]",1,pandas
"numpy.repeat(a=pandas.core.arrays.period.PeriodArray, repeats=int)",1,pandas
"numpy.array(pandas.core.arrays.period.PeriodArray, dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=list[pandas.tseries.offsets.Day], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[pandas.core.arrays.period.PeriodArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.period.PeriodArray]",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.sparse.dtype.SparseDtype]])",1,pandas
"numpy.issubdtype(arg1=Type[numpy.int64], arg2=Type[numpy.integer])",1,pandas
pandas.core.arrays.sparse.dtype.SparseDtype == numpy.dtype,1,pandas
"numpy.argsort(a=pandas.core.arrays.sparse.array.SparseArray, kind=str)",1,pandas
pandas.core.arrays.sparse.dtype.SparseDtype == Type[numpy.object_],1,pandas
"numpy.ndarray[slilist[pandas.core.arrays.sparse.array.SparseArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.sparse.array.SparseArray]",1,pandas
numpy.result_type(Type[builtins.int]),1,pandas
numpy.atleast_2d(arys=tuple[pandas.core.arrays.sparse.array.SparseArray]),1,pandas
"numpy.where(numpy.ndarray, numpy.float64, numpy.ndarray)",1,pandas
"numpy.result_type(numpy.ndarray, Type[numpy.float64])",1,pandas
numpy.ndarray[pandas.floatore.arrays.sparse.array.SparseArray] = float,1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.string_.StringDtype]])",1,pandas
"numpy.array(pandas.core.arrays.string_.StringArray, dtype=Type[builtins.object])",1,pandas
"numpy.argsort(a=pandas.tests.extension.decimal.array.DecimalArray, kind=str)",1,pandas
"numpy.ndarray.mean(numpy.ndarray, axis=int)",1,pandas
"numpy.ndarray.prod(numpy.ndarray, axis=int)",1,pandas
"numpy.ndarray.std(numpy.ndarray, axis=int)",1,pandas
"numpy.ndarray.var(numpy.ndarray, axis=int)",1,pandas
"numpy.ndarray.all(numpy.ndarray, axis=int)",1,pandas
"numpy.ndarray.any(numpy.ndarray, axis=int)",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, decimal.Decimal, side=NoneType, sorter=str)",1,pandas
"numpy.ndarray.max(numpy.ndarray, axis=int)",1,pandas
numpy.ndarray[numpy.ndarray] = list[decimal.Decimal],1,pandas
"numpy.asarray(a=list, dtype=Type[builtins.bool])",1,pandas
"numpy.array(pandas.tests.extension.decimal.array.DecimalArray, copy=builtins.bool)",1,pandas
numpy.ndarray[numpy.ndarray] = list,1,pandas
"numpy.ndarray[slidecimal.Decimale[NoneType, int, NoneType]] = decimal.Decimal",1,pandas
"numpy.ndarray[slilist[decimal.Decimal]e[NoneType, int, NoneType]] = list[decimal.Decimal]",1,pandas
"numpy.ndarray.min(numpy.ndarray, axis=int)",1,pandas
"numpy.ndarray.sum(numpy.ndarray, axis=int)",1,pandas
"numpy.asarray(a=list[pandas._libs.missing.NAType], dtype=str)",1,pandas
"numpy.ndarray[slilist[pandas.core.arrays.string_.StringArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.string_.StringArray]",1,pandas
list[pandas.core.arrays.string_.StringArray] * numpy.int64,1,pandas
numpy.array(list[pandas.core.arrays.string_.StringArray]),1,pandas
numpy.ndarray[numpy.ndarray] = list[pandas.core.arrays.string_.StringArray],1,pandas
numpy.concatenate(list[pandas.core.arrays.string_.StringArray]),1,pandas
"numpy.repeat(a=pandas.core.arrays.string_.StringArray, axis=int, repeats=int)",1,pandas
"numpy.repeat(pandas.core.arrays.string_.StringArray, int, foo=str)",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.tests.extension.decimal.array.DecimalDtype]])",1,pandas
numpy.ndarray[numpy.ndarray] = decimal.Decimal,1,pandas
numpy.float32 + int,1,skimage
numpy.array(list[pandas.tests.extension.decimal.array.DecimalDtype]),1,pandas
pandas.tests.extension.decimal.array.DecimalDtype == numpy.dtype,1,pandas
"numpy.asarray(a=pandas.tests.extension.decimal.array.DecimalArray, dtype=numpy.dtype)",1,pandas
"numpy.ndarray[slilist[pandas.tests.extension.decimal.array.DecimalArray]e[NoneType, NoneType, NoneType]] = list[pandas.tests.extension.decimal.array.DecimalArray]",1,pandas
numpy.asarray(a=pandas.tests.extension.decimal.array.DecimalArray),1,pandas
numpy.ndarray[list[numpy.int64]] = numpy.int64,1,skimage
"numpy.percentile(a=numpy.ndarray, axis=str, interpolation=int, q=numpy.ndarray)",1,pandas
"numpy.allclose(a=numpy.float64, b=numpy.float64)",1,skimage
"numpy.ma.extras.masked_all(shape=tuple[int, int])",1,pandas
"numpy.can_cast(numpy.int64, numpy.dtype)",1,pandas
numpy.ndarray[numpy.ndarray] = numpy.str_,1,pandas
"numpy.ma.mrecords.fromarrays(arraylist=tuple[numpy.ndarray, numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray], names=tuple[str, str, str])",1,pandas
"numpy.ma.mrecords.fromarrays(arraylist=tuple[numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray], names=tuple[str, str, str])",1,pandas
"numpy.array(list[builtins.complex], copy=builtins.bool)",1,pandas
"numpy.ones(dtype=Type[numpy.float64], shape=int)",1,pandas
"numpy.array(array.array, copy=NoneType, dtype=builtins.bool)",1,pandas
"numpy.ndarray[slilist[tuple[str]]e[NoneType, NoneType, NoneType]] = list[tuple[str]]",1,pandas
"numpy.ndarray[slilist[Union[numpy.ndarray, pandas.core.series.Series]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.ndarray, pandas.core.series.Series]]",1,pandas
numpy.dtype(Type[numpy.str_]),1,pandas
"Type[numpy.str_] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
"numpy.array(str, copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.array(float, dtype=str)",1,pandas
"numpy.array(list[numpy.ndarray], copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[datetime.date]e[NoneType, NoneType, NoneType]] = list[datetime.date]",1,pandas
numpy.ma.core.MaskedArray.filled(self=numpy.ma.core.MaskedArray),1,pandas
numpy.ma.mrecords.fromarrays,1,pandas
numpy.ma.core.getdata(a=numpy.ma.mrecords.MaskedRecords),1,pandas
numpy.ma.mrecords.mrecarray,1,pandas
"numpy.array(tuple[int, int, int, int])",1,skimage
"numpy.ma.extras.masked_all(dtype=str, shape=tuple[int, int])",1,pandas
"numpy.ma.extras.masked_all(dtype=Type[builtins.bool], shape=tuple[int, int])",1,pandas
"numpy.ndarray.astype(numpy.ma.core.MaskedArray, numpy.dtype)",1,pandas
"numpy.ma.builtins.boolore.MaskedArray[tuple[int, int]] = builtins.bool",1,pandas
numpy.ma.ones,1,pandas
numpy.ma.mrecords.MaskedRecords.fill_value,1,pandas
"numpy.ma.mrecords.fromarrays(arraylist=tuple[numpy.ndarray, numpy.ndarray, numpy.ma.core.MaskedArray], names=tuple[str, str, str])",1,pandas
*numpy.recarray,1,pandas
numpy.ma.mrecords.MaskedRecords[str],1,pandas
numpy.ma.masked_array,1,pandas
"numpy.ma.core.MaskedArray(data=numpy.ndarray, mask=list[builtins.bool])",1,pandas
"numpy.ma.core.MaskedArray(data=list[float], mask=builtins.bool)",1,pandas
"numpy.ma.mrecords.fromarrays(arraylist=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], names=tuple[str, str, str])",1,pandas
"numpy.asanyarray(a=list[numpy.int64], dtype=str)",1,pandas
"numpy.array(list[tuple[float, float, int, int]], dtype=list[tuple[str, Type[Union[numpy.float32, numpy.float64, numpy.int32, numpy.int64]]]])",1,pandas
"numpy.ndarray[slilist[list[Union[float, int, str]]]e[NoneType, NoneType, NoneType]] = list[list[Union[float, int, str]]]",1,pandas
"numpy.ndarray[slilist[Union[NoneType, datetime.datetime, float]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, datetime.datetime, float]]",1,pandas
"numpy.ndarray[slilist[Union[numpy.dtype, pandas.core.dtypes.dtypes.DatetimeTZDtype]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.dtype, pandas.core.dtypes.dtypes.DatetimeTZDtype]]",1,pandas
"numpy.ndarray[slilist[Type[numpy.float64]]e[NoneType, NoneType, NoneType]] = list[Type[numpy.float64]]",1,pandas
"numpy.array(list[pandas._libs.tslibs.timestamps.Timestamp], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.array(list[pandas._libs.interval.Interval], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.array(list[Union[NoneType, float]], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.compress(a=list[str], condition=numpy.ndarray)",1,pandas
numpy.ndarray[tuple[numpy.ndarray]] = float,1,pandas
"numpy.array(numpy.dtype, copy=NoneType, dtype=builtins.bool)",1,pandas
"numpy.broadcast_to(array=builtins.bool, shape=tuple[int])",1,pandas
"numpy.ndarray.cumsum(numpy.ndarray, int)",1,pandas
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], slifloate[NoneType, NoneType, int]]] = float",1,pandas
"numpy.asanyarray(a=list[int], dtype=str)",1,pandas
numpy.generic,1,pandas
"numpy.tile(A=pandas.core.indexes.base.Index, reps=tuple[int, int])",1,pandas
"numpy.ndarray.fill(numpy.ndarray, numpy.dtype)",1,pandas
"numpy.ndarray.fill(numpy.ndarray, Type[builtins.object])",1,pandas
"numpy.arange(numpy.int64, dtype=Type[numpy.float32])",1,skimage
builtins.float.is_integer(self=numpy.float64),1,pandas
"numpy.array(numpy.ndarray, dtype=Type[numpy.int32])",1,pandas
numpy.dtype.descr,1,pandas
"numpy.array(list[tuple[numpy.float64, numpy.float64, numpy.float32, numpy.float32, numpy.int64, numpy.int32, numpy.bool_, str]], dtype=list[tuple[str, str]])",1,pandas
"numpy.ndarray.view(numpy.ndarray, Type[numpy.recarray])",1,pandas
"Type[numpy.float64] in tuple[Type[numpy.float32], Type[numpy.float64]]",1,skimage
"numpy.core.records.fromarrays(arrayList=list[numpy.ndarray], dtype=dict)",1,pandas
"numpy.ndarray[slilist[tuple[datetime.date, datetime.date]]e[NoneType, NoneType, NoneType]] = list[tuple[datetime.date, datetime.date]]",1,pandas
"numpy.array(Type[builtins.object], copy=NoneType, dtype=builtins.bool)",1,pandas
"numpy.array(tuple[datetime.date], copy=builtins.bool)",1,pandas
"numpy.array(list[tuple[datetime.datetime, datetime.datetime]], dtype=list[tuple[str, str]])",1,pandas
"numpy.ndarray[tuple[slifloate[int, int, NoneType], int]] = float",1,pandas
"numpy.ndarray[tuple[slifloate[int, NoneType, NoneType], int]] = float",1,pandas
numpy.shape(a=pandas.core.frame.DataFrame),1,pandas
"Type[numpy.float32] in tuple[Type[numpy.float32], Type[numpy.float64]]",1,skimage
"numpy.ma.floatore.MaskedArray[tuple[int, int]] = float",1,pandas
"numpy.ma.extras.masked_all(shape=tuple[int, int, int])",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
numpy.ma.mrecords.MaskedRecords,1,pandas
"numpy.ndarray[slilist[Union[datetime.datetime, str]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.datetime, str]]",1,pandas
numpy.common_type,1,pandas
"numpy.common_type(arrays=tuple[numpy.ndarray, numpy.ndarray])",1,pandas
"numpy.array(collections.deque, copy=builtins.bool)",1,pandas
numpy.ndarray + list[float],1,pandas
numpy.random.rand,1,pandas
"numpy.arange(numpy.int64, dtype=numpy.dtype)",1,skimage
numpy.int64 in pandas._libs.index.Int8Engine,1,pandas
"numpy.ndarray[slilist[Union[NoneType, float, int]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, float, int]]",1,pandas
"numpy.putmask(numpy.ndarray, numpy.ndarray, NoneType)",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, slifloate[NoneType, NoneType, NoneType]]] = float",1,pandas
"numpy.ndarray[slituple[int, int, int]e[NoneType, NoneType, NoneType]] = tuple[int, int, int]",1,pandas
"numpy.ndarray[slilist[Union[NoneType, float]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, float]]",1,pandas
"numpy.ndarray[slilist[Union[str, tuple[str, str]]]e[NoneType, NoneType, NoneType]] = list[Union[str, tuple[str, str]]]",1,pandas
numpy.ndarray + builtins.complex,1,pandas
numpy.ndarray > builtins.complex,1,pandas
"numpy.array(list[Union[NoneType, builtins.complex, float]])",1,pandas
"numpy.array(list[Union[NoneType, builtins.complex, float, int]])",1,pandas
"numpy.ndarray[slituple[int, int]e[NoneType, NoneType, NoneType]] = tuple[int, int]",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.DatetimeTZDtype, pandas.core.dtypes.dtypes.PeriodDtype]])",1,pandas
"numpy.ndarray[slilist[list[float]]e[NoneType, NoneType, NoneType]] = list[list[float]]",1,pandas
numpy.fft.fft,1,pandas
numpy.fft.rfft,1,pandas
"numpy.ndarray[slilist[tuple[float, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[tuple[float, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
"numpy.ndarray[slilist[Union[list, list[str]]]e[NoneType, NoneType, NoneType]] = list[Union[list, list[str]]]",1,pandas
numpy.reciprocal,1,skimage
"numpy.lib.stride_tricks.as_strided(shape=tuple[int, int], strides=tuple[int, int], x=numpy.ndarray)",1,skimage
"numpy.ndarray[slilist[Union[numpy.float64, pandas.core.series.Series]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.float64, pandas.core.series.Series]]",1,pandas
numpy.cumprod,1,pandas
numpy.random.mtrand,1,skimage
float ** numpy.float64,1,skimage
"numpy.ndarray[slilist[Union[float, int, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[float, int, pandas._libs.tslibs.timestamps.Timestamp, str]]",1,pandas
"numpy.ndindex(shape=tuple[tuple[int, int]])",1,skimage
"numpy.ndarray[tuple[numpy.int64, numpy.int64]]",1,pandas
"numpy.ndarray[tuple[int, int]] = numpy.complex128",1,pandas
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1,pandas
"numpy.testing._private.utils.assert_allclose(actual=numpy.int64, atol=float, desired=int)",1,skimage
"numpy.array(list[Union[float, str]], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.zeros(tuple[int], dtype=list[tuple[str, str]])",1,pandas
"numpy.asarray(a=tuple[int, float, int], dtype=Type[builtins.object])",1,pandas
"numpy.array(tuple[numpy.int64, numpy.int64, float], copy=builtins.bool)",1,pandas
"numpy.asarray(a=list[Union[float, numpy.int64]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[pandas.core.frame.DataFrame]e[NoneType, NoneType, NoneType]] = list[pandas.core.frame.DataFrame]",1,pandas
numpy.int64.ndim,1,skimage
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.complex64])",1,pandas
"numpy.asarray(a=tuple[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period], dtype=Type[builtins.object])",1,pandas
"numpy.ones(dtype=Type[builtins.float], shape=tuple[int, int])",1,pandas
numpy.round_(a=int),1,skimage
numpy.int64 > float,1,skimage
"numpy.zeros(tuple[int, int, int, int, int], dtype=Type[numpy.float32])",1,skimage
"numpy.round_(a=tuple[int, int, int, int])",1,skimage
"numpy.array(list[Union[NoneType, str]], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
numpy.array(list[pandas.core.frame.DataFrame]),1,pandas
numpy.float32(),1,pandas
numpy.int64 != numpy.int64,1,skimage
numpy.float16(),1,pandas
"numpy.asarray(a=list[Union[builtins.bool, datetime.datetime]], dtype=Type[numpy.object_])",1,pandas
"numpy.asarray(a=list[Union[builtins.bool, builtins.complex]], dtype=Type[numpy.object_])",1,pandas
"numpy.asarray(a=list[Union[builtins.complex, float]], dtype=Type[numpy.complex128])",1,pandas
"numpy.ndarray[slilist[Union[NoneType, builtins.bool, float, int]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, builtins.bool, float, int]]",1,pandas
"numpy.ndarray[slilist[Union[NoneType, datetime.datetime, float, int]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, datetime.datetime, float, int]]",1,pandas
numpy.e,1,pandas
NoneType == Type[numpy.object_],1,pandas
numpy.ndarray[tuple[numpy.ndarray]] = str,1,pandas
"numpy.issubdtype(arg1=Type[numpy.int32], arg2=Type[numpy.integer])",1,pandas
"numpy.ndarray[slilist[list[Union[datetime.datetime, float, int, str]]]e[NoneType, NoneType, NoneType]] = list[list[Union[datetime.datetime, float, int, str]]]",1,pandas
"numpy.full(fill_value=int, shape=int)",1,pandas
"numpy.array(tuple[str, str], copy=builtins.bool)",1,pandas
"numpy.array(list[str], copy=Type[builtins.object], dtype=builtins.bool)",1,pandas
"numpy.argsort(a=pandas.core.arrays.period.PeriodArray, kind=str)",1,pandas
numpy.array(list[pandas.core.arrays.period.PeriodArray]),1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
numpy.uint32 // pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint32 * pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint32 * numpy.ndarray,1,pandas
numpy.uint64 * pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint64 * numpy.ndarray,1,pandas
numpy.int8 // pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int8 // numpy.ndarray,1,pandas
numpy.int16 // pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int16 // numpy.ndarray,1,pandas
numpy.int32 // pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int32 // numpy.ndarray,1,pandas
numpy.int64 // pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int64 // numpy.ndarray,1,pandas
numpy.uint8 // pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint8 // numpy.ndarray,1,pandas
numpy.uint16 // pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint16 * numpy.ndarray,1,pandas
numpy.uint16 * pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint8 * numpy.ndarray,1,pandas
numpy.int64 - pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int8 - pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int8 - numpy.ndarray,1,pandas
numpy.int16 - pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int16 - numpy.ndarray,1,pandas
numpy.int32 - pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int32 - numpy.ndarray,1,pandas
numpy.int8 * pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint8 * pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int8 * numpy.ndarray,1,pandas
numpy.int16 * pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int16 * numpy.ndarray,1,pandas
numpy.int32 * pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int32 * numpy.ndarray,1,pandas
numpy.int64 * pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint16 // numpy.ndarray,1,pandas
numpy.uint32 // numpy.ndarray,1,pandas
list[pandas.core.arrays.period.PeriodArray] * numpy.int64,1,pandas
numpy.uint64 // pandas.core.arrays.integer.IntegerArray,1,pandas
"numpy.array(list[numpy.int8], copy=builtins.bool)",1,pandas
"numpy.generic.astype(numpy.int16, numpy.dtype)",1,pandas
numpy.int32 ** pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int32 ** numpy.ndarray,1,pandas
"numpy.array(list[numpy.int32], copy=builtins.bool)",1,pandas
"numpy.generic.astype(numpy.int64, numpy.dtype)",1,pandas
numpy.uint8 ** pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint8 == int,1,pandas
numpy.uint8 ** numpy.ndarray,1,pandas
"numpy.array(list[numpy.uint8], copy=builtins.bool)",1,pandas
"numpy.generic.astype(numpy.uint16, numpy.dtype)",1,pandas
numpy.uint32 ** pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint32 == int,1,pandas
numpy.uint32 ** numpy.ndarray,1,pandas
"numpy.array(list[numpy.uint32], copy=builtins.bool)",1,pandas
numpy.int8 ** numpy.ndarray,1,pandas
numpy.int8 ** pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint64 / numpy.ndarray,1,pandas
numpy.int32 / numpy.ndarray,1,pandas
numpy.uint64 // numpy.ndarray,1,pandas
numpy.int8 / pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int8 / numpy.ndarray,1,pandas
numpy.int16 / pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int16 / numpy.ndarray,1,pandas
numpy.int32 / pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int64 / pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint64 / pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint8 / pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint8 / numpy.ndarray,1,pandas
numpy.uint16 / pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint16 / numpy.ndarray,1,pandas
numpy.uint32 / pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint32 / numpy.ndarray,1,pandas
numpy.uint64 + numpy.ndarray,1,pandas
numpy.uint64 + pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint32 + numpy.ndarray,1,pandas
numpy.uint32 + pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.obj2sctype(rep=Type[numpy.int16]),1,skimage
"numpy.asarray(a=list[Union[int, pandas._libs.missing.NAType]])",1,pandas
"numpy.asarray(a=list[Union[int, pandas._libs.missing.NAType]], dtype=NoneType)",1,pandas
numpy.ndim(a=pandas.core.arrays.categorical.Categorical),1,pandas
"numpy.eye(M=int, N=int, dtype=Type[builtins.bool])",1,skimage
"numpy.ndarray[tuple[sliinte[int, NoneType, NoneType]]] = int",1,pandas
"numpy.ndarray.repeat(numpy.ndarray, int, axis=NoneType)",1,pandas
"numpy.repeat(a=pandas.core.arrays.categorical.Categorical, axis=int, repeats=int)",1,pandas
"numpy.repeat(pandas.core.arrays.categorical.Categorical, int, foo=str)",1,pandas
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=Type[builtins.str], dtype=builtins.bool)",1,pandas
"numpy.asarray(a=pandas.core.arrays.categorical.Categorical, dtype=Type[builtins.object])",1,pandas
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=builtins.bool)",1,pandas
"numpy.array(pandas.tests.extension.test_common.DummyArray, copy=Type[builtins.object], dtype=builtins.bool)",1,pandas
"numpy.array(pandas.tests.extension.test_common.DummyArray, copy=str, dtype=builtins.bool)",1,pandas
pandas.core.dtypes.dtypes.DatetimeTZDtype != numpy.dtype,1,pandas
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=str, dtype=builtins.bool)",1,pandas
numpy.array(list[pandas.core.arrays.categorical.Categorical]),1,pandas
list[pandas.core.arrays.categorical.Categorical] * numpy.int64,1,pandas
"numpy.repeat(pandas.core.arrays.boolean.BooleanArray, int, foo=str)",1,pandas
"numpy.floor_divide(numpy.ndarray, int, casting=numpy.ndarray, dtype=numpy.dtype, out=str)",1,skimage
numpy.floor_divide,1,skimage
"numpy.repeat(a=pandas.core.series.Series, repeats=int)",1,pandas
"numpy.repeat(a=pandas.core.series.Series, repeats=list[int])",1,pandas
"numpy.issubdtype(arg1=Type[numpy.int16], arg2=Type[numpy.uint8])",1,skimage
"numpy.repeat(a=pandas.core.arrays.boolean.BooleanArray, axis=int, repeats=int)",1,pandas
pandas.core.arrays.numpy.ndarrayoolean.BooleanArray | numpy.ndarray,1,pandas
"numpy.array(pandas.core.indexes.base.Index, copy=Type[builtins.object], dtype=builtins.bool)",1,pandas
Type[pandas.core.arrays.Type[numpy.bool_]oolean.BooleanArray] == Type[numpy.bool_],1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.bool_, side=NoneType, sorter=str)",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.bool_, side=numpy.ndarray, sorter=str)",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.arrays.boolean.BooleanArray, side=NoneType, sorter=str)",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.boolean.BooleanDtype]])",1,pandas
"numpy.ndarray[slilist[pandas.core.arrays.boolean.BooleanArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.boolean.BooleanArray]",1,pandas
"numpy.lib.arraypad._as_pairs(as_index=builtins.bool, ndim=int, x=int)",1,skimage
list[pandas.core.arrays.datetimes.DatetimeArray] * numpy.int64,1,pandas
numpy.array(list[pandas.core.arrays.datetimes.DatetimeArray]),1,pandas
numpy.int16 + numpy.ndarray,1,pandas
"numpy.array(list[Union[numpy.uint16, pandas._libs.missing.NAType]], copy=builtins.bool)",1,pandas
"numpy.array(list[Union[numpy.uint32, pandas._libs.missing.NAType]], copy=builtins.bool)",1,pandas
"numpy.array(list[Union[numpy.uint64, pandas._libs.missing.NAType]], copy=builtins.bool)",1,pandas
numpy.int8 + pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int8 + numpy.ndarray,1,pandas
numpy.int16 + pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int32 + pandas.core.arrays.integer.IntegerArray,1,pandas
"numpy.array(list[Union[numpy.int64, pandas._libs.missing.NAType]], copy=builtins.bool)",1,pandas
numpy.int32 + numpy.ndarray,1,pandas
numpy.int64 + pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint8 + pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint8 + numpy.ndarray,1,pandas
numpy.uint16 + pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint16 + numpy.ndarray,1,pandas
"numpy.array(list[Union[numpy.uint8, pandas._libs.missing.NAType]], copy=builtins.bool)",1,pandas
"numpy.array(list[Union[numpy.int32, pandas._libs.missing.NAType]], copy=builtins.bool)",1,pandas
"numpy.argsort(a=pandas.core.arrays.datetimes.DatetimeArray, kind=str)",1,pandas
numpy.ndim(a=pandas.core.arrays.datetimes.DatetimeArray),1,pandas
numpy.ndarray.tobytes(numpy.ndarray),1,skimage
numpy.ndim(a=list[builtins.bool]),1,pandas
"numpy.ndarray[tuple[slifloate[int, NoneType, NoneType], slifloate[NoneType, NoneType, NoneType]]] = float",1,pandas
"numpy.ndarray[tuple[slifloate[NoneType, int, NoneType], slifloate[NoneType, NoneType, NoneType]]] = float",1,pandas
"numpy.repeat(a=pandas.core.arrays.datetimes.DatetimeArray, repeats=int)",1,pandas
numpy.issubdtype,1,skimage
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.DatetimeTZDtype]])",1,pandas
"numpy.array(list[Union[numpy.int16, pandas._libs.missing.NAType]], copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[pandas.core.arrays.datetimes.DatetimeArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.datetimes.DatetimeArray]",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.Int16Dtype]])",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.Int64Dtype]])",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.UInt16Dtype]])",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.UInt64Dtype]])",1,pandas
"numpy.array(list[Union[numpy.int8, pandas._libs.missing.NAType]], copy=builtins.bool)",1,pandas
"numpy.generic.astype(numpy.uint64, numpy.dtype)",1,pandas
numpy.int8 % pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int8 % numpy.ndarray,1,pandas
"numpy.ndarray[slinumpy.int16e[int, int, NoneType]] = numpy.int16",1,pandas
Type[pandas.core.arrays.integer.IntegerArray] == Type[numpy.int8],1,pandas
Type[pandas.core.arrays.integer.IntegerArray] == Type[numpy.int16],1,pandas
Type[pandas.core.arrays.integer.IntegerArray] == Type[numpy.int32],1,pandas
Type[pandas.core.arrays.integer.IntegerArray] == Type[numpy.int64],1,pandas
Type[pandas.core.arrays.integer.IntegerArray] == Type[numpy.uint8],1,pandas
Type[pandas.core.arrays.integer.IntegerArray] == Type[numpy.uint32],1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.Int8Dtype]])",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.Int32Dtype]])",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.UInt8Dtype]])",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.UInt32Dtype]])",1,pandas
"numpy.prod(a=numpy.ndarray, where=numpy.ndarray)",1,pandas
numpy.isnan(numpy.bool_),1,pandas
numpy.int64 /= float,1,pandas
pandas.core.dtypes.dtypes.IntervalDtype != numpy.dtype,1,pandas
"numpy.testing._private.utils.assert_equal(actual=list[str], desired=list[str])",1,skimage
"numpy.asarray(a=pandas.core.arrays.integer.IntegerArray, dtype=numpy.dtype)",1,pandas
pandas._linumpy.uint32s.missing.NAType + numpy.uint32,1,pandas
pandas._linumpy.uint8s.missing.NAType + numpy.uint8,1,pandas
numpy.uint32 - int,1,pandas
"numpy.ndarray[slinumpy.uint16e[int, int, NoneType]] = numpy.uint16",1,pandas
"numpy.ndarray[slinumpy.uint64e[int, int, NoneType]] = numpy.uint64",1,pandas
"numpy.argsort(a=pandas.core.arrays.integer.IntegerArray, kind=str)",1,pandas
numpy.int8 - int,1,pandas
numpy.int32 - int,1,pandas
numpy.uint8 - int,1,pandas
numpy.uint8 != numpy.uint8,1,skimage
"numpy.full_like(a=numpy.ndarray, fill_value=int)",1,skimage
numpy.int16 - int,1,pandas
numpy.uint16 - int,1,pandas
numpy.uint64 - int,1,pandas
pandas._linumpy.int8s.missing.NAType + numpy.int8,1,pandas
numpy.typecodes,1,skimage
pandas._linumpy.int32s.missing.NAType + numpy.int32,1,pandas
numpy.array(list[pandas.core.dtypes.dtypes.IntervalDtype]),1,pandas
numpy.ndarray[numpy.ndarray] = list[pandas.core.arrays.interval.IntervalArray],1,pandas
"numpy.ndarray[slilist[Union[float, pandas._libs.interval.Interval]]e[NoneType, NoneType, NoneType]] = list[Union[float, pandas._libs.interval.Interval]]",1,pandas
numpy.float64 + pandas.core.arrays.numpy_.PandasArray,1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.arrays.numpy_.PandasArray, side=NoneType, sorter=str)",1,pandas
"numpy.asarray(a=list[Union[float, numpy.float64]], dtype=numpy.dtype)",1,pandas
"numpy.repeat(a=pandas.core.arrays.numpy_.PandasArray, repeats=int)",1,pandas
"numpy.repeat(a=pandas.core.arrays.numpy_.PandasArray, repeats=list[int])",1,pandas
pandas.core.arrays.numpy_.PandasArray | numpy.ndarray,1,pandas
Type[pandas.core.arrays.numpy_.PandasArray] == Type[numpy.float64],1,pandas
numpy.float64 * pandas.core.arrays.numpy_.PandasArray,1,pandas
"numpy.full(dtype=numpy.dtype, fill_value=int, shape=tuple[int])",1,skimage
numpy.float64 / pandas.core.arrays.numpy_.PandasArray,1,pandas
numpy.float64 % pandas.core.arrays.numpy_.PandasArray,1,pandas
pandas.core.arrays.numpy_.PandasDtype == Type[numpy.object_],1,pandas
numpy.ndim(a=pandas.core.arrays.numpy_.PandasArray),1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.PeriodDtype]])",1,pandas
"numpy.asarray(a=pandas.core.arrays.period.PeriodArray, dtype=Type[builtins.object])",1,pandas
"numpy.array(list[numpy.float64], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int], dtype=numpy.dtype)",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.IntervalDtype]])",1,pandas
"numpy.array(pandas.core.arrays.numpy_.PandasArray, copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.ndarray[slilist[pandas.core.arrays.interval.IntervalArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.interval.IntervalArray]",1,pandas
numpy.float64 != float,1,skimage
"numpy.ndarray[slilist[Union[builtins.bool, numpy.bool_]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, numpy.bool_]]",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, pandas._libs.interval.Interval, side=NoneType, sorter=str)",1,pandas
"numpy.repeat(a=pandas.core.arrays.interval.IntervalArray, repeats=int)",1,pandas
pandas.core.arrays.numpy_.PandasDtype == numpy.dtype,1,pandas
"numpy.asarray(a=list[float], dtype=numpy.dtype)",1,pandas
"numpy.array(pandas.core.arrays.numpy_.PandasArray, copy=pandas.core.arrays.numpy_.PandasDtype, dtype=builtins.bool)",1,pandas
numpy.array(list[pandas.core.arrays.numpy_.PandasDtype]),1,pandas
"numpy.asarray(a=list[Union[float, tuple[int]]], dtype=numpy.dtype)",1,pandas
"numpy.asarray(a=pandas.core.arrays.numpy_.PandasArray, dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[pandas.core.arrays.numpy_.PandasArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.numpy_.PandasArray]",1,pandas
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.numpy_.PandasDtype]])",1,pandas
numpy.concatenate(list[pandas.core.arrays.numpy_.PandasArray]),1,pandas
"numpy.ndarray[slinumpy.int64e[int, int, NoneType]] = numpy.int64",1,pandas
"numpy.ndarray[slinumpy.uint32e[NoneType, int, NoneType]] = numpy.uint32",1,pandas
numpy.int16 % pandas.core.arrays.integer.IntegerArray,1,pandas
"numpy.ndarray[slinumpy.uint8e[NoneType, int, NoneType]] = numpy.uint8",1,pandas
"numpy.ndarray[slilist[numpy.uint16]e[NoneType, NoneType, NoneType]] = list[numpy.uint16]",1,pandas
"numpy.ndarray[slilist[numpy.uint64]e[NoneType, NoneType, NoneType]] = list[numpy.uint64]",1,pandas
"numpy.array(list[Union[numpy.float32, pandas._libs.missing.NAType]], copy=builtins.bool)",1,pandas
"numpy.array(list[Union[numpy.float64, pandas._libs.missing.NAType]], copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[Union[numpy.float32, pandas._libs.missing.NAType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.float32, pandas._libs.missing.NAType]]",1,pandas
numpy.sctype2char(sctype=numpy.dtype),1,skimage
"numpy.array(list[numpy.uint16], copy=builtins.bool)",1,pandas
"numpy.array(list[numpy.uint64], copy=builtins.bool)",1,pandas
"numpy.array(list[Union[numpy.bool_, pandas._libs.missing.NAType]], copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[Union[numpy.bool_, pandas._libs.missing.NAType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.bool_, pandas._libs.missing.NAType]]",1,pandas
"numpy.array(list[Union[numpy.int8, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1,pandas
"numpy.array(pandas.core.arrays.integer.IntegerArray, dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[numpy.int32, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[numpy.uint8, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1,pandas
"numpy.array(list[Union[numpy.uint32, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[numpy.int32]e[NoneType, NoneType, NoneType]] = list[numpy.int32]",1,pandas
"numpy.ndarray[slilist[numpy.int8]e[NoneType, NoneType, NoneType]] = list[numpy.int8]",1,pandas
"numpy.ndarray[slilist[numpy.uint32]e[NoneType, NoneType, NoneType]] = list[numpy.uint32]",1,pandas
numpy.uint8 % numpy.ndarray,1,pandas
numpy.int16 % numpy.ndarray,1,pandas
numpy.int32 % pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int32 % numpy.ndarray,1,pandas
numpy.int64 % pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.int64 % numpy.ndarray,1,pandas
numpy.uint8 % pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint16 % pandas.core.arrays.integer.IntegerArray,1,pandas
"numpy.ndarray[slilist[numpy.uint8]e[NoneType, NoneType, NoneType]] = list[numpy.uint8]",1,pandas
numpy.uint16 % numpy.ndarray,1,pandas
numpy.uint32 % pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint32 % numpy.ndarray,1,pandas
numpy.uint64 % pandas.core.arrays.integer.IntegerArray,1,pandas
numpy.uint64 % numpy.ndarray,1,pandas
"numpy.ndarray[slilist[numpy.int16]e[NoneType, NoneType, NoneType]] = list[numpy.int16]",1,pandas
numpy.sctype2char,1,skimage
"numpy.array(list[numpy.int16], copy=builtins.bool)",1,pandas
"numpy.array(PIL.PngImagePlugin.PngImageFile, dtype=NoneType)",1,skimage
pandas.core.series.Series == numpy.uint64,1,pandas
numpy.ndarray[int] = numpy.int32,1,pandas
numpy.ndarray[int] = numpy.uint8,1,pandas
numpy.ndarray[int] = numpy.uint32,1,pandas
pandas.core.series.Series == numpy.int16,1,pandas
"numpy.dtype in list[Type[Union[numpy.bool_, numpy.float16, numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int64, numpy.int8, numpy.longlong, numpy.uint16, numpy.uint32, numpy.uint64, numpy.uint8, numpy.ulonglong]]]",1,skimage
pandas.core.series.Series == numpy.uint16,1,pandas
pandas.core.arrays.integer.IntegerArray == numpy.int8,1,pandas
numpy.uint8(numpy.uint8),1,pandas
pandas.core.arrays.integer.IntegerArray == numpy.int32,1,pandas
pandas.core.arrays.integer.IntegerArray == numpy.uint8,1,pandas
pandas.core.arrays.integer.IntegerArray == numpy.uint32,1,pandas
numpy.ndim(a=pandas.core.arrays.integer.IntegerArray),1,pandas
"numpy.ndarray[slinumpy.int8e[NoneType, int, NoneType]] = numpy.int8",1,pandas
"numpy.ndarray[slinumpy.int32e[NoneType, int, NoneType]] = numpy.int32",1,pandas
numpy.uint32(numpy.uint32),1,pandas
numpy.int32(numpy.int32),1,pandas
"numpy.array(PIL.PngImagePlugin.PngImageFile, dtype=str)",1,skimage
"numpy.ndarray[slilist[pandas.core.arrays.integer.IntegerArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.integer.IntegerArray]",1,pandas
"numpy.array(PIL.Image.Image, dtype=NoneType)",1,skimage
"numpy.allclose(a=numpy.ndarray, b=int)",1,skimage
numpy.ndarray[tuple[numpy.ndarray]] = numpy.uint8,1,pandas
numpy.ndarray[tuple[numpy.ndarray]] = numpy.uint16,1,pandas
numpy.ndarray[tuple[numpy.ndarray]] = numpy.uint32,1,pandas
numpy.ndarray[tuple[numpy.ndarray]] = numpy.uint64,1,pandas
"numpy.can_cast(numpy.int8, numpy.dtype)",1,pandas
numpy.int8(numpy.int8),1,pandas
"numpy.can_cast(numpy.int32, numpy.dtype)",1,pandas
numpy.float64 != numpy.float64,1,skimage
"numpy.can_cast(numpy.uint8, numpy.dtype)",1,pandas
"numpy.can_cast(numpy.uint16, numpy.dtype)",1,pandas
"numpy.can_cast(numpy.uint32, numpy.dtype)",1,pandas
"numpy.can_cast(numpy.uint64, numpy.dtype)",1,pandas
"numpy.asarray(a=list[Union[NoneType, pandas._libs.tslibs.period.Period]])",1,pandas
"numpy.array(list[str], dtype=NoneType)",1,pandas
"numpy.add(pandas.core.arrays.numpy_.PandasArray, int)",1,pandas
numpy.var(a=numpy.ndarray),1,pandas
numpy.float128.dtype,1,pandas
numpy.float128(int),1,pandas
numpy.float64(x=int),1,skimage
"numpy.generic.astype(numpy.float128, numpy.dtype)",1,pandas
numpy.sqrt(numpy.float128),1,pandas
numpy.dtype == Type[numpy.float128],1,pandas
numpy.float128 - numpy.ndarray,1,pandas
numpy.float128 ** float,1,pandas
"numpy.zeros(tuple[int, int, int], numpy.dtype)",1,skimage
numpy.float128 ** int,1,pandas
numpy.float128 * numpy.float128,1,pandas
numpy.float128 + int,1,pandas
numpy.absolute(numpy.float128),1,pandas
numpy.float128 == int,1,pandas
"numpy.tile(A=numpy.ndarray, reps=tuple[int, int, int, int])",1,skimage
numpy.float128 > int,1,pandas
numpy.float128(numpy.int64),1,pandas
"Type[numpy.float128] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
numpy.float32 > int,1,pandas
numpy.float64 > numpy.float32,1,skimage
"numpy.allclose(a=numpy.ndarray, atol=float, b=numpy.ndarray)",1,skimage
"numpy.exp(numpy.ndarray, dtype=numpy.dtype)",1,skimage
numpy.exp,1,skimage
numpy.float32(int),1,skimage
"Type[numpy.float32] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
"numpy.linspace(endpoint=builtins.bool, num=int, start=int, stop=numpy.float32)",1,skimage
numpy.float32 + int,1,pandas
numpy.isclose,1,skimage
"numpy.empty(int, dtype=numpy.dtype)",1,skimage
numpy.sqrt(numpy.float32),1,pandas
"numpy.linspace(endpoint=builtins.bool, num=int, start=int, stop=numpy.float64)",1,skimage
numpy.float32 - numpy.float32,1,pandas
"numpy.multiply(numpy.ndarray, int)",1,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, NoneType, NoneType]]] = numpy.ndarray",1,skimage
numpy.imag(val=numpy.ndarray),1,pandas
numpy.ndarray - numpy.float32,1,skimage
numpy.ndarray.real,1,pandas
"numpy.argmin(a=numpy.ndarray, axis=NoneType)",1,pandas
"numpy.ndarray.argmin(numpy.ndarray, NoneType)",1,pandas
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",1,skimage
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType]]]",1,skimage
"numpy.prod(a=numpy.ndarray, axis=int)",1,pandas
"numpy.prod(a=numpy.ndarray, axis=NoneType)",1,pandas
"numpy.nanprod(a=numpy.ndarray, axis=int)",1,pandas
"numpy.nanprod(a=numpy.ndarray, axis=NoneType)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.cov(m=numpy.flatiter, y=numpy.flatiter)",1,pandas
numpy.hstack(tup=list[numpy.ndarray]),1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.allclose(a=builtins.complex, b=builtins.complex)",1,pandas
"numpy.argmin(a=numpy.ndarray, axis=int)",1,pandas
"numpy.ndarray.argmin(numpy.ndarray, int)",1,pandas
"numpy.ndarray[tuple[int, slice[int, int, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
Type[numpy.datetime64] != Type[numpy.datetime64],1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[int, int, NoneType]]]",1,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[int, int, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
numpy.iscomplexobj(x=numpy.ndarray),1,pandas
numpy.datetime64.ndim,1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[int, int, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.ndarray.argmax(numpy.ndarray, NoneType)",1,pandas
numpy.fabs(numpy.int64),1,pandas
"numpy.amax(a=numpy.ndarray, axis=NoneType)",1,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
"numpy.ndarray.argmax(numpy.ndarray, int)",1,pandas
"numpy.argmax(a=numpy.ndarray, axis=int)",1,pandas
"numpy.argmax(a=numpy.ndarray, axis=NoneType)",1,pandas
"Type[numpy.int32] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
numpy.float32 >= int,1,skimage
"numpy.ndarray[tuple[int, slifloate[int, int, NoneType], slifloate[int, int, NoneType]]] = float",1,skimage
"Type[numpy.int16] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
numpy.uint8 ** int,1,skimage
numpy.float64 / numpy.uint8,1,skimage
"numpy.clip(a=numpy.ndarray, a_max=numpy.uint8, a_min=numpy.uint8)",1,skimage
numpy.int64 / numpy.float64,1,skimage
numpy.int16 ** int,1,skimage
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[tuple[str, str, int]]e[NoneType, NoneType, NoneType]] = list[tuple[str, str, int]]",1,pandas
"numpy.delete(arr=numpy.ndarray, obj=list[int])",1,pandas
"numpy.array(tuple[int, int, int, int, int, int], copy=builtins.bool)",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
"numpy.clip(a=int, a_max=numpy.ndarray, a_min=int)",1,skimage
numpy.broadcast_to,1,pandas
"numpy.broadcast_to(array=builtins.bool, shape=tuple[int, int])",1,pandas
numpy.float64 / numpy.int16,1,skimage
"numpy.issubdtype(arg1=Type[numpy.float16], arg2=Type[numpy.floating])",1,skimage
"numpy.ndarray.prod(numpy.ndarray, int)",1,pandas
numpy.asarray(a=list[numpy.float64]),1,skimage
numpy.ndarray - numpy.float16,1,skimage
numpy.float64 /= numpy.float32,1,skimage
numpy.sqrt(numpy.float32),1,skimage
numpy.float16 > numpy.float64,1,skimage
numpy.dtype(Type[numpy.float16]),1,skimage
numpy.ndarray += numpy.float16,1,skimage
"numpy.ndarray[slilist[pandas.core.series.Series]e[NoneType, NoneType, NoneType]] = list[pandas.core.series.Series]",1,pandas
numpy.float16 == int,1,skimage
"numpy.nanmedian(a=numpy.ndarray, axis=int)",1,pandas
numpy.ndarray ** float,1,pandas
numpy.ndarray * numpy.float16,1,skimage
numpy.float64 /= numpy.float16,1,skimage
numpy.ndarray /= numpy.float16,1,skimage
"numpy.ndarray.min(numpy.ndarray, int)",1,pandas
"numpy.ndarray.max(numpy.ndarray, int)",1,pandas
"numpy.ndarray[slilist[tuple[Union[int, str], Union[int, str]]]e[NoneType, NoneType, NoneType]] = list[tuple[Union[int, str], Union[int, str]]]",1,pandas
"numpy.array(tuple[int, int, int], copy=builtins.bool)",1,pandas
"numpy.ndarray[slilist[Union[list[Union[datetime.datetime, str]], numpy.ndarray]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[datetime.datetime, str]], numpy.ndarray]]",1,pandas
numpy.fabs(numpy.float64),1,pandas
"numpy.nansum(a=numpy.ndarray, axis=NoneType)",1,pandas
numpy.complex128.ndim,1,pandas
numpy.real(val=numpy.complex128),1,pandas
numpy.imag(val=numpy.complex128),1,pandas
numpy.float64 / numpy.float32,1,skimage
numpy.float32 - numpy.float64,1,skimage
numpy.float32 / numpy.float64,1,skimage
"numpy.sum(a=numpy.ndarray, axis=NoneType)",1,pandas
numpy.timedelta64.ndim,1,pandas
"numpy.mean(a=numpy.ndarray, axis=int)",1,pandas
"numpy.mean(a=numpy.ndarray, axis=NoneType)",1,pandas
numpy.complex128 / numpy.float64,1,pandas
"numpy.clip(a=numpy.ndarray, a_max=numpy.float16, a_min=numpy.float16)",1,skimage
numpy.isscalar(element=list[dict]),1,skimage
"numpy.nansum(a=numpy.ndarray, axis=int)",1,pandas
numpy.float64.ndim,1,pandas
numpy.product(args=tuple[numpy.int64]),1,pandas
numpy.float32 ** int,1,skimage
numpy.dtype(float),1,pandas
"numpy.asarray(a=tuple[float], dtype=Type[builtins.object])",1,pandas
"numpy.clip(a=numpy.ndarray, a_max=numpy.int16, a_min=numpy.int16)",1,skimage
float * numpy.float32,1,skimage
"numpy.any(a=numpy.ndarray, axis=int)",1,pandas
"numpy.any(a=numpy.ndarray, axis=NoneType)",1,pandas
"numpy.clip(a=numpy.ndarray, a_max=numpy.float32, a_min=numpy.float32)",1,skimage
"numpy.ndarray[tuple[slice[NoneType, int, NoneType]]]",1,skimage
"numpy.split(ary=numpy.ndarray, axis=int, indices_or_sections=list[int])",1,pandas
float * numpy.float16,1,skimage
numpy.float16 ** int,1,skimage
"numpy.all(a=numpy.ndarray, axis=int)",1,pandas
"numpy.ndarray.all(numpy.ndarray, NoneType)",1,pandas
"numpy.all(a=numpy.ndarray, axis=NoneType)",1,pandas
"numpy.random.mtrand.RandomState.uniform(numpy.random.mtrand.RandomState, size=tuple[int, int])",1,pandas
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
"numpy.ndarray[tuple[int, slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
list[numpy.ndarray] + numpy.ndarray,1,skimage
"numpy.empty(int, dtype=Type[numpy.int8])",1,pandas
"numpy.tensordot(a=numpy.ndarray, axes=tuple[int, int], b=numpy.ndarray)",1,skimage
numpy.int8(numpy.int16),1,pandas
"numpy.can_cast(numpy.int16, numpy.dtype)",1,pandas
numpy.tensordot,1,skimage
"numpy.fft.fftfreq(d=numpy.ndarray, n=int)",1,skimage
numpy.int16(numpy.int16),1,pandas
"numpy.array(int, dtype=Type[numpy.float64])",1,skimage
numpy.complex128.real,1,skimage
float - numpy.complex128,1,skimage
numpy.complex128 == builtins.complex,1,pandas
numpy.generic.conj(numpy.complex128),1,skimage
numpy.ndarray[tuple[numpy.ndarray]] = numpy.complex128,1,pandas
numpy.complex128(real=int),1,pandas
numpy.complex128(real=float),1,pandas
numpy.complex128 / numpy.complex128,1,skimage
"numpy.empty(int, dtype=Type[numpy.int16])",1,pandas
numpy.fix(x=numpy.float64),1,skimage
"Type[numpy.float32] in list[Type[Union[numpy.bool_, numpy.float16, numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int64, numpy.int8, numpy.longlong, numpy.uint16, numpy.uint32, numpy.uint64, numpy.uint8, numpy.ulonglong]]]",1,skimage
"numpy.full(fill_value=builtins.bool, shape=int)",1,pandas
numpy.ndarray.__array_priority__,1,pandas
numpy.array(list[pandas.core.arrays.string_.StringDtype]),1,pandas
pandas.core.arrays.string_.StringDtype == numpy.dtype,1,pandas
"numpy.ndarray[slilist[numpy.dtype]e[NoneType, NoneType, NoneType]] = list[numpy.dtype]",1,pandas
"numpy.arange(int, dtype=numpy.dtype)",1,skimage
"numpy.issubdtype(arg1=Type[numpy.float64], arg2=Type[numpy.float32])",1,skimage
"numpy.array(tuple[numpy.int64, numpy.int64, numpy.int64], dtype=Type[numpy.float64])",1,skimage
numpy.complex128 / numpy.ndarray,1,skimage
"numpy.ndarray[tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64]]",1,skimage
"numpy.ndarray.take(numpy.ndarray, numpy.ndarray, axis=numpy.ndarray, out=int)",1,pandas
"numpy.ndarray.take(numpy.ndarray, list[int], out=numpy.ndarray)",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]] = int",1,skimage
numpy.uint16(),1,pandas
numpy.complex128 == float,1,pandas
numpy.complex128(),1,pandas
"numpy.ndarray[tuple[slice[numpy.int64, numpy.int64, NoneType], slice[numpy.int64, numpy.int64, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
int == numpy.int64,1,skimage
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], int, slifloate[NoneType, NoneType, NoneType]]] = float",1,pandas
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], slifloate[NoneType, NoneType, NoneType], int]] = float",1,pandas
"numpy.ravel_multi_index(tuple[int], tuple[int], order=str)",1,skimage
"numpy.ravel_multi_index(tuple[int, int, int, int], tuple[int, int, int, int], order=str)",1,skimage
"numpy.ravel_multi_index(tuple[int, int, int], tuple[int, int, int], order=str)",1,skimage
"numpy.arange(int, dtype=Type[numpy.int64])",1,skimage
"numpy.testing._private.utils.assert_equal(actual=numpy.uint8, desired=numpy.uint8)",1,skimage
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], slifloate[NoneType, NoneType, NoneType], numpy.ndarray]] = float",1,pandas
"numpy.pad(array=numpy.ndarray, mode=int, pad_width=str)",1,skimage
"numpy.zeros(tuple[int, int, int, int], dtype=Type[numpy.uint8])",1,skimage
"numpy.empty(tuple[int, int, int], dtype=numpy.dtype)",1,pandas
"numpy.ndarray[tuple[slinumpy.int8e[NoneType, NoneType, NoneType], numpy.ndarray, slinumpy.int8e[NoneType, NoneType, NoneType]]] = numpy.int8",1,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, slice[NoneType, NoneType, NoneType]]]",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.int32e[NoneType, NoneType, NoneType], slinumpy.int32e[NoneType, NoneType, NoneType]]] = numpy.int32",1,pandas
"numpy.ndarray[tuple[int, slifloate[NoneType, NoneType, NoneType], slifloate[NoneType, NoneType, NoneType]]] = float",1,pandas
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], numpy.ndarray, slifloate[NoneType, NoneType, NoneType]]] = float",1,pandas
"numpy.amax(a=numpy.ndarray, axis=builtins.bool, keepdims=tuple[int, int, int])",1,skimage
"numpy.clip(a=numpy.ndarray, a_max=int, a_min=numpy.ndarray, out=int)",1,skimage
numpy.complex128.imag,1,skimage
numpy.absolute(numpy.complex128),1,skimage
numpy.complex128 / numpy.float64,1,skimage
numpy.fix(x=float),1,skimage
numpy.ndarray == numpy.complex128,1,skimage
"numpy.fmax(numpy.ndarray, numpy.float64)",1,skimage
numpy.min_scalar_type(numpy.int16),1,pandas
"numpy.ndarray[tuple[numpy.ndarray, slifloate[NoneType, NoneType, NoneType], slifloate[NoneType, NoneType, NoneType]]] = float",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.complex128e[NoneType, NoneType, NoneType]]] = numpy.complex128",1,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, int], slice[NoneType, NoneType, int], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.ones(dtype=Type[builtins.bool], shape=tuple[int])",1,skimage
"numpy.ndarray[tuple[slinumpy.complex128e[NoneType, NoneType, NoneType], numpy.ndarray]] = numpy.complex128",1,pandas
"numpy.cumprod(a=tuple[int, int, int, int])",1,skimage
"numpy.prod(a=tuple[int, int, int])",1,pandas
numpy.datetime_data(numpy.dtype),1,pandas
pandas.core.arrays.numpy.dtypeoolean.BooleanDtype == numpy.dtype,1,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, int, NoneType], slinumpy.ndarraye[NoneType, int, NoneType]]] = numpy.ndarray",1,pandas
"numpy.ndarray[slilist[datetime.timedelta]e[NoneType, NoneType, NoneType]] = list[datetime.timedelta]",1,pandas
"numpy.array(tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64], copy=builtins.bool)",1,pandas
"numpy.asarray(a=list[numpy.int64], dtype=Type[builtins.object])",1,pandas
"numpy.fromiter(builtins.map, dtype=str)",1,pandas
numpy.int16 + int,1,pandas
"numpy.asanyarray(a=list[Union[float, int]])",1,pandas
numpy.asanyarray(a=numpy.ndarray),1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int64], casting=builtins.bool, copy=str)",1,pandas
numpy.logical_or,1,pandas
"numpy.asarray(a=list[Union[numpy.ndarray, str]], dtype=Type[builtins.object])",1,pandas
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.asarray(a=pandas.core.indexes.base.Index, dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[int, int, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[int, int, NoneType]]]",1,skimage
"numpy.asarray(a=pandas.core.arrays.categorical.Categorical, dtype=numpy.dtype)",1,pandas
"numpy.ndarray(int, dtype=str)",1,pandas
"numpy.ndarray[tuple[int, int, slice[NoneType, NoneType, NoneType], slice[int, int, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.vstack(tup=tuple[numpy.ndarray, numpy.ndarray])",1,pandas
numpy.dtype(Type[numpy.int64]),1,skimage
"numpy.ndarray[tuple[int, slice[int, int, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[int, int, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
numpy.array(list[list[list[float]]]),1,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType]]] = numpy.ndarray",1,skimage
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=int)",1,pandas
"numpy.ndarray[tuple[int, slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",1,skimage
numpy.float64 >= float,1,skimage
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], slice[int, int, NoneType]]]",1,skimage
numpy.nanmedian(a=pandas.core.series.Series),1,pandas
"numpy.putmask(numpy.ndarray, pandas.core.series.Series, float)",1,pandas
"numpy.ndarray[tuple[int, slice[int, int, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.tile(A=numpy.ndarray, reps=list[int])",1,skimage
numpy.nanmin(a=pandas.core.series.Series),1,pandas
numpy.nanmax(a=pandas.core.series.Series),1,pandas
"numpy.putmask(numpy.ndarray, pandas.core.series.Series, builtins.bool)",1,pandas
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[int, int, NoneType]]]",1,skimage
"numpy.ndarray[tuple[int, int, slice[int, int, NoneType], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
numpy.flexible,1,pandas
"numpy.ndarray(int, dtype=Type[builtins.str])",1,pandas
"numpy.array(list[Union[NoneType, float, tuple[str, str, str]]], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[tuple[int, int, slice[int, int, NoneType], slice[NoneType, NoneType, NoneType]]]",1,skimage
"numpy.ndarray[slilist[Union[float, list, list[str]]]e[NoneType, NoneType, NoneType]] = list[Union[float, list, list[str]]]",1,pandas
"numpy.ndarray[slilist[Union[float, list[str]]]e[NoneType, NoneType, NoneType]] = list[Union[float, list[str]]]",1,pandas
"numpy.ndarray[slilist[list[str]]e[NoneType, NoneType, NoneType]] = list[list[str]]",1,pandas
"numpy.ndarray[slilist[Union[NoneType, float, tuple[str, str, str]]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, float, tuple[str, str, str]]]",1,pandas
"numpy.ndarray[slilist[Union[float, tuple[str, str, str]]]e[NoneType, NoneType, NoneType]] = list[Union[float, tuple[str, str, str]]]",1,pandas
"numpy.array(list[tuple[str, str, str]])",1,pandas
"numpy.asarray(a=list[Union[float, str]], dtype=str)",1,pandas
"numpy.ndarray[slilist[Union[builtins.set, dict, list[int], tuple[int, int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.set, dict, list[int], tuple[int, int, int]]]",1,pandas
"numpy.ndarray[slilist[tuple[tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[tuple[tuple[int, int]]]",1,pandas
"Type[numpy.tuple[Type[builtins.object], Type[numpy.object_], str, str]ool_] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
"numpy.array(list[builtins.bool], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.ndarray[slilist[Union[tuple[int, int, int], tuple[int, int], tuple[int]]]e[NoneType, NoneType, NoneType]] = list[Union[tuple[int, int, int], tuple[int, int], tuple[int]]]",1,pandas
"numpy.ndarray[slilist[builtins.bytes]e[NoneType, NoneType, NoneType]] = list[builtins.bytes]",1,pandas
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.object], copy=builtins.bool)",1,pandas
"numpy.array(pandas.core.arrays.string_.StringArray, copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.ndarray(int, dtype=Type[builtins.bool])",1,pandas
"numpy.ndarray[slilist[Union[NoneType, float, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, float, str]]",1,pandas
"numpy.ndarray(int, dtype=Type[builtins.object])",1,pandas
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.flexible])",1,pandas
numpy.str_(),1,pandas
"numpy.zeros(tuple[int, int, int, int, int], dtype=numpy.dtype)",1,skimage
"numpy.ndarray[slilist[slice[NoneType, int, int]]e[NoneType, NoneType, NoneType]] = list[slice[NoneType, int, int]]",1,pandas
"numpy.asarray(a=list[numpy.ndarray], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray[slilist[numpy.str_]e[NoneType, NoneType, NoneType]] = list[numpy.str_]",1,pandas
"numpy.asarray(a=pandas.core.arrays.string_.StringArray, dtype=NoneType)",1,pandas
"numpy.clip(a=numpy.ndarray, a_max=numpy.float32, a_min=numpy.float32, out=numpy.ndarray)",1,skimage
"numpy.array(list[Union[NoneType, builtins.bool, datetime.datetime, float, int, str]], dtype=Type[numpy.object_])",1,pandas
"numpy.ndarray[slilist[Union[NoneType, builtins.bool, datetime.datetime, float, int, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, builtins.bool, datetime.datetime, float, int, str]]",1,pandas
"numpy.ndarray[slilist[Union[NoneType, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, str]]",1,pandas
"numpy.asarray(a=list[Union[NoneType, str]], dtype=str)",1,pandas
"numpy.ndarray[tuple[int, int, slice[NoneType, NoneType, NoneType], slice[int, int, NoneType]]]",1,skimage
numpy.ndarray * numpy.float32,1,skimage
numpy.ndarray += numpy.float32,1,skimage
"numpy.ndarray[tuple[slinumpy.int32e[NoneType, NoneType, NoneType], slinumpy.int32e[NoneType, NoneType, NoneType], numpy.ndarray]] = numpy.int32",1,pandas
numpy.array(list[numpy.dtype]),1,pandas
numpy.uint64 == numpy.int64,1,skimage
numpy.uint64(numpy.int64),1,skimage
"numpy.broadcast_to(array=int, shape=tuple[int])",1,pandas
numpy.dtype == Type[numpy.uint32],1,skimage
numpy.uint32 == numpy.int64,1,skimage
numpy.uint32(numpy.int64),1,skimage
numpy.uint16 == numpy.int64,1,skimage
numpy.uint16(numpy.int64),1,skimage
numpy.dtype == Type[numpy.longlong],1,skimage
numpy.longlong == numpy.int64,1,skimage
numpy.longlong(numpy.int64),1,skimage
"Type[numpy.uint64] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
"numpy.array(list[Union[int, str]], copy=builtins.bool)",1,pandas
"Type[numpy.int64] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
numpy.dtype == Type[numpy.int32],1,skimage
numpy.dtype == Type[numpy.uint64],1,skimage
numpy.ulonglong(numpy.int64),1,skimage
numpy.ulonglong == numpy.int64,1,skimage
numpy.absolute(int),1,skimage
list[numpy.float64] - numpy.ndarray,1,pandas
numpy.int64 >= numpy.int64,1,skimage
numpy.random.BitGenerator,1,pandas
"numpy.ufunc.reduce(numpy.ufunc, numpy.ndarray, axis=int)",1,skimage
numpy.bitwise_xor,1,skimage
"numpy.asarray(a=pandas.core.series.Series, dtype=Type[builtins.bool])",1,pandas
"numpy.ndarray.min(numpy.ndarray, int)",1,skimage
numpy.dtype == Type[numpy.ulonglong],1,skimage
numpy.absolute(list[numpy.ndarray]),1,skimage
"numpy.array(list[numpy.float64], dtype=Type[numpy.float64])",1,pandas
"numpy.unique(ar=numpy.ndarray, return_index=builtins.bool)",1,pandas
"numpy.lilist[slice[NoneType, int, NoneType]].index_tricks.MGridClass[list[slice[NoneType, int, NoneType]]]",1,skimage
numpy.float64(x=numpy.int64),1,skimage
"numpy.array(list[int], dtype=Type[builtins.float])",1,skimage
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, dtype=int, size=str)",1,pandas
numpy.int16 == numpy.int64,1,skimage
numpy.float64 ** float,1,pandas
numpy.int16(numpy.int64),1,skimage
"numpy.ndarray[tuple[slibuiltins.boole[int, NoneType, NoneType], slibuiltins.boole[NoneType, int, NoneType]]] = builtins.bool",1,skimage
"numpy.zeros_like(a=numpy.ndarray, dtype=Type[numpy.bool_])",1,skimage
numpy.arctan(numpy.ndarray),1,skimage
numpy.float64 /= numpy.int64,1,skimage
"numpy.asanyarray(a=numpy.ndarray, dtype=Type[numpy.int64])",1,pandas
"numpy.empty(tuple[int, int], dtype=str, order=numpy.dtype)",1,pandas
Type[numpy.ndarray] != Type[numpy.ndarray],1,skimage
Type[numpy.ndarray] == Type[builtins.str],1,skimage
numpy.log2(list[int]),1,pandas
"numpy.lib.stride_tricks.as_strided(shape=tuple[int, int, numpy.int64, numpy.int64], strides=tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64], x=numpy.ndarray)",1,skimage
"numpy.array(tuple[int, int], dtype=numpy.dtype)",1,skimage
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, NoneType, int], slibuiltins.boole[NoneType, NoneType, int]]] = builtins.bool",1,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, int], slinumpy.ndarraye[NoneType, NoneType, int]]] = numpy.ndarray",1,skimage
"numpy.testing._private.utils.assert_allclose(actual=numpy.ndarray, atol=float, desired=list[numpy.float64])",1,skimage
"numpy.array(list[Union[pandas._libs.tslibs.timestamps.Timestamp, str]])",1,pandas
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, int, NoneType], slibuiltins.boole[int, NoneType, NoneType]]] = builtins.bool",1,skimage
numpy.min_scalar_type(numpy.float64),1,pandas
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, int, NoneType], slibuiltins.boole[NoneType, int, NoneType]]] = builtins.bool",1,skimage
numpy.testing._private.utils.assert_no_warnings(),1,skimage
numpy.int8 == numpy.int64,1,skimage
numpy.int8(numpy.int64),1,skimage
numpy.int32 == numpy.int64,1,skimage
numpy.int32(numpy.int64),1,skimage
numpy.ceil(numpy.ndarray),1,pandas
numpy.int64(numpy.int64),1,skimage
"numpy.issubdtype(arg1=Type[numpy.uint8], arg2=Type[numpy.float64])",1,skimage
"numpy.in1d(ar1=numpy.ndarray, ar2=numpy.ndarray)",1,skimage
"numpy.ndarray[tuple[slifloate[NoneType, int, NoneType], slifloate[int, NoneType, NoneType]]] = float",1,skimage
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, int, NoneType], slibuiltins.boole[NoneType, int, NoneType], slibuiltins.boole[NoneType, int, NoneType]]] = builtins.bool",1,skimage
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, int, NoneType], slibuiltins.boole[NoneType, int, NoneType], slibuiltins.boole[int, NoneType, NoneType]]] = builtins.bool",1,skimage
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, int, NoneType], slibuiltins.boole[int, NoneType, NoneType], slibuiltins.boole[NoneType, int, NoneType]]] = builtins.bool",1,skimage
"numpy.find_common_type(array_types=dict, scalar_types=list)",1,pandas
"numpy.ndarray[tuple[slibuiltins.boole[int, NoneType, NoneType], slibuiltins.boole[NoneType, int, NoneType], slibuiltins.boole[NoneType, int, NoneType]]] = builtins.bool",1,skimage
numpy.logical_not(pandas.core.series.Series),1,pandas
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, int, p=int, replace=builtins.bool, size=NoneType)",1,pandas
"numpy.array(list[Union[NoneType, float, pandas._libs.tslibs.nattype.NaTType]])",1,pandas
"numpy.hstack(tup=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,skimage
"numpy.array(tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], dtype=Type[builtins.float])",1,skimage
"numpy.ascontiguousarray(a=numpy.ndarray, dtype=Type[builtins.bool])",1,skimage
"numpy.ndarray[tuple[sliinte[int, NoneType, NoneType], sliinte[int, NoneType, NoneType], sliinte[int, int, NoneType]]] = int",1,skimage
"numpy.ndarray[tuple[sliinte[NoneType, int, NoneType], sliinte[int, NoneType, NoneType], sliinte[int, int, NoneType]]] = int",1,skimage
"numpy.ndarray.argmin(numpy.ndarray, int)",1,skimage
"numpy.arange(int, dtype=Type[builtins.int])",1,skimage
"numpy.ndarray[tuple[NoneType, builtins.ellipsis, NoneType]]",1,skimage
"numpy.ndarray[slilist[builtins.bool]e[NoneType, NoneType, NoneType]] = list[builtins.bool]",1,pandas
"numpy.ndarray[slilist[Union[NoneType, builtins.bool]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, builtins.bool]]",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,skimage
"numpy.ndarray[slilist[Union[builtins.bool, float]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, float]]",1,pandas
"numpy.array(list[float], copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,skimage
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], slice[int, NoneType, NoneType], slice[NoneType, int, NoneType]]]",1,skimage
"numpy.ndarray[int] = tuple[int, int]",1,pandas
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, numpy.ndarray, int, replace=builtins.bool)",1,skimage
"numpy.fill_diagonal(a=numpy.ndarray, val=float)",1,skimage
numpy.uint64 / int,1,skimage
"numpy.lib.arraypad._as_pairs(as_index=builtins.bool, ndim=int, x=list[tuple[numpy.int64, numpy.int64]])",1,skimage
"numpy.array(numpy.ndarray, copy=str, order=builtins.bool)",1,skimage
"numpy.array(tuple[int, int], dtype=Type[numpy.int64])",1,skimage
"numpy.ndarray[slilist[Union[float, int]]e[NoneType, NoneType, NoneType]] = list[Union[float, int]]",1,pandas
"numpy.array(numpy.ndarray, Type[builtins.bool])",1,skimage
"numpy.ndarray[slilist[Union[float, int, str]]e[NoneType, NoneType, NoneType]] = list[Union[float, int, str]]",1,pandas
"numpy.ndarray[slilist[Union[int, str]]e[NoneType, NoneType, NoneType]] = list[Union[int, str]]",1,pandas
"numpy.array(pandas.core.arrays.timedeltas.TimedeltaArray, copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.array(pandas.core.indexes.base.Index, copy=Type[numpy.float64], dtype=builtins.bool)",1,pandas
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, size=tuple[int, int, int, int])",1,skimage
"numpy.ndarray[slilist[datetime.datetime]e[NoneType, NoneType, NoneType]] = list[datetime.datetime]",1,pandas
"numpy.ndarray[tuple[slituple[int, int, int]e[int, NoneType, NoneType], slituple[int, int, int]e[int, NoneType, NoneType], slituple[int, int, int]e[NoneType, int, NoneType]]] = tuple[int, int, int]",1,skimage
"numpy.ndarray[tuple[slituple[int, int, int]e[int, NoneType, NoneType], slituple[int, int, int]e[NoneType, int, NoneType], slituple[int, int, int]e[NoneType, int, NoneType]]] = tuple[int, int, int]",1,skimage
"numpy.ndarray[tuple[slituple[int, int, int]e[NoneType, int, NoneType], slituple[int, int, int]e[int, NoneType, NoneType], slituple[int, int, int]e[NoneType, int, NoneType]]] = tuple[int, int, int]",1,skimage
"numpy.ndarray[tuple[slituple[int, int, int]e[NoneType, int, NoneType], slituple[int, int, int]e[NoneType, int, NoneType], slituple[int, int, int]e[NoneType, int, NoneType]]] = tuple[int, int, int]",1,skimage
"numpy.ndarray[int] = tuple[float, int]",1,pandas
numpy.dtype == pandas.core.dtypes.dtypes.PeriodDtype,1,pandas
"numpy.ndarray[tuple[slituple[int, int, int]e[int, NoneType, NoneType], slituple[int, int, int]e[int, NoneType, NoneType], slituple[int, int, int]e[int, NoneType, NoneType]]] = tuple[int, int, int]",1,skimage
"numpy.ndarray[tuple[int, sliinte[numpy.int64, numpy.int64, NoneType], sliinte[numpy.int64, numpy.int64, NoneType]]] = int",1,skimage
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, int, NoneType]]] = int",1,skimage
"numpy.ndarray.repeat(numpy.ndarray, int, axis=int)",1,skimage
numpy.prod(a=tuple),1,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], NoneType, slice[NoneType, NoneType, NoneType]]]",1,skimage
numpy.ndarray.repeat,1,skimage
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]] = numpy.ndarray",1,skimage
numpy.asarray(a=list[numpy.ndarray]),1,skimage
numpy.ndarray.std,1,pandas
numpy.any(a=list[builtins.bool]),1,skimage
"numpy.ndarray[tuple[builtins.ellipsis, slice[int, NoneType, NoneType]]]",1,skimage
numpy.asarray(a=numpy.float32),1,pandas
numpy.numpy.bool_ool_ | numpy.bool_,1,pandas
numpy.float32 >= int,1,pandas
"numpy.searchsorted(a=numpy.ndarray, v=int)",1,skimage
numpy.int8 > int,1,skimage
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int, int, int, int])",1,skimage
"numpy.ndarray[slilist[tuple[str, str]]e[NoneType, NoneType, NoneType]] = list[tuple[str, str]]",1,pandas
"numpy.ndarray.std(numpy.ndarray, axis=int, ddof=int)",1,pandas
"numpy.ndarray[slilist[tuple[str, int]]e[NoneType, NoneType, NoneType]] = list[tuple[str, int]]",1,pandas
"numpy.ndarray[tuple[slituple[int, int, int]e[int, NoneType, NoneType], slituple[int, int, int]e[NoneType, int, NoneType], slituple[int, int, int]e[int, NoneType, NoneType]]] = tuple[int, int, int]",1,skimage
"numpy.ndarray[tuple[slituple[int, int, int]e[NoneType, int, NoneType], slituple[int, int, int]e[int, NoneType, NoneType], slituple[int, int, int]e[int, NoneType, NoneType]]] = tuple[int, int, int]",1,skimage
"numpy.ndarray[tuple[slituple[int, int, int]e[NoneType, int, NoneType], slituple[int, int, int]e[NoneType, int, NoneType], slituple[int, int, int]e[int, NoneType, NoneType]]] = tuple[int, int, int]",1,skimage
"numpy.tile(A=numpy.ndarray, reps=tuple[int])",1,pandas
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int], order=str)",1,pandas
"numpy.array(list[int], dtype=numpy.dtype)",1,skimage
"numpy.ndarray[tuple[sliinte[NoneType, int, NoneType], sliinte[NoneType, int, NoneType], sliinte[int, int, NoneType]]] = int",1,skimage
"numpy.ones(dtype=numpy.dtype, shape=int)",1,skimage
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray, rtol=float)",1,pandas
"numpy.ndarray.std(numpy.ndarray, ddof=int)",1,pandas
numpy.array(list[list[numpy.float64]]),1,pandas
"numpy.ndarray[slifloate[int, NoneType, NoneType]] = float",1,skimage
"numpy.ndarray[tuple[sliinte[int, NoneType, NoneType], sliinte[NoneType, int, NoneType], sliinte[int, int, NoneType]]] = int",1,skimage
"numpy.ndarray[tuple[int, slilist[int]e[NoneType, int, NoneType]]] = list[int]",1,skimage
"numpy.ndarray[tuple[int, slilist[int]e[int, NoneType, NoneType]]] = list[int]",1,skimage
"numpy.ma.intore.MaskedArray[tuple[int, int, int]] = int",1,skimage
"numpy.linspace(num=int, start=float, stop=int)",1,skimage
"numpy.array(tuple[str, str, str, str], copy=builtins.bool)",1,pandas
numpy.zeros(list),1,skimage
"numpy.array(numpy.ndarray, copy=Type[builtins.bool], dtype=builtins.bool)",1,pandas
"numpy.ravel_multi_index(numpy.ndarray, tuple[int, int, int])",1,skimage
"numpy.add(numpy.ndarray, tuple[int, int, int])",1,skimage
"numpy.ndarray[tuple[numpy.int64, numpy.int64, numpy.int64]] = int",1,skimage
"numpy.ndarray.clip(numpy.ndarray, max=tuple[int, int, int])",1,skimage
numpy.ndarray % numpy.int64,1,pandas
int *= numpy.int64,1,pandas
numpy.int64 *= numpy.int64,1,pandas
"numpy.ndarray[slilist[list[int]]e[NoneType, NoneType, NoneType]] = list[list[int]]",1,pandas
"numpy.dstack(tup=tuple[numpy.ndarray, numpy.ndarray])",1,skimage
"numpy.ndarray[tuple[numpy.int64, numpy.int64]] = numpy.float64",1,skimage
"numpy.clip(a=numpy.float64, a_max=numpy.ndarray, a_min=numpy.float64)",1,skimage
numpy.ndim(a=pandas._libs.tslibs.period.Period),1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.arange(numpy.int64, dtype=numpy.dtype)",1,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, int]]]",1,pandas
numpy.asarray(a=list[numpy.int8]),1,pandas
"numpy.ndarray[slilist[numpy.ndarray]e[NoneType, NoneType, NoneType]] = list[numpy.ndarray]",1,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[numpy.int64, NoneType, int], slinumpy.ndarraye[numpy.int64, NoneType, int], slinumpy.ndarraye[numpy.int64, NoneType, int]]] = numpy.ndarray",1,skimage
"numpy.ndarray[tuple[slice[numpy.int64, NoneType, int], slice[numpy.int64, NoneType, int], slice[numpy.int64, NoneType, int]]]",1,skimage
"numpy.unravel_index(int, tuple[int, int, int])",1,skimage
"numpy.unravel_index(int, tuple[int, int])",1,skimage
"numpy.empty(list[int], dtype=numpy.dtype)",1,pandas
"numpy.ma.core.array(data=numpy.ndarray, mask=list[list[int]])",1,skimage
"numpy.array(tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], copy=builtins.bool)",1,pandas
"numpy.array(tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], copy=builtins.bool)",1,pandas
"numpy.array(tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], copy=builtins.bool)",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int, int], dtype=Type[builtins.object])",1,pandas
-numpy.matrix,1,skimage
numpy.nditer,1,skimage
"numpy.testing._private.utils.assert_warns(args=tuple[builtins.function, numpy.ndarray], warning_class=Type[builtins.FutureWarning])",1,skimage
"numpy.testing._private.utils.assert_almost_equal(actual=float, decimal=int, desired=numpy.float64)",1,skimage
"numpy.ndarray[tuple[builtins.ellipsis, NoneType]]",1,pandas
"numpy.array(tuple[str, str, str, str, str], copy=builtins.bool)",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
"numpy.array(tuple[int, int, int, int, int], copy=builtins.bool)",1,pandas
"numpy.amin(a=tuple[int, int])",1,skimage
"numpy.ndarray[slilist[NoneType]e[NoneType, NoneType, NoneType]] = list[NoneType]",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.ndarray.prod(numpy.ndarray, NoneType)",1,pandas
"numpy.ndarray[tuple[slifloate[int, int, NoneType], slifloate[int, int, NoneType], slifloate[int, int, NoneType], slifloate[int, int, NoneType]]] = float",1,skimage
numpy.nanmedian(a=numpy.ndarray),1,pandas
"numpy.ndarray[tuple[slifloate[int, int, NoneType]]] = float",1,skimage
numpy.absolute(numpy.float64),1,pandas
numpy.float32 > numpy.float64,1,skimage
"numpy.array(tuple[str, str, str, str, str, str, str, str, str, str], copy=builtins.bool)",1,pandas
"numpy.asarray(a=tuple[str, str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.ravel_multi_index(numpy.ndarray, tuple[int, int])",1,skimage
"numpy.ndarray.clip(numpy.ndarray, max=tuple[int, int])",1,skimage
"numpy.add(numpy.ndarray, tuple[int, int])",1,skimage
numpy.nditer.multi_index,1,skimage
*numpy.nditer,1,skimage
numpy.int64(numpy.datetime64),1,pandas
numpy.datetime64(),1,pandas
"numpy.nditer(numpy.ndarray, flags=list[str])",1,skimage
"numpy.ndarray.clip(numpy.ndarray, min=int)",1,skimage
numpy.mean(a=list[numpy.float64]),1,skimage
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray, rtol=int)",1,pandas
"numpy.all(a=numpy.ndarray, axis=tuple)",1,pandas
"numpy.testing._private.utils.assert_warns(args=tuple[builtins.function, numpy.ndarray], warning_class=Type[builtins.UserWarning])",1,skimage
"numpy.asarray(a=tuple[int, int, int], dtype=Type[builtins.object])",1,pandas
numpy.lexsort(list[numpy.ndarray]),1,pandas
"numpy.tile(A=builtins.range, reps=int)",1,pandas
numpy.log(int),1,pandas
"numpy.asarray(a=tuple[str, str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.ma.numpy.ma.core.MaskedConstantore.MaskedArray[slinumpy.ma.core.MaskedConstante[NoneType, NoneType, NoneType]] = numpy.ma.core.MaskedConstant",1,skimage
"numpy.tile(A=list[numpy.int8], reps=int)",1,pandas
numpy.ma.core.MaskedArray + numpy.float64,1,skimage
numpy.ma.core.MaskedArray / numpy.ma.core.MaskedArray,1,skimage
"numpy.ndarray[tuple[slibuiltins.boole[int, int, NoneType], slibuiltins.boole[int, int, NoneType], slibuiltins.boole[int, int, NoneType]]] = builtins.bool",1,skimage
"numpy.ndarray[slilist[numpy.int64]e[NoneType, NoneType, NoneType]] = list[numpy.int64]",1,pandas
"numpy.lituple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]].index_tricks.OGridClass[tuple[slice[NoneType, int, NoneType], slice[NoneType, int, NoneType], slice[NoneType, int, NoneType]]]",1,skimage
"numpy.asarray(a=numpy.ndarray, dtype=str, order=Type[numpy.float64])",1,skimage
numpy.int64 -= numpy.int64,1,pandas
numpy.ma.core.getdata(a=numpy.ndarray),1,skimage
"numpy.testing._private.utils.assert_array_almost_equal_nulp(x=numpy.ma.core.MaskedArray, y=numpy.ma.core.MaskedArray)",1,skimage
"numpy.ndarray[tuple[int, list[int]]] = float",1,pandas
"numpy.empty(tuple[int, int], dtype=Type[numpy.bool_])",1,pandas
numpy.dtype != Type[numpy.bool_],1,pandas
numpy.ma.core.MaskedArray.mean(self=numpy.ma.core.MaskedArray),1,skimage
numpy.dtype != Type[numpy.object_],1,pandas
NoneType != numpy.dtype,1,pandas
"numpy.ndarray[tuple[int, slibuiltins.boole[NoneType, NoneType, NoneType]]] = builtins.bool",1,skimage
"numpy.ma.core.array(data=numpy.ndarray, mask=numpy.ndarray)",1,skimage
numpy.ma.core.getdata(a=numpy.ma.core.MaskedArray),1,skimage
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, numpy.ndarray, int)",1,pandas
"numpy.ma.intore.MaskedArray[tuple[int, int]] = int",1,skimage
numpy.ma.core.MaskedArray == int,1,skimage
"numpy.ma.core.MaskedArray.reshape(s=tuple[tuple[int, int, int]], self=numpy.ma.core.MaskedArray)",1,skimage
numpy.object_(),1,pandas
"numpy.ma.core.MaskedArray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], int]]",1,skimage
"Type[numpy.otuple[Type[builtins.object], Type[numpy.object_], str, str]ject_] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1,pandas
"numpy.asanyarray(a=numpy.ndarray, dtype=str)",1,pandas
"numpy.ma.core.MaskedArray[tuple[int, int]]",1,skimage
"numpy.asarray(a=list[tuple[str, str]])",1,pandas
"numpy.asarray(a=list[tuple[str, str]], dtype=NoneType)",1,pandas
"numpy.asarray(a=list[tuple[str, str]], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1,pandas
"numpy.ma.core.MaskedArray[tuple[slice[NoneType, NoneType, NoneType], int]]",1,skimage
numpy.flatiter[numpy.ndarray] = numpy.ndarray,1,pandas
"numpy.array(numpy.ndarray, copy=builtins.bool, subok=builtins.bool)",1,pandas
"numpy.ma.core.array(data=numpy.ndarray, fill_value=numpy.ndarray, mask=numpy.float64)",1,skimage
list[numpy.ndarray] * numpy.int64,1,pandas
"numpy.fromiter(builtins.generator, dtype=str)",1,pandas
"numpy.empty_like(numpy.ndarray, dtype=builtins.bool, order=str, subok=Type[numpy.float64])",1,skimage
"numpy.ndarray[list[Union[int, numpy.int64]]]",1,pandas
"numpy.ndarray[list[Union[int, numpy.int64]]] = numpy.ndarray",1,pandas
"numpy.array(pandas.core.indexes.numeric.Float64Index, copy=builtins.bool)",1,pandas
"numpy.asarray(a=list[numpy.bool_], dtype=Type[builtins.bool])",1,pandas
"numpy.array(list, copy=NoneType, dtype=builtins.bool)",1,pandas
"numpy.zeros_like(a=numpy.ndarray, dtype=str, order=Type[numpy.uint8])",1,skimage
"numpy.fromiter(builtins.generator, dtype=Type[numpy.int64])",1,pandas
"numpy.testing._private.utils.assert_array_less(x=numpy.float64, y=float)",1,skimage
"numpy.zeros(tuple[int, int], Type[builtins.float])",1,skimage
numpy.ndarray // numpy.int64,1,pandas
numpy.float64 / numpy.ndarray,1,skimage
numpy.NAN,1,skimage
numpy.iscomplexobj(x=numpy.ndarray),1,skimage
numpy.round_(a=numpy.float64),1,skimage
numpy.asarray(a=list[numpy.bool_]),1,pandas
"numpy.empty_like(numpy.ma.core.MaskedArray, dtype=builtins.bool, order=str, subok=Type[numpy.float64])",1,skimage
"numpy.zeros(numpy.int64, dtype=Type[builtins.bool])",1,pandas
numpy.multiply,1,pandas
"numpy.multiply(numpy.int64, int, dtype=Type[numpy.int32])",1,pandas
"numpy.require(a=numpy.ndarray, dtype=Type[numpy.uint8], requirements=list[str])",1,skimage
"numpy.ndarray.put(numpy.ndarray, numpy.ndarray, builtins.bool)",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.ndarray)",1,pandas
numpy.ma.core.getmaskarray(arr=numpy.ma.core.MaskedArray),1,skimage
numpy.amax(a=list[int]),1,pandas
"numpy.asarray(a=tuple[str, str, str], dtype=Type[builtins.object])",1,pandas
"numpy.ma.core.array(data=numpy.ndarray, fill_value=numpy.ndarray, mask=float)",1,skimage
"numpy.delete(arr=numpy.ndarray, axis=int, obj=numpy.ndarray)",1,pandas
"numpy.ma.core.array(data=numpy.ndarray, fill_value=builtins.bool, mask=float)",1,skimage
"numpy.asarray(a=tuple[str], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int], dtype=Type[builtins.object])",1,pandas
"numpy.testing._private.utils.assert_array_almost_equal_nulp(x=numpy.ndarray, y=numpy.ndarray)",1,skimage
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1,pandas
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], int]]",1,pandas
"numpy.testing._private.utils.assert_array_almost_equal(x=tuple[int, int, int, int, int, int], y=tuple[int, int, int, int, int, int])",1,skimage
pandas.core.arrays.period.PeriodArray - numpy.ndarray,1,pandas
numpy.array(list[pandas.tseries.offsets.Hour]),1,pandas
pandas.tseries.offsets.Minute * numpy.int64,1,pandas
numpy.array(list[pandas.tseries.offsets.Minute]),1,pandas
pandas.tseries.offsets.Second * numpy.int64,1,pandas
numpy.array(list[pandas.tseries.offsets.Second]),1,pandas
pandas.tseries.offsets.Milli * numpy.int64,1,pandas
numpy.array(list[pandas.tseries.offsets.Milli]),1,pandas
pandas.tseries.offsets.Micro * numpy.int64,1,pandas
numpy.array(list[pandas.tseries.offsets.Micro]),1,pandas
pandas.tseries.offsets.Nano * numpy.int64,1,pandas
numpy.array(list[pandas.tseries.offsets.Nano]),1,pandas
pandas.tseries.offsets.YearEnd * numpy.int64,1,pandas
numpy.array(list[pandas.tseries.offsets.YearEnd]),1,pandas
pandas.tseries.offsets.QuarterEnd * numpy.int64,1,pandas
pandas.tseries.offsets.Week * numpy.int64,1,pandas
pandas.tseries.offsets.Hour * numpy.int64,1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas.tseries.offsets.Day]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas.tseries.offsets.Day]]",1,pandas
"numpy.ndarray[slilist[pandas.tseries.offsets.Day]e[NoneType, NoneType, NoneType]] = list[pandas.tseries.offsets.Day]",1,pandas
numpy.ndarray >= pandas.core.frame.DataFrame,1,pandas
"numpy.issubdtype(arg1=Type[builtins.int], arg2=Type[numpy.floating])",1,skimage
numpy.ndarray != pandas.core.indexes.period.PeriodIndex,1,pandas
int > numpy.uint8,1,skimage
pandas.core.series.Series != numpy.ndarray,1,pandas
numpy.ndarray > pandas.core.series.Series,1,pandas
"numpy.full(dtype=str, fill_value=numpy.float32, shape=numpy.ndarray)",1,skimage
numpy.ndarray - numpy.uint8,1,skimage
"numpy.asarray(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]])",1,pandas
numpy.ndarray > pandas.core.frame.DataFrame,1,pandas
numpy.ndarray == pandas.core.arrays.period.PeriodArray,1,pandas
numpy.ndarray > pandas.core.arrays.period.PeriodArray,1,pandas
numpy.ndarray >= pandas.core.arrays.period.PeriodArray,1,pandas
numpy.ndarray != pandas.core.arrays.period.PeriodArray,1,pandas
pandas.core.arrays.period.PeriodArray >= numpy.ndarray,1,pandas
numpy.array(list[pandas.tseries.offsets.Week]),1,pandas
numpy.ndarray - pandas.core.arrays.period.PeriodArray,1,pandas
pandas.core.indexes.numeric.Int64Index // numpy.int64,1,pandas
numpy.datetime64 - pandas.core.indexes.period.PeriodIndex,1,pandas
"numpy.add(pandas.core.series.Series, str)",1,pandas
"numpy.add(pandas.core.series.Series, float)",1,pandas
"numpy.add(str, pandas.core.series.Series)",1,pandas
"numpy.add(float, pandas.core.series.Series)",1,pandas
"numpy.subtract(pandas.core.series.Series, str)",1,pandas
"numpy.subtract(float, pandas.core.series.Series)",1,pandas
"numpy.add(pandas.core.frame.DataFrame, float)",1,pandas
"numpy.add(float, pandas.core.frame.DataFrame)",1,pandas
"numpy.subtract(pandas.core.frame.DataFrame, float)",1,pandas
"numpy.subtract(float, pandas.core.frame.DataFrame)",1,pandas
"numpy.add(pandas.core.arrays.period.PeriodArray, str)",1,pandas
"numpy.add(str, pandas.core.arrays.period.PeriodArray)",1,pandas
"numpy.subtract(pandas.core.arrays.period.PeriodArray, str)",1,pandas
"numpy.subtract(str, pandas.core.arrays.period.PeriodArray)",1,pandas
"numpy.lilist[slice[numpy.int64, numpy.int64, NoneType]].index_tricks.MGridClass[list[slice[numpy.int64, numpy.int64, NoneType]]]",1,skimage
pandas.core.arrays.period.PeriodArray + numpy.ndarray,1,pandas
pandas.core.arrays.period.PeriodArray - numpy.timedelta64,1,pandas
numpy.timedelta64 + pandas.core.arrays.period.PeriodArray,1,pandas
pandas.core.indexes.period.PeriodIndex + numpy.int64,1,pandas
pandas.core.arrays.period.PeriodArray + numpy.datetime64,1,pandas
numpy.datetime64 + pandas.core.arrays.period.PeriodArray,1,pandas
"numpy.full(dtype=str, fill_value=numpy.int64, shape=numpy.ndarray)",1,skimage
"numpy.full(dtype=str, fill_value=numpy.int8, shape=numpy.ndarray)",1,skimage
"numpy.full(dtype=str, fill_value=numpy.uint64, shape=numpy.ndarray)",1,skimage
"numpy.array(list[numpy.int64], Type[numpy.int32])",1,skimage
numpy.dtype(datetime.timedelta),1,pandas
numpy.timedelta64 - pandas.core.arrays.period.PeriodArray,1,pandas
"numpy.full(dtype=str, fill_value=numpy.uint8, shape=numpy.ndarray)",1,skimage
"numpy.ones(dtype=Type[builtins.bool], shape=list[int])",1,skimage
numpy.ndarray.shape = numpy.ndarray,1,skimage
"numpy.zeros(tuple[numpy.int64], numpy.dtype)",1,skimage
numpy.uint32 + int,1,skimage
"numpy.cumsum(a=numpy.ndarray, out=numpy.ndarray)",1,skimage
numpy.ndarray >= pandas.core.indexes.period.PeriodIndex,1,pandas
numpy.ndarray > pandas.core.indexes.period.PeriodIndex,1,pandas
numpy.ndarray == pandas.core.indexes.period.PeriodIndex,1,pandas
numpy.array(pandas._libs.tslibs.period.Period),1,pandas
"numpy.ndarray[tuple[tuple[int, int], builtins.ellipsis]] = int",1,skimage
int % numpy.ndarray,1,pandas
"numpy.empty(tuple[int], dtype=str, order=Type[numpy.float64])",1,pandas
"numpy.ndarray[tuple[slinumpy.uint8e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.uint8",1,skimage
numpy.float64 // numpy.float64,1,pandas
numpy.float64 ** numpy.float64,1,pandas
numpy.float64 % numpy.float64,1,pandas
"numpy.remainder(numpy.ndarray, int)",1,pandas
"numpy.floor_divide(numpy.ndarray, int)",1,pandas
"numpy.array(list[list[int]], dtype=Type[numpy.int16])",1,skimage
numpy.dtype.base,1,pandas
float - numpy.float64,1,pandas
float // numpy.float64,1,pandas
float ** numpy.float64,1,pandas
float % numpy.float64,1,pandas
numpy.int64 - numpy.ndarray,1,pandas
"numpy.asarray(a=numpy.ndarray, order=str)",1,skimage
"numpy.empty(numpy.ndarray, dtype=str, order=numpy.dtype)",1,skimage
pandas.core.indexes.numeric.UInt64Index % numpy.ndarray,1,pandas
"numpy.ndarray[tuple[slinumpy.uint32e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.uint32",1,skimage
pandas.core.indexes.numeric.Int64Index // numpy.float64,1,pandas
pandas.core.series.Series % numpy.ndarray,1,pandas
pandas.core.indexes.numeric.Float64Index % numpy.ndarray,1,pandas
pandas.core.indexes.range.RangeIndex % numpy.ndarray,1,pandas
pandas.core.indexes.numeric.Int64Index % numpy.ndarray,1,pandas
numpy.uint64 != int,1,pandas
float ** numpy.ndarray,1,pandas
"numpy.ndarray[tuple[slinumpy.uint16e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.uint16",1,skimage
"numpy.ndarray[tuple[tuple[int, int], builtins.ellipsis]] = numpy.uint16",1,skimage
numpy.array(decimal.Decimal),1,pandas
"numpy.cumprod(a=tuple[int, int])",1,skimage
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = int",1,skimage
"numpy.ndarray[tuple[tuple[int, int], builtins.ellipsis]] = numpy.uint8",1,skimage
"numpy.full(dtype=str, fill_value=numpy.float64, shape=numpy.ndarray)",1,skimage
numpy.ndarray + numpy.uint8,1,skimage
int > numpy.int64,1,skimage
"numpy.roll(a=numpy.ndarray, axis=int, shift=numpy.ndarray)",1,pandas
pandas.core.indexes.numeric.Int64Index + numpy.int64,1,pandas
pandas.core.indexes.numeric.Int64Index - numpy.int64,1,pandas
int > numpy.uint64,1,skimage
pandas.core.indexes.numeric.Float64Index + numpy.float64,1,pandas
pandas.core.indexes.numeric.Float64Index - numpy.float64,1,pandas
"numpy.ndarray[slilist[Union[list[Union[float, int]], numpy.ndarray]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[float, int]], numpy.ndarray]]",1,pandas
numpy.ndarray + pandas.core.indexes.base.Index,1,pandas
"numpy.issubdtype(arg1=Type[numpy.float64], arg2=Type[numpy.integer])",1,pandas
numpy.int64 + numpy.ndarray,1,pandas
"numpy.array(pandas.core.indexes.base.Index, copy=numpy.dtype, dtype=builtins.bool)",1,pandas
"numpy.array(int, dtype=Type[numpy.int64])",1,pandas
numpy.ndarray - str,1,pandas
list[str] - numpy.ndarray,1,pandas
str - numpy.ndarray,1,pandas
numpy.ndarray + numpy.int64,1,pandas
float // numpy.ndarray,1,pandas
int // numpy.ndarray,1,pandas
numpy.sin(pandas.core.indexes.numeric.UInt64Index),1,pandas
int // numpy.float64,1,pandas
numpy.int64 ** pandas.core.series.Series,1,pandas
numpy.int64 ** numpy.ndarray,1,pandas
numpy.int64 ** numpy.float64,1,pandas
int % numpy.float64,1,pandas
"numpy.ndarray[slilist[numpy.bool_]e[NoneType, NoneType, NoneType]] = list[numpy.bool_]",1,pandas
numpy.sin(pandas.core.indexes.numeric.Float64Index),1,pandas
float / numpy.ndarray,1,pandas
"numpy.true_divide(pandas.core.indexes.numeric.UInt64Index, float)",1,pandas
"numpy.true_divide(pandas.core.indexes.numeric.Float64Index, float)",1,pandas
"numpy.true_divide(pandas.core.series.Series, float)",1,pandas
numpy.modf(pandas.core.indexes.numeric.Int64Index),1,pandas
int > numpy.int8,1,skimage
"numpy.ufunc.at(numpy.ufunc, numpy.ndarray, list[int], int)",1,pandas
"numpy.subtract(pandas.core.series.Series, numpy.ndarray)",1,pandas
"numpy.ndarray[slilist[pandas.tseries.offsets.MonthEnd]e[NoneType, NoneType, NoneType]] = list[pandas.tseries.offsets.MonthEnd]",1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas.tseries.offsets.MonthEnd]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas.tseries.offsets.MonthEnd]]",1,pandas
numpy.int64 / pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
numpy.ndim(a=list[datetime.datetime]),1,pandas
"numpy.ndarray[slilist[Union[NoneType, int]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, int]]",1,pandas
"numpy.ndarray[slilist[Union[int, pandas._libs.missing.NAType]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.missing.NAType]]",1,pandas
"numpy.asarray(a=list[list[int]], dtype=str)",1,pandas
"numpy.asarray(a=pandas.tests.arrays.test_array.DecimalArray2, dtype=Type[builtins.object])",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, str, side=NoneType, sorter=str)",1,pandas
"numpy.asarray(a=list[int], dtype=Type[builtins.float])",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, list[int], side=NoneType, sorter=str)",1,pandas
numpy.iinfo(int_type=Type[numpy.uint16]),1,pandas
"numpy.ravel(a=tuple[numpy.float64, numpy.float64])",1,skimage
numpy.ravel(a=numpy.float64),1,skimage
"numpy.asarray(a=list[int], dtype=Type[builtins.int])",1,pandas
"numpy.ndarray.argsort(numpy.ndarray, kind=NoneType)",1,pandas
"numpy.ndarray.searchsorted(numpy.ndarray, list[int], side=numpy.ndarray, sorter=str)",1,pandas
numpy.ravel(a=list[numpy.float64]),1,skimage
"numpy.result_type(numpy.dtype, numpy.dtype, Type[numpy.float32])",1,skimage
"numpy.asarray(a=list[decimal.Decimal], dtype=Type[builtins.object])",1,pandas
"numpy.tile(A=numpy.ndarray, reps=tuple[int, int, int])",1,skimage
numpy.timedelta64 ** pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
numpy.ndarray / numpy.int64,1,pandas
numpy.ndarray * pandas.core.indexes.timedeltas.TimedeltaIndex,1,pandas
pandas._linumpy.float64s.tslinumpy.float64s.nattype.NaTType / numpy.float64,1,pandas
numpy.timedelta64 ** pandas.core.indexes.timedeltas.TimedeltaIndex,1,pandas
numpy.timedelta64 ** pandas.core.frame.DataFrame,1,pandas
pandas.core.frame.DataFrame ** numpy.timedelta64,1,pandas
"numpy.array(pandas.core.arrays.numpy_.PandasArray, copy=Type[builtins.object], dtype=builtins.bool)",1,pandas
"numpy.result_type(numpy.ndarray, Type[builtins.int])",1,pandas
"numpy.asarray(a=list[pandas._libs.tslibs.period.Period], dtype=Type[builtins.object])",1,pandas
"numpy.asarray(a=tuple[int, int, int, int, int])",1,skimage
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=Type[builtins.object], dtype=builtins.bool)",1,pandas
"numpy.result_type(numpy.dtype, Type[builtins.bool])",1,pandas
"numpy.ndarray[tuple[slice[numpy.int64, numpy.int64, NoneType], slice[numpy.int64, numpy.int64, NoneType], slice[numpy.int64, numpy.int64, NoneType], slice[numpy.int64, numpy.int64, NoneType], slice[numpy.int64, numpy.int64, NoneType]]]",1,skimage
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.int32])",1,pandas
numpy.ravel(a=numpy.int64),1,skimage
numpy.ravel(a=numpy.ndarray),1,skimage
"numpy.asarray(a=pandas.core.arrays.integer.IntegerArray, dtype=Type[numpy.int64])",1,pandas
numpy.set_printoptions,1,skimage
numpy.roll,1,pandas
"numpy.testing._private.utils.assert_equal(actual=list[numpy.float64], desired=list[numpy.float64])",1,skimage
numpy.isnan(numpy.datetime64),1,pandas
"numpy.testing._private.utils.assert_equal(actual=numpy.int64, desired=numpy.int64)",1,skimage
"numpy.testing._private.utils.assert_equal(actual=float, desired=float)",1,skimage
"numpy.empty(tuple[int, int], dtype=Type[builtins.int])",1,skimage
"numpy.testing._private.utils.assert_array_almost_equal(x=tuple[numpy.float64, numpy.float64, numpy.float64], y=tuple[float, float, float])",1,skimage
"numpy.may_share_memory(pandas.core.arrays.timedeltas.TimedeltaArray, numpy.ndarray)",1,pandas
"numpy.array(pandas.core.arrays.integer.IntegerArray, dtype=Type[numpy.object_])",1,pandas
"numpy.ndarray[slinumpy.datetime64e[NoneType, NoneType, NoneType]] = numpy.datetime64",1,pandas
numpy.ndarray.repeat,1,pandas
"numpy.ndarray.repeat(numpy.ndarray, list[int], axis=NoneType)",1,pandas
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]], dtype=Type[builtins.object])",1,pandas
"numpy.testing._private.utils.assert_array_almost_equal(x=int, y=int)",1,skimage
"numpy.asarray(a=pandas.core.arrays.timedeltas.TimedeltaArray, dtype=Type[builtins.str])",1,pandas
"numpy.array(pandas.core.arrays.timedeltas.TimedeltaArray, copy=str, dtype=builtins.bool)",1,pandas
numpy.dtype == pandas.core.arrays.string_.StringDtype,1,pandas
"numpy.ndarray[sliinte[NoneType, int, NoneType]] = int",1,skimage
numpy.ravel(a=int),1,skimage
"numpy.issubdtype(arg1=Type[numpy.int64], arg2=Type[numpy.integer])",1,skimage
"numpy.may_share_memory(pandas.core.arrays.datetimes.DatetimeArray, numpy.ndarray)",1,pandas
"numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray, dtype=Type[builtins.str])",1,pandas
numpy.isscalar(element=numpy.int64),1,skimage
numpy.ndindex(shape=tuple[tuple[int]]),1,skimage
numpy.may_share_memory,1,pandas
"numpy.array(pandas.core.arrays.string_.StringArray, copy=Type[numpy.object_], dtype=builtins.bool)",1,pandas
"numpy.array(pandas.core.arrays.datetimes.DatetimeArray, dtype=Type[builtins.object])",1,pandas
"numpy.array(pandas.core.indexes.datetimes.DatetimeIndex, dtype=Type[builtins.object])",1,pandas
"numpy.array(pandas.core.arrays.datetimes.DatetimeArray, dtype=Type[numpy.int64])",1,pandas
"numpy.testing._private.utils.assert_equal(actual=tuple[slice[int, int, NoneType], slice[int, int, NoneType]], desired=tuple[slice[int, int, NoneType], slice[int, int, NoneType]])",1,skimage
"numpy.array(pandas.core.indexes.numeric.Int64Index, dtype=numpy.dtype)",1,pandas
"numpy.testing._private.utils.assert_equal(actual=tuple[numpy.float64, numpy.float64], desired=tuple[numpy.float64, numpy.float64])",1,skimage
numpy.float64 / pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
numpy.int64 * pandas.core.frame.DataFrame,1,pandas
pandas.core.frame.DataFrame > numpy.timedelta64,1,pandas
pandas.core.frame.DataFrame * numpy.int64,1,pandas
pandas.core.indexes.timedeltas.TimedeltaIndex + numpy.datetime64,1,pandas
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta + numpy.timedelta64,1,pandas
numpy.datetime64 - pandas.core.indexes.timedeltas.TimedeltaIndex,1,pandas
numpy.datetime64 + pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
pandas.core.arrays.timedeltas.TimedeltaArray - numpy.datetime64,1,pandas
"numpy.ones(dtype=str, order=Type[builtins.bool], shape=tuple[int, int, int])",1,skimage
"numpy.ones(dtype=str, order=Type[builtins.bool], shape=tuple[int, int])",1,skimage
"numpy.array(tuple[int, int, int, int, int, int, int, int])",1,skimage
numpy.ndarray + numpy.datetime64,1,pandas
"numpy.broadcast_to(array=numpy.datetime64, shape=tuple[int])",1,pandas
"numpy.broadcast_to(array=numpy.datetime64, shape=tuple[int, int])",1,pandas
numpy.int64 + pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
pandas.core.arrays.timedeltas.TimedeltaArray + numpy.int64,1,pandas
pandas.core.indexes.timedeltas.TimedeltaIndex += numpy.ndarray,1,pandas
numpy.int64 - pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
pandas.core.arrays.timedeltas.TimedeltaArray - numpy.timedelta64,1,pandas
pandas.core.arrays.timedeltas.TimedeltaArray -= numpy.timedelta64,1,pandas
pandas.core.indexes.timedeltas.TimedeltaIndex -= numpy.timedelta64,1,pandas
numpy.ndarray != pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
pandas.core.arrays.timedeltas.TimedeltaArray > numpy.timedelta64,1,pandas
pandas.core.arrays.timedeltas.TimedeltaArray == numpy.ndarray,1,pandas
numpy.ndarray == pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
pandas.core.arrays.timedeltas.TimedeltaArray > numpy.ndarray,1,pandas
numpy.ndarray >= pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
pandas.core.arrays.timedeltas.TimedeltaArray != numpy.ndarray,1,pandas
numpy.ndarray > pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
pandas.core.indexes.timedeltas.TimedeltaIndex += numpy.timedelta64,1,pandas
"numpy.ndim(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]])",1,pandas
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]], copy=builtins.bool)",1,pandas
"numpy.ndarray[tuple[slibuiltins.boole[numpy.int64, numpy.int64, NoneType], slibuiltins.boole[numpy.int64, numpy.int64, NoneType]]] = builtins.bool",1,skimage
numpy.ndarray > pandas.core.indexes.timedeltas.TimedeltaIndex,1,pandas
"numpy.multiply(pandas.core.indexes.timedeltas.TimedeltaIndex, int)",1,pandas
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, str]], copy=builtins.bool)",1,pandas
pandas.core.frame.DataFrame -= numpy.ndarray,1,pandas
pandas.core.arrays.timedeltas.TimedeltaArray -= numpy.ndarray,1,pandas
pandas.core.indexes.timedeltas.TimedeltaIndex - numpy.timedelta64,1,pandas
numpy.timedelta64 % pandas.core.indexes.timedeltas.TimedeltaIndex,1,pandas
numpy.matrix @ numpy.ndarray,1,skimage
numpy.ndarray @ numpy.matrix,1,skimage
pandas.core.frame.DataFrame // numpy.timedelta64,1,pandas
pandas.core.indexes.timedeltas.TimedeltaIndex % numpy.timedelta64,1,pandas
pandas.core.frame.DataFrame % numpy.timedelta64,1,pandas
pandas.core.arrays.timedeltas.TimedeltaArray % numpy.timedelta64,1,pandas
numpy.timedelta64 // pandas.core.indexes.timedeltas.TimedeltaIndex,1,pandas
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta / numpy.timedelta64,1,pandas
numpy.timedelta64 % pandas.core.series.Series,1,pandas
numpy.timedelta64 % pandas.core.frame.DataFrame,1,pandas
numpy.timedelta64 % pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
numpy.timedelta64 // pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
numpy.int64 * pandas.core.series.Series,1,pandas
numpy.int64 * pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.nattype.NaTType / numpy.timedelta64,1,pandas
numpy.obj2sctype(rep=Type[numpy.bool_]),1,skimage
numpy.timedelta64 - pandas.core.indexes.timedeltas.TimedeltaIndex,1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
numpy.timedelta64 - pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
"numpy.zeros(tuple[int, int], dtype=Type[numpy.int64])",1,pandas
numpy.timedelta64 + pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
numpy.timedelta64 + pandas.core.indexes.timedeltas.TimedeltaIndex,1,pandas
numpy.dtype(pandas.tseries.offsets.Hour),1,pandas
"numpy.ndarray[slilist[Union[pandas.tseries.offsets.Hour, pandas.tseries.offsets.Minute]]e[NoneType, NoneType, NoneType]] = list[Union[pandas.tseries.offsets.Hour, pandas.tseries.offsets.Minute]]",1,pandas
"numpy.array(list[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp, pandas.tseries.offsets.Day]])",1,pandas
"numpy.issubdtype(arg1=Type[numpy.bool_], arg2=Type[numpy.bool_])",1,skimage
numpy.ndarray * pandas.tseries.offsets.Hour,1,pandas
numpy.ndarray * datetime.timedelta,1,pandas
"numpy.zeros(tuple[int, int], Type[numpy.uint16])",1,skimage
pandas.core.indexes.timedeltas.TimedeltaIndex * numpy.timedelta64,1,pandas
pandas.core.arrays.timedeltas.TimedeltaArray * numpy.timedelta64,1,pandas
numpy.ndarray / pandas._libs.tslibs.nattype.NaTType,1,pandas
pandas.core.indexes.numeric.Int64Index // numpy.uint64,1,pandas
~numpy.bool_,1,pandas
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.float64e[NoneType, NoneType, NoneType], slinumpy.float64e[NoneType, NoneType, NoneType]]] = numpy.float64",1,pandas
numpy.dtype(pandas._libs.tslibs.period.Period),1,pandas
"numpy.zeros(tuple[int, int, int, int], dtype=str, order=Type[numpy.uint8])",1,skimage
"numpy.ndarray - tuple[int, int, int, int]",1,skimage
"numpy.array(tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,skimage
numpy.dtype(pandas._libs.tslibs.timedeltas.Timedelta),1,pandas
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, NoneType, NoneType], slinumpy.float64e[NoneType, NoneType, NoneType], slinumpy.float64e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.float64",1,skimage
"numpy.ndarray[tuple[sliinte[int, int, NoneType], sliinte[int, int, NoneType], sliinte[int, int, NoneType], sliinte[int, int, NoneType]]] = int",1,skimage
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, NoneType, NoneType], slinumpy.float64e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.float64",1,skimage
pandas.core.arrays.datetimes.DatetimeArray - numpy.datetime64,1,pandas
"numpy.ndarray[tuple[tuple[int, int], builtins.ellipsis]] = numpy.float64",1,skimage
numpy.ndarray[tuple[int]],1,skimage
numpy.datetime64 - pandas.core.indexes.datetimes.DatetimeIndex,1,pandas
"numpy.ndarray[tuple[slice[int, int, NoneType]]]",1,skimage
numpy.dtype(pandas._libs.tslibs.timestamps.Timestamp),1,pandas
"numpy.zeros(tuple[int], dtype=str, order=Type[numpy.uint8])",1,skimage
numpy.datetime64 - pandas.core.arrays.datetimes.DatetimeArray,1,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",1,skimage
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, NoneType, NoneType], slinumpy.float64e[NoneType, NoneType, NoneType], slinumpy.float64e[NoneType, NoneType, NoneType], slinumpy.float64e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.float64",1,skimage
numpy.ndarray[int] = pandas.core.arrays.datetimes.DatetimeArray,1,pandas
numpy.timedelta64 + pandas.core.arrays.datetimes.DatetimeArray,1,pandas
numpy.timedelta64 - pandas.core.indexes.datetimes.DatetimeIndex,1,pandas
"numpy.broadcast_to(array=numpy.timedelta64, shape=tuple[int])",1,pandas
"numpy.testing._private.utils.assert_equal(actual=dict, desired=dict)",1,skimage
"numpy.lib.arraypad._as_pairs(as_index=builtins.bool, ndim=int, x=list[tuple[int, int]])",1,skimage
"numpy.broadcast_to(array=numpy.timedelta64, shape=tuple[int, int])",1,pandas
numpy.timedelta64 - pandas.core.arrays.datetimes.DatetimeArray,1,pandas
"numpy.ndarray[sliinte[NoneType, NoneType, NoneType]] = int",1,skimage
"numpy.array(tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,skimage
"numpy.linspace(dtype=str, num=int, start=int, stop=int)",1,pandas
"numpy.array(list[list[int]], order=str)",1,skimage
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType], slice[int, int, NoneType]]]",1,skimage
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = int",1,skimage
"numpy.zeros(tuple[int, int, int, int, int], dtype=str, order=Type[numpy.uint8])",1,skimage
"numpy.ndarray - tuple[int, int, int, int, int]",1,skimage
numpy.ndarray[int] = pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
numpy.dtype(datetime.time),1,pandas
"numpy.ndarray[tuple[tuple[int, int], builtins.ellipsis]] = numpy.uint32",1,skimage
"numpy.ndarray[slilist[datetime.time]e[NoneType, NoneType, NoneType]] = list[datetime.time]",1,pandas
numpy.ndarray + pandas.tseries.offsets.CustomBusinessMonthEnd,1,pandas
numpy.dtype(pandas.tseries.offsets.CustomBusinessMonthEnd),1,pandas
numpy.ndarray + pandas.tseries.offsets.CustomBusinessMonthBegin,1,pandas
numpy.dtype(pandas.tseries.offsets.CustomBusinessMonthBegin),1,pandas
numpy.dtype(pandas.tseries.offsets.BusinessMonthBegin),1,pandas
numpy.dtype(pandas.tseries.offsets.BusinessHour),1,pandas
numpy.ndarray + pandas.tseries.offsets.BusinessHour,1,pandas
numpy.dtype(pandas.tseries.offsets.BYearBegin),1,pandas
numpy.dtype(pandas.tseries.offsets.BQuarterBegin),1,pandas
numpy.ndarray + pandas.tseries.offsets.Easter,1,pandas
numpy.ndarray + pandas.tseries.offsets.DateOffset,1,pandas
numpy.dtype(pandas.tseries.offsets.SemiMonthBegin),1,pandas
numpy.dtype(pandas.tseries.offsets.BusinessMonthEnd),1,pandas
numpy.dtype(pandas.tseries.offsets.BYearEnd),1,pandas
numpy.ndarray + pandas.tseries.offsets.LastWeekOfMonth,1,pandas
numpy.is_busday,1,pandas
"numpy.is_busday(numpy.datetime64, busdaycal=numpy.busdaycalendar)",1,pandas
numpy.dtype(pandas.tseries.offsets.CustomBusinessDay),1,pandas
pandas.core.arrays.datetimes.DatetimeArray += numpy.ndarray,1,pandas
numpy.dtype(pandas.tseries.offsets.Second),1,pandas
numpy.dtype(pandas.tseries.offsets.DateOffset),1,pandas
numpy.dtype(pandas.tseries.offsets.YearBegin),1,pandas
numpy.dtype(pandas.tseries.offsets.YearEnd),1,pandas
numpy.dtype(pandas.tseries.offsets.MonthBegin),1,pandas
"numpy.ravel_multi_index(list[int], tuple[int], order=str)",1,skimage
numpy.dtype(pandas.tseries.offsets.Week),1,pandas
numpy.ndarray + pandas.tseries.offsets.CustomBusinessDay,1,pandas
numpy.dtype(pandas.tseries.offsets.BusinessDay),1,pandas
numpy.dtype(pandas.tseries.offsets.QuarterEnd),1,pandas
numpy.datetime64(datetime.date),1,pandas
"numpy.busday_offset(numpy.datetime64, int, busdaycal=str, roll=numpy.busdaycalendar)",1,pandas
numpy.busday_offset,1,pandas
"numpy.generic.astype(numpy.datetime64, Type[datetime.datetime])",1,pandas
numpy.logical_xor,1,skimage
"numpy.ones(dtype=Type[numpy.uint64], shape=tuple[int, int, int])",1,skimage
"numpy.ones(dtype=Type[numpy.uint64], shape=tuple[int, int])",1,skimage
"numpy.array(list[list[int]], dtype=Type[numpy.uint64])",1,skimage
"numpy.ndarray[tuple[list[int], sliinte[NoneType, NoneType, NoneType]]] = int",1,pandas
numpy.datetime64(numpy.datetime64),1,pandas
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], list[int]]] = int",1,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType], slinumpy.ndarraye[NoneType, int, NoneType]]] = numpy.ndarray",1,skimage
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType], slinumpy.ndarraye[int, NoneType, NoneType]]] = numpy.ndarray",1,skimage
numpy.bool_uiltins.numpy.bool_ool | numpy.bool_,1,pandas
"numpy.lexsort(tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,skimage
"numpy.random.mtrand.RandomState.permutation(numpy.random.mtrand.RandomState, numpy.ndarray)",1,skimage
numpy.array(list[pandas.core.dtypes.dtypes.DatetimeTZDtype]),1,pandas
"numpy.zeros(tuple[int], dtype=Type[numpy.bool_])",1,pandas
numpy.array(list[numpy.bool_]),1,skimage
"numpy.zeros(tuple[int, int], dtype=Type[numpy.bool_])",1,pandas
numpy.ndim(a=builtins.object),1,pandas
"numpy.ndarray.astype(numpy.ndarray, numpy.dtype, casting=builtins.bool, copy=str)",1,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, int, NoneType], slinumpy.ndarraye[int, NoneType, NoneType]]] = numpy.ndarray",1,skimage
"numpy.zeros(int, dtype=Type[numpy.uint8])",1,skimage
"numpy.array(list[list[int]], dtype=Type[builtins.bool])",1,pandas
"numpy.ndarray[tuple[slinumpy.complex128e[NoneType, NoneType, NoneType], slinumpy.complex128e[NoneType, NoneType, NoneType], numpy.ndarray]] = numpy.complex128",1,pandas
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, NoneType, NoneType], numpy.ndarray, slinumpy.float64e[NoneType, NoneType, NoneType]]] = numpy.float64",1,pandas
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, NoneType, NoneType], slinumpy.float64e[NoneType, NoneType, NoneType], numpy.ndarray]] = numpy.float64",1,pandas
"numpy.ndarray[tuple[slinumpy.complex128e[NoneType, NoneType, NoneType], numpy.ndarray, slinumpy.complex128e[NoneType, NoneType, NoneType]]] = numpy.complex128",1,pandas
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, NoneType, NoneType], numpy.ndarray, slibuiltins.boole[NoneType, NoneType, NoneType]]] = builtins.bool",1,pandas
"numpy.ndarray[tuple[slistre[NoneType, NoneType, NoneType], numpy.ndarray, slistre[NoneType, NoneType, NoneType]]] = str",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.complex128e[NoneType, NoneType, NoneType], slinumpy.complex128e[NoneType, NoneType, NoneType]]] = numpy.complex128",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, NoneType, NoneType]]] = builtins.bool",1,pandas
"numpy.ndarray[tuple[slibuiltins.complexe[NoneType, NoneType, NoneType], slibuiltins.complexe[NoneType, NoneType, NoneType], numpy.ndarray]] = builtins.complex",1,pandas
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, NoneType, NoneType], numpy.ndarray]] = builtins.bool",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, slistre[NoneType, NoneType, NoneType], slistre[NoneType, NoneType, NoneType]]] = str",1,pandas
"numpy.ndarray[tuple[slistre[NoneType, NoneType, NoneType], slistre[NoneType, NoneType, NoneType], numpy.ndarray]] = str",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1,pandas
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], numpy.ndarray]] = int",1,pandas
"numpy.ndarray[tuple[numpy.ndarray, slibuiltins.complexe[NoneType, NoneType, NoneType], slibuiltins.complexe[NoneType, NoneType, NoneType]]] = builtins.complex",1,pandas
"numpy.ascontiguousarray(a=numpy.ndarray, dtype=Type[numpy.int32])",1,skimage
numpy.ndarray >= pandas.core.arrays.datetimes.DatetimeArray,1,pandas
numpy.ndarray != pandas.core.arrays.datetimes.DatetimeArray,1,pandas
numpy.dtype != Type[builtins.bool],1,skimage
pandas.core.indexes.datetimes.DatetimeIndex > numpy.ndarray,1,pandas
pandas.core.indexes.datetimes.DatetimeIndex >= numpy.ndarray,1,pandas
"numpy.ndarray[tuple[slibuiltins.boole[numpy.int64, numpy.int64, NoneType]]] = builtins.bool",1,skimage
"numpy.broadcast_to(array=int, shape=tuple[int, int])",1,pandas
"numpy.logical_not(numpy.ndarray, out=numpy.ndarray)",1,skimage
numpy.logical_not,1,skimage
pandas.core.indexes.datetimes.DatetimeIndex += numpy.timedelta64,1,pandas
"numpy.ones(dtype=str, shape=tuple[int, int, int])",1,skimage
pandas.core.arrays.datetimes.DatetimeArray += numpy.timedelta64,1,pandas
pandas.core.series.Series += numpy.timedelta64,1,pandas
pandas.core.frame.DataFrame += numpy.timedelta64,1,pandas
"numpy.zeros_like(a=numpy.ndarray, dtype=Type[numpy.int32])",1,skimage
pandas.core.indexes.datetimes.DatetimeIndex -= numpy.timedelta64,1,pandas
pandas.core.arrays.datetimes.DatetimeArray -= numpy.timedelta64,1,pandas
"numpy.ndarray[tuple[slice[numpy.int64, numpy.int64, NoneType]]]",1,skimage
"numpy.in1d(ar1=numpy.flatiter, ar2=tuple[int, int])",1,skimage
numpy.ndarray & int,1,skimage
float != numpy.uint64,1,skimage
numpy.uint64 != numpy.uint64,1,skimage
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]]",1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]]",1,pandas
numpy.ndim(a=pandas.core.frame.DataFrame),1,pandas
numpy.array(list[pandas.core.dtypes.dtypes.PeriodDtype]),1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.timestamps.Timestamp, str]]",1,pandas
numpy.ndarray >= pandas.core.indexes.datetimes.DatetimeIndex,1,pandas
numpy.ndim(a=pandas._libs.tslibs.nattype.NaTType),1,pandas
numpy.ndim(a=pandas.core.series.Series),1,pandas
"numpy.take(a=numpy.ndarray, indices=numpy.ndarray)",1,skimage
pandas.core.indexes.datetimes.DatetimeIndex > numpy.datetime64,1,pandas
"numpy.ndim(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]])",1,pandas
"numpy.asarray(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]])",1,pandas
numpy.dtype(pandas.tseries.offsets.LastWeekOfMonth),1,pandas
numpy.ndarray + pandas.tseries.offsets.FY5253Quarter,1,pandas
numpy.ndarray + pandas.tseries.offsets.FY5253,1,pandas
numpy.ndarray / pandas.core.indexes.numeric.Int64Index,1,pandas
pandas.core.indexes.numeric.UInt64Index / numpy.timedelta64,1,pandas
numpy.timedelta64 / pandas.core.indexes.numeric.Float64Index,1,pandas
numpy.timedelta64 / pandas.core.indexes.range.RangeIndex,1,pandas
pandas.core.indexes.range.RangeIndex / numpy.timedelta64,1,pandas
"numpy.empty(int, dtype=Type[numpy.float16])",1,skimage
"numpy.asarray(a=numpy.ndarray, dtype=Type[builtins.bool])",1,skimage
pandas.core.indexes.numeric.Float64Index + numpy.timedelta64,1,pandas
numpy.timedelta64 + pandas.core.indexes.numeric.Float64Index,1,pandas
numpy.timedelta64 - pandas.core.indexes.numeric.Float64Index,1,pandas
pandas.core.indexes.numeric.Float64Index - numpy.timedelta64,1,pandas
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.float64",1,skimage
pandas.tseries.offsets.Minute + numpy.ndarray,1,pandas
pandas.tseries.offsets.Minute - numpy.ndarray,1,pandas
pandas.tseries.offsets.Second + numpy.ndarray,1,pandas
pandas.core.indexes.numeric.Int64Index - numpy.timedelta64,1,pandas
numpy.timedelta64 / pandas.core.indexes.numeric.UInt64Index,1,pandas
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",1,skimage
pandas.core.indexes.numeric.Int64Index / numpy.timedelta64,1,pandas
"numpy.array(list[int], dtype=Type[builtins.bool])",1,skimage
numpy.ndarray / pandas.core.indexes.numeric.UInt64Index,1,pandas
numpy.ndarray // pandas.core.indexes.numeric.UInt64Index,1,pandas
numpy.ndarray // pandas.core.indexes.numeric.Float64Index,1,pandas
numpy.ndarray / pandas.core.indexes.numeric.Float64Index,1,pandas
pandas.core.indexes.numeric.Float64Index * numpy.timedelta64,1,pandas
"numpy.ndarray[tuple[tuple[int, int], builtins.ellipsis]] = numpy.int64",1,skimage
numpy.timedelta64 * pandas.core.indexes.range.RangeIndex,1,pandas
"numpy.ndarray[tuple[tuple[int, int], builtins.ellipsis]] = numpy.float16",1,skimage
numpy.timedelta64 * pandas.core.indexes.numeric.Int64Index,1,pandas
pandas.tseries.offsets.Day / numpy.ndarray,1,pandas
pandas.tseries.offsets.Hour / numpy.ndarray,1,pandas
pandas.core.indexes.numeric.Float64Index / numpy.timedelta64,1,pandas
numpy.cumprod(a=tuple[int]),1,skimage
"numpy.zeros(tuple[int], dtype=Type[numpy.uint8])",1,skimage
pandas.core.indexes.numeric.Int64Index + numpy.timedelta64,1,pandas
pandas.core.indexes.numeric.UInt64Index + numpy.timedelta64,1,pandas
numpy.timedelta64 + pandas.core.indexes.numeric.UInt64Index,1,pandas
"numpy.ndarray[tuple[slinumpy.int64e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.int64",1,skimage
numpy.datetime64 + int,1,pandas
numpy.datetime64 - int,1,pandas
int == numpy.datetime64,1,pandas
numpy.dtype(pandas._libs.tslibs.nattype.NaTType),1,pandas
pandas._linumpy.ndarrays.tslinumpy.ndarrays.nattype.NaTType + numpy.ndarray,1,pandas
pandas._linumpy.ndarrays.tslinumpy.ndarrays.nattype.NaTType - numpy.ndarray,1,pandas
"numpy.ndarray[tuple[slinumpy.int32e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.int32",1,skimage
pandas.core.indexes.range.RangeIndex + numpy.datetime64,1,pandas
"numpy.ndarray[tuple[slinumpy.int16e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.int16",1,skimage
numpy.signbit,1,pandas
"numpy.ndarray[tuple[slinumpy.int8e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.int8",1,skimage
numpy.bool_.all,1,pandas
"numpy.ndarray[tuple[slinumpy.uint64e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.uint64",1,skimage
"numpy.ndarray[tuple[tuple[int, int], builtins.ellipsis]] = numpy.uint64",1,skimage
numpy.datetime64 + pandas.core.indexes.range.RangeIndex,1,pandas
numpy.dtype(datetime.datetime),1,pandas
pandas.core.indexes.numeric.UInt64Index - numpy.timedelta64,1,pandas
datetime.datetime + numpy.ndarray,1,pandas
numpy.timedelta64 - pandas.core.indexes.numeric.UInt64Index,1,pandas
pandas.core.indexes.range.RangeIndex + numpy.timedelta64,1,pandas
numpy.timedelta64 + pandas.core.indexes.range.RangeIndex,1,pandas
pandas.core.indexes.range.RangeIndex - numpy.timedelta64,1,pandas
numpy.timedelta64 - pandas.core.indexes.range.RangeIndex,1,pandas
numpy.dtype(pandas.tseries.offsets.Minute),1,pandas
datetime.datetime - numpy.ndarray,1,pandas
numpy.datetime64 - pandas.core.indexes.numeric.UInt64Index,1,pandas
pandas.core.indexes.numeric.Float64Index + numpy.datetime64,1,pandas
numpy.datetime64 + pandas.core.indexes.numeric.Float64Index,1,pandas
pandas.core.indexes.numeric.Float64Index - numpy.datetime64,1,pandas
"numpy.ndarray[tuple[slinumpy.float32e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.float32",1,skimage
pandas.core.indexes.numeric.UInt64Index + numpy.datetime64,1,pandas
pandas.core.indexes.numeric.UInt64Index - numpy.datetime64,1,pandas
numpy.ndarray // pandas.core.indexes.numeric.Int64Index,1,pandas
"numpy.ndarray[tuple[slinumpy.uint8e[NoneType, NoneType, NoneType], slinumpy.uint8e[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = numpy.uint8",1,skimage
numpy.dtype(pandas.tseries.offsets.FY5253),1,pandas
pandas.core.arrays.timedeltas.TimedeltaArray // numpy.ndarray,1,pandas
pandas.core.indexes.datetimes.DatetimeIndex + numpy.datetime64,1,pandas
numpy.datetime64 + pandas.core.indexes.datetimes.DatetimeIndex,1,pandas
"numpy.zeros(tuple[int, int], dtype=str, order=Type[numpy.uint8])",1,skimage
numpy.float32 * int,1,skimage
numpy.ndarray *= numpy.float32,1,skimage
numpy.finfo.min,1,skimage
numpy.sum(a=list[numpy.timedelta64]),1,pandas
numpy.ndarray[tuple[numpy.ndarray]] = numpy.timedelta64,1,pandas
"numpy.add(pandas.core.indexes.datetimes.DatetimeIndex, numpy.timedelta64)",1,pandas
"numpy.subtract(pandas.core.indexes.datetimes.DatetimeIndex, numpy.timedelta64)",1,pandas
numpy.finfo(dtype=Type[numpy.float32]),1,skimage
"numpy.add(pandas.core.indexes.datetimes.DatetimeIndex, numpy.ndarray)",1,pandas
"numpy.ndarray[slilist[Union[pandas.tseries.offsets.Day, pandas.tseries.offsets.MonthEnd]]e[NoneType, NoneType, NoneType]] = list[Union[pandas.tseries.offsets.Day, pandas.tseries.offsets.MonthEnd]]",1,pandas
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas.tseries.offsets.MonthEnd]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas.tseries.offsets.MonthEnd]]",1,pandas
"numpy.array(list[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas.tseries.offsets.MonthEnd]])",1,pandas
numpy.ndarray -= pandas.core.indexes.datetimes.DatetimeIndex,1,pandas
numpy.int64 / pandas.core.arrays.datetimes.DatetimeArray,1,pandas
numpy.finfo.max,1,skimage
numpy.dtype(pandas.tseries.offsets.WeekOfMonth),1,pandas
numpy.ndarray + pandas.tseries.offsets.WeekOfMonth,1,pandas
numpy.dtype(pandas.tseries.offsets.Easter),1,pandas
numpy.dtype(pandas.tseries.offsets.MonthEnd),1,pandas
numpy.dtype(pandas.tseries.offsets.SemiMonthEnd),1,pandas
numpy.dtype(pandas.tseries.offsets.QuarterBegin),1,pandas
numpy.dtype(pandas.tseries.offsets.FY5253Quarter),1,pandas
"numpy.ndarray[slilist[pandas._libs.tslibs.nattype.NaTType]e[NoneType, NoneType, NoneType]] = list[pandas._libs.tslibs.nattype.NaTType]",1,pandas
numpy.float32 + numpy.float64,1,skimage
"numpy.array(list[Union[pandas._libs.tslibs.timestamps.Timestamp, str]], dtype=str)",1,pandas
"numpy.array(list[list[float]], dtype=Type[numpy.float32])",1,skimage
"numpy.ndarray[tuple[tuple[int, int], builtins.ellipsis]] = numpy.float32",1,skimage
"numpy.ravel_multi_index(list[int], tuple[int, int], order=str)",1,skimage
numpy.ndarray * pandas.core.arrays.datetimes.DatetimeArray,1,pandas
numpy.ndarray / pandas.core.arrays.datetimes.DatetimeArray,1,pandas
numpy.uint8 - int,1,skimage
numpy.iinfo(int_type=numpy.dtype),1,skimage
"numpy.zeros(tuple[int, int, int], dtype=str, order=Type[numpy.uint8])",1,skimage
numpy.ndarray[tuple],1,skimage
numpy.float64 > pandas.core.series.Series,1,pandas
numpy.ndarray - tuple[int],1,skimage
pandas.core.indexes.range.RangeIndex * numpy.ndarray,1,pandas
numpy.array(tuple[numpy.ndarray]),1,skimage
numpy.flagsobj.f_contiguous,1,skimage
"numpy.array(pandas.core.indexes.timedeltas.TimedeltaIndex, copy=NoneType, dtype=builtins.bool)",1,pandas
"numpy.asarray(a=tuple[tuple[builtins.bool, builtins.bool, builtins.bool], tuple[builtins.bool, builtins.bool, builtins.bool], tuple[builtins.bool, builtins.bool, builtins.bool]], dtype=Type[builtins.bool])",1,skimage
"numpy.asarray(a=pandas.core.arrays.string_.StringArray, dtype=str)",1,pandas
numpy.ndarray * pandas.core.indexes.numeric.UInt64Index,1,pandas
numpy.ndarray * pandas.core.indexes.numeric.Float64Index,1,pandas
numpy.ndarray / pandas.core.indexes.range.RangeIndex,1,pandas
"numpy.cumprod(a=tuple[int, int, int])",1,skimage
numpy.ndarray // pandas.core.arrays.timedeltas.TimedeltaArray,1,pandas
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], tuple[int, int], builtins.ellipsis]] = int",1,skimage
pandas.core.arrays.interval.IntervalArray == numpy.ndarray,1,pandas
"numpy.array(list[Union[builtins.bool, numpy.bool_]])",1,pandas
"numpy.ndarray - tuple[int, int, int]",1,skimage
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp, str]]",1,pandas
"numpy.ndarray[slibuiltins.rangee[NoneType, NoneType, NoneType]] = builtins.range",1,pandas
"numpy.array(list[Union[builtins.bool, pandas._libs.missing.NAType]])",1,pandas
"numpy.array(tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",1,skimage
numpy.int64 == pandas._libs.tslibs.timedeltas.Timedelta,1,pandas
"numpy.ndarray[slilist[Union[float, int, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[float, int, pandas._libs.tslibs.timestamps.Timestamp]]",1,pandas
"numpy.asarray(a=tuple[int, float, pandas._libs.tslibs.timestamps.Timestamp, float], dtype=NoneType)",1,pandas
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timedeltas.Timedelta, str, pandas._libs.tslibs.nattype.NaTType], dtype=NoneType)",1,pandas
"numpy.asarray(a=list[pandas._libs.missing.NAType], dtype=NoneType)",1,pandas
"numpy.ndarray[slilist[pandas._libs.interval.Interval]e[NoneType, NoneType, NoneType]] = list[pandas._libs.interval.Interval]",1,pandas
"numpy.ndarray[slituple[pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval]e[NoneType, NoneType, NoneType]] = tuple[pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval]",1,pandas
"numpy.asarray(a=tuple[pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval], dtype=NoneType)",1,pandas
"numpy.asarray(a=list[NoneType], dtype=NoneType)",1,pandas
"numpy.asarray(a=list[pandas._libs.tslibs.nattype.NaTType], dtype=NoneType)",1,pandas
"numpy.ndarray[slilist[pandas._libs.missing.NAType]e[NoneType, NoneType, NoneType]] = list[pandas._libs.missing.NAType]",1,pandas
numpy.numpy.ndarrayool_ + numpy.ndarray,1,pandas
