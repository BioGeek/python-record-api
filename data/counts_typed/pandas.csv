function,count
numpy.mean,64
"numpy.empty(int, dtype=str)",9
numpy.empty,83
"numpy.ndarray[slilist[str]e[NoneType, NoneType, NoneType]] = list[str]",1
numpy.object_,107
numpy.dtype,43
numpy.ndarray,252
numpy.dtype.type,97
numpy.dtype(str),184
numpy.dtype.kind,82
numpy.dtype.name,38
numpy.ndarray.astype,48
numpy.array,900
Type[numpy.ndarray] != Type[numpy.ndarray],1
Type[numpy.ndarray].__name__,12
numpy.asarray(a=numpy.ndarray),81
numpy.ndarray.shape,138
numpy.ndarray.dtype,542
numpy.ndarray.ravel(numpy.ndarray),60
"numpy.ndarray.take(numpy.ndarray, numpy.ndarray)",45
numpy.ndarray.argsort(numpy.ndarray),9
numpy.bool_,67
numpy.integer,29
numpy.dtype(numpy.dtype),11
numpy.int64(int),27
numpy.dtype != numpy.dtype,30
numpy.flagsobj.f_contiguous,3
numpy.ndarray.ndim,122
"numpy.array(list[int], dtype=Type[numpy.int64])",199
numpy.datetime64,54
numpy.timedelta64,76
numpy.void,1
"numpy.array_equal(a1=numpy.ndarray, a2=numpy.ndarray)",7
"numpy.array(list[str], dtype=Type[builtins.object])",40
numpy.asarray(a=list[int]),24
numpy.signedinteger,2
numpy.ndarray.base,27
numpy.floating,12
numpy.complexfloating,4
"numpy.can_cast(int, numpy.dtype)",1
numpy.dtype == Type[numpy.object_],39
numpy.ndarray.flags,15
"numpy.empty(tuple[int], dtype=str, order=numpy.dtype)",1
"numpy.ndarray.astype(numpy.ndarray, numpy.dtype, copy=builtins.bool)",17
numpy.intp,125
"numpy.ndarray[slilist[numpy.float64]e[NoneType, NoneType, NoneType]] = list[numpy.float64]",1
numpy.unsignedinteger,2
numpy.float64,198
numpy.prod(a=tuple[int]),8
numpy.isnan(numpy.ndarray),13
numpy.ndarray & numpy.ndarray,72
numpy.ndarray.all(numpy.ndarray),190
numpy.inf,60
numpy.ma.MaskedArray,2
"numpy.ndarray[slilist[Union[float, str]]e[NoneType, NoneType, NoneType]] = list[Union[float, str]]",2
numpy.dtype == Type[numpy.bool_],25
numpy.asarray,87
"numpy.array(numpy.ndarray, copy=numpy.dtype, dtype=builtins.bool)",3
numpy.bool,41
"numpy.asarray(a=numpy.ndarray, dtype=Type[builtins.object])",9
*numpy.ndarray,150
~numpy.ndarray,131
numpy.sort(a=numpy.ndarray),23
"numpy.array(numpy.ndarray, copy=builtins.bool)",8
"numpy.ndarray.view(numpy.ndarray, str)",56
numpy.dtype == str,170
numpy.ndim(a=list[pandas._libs.tslibs.timestamps.Timestamp]),1
"numpy.array(numpy.ndarray, copy=Type[numpy.object_], dtype=builtins.bool)",2
numpy.dtype == numpy.dtype,64
numpy.number,20
"numpy.ndarray.astype(numpy.ndarray, str, copy=builtins.bool)",23
numpy.float64 * int,17
"numpy.ndarray[slilist[pandas._libs.tslibs.period.Period]e[NoneType, NoneType, NoneType]] = list[pandas._libs.tslibs.period.Period]",1
"numpy.array(numpy.ndarray, copy=str, dtype=builtins.bool)",2
numpy.nonzero(a=numpy.ndarray),7
"numpy.ndarray.argsort(numpy.ndarray, kind=str)",5
numpy.concatenate(list[numpy.ndarray]),38
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.int64])",5
"numpy.ndarray.take(numpy.ndarray, numpy.ndarray, axis=int)",3
numpy.asarray(a=list[pandas._libs.tslibs.period.Period]),4
"numpy.ndarray[slilist[pandas._libs.tslibs.timedeltas.Timedelta]e[NoneType, NoneType, NoneType]] = list[pandas._libs.tslibs.timedeltas.Timedelta]",1
"numpy.array(list[pandas._libs.tslibs.timedeltas.Timedelta], dtype=Type[builtins.object])",3
numpy.nan,1988
"numpy.empty(tuple[int], dtype=Type[builtins.bool])",2
"numpy.ndarray.reshape(numpy.ndarray, tuple[int])",25
numpy.ndarray == int,145
"numpy.array(list[int], dtype=str)",98
numpy.ndarray[builtins.ellipsis] = numpy.ndarray,1
"numpy.array(list[Union[float, int]], dtype=str)",10
"numpy.ndarray[slilist[Union[str, tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[str, tuple[int, int]]]",1
"numpy.ndarray[slilist[Union[tuple[int, int, int], tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[tuple[int, int, int], tuple[int, int]]]",1
"numpy.ndarray[slilist[tuple[int, int]]e[NoneType, NoneType, NoneType]] = list[tuple[int, int]]",1
"numpy.array(list[builtins.complex], dtype=Type[builtins.object])",1
"numpy.array(list[builtins.bool], dtype=Type[builtins.bool])",31
numpy.ndarray[numpy.ndarray],201
"numpy.array(list[float], dtype=Type[numpy.float64])",8
"numpy.ndarray.setflags(numpy.ndarray, write=builtins.bool)",12
numpy.ndarray == numpy.ndarray,59
numpy.ndarray | numpy.ndarray,50
"numpy.array(list[int], dtype=Type[numpy.uint64])",11
numpy.uint64,29
numpy.ndarray.setflags,11
numpy.int64,322
"numpy.array(list[Union[NoneType, float, pandas._libs.tslibs.nattype.NaTType, str]], dtype=Type[builtins.object])",1
numpy.ndarray[list[int]],14
"numpy.empty(int, dtype=Type[numpy.int64])",11
"numpy.ndarray.put(numpy.ndarray, numpy.ndarray, numpy.ndarray)",2
"numpy.ndarray.take(numpy.ndarray, numpy.ndarray, mode=str)",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, int)",16
numpy.int_,8
numpy.arange(int),350
numpy.ndarray.take,22
numpy.zeros,72
numpy.ndarray.any(numpy.ndarray),161
"numpy.asarray(a=numpy.ndarray, dtype=Type[builtins.bool])",7
numpy.dtype(Type[builtins.object]),38
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.floating])",1
numpy.asarray(a=builtins.bool),3
"numpy.zeros(int, dtype=Type[builtins.bool])",29
numpy.ndarray.copy(numpy.ndarray),121
numpy.ndarray.argsort,12
"numpy.issubdtype(arg1=Type[numpy.object_], arg2=Type[numpy.integer])",1
numpy.any(a=numpy.ndarray),14
numpy.random,587
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, size=int)",31
numpy.array(builtins.bool),5
numpy.ndarray.view(numpy.ndarray),5
numpy.flagsobj.writeable = builtins.bool,9
numpy.int64(),3
numpy.ndarray.sort(numpy.ndarray),3
"numpy.ndarray.view(numpy.ndarray, Type[numpy.ndarray])",2
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int64])",27
"numpy.ndarray.repeat(numpy.ndarray, numpy.ndarray)",3
numpy.asarray(a=pandas.core.indexes.multi.MultiIndex),7
numpy.dtype(Type[numpy.float64]),16
"numpy.array(pandas.core.indexes.numeric.Int64Index, copy=builtins.bool)",1
"numpy.asarray(a=numpy.ndarray, dtype=NoneType)",8
"numpy.array_equal(a1=list[int], a2=numpy.ndarray)",1
"numpy.array(list[int], copy=numpy.dtype, dtype=builtins.bool)",2
"numpy.array(list[int], dtype=Type[builtins.int])",5
numpy.ComplexWarning,2
"numpy.ndarray[sliliste[NoneType, NoneType, NoneType]] = list",1
"numpy.array(pandas.core.arrays.datetimes.DatetimeArray, copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.ndarray.view(numpy.ndarray, numpy.dtype)",16
"numpy.array(list[int], copy=builtins.bool)",5
numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray),16
numpy.dtype != Type[numpy.int64],3
numpy.asarray(a=pandas.core.arrays.timedeltas.TimedeltaArray),8
numpy.dtype(Type[builtins.bool]),22
"numpy.array(list[builtins.bool], dtype=str)",20
"numpy.array(list[str], dtype=str)",25
"numpy.ndarray.astype(numpy.ndarray, numpy.dtype)",43
"numpy.array(list[int], dtype=Type[builtins.object])",9
"numpy.array(list[Union[float, str]], dtype=Type[builtins.object])",11
numpy.int8(int),6
numpy.ndarray != int,38
numpy.ndarray.item,4
numpy.complex128,11
numpy.ndarray >> int,4
numpy.uint64(int),17
numpy.ndarray ^= numpy.ndarray,4
numpy.bitwise_xor,1
numpy.ndarray.__getitem__,1
numpy.ndarray.size,40
numpy.asarray(a=pandas.core.indexes.base.Index),16
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.complex128])",1
numpy.ndarray *= numpy.uint64,3
numpy.zeros_like(a=numpy.ndarray),7
numpy.ndarray + numpy.uint64,1
numpy.uint64 += numpy.uint64,1
numpy.ndarray += numpy.uint64,1
"numpy.ufunc.reduce(numpy.ufunc, numpy.ndarray)",4
pandas.core.dtypes.dtypes.DatetimeTZDtype == numpy.dtype,2
numpy.asarray(a=list[str]),8
"numpy.ndarray[slilist[int]e[NoneType, NoneType, NoneType]] = list[int]",1
"numpy.ndarray[slilist[pandas._libs.tslibs.timestamps.Timestamp]e[NoneType, NoneType, NoneType]] = list[pandas._libs.tslibs.timestamps.Timestamp]",1
numpy.dtype == pandas.core.dtypes.dtypes.DatetimeTZDtype,1
numpy.ndim(a=list[str]),3
"numpy.array(list[Union[NoneType, str]], dtype=Type[builtins.object])",2
numpy.array(list[float]),62
numpy.object,35
numpy.ndarray[int],297
"numpy.array(list[float], dtype=Type[builtins.object])",11
"numpy.array(list[Union[NoneType, float]], dtype=Type[builtins.object])",1
"numpy.array(list[Union[NoneType, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[builtins.object])",2
"numpy.asarray(a=list[int], dtype=Type[builtins.object])",6
numpy.array(list[builtins.bool]),209
"numpy.asarray(a=list[str], dtype=Type[builtins.object])",6
numpy.dtype(list[str]),1
numpy.fabs(int),1
numpy.iinfo.max,20
numpy.errstate,83
numpy.uint64(numpy.int64),2
numpy.absolute(numpy.uint64),1
numpy.errstate(kwargs=dict),81
numpy.arange,174
"numpy.arange(int, numpy.int64, int, dtype=Type[numpy.int64])",1
"numpy.ndarray[slilist[numpy.datetime64]e[NoneType, NoneType, NoneType]] = list[numpy.datetime64]",1
"numpy.ndarray[slice[int, int, NoneType]]",36
numpy.iinfo(int_type=Type[numpy.int64]),10
numpy.absolute(int),1
numpy.uint64 * numpy.uint64,1
numpy.int64 * numpy.int64,2
numpy.int64 + numpy.int64,14
"numpy.ndarray[slilist[numpy.timedelta64]e[NoneType, NoneType, NoneType]] = list[numpy.timedelta64]",1
"numpy.in1d(ar1=numpy.ndarray, ar2=numpy.ndarray)",3
numpy.ndarray[int] = builtins.bool,12
numpy.int64 >= int,11
numpy.int64 <= int,17
numpy.ndarray.max(numpy.ndarray),21
numpy.ndarray.min(numpy.ndarray),13
numpy.dtype == pandas.core.dtypes.dtypes.CategoricalDtype,1
pandas.core.dtypes.dtypes.CategoricalDtype == numpy.dtype,3
"numpy.asarray(a=list[float], dtype=Type[builtins.object])",5
"numpy.asarray(a=list[pandas.tests.test_algos.TestIsin.test_same_object_is_in.<locals>.LikeNan], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[pandas.tests.test_algos.TestIsin.test_same_object_is_in.<locals>.LikeNan]e[NoneType, NoneType, NoneType]] = list[pandas.tests.test_algos.TestIsin.test_same_object_is_in.<locals>.LikeNan]",1
numpy.dtype(list[pandas.tests.test_algos.TestIsin.test_same_object_is_in.<locals>.LikeNan]),1
"numpy.asarray(a=list[float], dtype=Type[numpy.float64])",1
"numpy.dtype(list[Union[int, str]])",1
numpy.iterable(y=int),1
numpy.ndarray.sum(numpy.ndarray),32
"numpy.ndarray.max(numpy.ndarray, NoneType)",1
int - numpy.int64,9
numpy.float64 + float,5
numpy.isinf(numpy.float64),2
numpy.float64 == numpy.float64,89
"numpy.linspace(endpoint=builtins.bool, num=int, start=numpy.float64, stop=numpy.float64)",2
numpy.float64 * float,16
numpy.float64 -= numpy.float64,2
numpy.ndarray.searchsorted,16
numpy.float64 == int,39
numpy.isfinite(numpy.float64),1
numpy.modf(numpy.float64),1
numpy.log10(numpy.float64),1
"numpy.around(a=numpy.float64, decimals=int)",1
numpy.floor(numpy.float64),2
"numpy.ndarray[slice[NoneType, int, NoneType]]",67
numpy.ndim(a=numpy.ndarray),7
numpy.asarray(a=pandas.core.indexes.numeric.Float64Index),12
numpy.asarray(a=pandas.core.arrays.interval.IntervalArray),10
numpy.int64 > int,21
numpy.ndarray.nonzero(numpy.ndarray),32
"numpy.empty(int, dtype=Type[builtins.object])",9
numpy.ndarray[int] = pandas._libs.interval.Interval,2
"numpy.bincount(numpy.ndarray, minlength=int)",5
numpy.min_scalar_type(float),2
"numpy.asarray(a=pandas.core.arrays.interval.IntervalArray, dtype=numpy.dtype)",3
numpy.int32,107
"numpy.ndarray[slice[NoneType, NoneType, int]]",37
"numpy.arange(int, int, int, dtype=Type[numpy.int64])",11
numpy.asarray(a=pandas.core.arrays.numpy_.PandasArray),10
numpy.dtype > numpy.dtype,2
"Type[numpy.float64] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
numpy.dtype == pandas.core.dtypes.dtypes.IntervalDtype,1
"numpy.array(pandas.core.arrays.interval.IntervalArray, copy=builtins.bool)",2
numpy.int8,47
"numpy.array(numpy.ndarray, copy=NoneType, dtype=builtins.bool)",3
numpy.int8 == int,7
numpy.ndim(a=pandas._libs.interval.Interval),1
numpy.ndim(a=numpy.float64),3
numpy.dtype(Type[numpy.int64]),20
"numpy.ndarray.min(numpy.ndarray, NoneType)",1
numpy.int64 + float,3
"numpy.asarray(a=pandas.core.arrays.numpy_.PandasArray, dtype=NoneType)",2
numpy.ndarray[pandas.intore.series.Series] = int,2
pandas.core.series.Series | numpy.ndarray,3
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.bool])",10
numpy.asarray(a=list[numpy.float64]),6
numpy.float64 - float,4
"numpy.ndarray[slice[int, NoneType, NoneType]]",55
"numpy.asarray(a=pandas.core.arrays.interval.IntervalArray, dtype=Type[builtins.object])",1
"numpy.asarray(a=pandas.core.arrays.numpy_.PandasArray, dtype=numpy.dtype)",3
"numpy.asarray(a=numpy.ndarray, dtype=numpy.dtype)",6
numpy.bincount,6
"numpy.empty(int, dtype=Type[numpy.int32])",2
"numpy.ndarray[slipandas.core.indexes.numeric.Int64Indexe[NoneType, numpy.int64, NoneType]] = pandas.core.indexes.numeric.Int64Index",2
"numpy.ndarray[slipandas.core.indexes.numeric.Int64Indexe[numpy.int64, NoneType, NoneType]] = pandas.core.indexes.numeric.Int64Index",2
"numpy.ndarray[slilist[float]e[NoneType, NoneType, NoneType]] = list[float]",1
numpy.asarray(a=pandas.core.indexes.interval.IntervalIndex),6
numpy.linspace,4
numpy.float64 - numpy.float64,17
numpy.ndarray[int] = numpy.float64,11
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.series.Series, side=str)",1
pandas.core.series.Series == numpy.float64,7
numpy.dtype == Type[builtins.bool],14
"numpy.ndarray.any(numpy.ndarray, NoneType)",1
"numpy.putmask(numpy.ndarray, pandas.core.series.Series, int)",5
numpy.ndarray - int,24
numpy.array(pandas.core.indexes.category.CategoricalIndex),6
"numpy.asarray(a=pandas.core.arrays.categorical.Categorical, dtype=NoneType)",3
numpy.array(pandas.core.arrays.interval.IntervalArray),6
numpy.array(list[int]),246
"numpy.ndarray[slilist[Union[float, int]]e[NoneType, NoneType, NoneType]] = list[Union[float, int]]",1
float * numpy.float64,7
numpy.float64 != int,6
numpy.float64 += numpy.float64,2
"numpy.ndarray[slilist[Union[float, int, str]]e[NoneType, NoneType, NoneType]] = list[Union[float, int, str]]",1
"numpy.ndarray[slilist[Union[int, str]]e[NoneType, NoneType, NoneType]] = list[Union[int, str]]",1
numpy.timedelta64(int),9
"numpy.array(pandas.core.arrays.timedeltas.TimedeltaArray, copy=numpy.dtype, dtype=builtins.bool)",1
numpy.uint8,30
"numpy.ndarray.view(numpy.ndarray, Type[numpy.uint8])",11
"numpy.ndarray[slilist[datetime.datetime]e[NoneType, NoneType, NoneType]] = list[datetime.datetime]",1
numpy.asarray(a=pandas.core.indexes.range.RangeIndex),12
numpy.isnan(float),45
"numpy.array(list[str], copy=builtins.bool)",4
numpy.asarray(a=pandas.core.indexes.category.CategoricalIndex),7
"numpy.array(pandas.core.indexes.base.Index, copy=Type[numpy.float64], dtype=builtins.bool)",1
numpy.ndarray[int] = numpy.ndarray,5
"numpy.where(numpy.ndarray, numpy.ndarray, int)",7
"numpy.append(arr=numpy.ndarray, values=int)",3
"numpy.array(list[Union[float, str]], copy=builtins.bool)",3
"numpy.asarray(a=list[Union[float, str]], dtype=Type[builtins.object])",3
numpy.where(numpy.ndarray),14
"numpy.ones(dtype=numpy.dtype, shape=tuple[int])",3
numpy.setdiff1d,3
"numpy.setdiff1d(ar1=numpy.ndarray, ar2=numpy.ndarray, assume_unique=builtins.bool)",3
numpy.ones,27
-numpy.ndarray,19
numpy.ndarray[numpy.ndarray] = numpy.ndarray,55
"numpy.ndarray[slilist[builtins.bool]e[NoneType, NoneType, NoneType]] = list[builtins.bool]",1
"numpy.ndarray.astype(numpy.ndarray, str)",121
"numpy.ndarray[slilist[Union[NoneType, builtins.bool]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, builtins.bool]]",1
numpy.NaN,51
"numpy.ndarray[slilist[Union[builtins.bool, float]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, float]]",1
"numpy.array(list[float], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.object])",28
"numpy.insert(arr=numpy.ndarray, obj=int, values=float)",2
"numpy.insert(arr=numpy.ndarray, obj=int, values=numpy.int64)",3
"numpy.asarray(a=pandas.core.series.Series, dtype=Type[builtins.object])",2
numpy.asarray(a=pandas.core.indexes.datetimes.DatetimeIndex),14
"numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray, dtype=NoneType)",5
"numpy.ndarray[int] = tuple[int, int]",1
"numpy.ndarray[int] = tuple[float, int]",1
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]])",3
numpy.datetime64(str),46
numpy.array(list[numpy.datetime64]),12
numpy.ndarray[numpy.int64],19
numpy.dtype == pandas.core.dtypes.dtypes.PeriodDtype,1
numpy.asarray(a=pandas.core.indexes.timedeltas.TimedeltaIndex),6
"numpy.asarray(a=pandas.core.arrays.timedeltas.TimedeltaArray, dtype=NoneType)",5
"numpy.ndarray[slilist[tuple[str, str]]e[NoneType, NoneType, NoneType]] = list[tuple[str, str]]",1
"numpy.ndarray[slilist[tuple[str, int]]e[NoneType, NoneType, NoneType]] = list[tuple[str, int]]",1
float * numpy.ndarray,9
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int)",25
int * numpy.ndarray,17
"numpy.tile(A=numpy.ndarray, reps=tuple[int])",1
numpy.squeeze(a=numpy.ndarray),2
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int], order=str)",1
"numpy.ndarray.std(numpy.ndarray, axis=int, ddof=int)",1
numpy.newaxis,8
numpy.ndarray + int,38
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray, rtol=float)",1
"numpy.zeros(int, dtype=str)",13
"numpy.ndarray.std(numpy.ndarray, ddof=int)",1
numpy.array(list[list[numpy.float64]]),1
numpy.allclose,12
numpy.random.mtrand.RandomState(int),17
"numpy.ones(shape=tuple[int, int])",19
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.float64])",22
"numpy.ndarray.reshape(numpy.ndarray, int, int, int)",5
numpy.ndarray ** int,13
numpy.ndarray.reshape,2
numpy.ndarray.std,1
numpy.ones(shape=int),21
numpy.vstack(tup=list[numpy.ndarray]),8
numpy.asarray(a=numpy.float64),3
numpy.prod(a=tuple),1
numpy.numpy.bool_ool_ & numpy.bool_,3
numpy.generic.all(numpy.bool_),4
numpy.int64 == int,186
numpy.float64 >= int,4
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int)",23
"numpy.ndarray[tuple[int, int]]",21
numpy.asarray(a=float),6
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.float32])",10
numpy.asarray(a=numpy.float32),1
numpy.numpy.bool_ool_ | numpy.bool_,1
numpy.float32 >= int,1
"numpy.arange(int, dtype=Type[numpy.int64])",23
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int)",228
"numpy.array(numpy.ndarray, dtype=str)",9
numpy.prod(a=int),2
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, numpy.ndarray, size=numpy.int64)",2
"numpy.ndarray.view(numpy.ndarray, tuple[Type[numpy.str_], int])",2
"numpy.array(list[Union[NoneType, float, pandas._libs.tslibs.nattype.NaTType]])",1
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, int, p=int, replace=builtins.bool, size=NoneType)",1
numpy.logical_not(pandas.core.series.Series),1
Type[numpy.ndarray].__array_ufunc__,2
list[numpy.float64] - numpy.ndarray,1
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int)",4
numpy.complex,2
numpy.random.BitGenerator,1
numpy.random.RandomState,2
numpy.random.choice,9
numpy.asarray(a=pandas.core.series.Series),28
"numpy.asarray(a=pandas.core.series.Series, dtype=Type[builtins.bool])",1
numpy.uint32,5
numpy.iinfo(int_type=Type[numpy.uint32]),2
numpy.float64 % int,6
numpy.float64 * numpy.float64,6
numpy.float64 + numpy.float64,10
"numpy.array(list[numpy.float64], dtype=Type[numpy.float64])",1
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, int)",22
numpy.unique,3
numpy.ndarray[numpy.ndarray] = int,70
"numpy.unique(ar=numpy.ndarray, return_index=builtins.bool)",1
"numpy.array(list[Union[float, int]])",34
numpy.isfinite(numpy.ndarray),4
numpy.ndarray[numpy.ndarray] = float,36
numpy.typecodes,7
numpy.array(list[list[list[int]]]),2
"numpy.array(list, dtype=str)",17
"numpy.array(list[datetime.datetime], dtype=str)",3
"numpy.array(list, dtype=Type[numpy.int64])",16
numpy.argsort,5
numpy.ndarray * int,63
"numpy.lexsort(tuple[numpy.ndarray, numpy.ndarray])",6
"numpy.broadcast_to(array=int, shape=tuple[int])",1
"numpy.ndarray.fill(numpy.ndarray, builtins.bool)",5
numpy.ndarray <= int,37
int - numpy.ndarray,16
numpy.ndarray > int,15
numpy.ndarray <= numpy.ndarray,4
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int])",2
numpy.logical_not(numpy.ndarray),5
numpy.ndarray + numpy.ndarray,19
numpy.asarray(a=list),10
numpy.dtype(Type[builtins.int]),12
numpy.dtype(Type[builtins.str]),15
"numpy.array(list[str], copy=numpy.dtype, dtype=builtins.bool)",2
numpy.ndarray.view,6
"numpy.ndarray.view(numpy.ndarray, dtype=str)",5
numpy.dtype(Type[numpy.uint64]),6
"Type[numpy.uint64] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
"numpy.array(list[Union[int, str]], copy=builtins.bool)",1
"numpy.asarray(a=list[Union[int, str]], dtype=Type[builtins.object])",2
"Type[numpy.int64] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
numpy.random.mtrand.RandomState.uniform,2
numpy.random.mtrand.RandomState.uniform(numpy.random.mtrand.RandomState),4
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, dtype=int, size=str)",1
numpy.random.mtrand.RandomState(numpy.ndarray),2
numpy.random._mt19937.MT19937(int),2
numpy.random.mtrand.RandomState(numpy.random._mt19937.MT19937),2
numpy.random.MT19937,2
numpy.random._pcg64.PCG64(int),2
numpy.random.mtrand.RandomState(numpy.random._pcg64.PCG64),2
numpy.random.PCG64,2
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, NoneType]]]",2
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, int, NoneType]]]",2
numpy.array(list[numpy.dtype]),1
"numpy.ndarray.fill(numpy.ndarray, int)",10
numpy.concatenate,7
"numpy.ndarray[sliinte[int, int, int]] = int",2
"numpy.ndarray[slinumpy.ndarraye[int, int, int]] = numpy.ndarray",3
"numpy.arange(int, dtype=str)",107
"numpy.arange(int, int, dtype=str)",9
"numpy.empty(tuple[int, int], dtype=numpy.dtype)",9
"numpy.arange(int, dtype=numpy.dtype)",4
"numpy.zeros(int, dtype=Type[numpy.bool_])",3
numpy.ndarray.cumsum(numpy.ndarray),6
"numpy.ndarray[slice[int, int, int]]",25
numpy.ceil(numpy.ndarray),1
numpy.cumsum(a=numpy.ndarray),4
numpy.float64 > int,17
numpy.ufunc.reduce,4
numpy.dtype.names,6
numpy.bincount(numpy.ndarray),3
numpy.c_,2
"numpy.lituple[numpy.ndarray, numpy.ndarray].index_tricks.CClass[tuple[numpy.ndarray, numpy.ndarray]]",2
"numpy.insert(arr=numpy.ndarray, obj=int, values=int)",6
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.object_],2
numpy.int64 != int,10
numpy.prod,6
numpy.int64 * numpy.ndarray,4
"numpy.ndarray.astype(numpy.ndarray, str, copy=builtins.bool, subok=builtins.bool)",5
numpy.int64 //= int,2
numpy.ndarray += numpy.ndarray,6
"numpy.find_common_type(array_types=dict, scalar_types=list)",1
numpy.ndarray.T,64
numpy.ndarray.ravel,8
numpy.float64(x=float),11
numpy.min_scalar_type(numpy.float64),1
"numpy.prod(a=list[int], dtype=str)",3
numpy.ndarray * numpy.int64,5
"numpy.ndarray.ravel(numpy.ndarray, order=str)",4
"numpy.asarray(a=list[str], dtype=str)",4
numpy.argsort(a=numpy.ndarray),4
numpy.asanyarray,4
"numpy.asanyarray(a=numpy.ndarray, dtype=Type[numpy.int64])",1
"numpy.empty(tuple[int, int], dtype=str, order=numpy.dtype)",1
numpy.asarray(a=pandas.core.indexes.numeric.Int64Index),18
numpy.int8 >= int,3
numpy.int8 <= int,4
numpy.log2(list[int]),1
"numpy.concatenate(list[Union[list[int], numpy.ndarray]])",2
numpy.ndarray <<= numpy.ndarray,1
numpy.bitwise_or,4
"numpy.ufunc.reduce(numpy.ufunc, numpy.ndarray, axis=int)",3
numpy.atleast_2d(arys=tuple[numpy.ndarray]),8
"numpy.concatenate(tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray])",3
"numpy.delete(arr=numpy.ndarray, obj=numpy.ndarray)",2
numpy.float64(),2
"numpy.array(list[Union[float, str]], dtype=str)",3
numpy.array(list[str]),71
"numpy.array(list[Union[pandas._libs.tslibs.timestamps.Timestamp, str]])",1
"numpy.ndarray[slice[int, NoneType, int]]",8
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, NoneType, NoneType]]]",4
"numpy.array(pandas.core.indexes.base.Index, copy=builtins.bool)",2
"numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState, int, int)",175
"numpy.array(float, copy=NoneType, dtype=builtins.bool)",2
"numpy.empty(int, dtype=numpy.dtype)",10
"numpy.array(list[float], copy=builtins.bool)",5
"numpy.ndarray.fill(numpy.ndarray, float)",15
"numpy.arange(int, int, int, dtype=str)",3
numpy.dtype.itemsize,13
"numpy.ndarray.swapaxes(numpy.ndarray, int, int)",4
numpy.sum,46
"numpy.empty(tuple[int, int], dtype=str)",5
"numpy.zeros(int, dtype=Type[numpy.int64])",2
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int]]",22
numpy.ndarray.transpose(numpy.ndarray),2
numpy.object_(),1
numpy.dtype(Type[numpy.object_]),27
"Type[numpy.otuple[Type[builtins.object], Type[numpy.object_], str, str]ject_] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], NoneType]]",9
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, numpy.ndarray, int)",1
"numpy.asanyarray(a=numpy.ndarray, dtype=str)",1
numpy.ndarray >= int,24
"numpy.asarray(a=list[tuple[str, str]])",1
"numpy.asarray(a=list[tuple[str, str]], dtype=NoneType)",1
"numpy.asarray(a=list[tuple[str, str]], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str], dtype=Type[builtins.object])",2
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1
numpy.ndarray[numpy.ndarray] = str,21
numpy.flatiter[numpy.ndarray] = numpy.ndarray,1
numpy.absolute(numpy.ndarray),6
numpy.all(a=numpy.ndarray),30
numpy.int64 - int,6
numpy.ndarray.flat,13
numpy.ndarray > float,5
numpy.ndarray <= float,3
not numpy.bool_,48
numpy.int64 + int,21
numpy.ufunc,4
"numpy.ndarray[slilist[numpy.int64]e[NoneType, NoneType, NoneType]] = list[numpy.int64]",1
"numpy.asarray(a=list[int], dtype=NoneType)",2
numpy.ndarray / int,13
"numpy.asarray(a=list[numpy.int64], dtype=NoneType)",3
numpy.int64 -= numpy.int64,1
numpy.ndarray % int,21
"numpy.ndarray.reshape(numpy.ndarray, tuple[int, int])",48
numpy.array(float),15
"numpy.ndarray[tuple[int, list[int]]] = float",1
"numpy.ndarray.reshape(numpy.ndarray, int, int)",89
numpy.isnan(numpy.int64),2
numpy.int64 == numpy.int64,61
numpy.ndim(a=pandas._libs.tslibs.timestamps.Timestamp),3
"numpy.ndarray.fill(numpy.ndarray, str)",5
"numpy.empty(tuple[int, int], dtype=Type[numpy.bool_])",1
numpy.dtype != Type[numpy.bool_],1
"numpy.empty(tuple[int, int], dtype=Type[numpy.object_])",5
numpy.dtype != Type[numpy.object_],1
NoneType != numpy.dtype,1
"numpy.array(numpy.ndarray, copy=builtins.bool, subok=builtins.bool)",1
"numpy.ndarray.searchsorted(numpy.ndarray, int, side=str)",9
"numpy.array(int, copy=NoneType, dtype=builtins.bool)",2
"numpy.ndarray.sum(numpy.ndarray, NoneType, dtype=numpy.dtype)",2
list[numpy.ndarray] * numpy.int64,1
numpy.array(list[numpy.ndarray]),6
numpy.ndarray[numpy.ndarray] = list[numpy.ndarray],2
numpy.multiply,1
"numpy.multiply(numpy.int64, int, dtype=Type[numpy.int32])",1
"numpy.prod(a=tuple[int, int])",9
"numpy.ndarray.put(numpy.ndarray, numpy.ndarray, builtins.bool)",1
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.ndarray)",1
"numpy.tile(A=numpy.ndarray, reps=int)",21
int in numpy.ndarray,7
"numpy.zeros(numpy.int64, dtype=Type[builtins.bool])",1
numpy.amax(a=list[int]),1
Type[numpy.float64] == Type[numpy.object_],5
"numpy.empty(tuple[int, int], dtype=Type[numpy.float64])",9
numpy.int32(),2
"numpy.delete(arr=numpy.ndarray, axis=int, obj=numpy.ndarray)",1
numpy.zeros(int),17
"numpy.prod(a=list, dtype=str)",2
"numpy.repeat(a=numpy.ndarray, repeats=int)",13
"numpy.asarray(a=tuple[str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int], dtype=Type[builtins.object])",1
"numpy.ndarray.any(numpy.ndarray, int)",5
"numpy.asarray(a=tuple[str, str, str], dtype=Type[builtins.object])",1
numpy.asarray(a=list[numpy.bool_]),1
numpy.fromiter,2
"numpy.fromiter(builtins.generator, dtype=Type[numpy.int64])",1
"numpy.roll(a=numpy.ndarray, shift=int)",3
"numpy.ones(dtype=Type[builtins.bool], shape=tuple[int, int])",3
"numpy.ndarray[list[Union[int, numpy.int64]]]",1
"numpy.ndarray[list[Union[int, numpy.int64]]] = numpy.ndarray",1
"numpy.array(pandas.core.indexes.numeric.Float64Index, copy=builtins.bool)",1
"numpy.asarray(a=list[numpy.bool_], dtype=Type[builtins.bool])",1
"numpy.array(list, copy=NoneType, dtype=builtins.bool)",1
"numpy.fromiter(builtins.generator, dtype=str)",1
"numpy.asarray(a=list[int], dtype=str)",4
int * numpy.int64,4
numpy.ndarray // int,10
numpy.ndarray - numpy.ndarray,24
numpy.ndarray // numpy.int64,1
numpy.ndarray.sum,16
numpy.int64 - numpy.int64,11
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[numpy.int64, numpy.int64, NoneType]]]",3
"numpy.ndarray.repeat(numpy.ndarray, int)",24
"numpy.tile(A=list[numpy.int8], reps=int)",1
"numpy.asarray(a=tuple[str, str, str, str], dtype=Type[builtins.object])",1
float * numpy.int64,3
numpy.log(int),1
numpy.float64 <= numpy.float64,4
"numpy.ndarray.sum(numpy.ndarray, int, dtype=numpy.dtype)",2
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, int]]]",1
"numpy.zeros(tuple[int, int], dtype=Type[builtins.bool])",5
numpy.asarray(a=list[numpy.int8]),1
"numpy.ndarray[slilist[numpy.ndarray]e[NoneType, NoneType, NoneType]] = list[numpy.ndarray]",1
float + numpy.float64,4
int * numpy.float64,5
numpy.array(numpy.ndarray),35
numpy.int8 + int,3
"numpy.arange(numpy.int64, dtype=numpy.dtype)",1
"numpy.where(numpy.ndarray, int, numpy.ndarray)",8
float <= numpy.float64,1
int + numpy.int64,9
"numpy.ndarray[slice[numpy.int64, numpy.int64, NoneType]]",15
"numpy.array(tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], copy=builtins.bool)",1
"numpy.array(tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], copy=builtins.bool)",1
"numpy.array(tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], copy=builtins.bool)",1
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.empty(list[int], dtype=numpy.dtype)",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.tile(A=list[int], reps=int)",2
"numpy.array(tuple[str, str, str, str], copy=builtins.bool)",1
"numpy.repeat(a=list[int], repeats=list[int])",2
numpy.array(pandas.core.indexes.base.Index),15
"numpy.array(numpy.ndarray, copy=Type[builtins.bool], dtype=builtins.bool)",1
numpy.dtype != str,4
numpy.dtype == Type[numpy.float64],61
numpy.ndarray |= numpy.ndarray,7
numpy.any(a=pandas.core.series.Series),3
numpy.dtype(Type[builtins.float]),13
numpy.ndarray % numpy.int64,1
int *= numpy.int64,1
numpy.int64 *= numpy.int64,1
"numpy.ndarray[slilist[list[int]]e[NoneType, NoneType, NoneType]] = list[list[int]]",1
numpy.asarray(a=pandas.core.indexes.period.PeriodIndex),4
"numpy.asarray(a=pandas.core.arrays.period.PeriodArray, dtype=NoneType)",3
"numpy.array(list[pandas._libs.tslibs.period.Period], dtype=Type[builtins.object])",4
numpy.ndim(a=pandas._libs.tslibs.period.Period),1
pandas.core.dtypes.dtypes.PeriodDtype == numpy.dtype,2
numpy.ndarray[numpy.int8],2
"numpy.asarray(a=tuple[int, int], dtype=Type[builtins.object])",1
numpy.iinfo.min,7
numpy.ndarray > numpy.ndarray,10
numpy.int64 > numpy.int64,4
numpy.int64 / int,11
"numpy.ndarray.astype(numpy.ndarray, str, casting=builtins.bool, copy=str)",2
"numpy.lituple[int, numpy.ndarray].index_tricks.RClass[tuple[int, numpy.ndarray]]",7
"numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray, dtype=numpy.dtype)",5
"numpy.ndarray.view(numpy.ndarray, Type[numpy.int64])",7
numpy.int64(numpy.datetime64),1
numpy.datetime64(),1
"numpy.ndarray[slice[numpy.int64, NoneType, NoneType]]",4
numpy.r_,14
numpy.diff(a=numpy.ndarray),7
"numpy.repeat(a=numpy.ndarray, repeats=numpy.ndarray)",7
numpy.array(list[numpy.float64]),6
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray, rtol=int)",1
numpy.all,24
"numpy.all(a=numpy.ndarray, axis=tuple)",1
"numpy.concatenate(list[numpy.ndarray], axis=int)",7
numpy.random.randint,43
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, size=int)",9
"numpy.asarray(a=tuple[int, int, int], dtype=Type[builtins.object])",1
numpy.lexsort(list[numpy.ndarray]),1
"numpy.tile(A=builtins.range, reps=int)",1
"numpy.empty(tuple[int, int], dtype=Type[builtins.bool])",5
"numpy.asarray(a=tuple[str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=list[str], dtype=NoneType)",2
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.array(tuple[str, str, str, str, str, str, str, str, str, str], copy=builtins.bool)",1
numpy.isnan,65
"numpy.ndarray[tuple[builtins.ellipsis, NoneType]]",1
"numpy.array(tuple[str, str, str, str, str], copy=builtins.bool)",1
"numpy.asarray(a=tuple[int, int, int, int, int], dtype=Type[builtins.object])",1
Type[numpy.float64] != numpy.dtype,3
"numpy.array(tuple[int, int, int, int, int], copy=builtins.bool)",1
"numpy.empty(tuple[int], dtype=Type[numpy.float64])",2
"numpy.zeros(int, dtype=Type[builtins.int])",3
numpy.ndarray[int] = int,30
"numpy.ndarray[slilist[NoneType]e[NoneType, NoneType, NoneType]] = list[NoneType]",1
"numpy.ndarray.prod(numpy.ndarray, NoneType)",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, float)",8
numpy.nanmedian(a=numpy.ndarray),1
numpy.float64 / numpy.float64,13
numpy.float64(x=numpy.int64),2
numpy.ndarray * numpy.ndarray,9
"numpy.ndarray.sum(numpy.ndarray, NoneType, dtype=Type[numpy.float64])",8
numpy.absolute(numpy.float64),1
numpy.float64 <= float,3
numpy.float64(x=int),12
numpy.float64 ** float,1
numpy.float64 - int,5
numpy.float64 <= int,12
numpy.float64.dtype,9
numpy.ndarray[int] = float,20
numpy.ndarray - numpy.float64,7
"numpy.generic.astype(numpy.float64, numpy.dtype)",3
numpy.absolute(pandas.core.series.Series),9
pandas.core.series.Series - numpy.float64,18
numpy.float64 - numpy.ndarray,2
"numpy.ndarray.sum(numpy.ndarray, axis=Type[numpy.float64], dtype=NoneType)",2
numpy.float64 / float,5
numpy.sqrt(numpy.float64),2
numpy.sqrt(pandas.core.series.Series),8
numpy.sqrt(float),3
"numpy.ndarray[slilist[pandas.core.series.Series]e[NoneType, NoneType, NoneType]] = list[pandas.core.series.Series]",1
"numpy.ndarray.sum(numpy.ndarray, int, dtype=Type[numpy.float64])",8
"numpy.expand_dims(a=numpy.ndarray, axis=int)",4
numpy.ndarray ** float,1
"numpy.ndarray.sum(numpy.ndarray, int)",2
numpy.ndarray / numpy.ndarray,15
"numpy.broadcast_to(array=numpy.ndarray, shape=tuple[int, int])",4
numpy.absolute(pandas.core.frame.DataFrame),3
numpy.sqrt(pandas.core.frame.DataFrame),5
"numpy.ndarray.min(numpy.ndarray, int)",1
"numpy.ndarray.max(numpy.ndarray, int)",1
"numpy.nanmedian(a=numpy.ndarray, axis=int)",1
numpy.sqrt(numpy.ndarray),6
"numpy.ndarray.sum(numpy.ndarray, axis=Type[numpy.float64], dtype=int)",2
"numpy.ndarray.prod(numpy.ndarray, int)",1
"numpy.apply_along_axis(arr=numpy.ndarray, axis=int, func1d=builtins.function)",9
numpy.ndarray / numpy.float64,9
numpy.generic.any(numpy.bool_),11
numpy.ndarray[numpy.bool_] = float,2
numpy.float64 * numpy.ndarray,4
numpy.dtype(Type[numpy.uint8]),9
"numpy.zeros(int, dtype=numpy.dtype)",2
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.bool], copy=builtins.bool)",2
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.bool_])",4
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1
numpy.int16 >= int,2
numpy.int16 <= int,4
"numpy.ndarray[slilist[tuple[str, str, int]]e[NoneType, NoneType, NoneType]] = list[tuple[str, str, int]]",1
"numpy.delete(arr=numpy.ndarray, obj=list[int])",1
"numpy.array(tuple[int, int, int, int, int, int], copy=builtins.bool)",1
"numpy.asarray(a=tuple[int, int, int, int, int, int], dtype=Type[builtins.object])",1
numpy.ndarray.tolist(numpy.ndarray),28
numpy.broadcast_to,1
"numpy.broadcast_to(array=builtins.bool, shape=tuple[int, int])",1
numpy.array(list),18
"numpy.ndarray[slilist[tuple[Union[int, str], Union[int, str]]]e[NoneType, NoneType, NoneType]] = list[tuple[Union[int, str], Union[int, str]]]",1
"numpy.array(tuple[int, int, int], copy=builtins.bool)",1
"numpy.ndarray[slilist[Union[list[Union[datetime.datetime, str]], numpy.ndarray]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[datetime.datetime, str]], numpy.ndarray]]",1
numpy.ndarray[list[int]] = builtins.bool,2
numpy.cumproduct(args=tuple[numpy.ndarray]),2
numpy.int64 / numpy.ndarray,2
"numpy.repeat(a=numpy.ndarray, repeats=numpy.float64)",2
numpy.product(args=tuple[numpy.int64]),1
"numpy.tile(A=numpy.ndarray, reps=numpy.int64)",2
numpy.dtype(float),1
"numpy.asarray(a=tuple[float], dtype=Type[builtins.object])",1
numpy.float64 == str,2
"numpy.random.mtrand.RandomState.seed(numpy.random.mtrand.RandomState, int)",12
"numpy.array(str, copy=NoneType, dtype=builtins.bool)",2
numpy.array(pandas.core.indexes.numeric.Float64Index),11
"numpy.logical_and(numpy.ndarray, numpy.ndarray)",3
numpy.ndarray[pandas.core.indexes.numeric.Int64Index],3
"numpy.ones(dtype=Type[numpy.uint64], shape=int)",2
"numpy.any(a=numpy.ndarray, axis=int)",1
"numpy.any(a=numpy.ndarray, axis=NoneType)",1
numpy.bool_.ndim,2
numpy.take,12
"numpy.putmask(numpy.ndarray, numpy.ndarray, builtins.bool)",5
numpy.split,2
"numpy.split(ary=numpy.ndarray, axis=int, indices_or_sections=list[int])",1
"numpy.take(a=numpy.ndarray, axis=int, indices=int)",11
"numpy.ndarray.all(numpy.ndarray, int)",3
"numpy.all(a=numpy.ndarray, axis=int)",1
"numpy.ndarray.all(numpy.ndarray, NoneType)",1
"numpy.all(a=numpy.ndarray, axis=NoneType)",1
"numpy.sum(a=numpy.ndarray, axis=int)",3
numpy.float64.ndim,1
"numpy.sum(a=numpy.ndarray, axis=NoneType)",1
numpy.int64.ndim,2
"numpy.nansum(a=numpy.ndarray, axis=int)",1
"numpy.nansum(a=numpy.ndarray, axis=NoneType)",1
numpy.complex128.ndim,1
numpy.real(val=numpy.complex128),1
numpy.imag(val=numpy.complex128),1
numpy.complex128.dtype,6
numpy.sum(a=numpy.ndarray),7
numpy.float64 == NoneType,2
numpy.fabs(numpy.float64),1
numpy.nansum,3
numpy.timedelta64.ndim,1
"numpy.mean(a=numpy.ndarray, axis=int)",1
"numpy.mean(a=numpy.ndarray, axis=NoneType)",1
numpy.int64 / numpy.float64,2
numpy.complex128 / numpy.float64,1
numpy.mean(a=numpy.ndarray),5
numpy.ndarray.mean(numpy.ndarray),8
numpy.dtype(Type[numpy.int16]),8
"Type[numpy.int16] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
numpy.float64 ** int,2
numpy.float64 + int,6
numpy.dtype == Type[numpy.int16],9
numpy.int16.dtype,6
numpy.dtype(Type[numpy.int32]),9
"Type[numpy.int32] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
numpy.dtype == Type[numpy.int32],21
numpy.int32.dtype,4
numpy.dtype == Type[numpy.int64],32
numpy.int64.dtype,7
numpy.dtype(Type[numpy.float32]),7
"Type[numpy.float32] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
numpy.float32(numpy.int64),2
numpy.float32 > int,1
numpy.float32.dtype,5
numpy.float32(int),5
numpy.float64 / numpy.float32,4
numpy.sqrt(numpy.float32),1
numpy.dtype == Type[numpy.float32],11
numpy.float32 - numpy.float32,1
numpy.float32 - int,4
numpy.float32 <= int,2
numpy.float32 + int,1
numpy.dtype(Type[numpy.float128]),2
"Type[numpy.float128] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
numpy.float128(numpy.int64),1
numpy.float128 > int,1
numpy.float128.dtype,1
numpy.float128(int),1
numpy.float64 / numpy.float128,4
"numpy.generic.astype(numpy.float128, numpy.dtype)",1
numpy.sqrt(numpy.float128),1
numpy.dtype == Type[numpy.float128],1
numpy.float128 - numpy.float128,2
numpy.float128 - numpy.ndarray,1
numpy.float128 ** float,1
numpy.float128 - int,4
numpy.float128 * numpy.float64,2
numpy.float128 <= int,1
numpy.float128 ** int,1
numpy.float128 * numpy.float128,1
numpy.float128 + int,1
numpy.float128 <= float,1
numpy.absolute(numpy.float128),1
numpy.float128 == int,1
"numpy.median(a=numpy.ndarray, axis=int)",2
"numpy.median(a=numpy.ndarray, axis=NoneType)",2
numpy.median(a=numpy.ndarray),3
numpy.median,3
"numpy.var(a=numpy.ndarray, axis=int, ddof=int)",2
"numpy.expand_dims(a=numpy.float64, axis=int)",3
"numpy.var(a=numpy.ndarray, axis=NoneType, ddof=int)",2
numpy.var(a=numpy.ndarray),1
numpy.imag(val=numpy.ndarray),1
numpy.ndarray.real,1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.complex128])",5
numpy.var,4
numpy.std,24
"numpy.std(a=numpy.ndarray, axis=int, ddof=int)",2
"numpy.std(a=numpy.ndarray, axis=NoneType, ddof=int)",2
numpy.std(a=numpy.ndarray),2
"numpy.amin(a=numpy.ndarray, axis=int)",3
"numpy.amin(a=numpy.ndarray, axis=NoneType)",2
numpy.iscomplexobj(x=numpy.ndarray),1
numpy.datetime64.ndim,1
Type[numpy.datetime64] != Type[numpy.datetime64],1
numpy.amin(a=numpy.ndarray),9
numpy.fabs(numpy.int64),1
"numpy.amax(a=numpy.ndarray, axis=int)",2
"numpy.amax(a=numpy.ndarray, axis=NoneType)",1
numpy.amax(a=numpy.ndarray),6
"numpy.ndarray.argmax(numpy.ndarray, int)",1
"numpy.argmax(a=numpy.ndarray, axis=int)",1
"numpy.argmax(a=numpy.ndarray, axis=NoneType)",1
"numpy.ndarray.argmax(numpy.ndarray, NoneType)",1
numpy.argmax,5
"numpy.ndarray.argmin(numpy.ndarray, int)",1
"numpy.argmin(a=numpy.ndarray, axis=int)",1
"numpy.argmin(a=numpy.ndarray, axis=NoneType)",1
"numpy.ndarray.argmin(numpy.ndarray, NoneType)",1
numpy.argmin,5
numpy.max,5
numpy.min,7
numpy.nanprod,2
"numpy.prod(a=numpy.ndarray, axis=int)",1
"numpy.prod(a=numpy.ndarray, axis=NoneType)",1
"numpy.nanprod(a=numpy.ndarray, axis=int)",1
"numpy.nanprod(a=numpy.ndarray, axis=NoneType)",1
"numpy.corrcoef(x=numpy.ndarray, y=numpy.ndarray)",4
"numpy.corrcoef(x=numpy.flatiter, y=numpy.flatiter)",3
"numpy.cov(m=numpy.ndarray, y=numpy.ndarray)",2
"numpy.cov(m=numpy.flatiter, y=numpy.flatiter)",1
numpy.hstack(tup=list[numpy.ndarray]),1
numpy.isinf(numpy.ndarray),4
"numpy.allclose(a=numpy.ndarray, b=numpy.ndarray)",2
"numpy.allclose(a=float, b=float)",2
"numpy.allclose(a=builtins.complex, b=builtins.complex)",1
"numpy.ndarray[slinumpy.ndarraye[NoneType, NoneType, int]] = numpy.ndarray",2
"numpy.random.mtrand.RandomState.uniform(numpy.random.mtrand.RandomState, size=int)",2
"numpy.random.mtrand.RandomState.uniform(numpy.random.mtrand.RandomState, size=tuple[int, int])",1
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], int]] = float",4
"numpy.empty(tuple[int, int])",6
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, int, NoneType], slinumpy.ndarraye[NoneType, int, NoneType]]] = numpy.ndarray",1
numpy.array(list[list[list[float]]]),1
numpy.isnan(numpy.float64),29
numpy.random.mtrand.RandomState.beta,2
"numpy.random.mtrand.RandomState.beta(numpy.random.mtrand.RandomState, float, float, size=int)",2
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=int)",1
numpy.sum(a=pandas.core.series.Series),9
numpy.nansum(a=pandas.core.series.Series),2
numpy.mean(a=pandas.core.series.Series),15
numpy.float64 == float,38
numpy.nanmean(a=pandas.core.series.Series),2
numpy.median(a=pandas.core.series.Series),4
numpy.nanmedian(a=pandas.core.series.Series),1
numpy.amin(a=pandas.core.series.Series),8
numpy.amax(a=pandas.core.series.Series),8
numpy.nanmin(a=pandas.core.series.Series),1
numpy.nanmax(a=pandas.core.series.Series),1
"numpy.putmask(numpy.ndarray, pandas.core.series.Series, builtins.bool)",1
numpy.numpy.bool_ool_ == numpy.bool_,22
"numpy.putmask(numpy.ndarray, pandas.core.series.Series, float)",1
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, tuple[int, int])",11
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, int, int)",5
"numpy.vstack(tup=tuple[numpy.ndarray, numpy.ndarray])",1
"numpy.random.mtrand.RandomState.permutation(numpy.random.mtrand.RandomState, int)",12
"numpy.array(tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64], copy=builtins.bool)",1
"numpy.asarray(a=list[numpy.int64], dtype=Type[builtins.object])",1
"numpy.fromiter(builtins.map, dtype=str)",1
numpy.int16 + int,1
"numpy.array(list[Union[float, int]], copy=builtins.bool)",4
"numpy.asarray(a=list[Union[float, int]], dtype=Type[builtins.object])",2
"numpy.asanyarray(a=list[Union[float, int]])",1
numpy.asanyarray(a=numpy.ndarray),1
"numpy.asarray(a=list, dtype=numpy.dtype)",3
"numpy.asarray(a=list[int], dtype=numpy.dtype)",2
"numpy.array(list[Union[int, str]], dtype=Type[builtins.object])",7
"numpy.array(list[Union[datetime.datetime, int]], dtype=Type[builtins.object])",2
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int64], casting=builtins.bool, copy=str)",1
numpy.logical_or,1
"numpy.asarray(a=list[Union[numpy.ndarray, str]], dtype=Type[builtins.object])",1
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.asarray(a=pandas.core.indexes.base.Index, dtype=Type[builtins.object])",1
str + numpy.ndarray,2
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], int]] = numpy.ndarray",3
"numpy.asarray(a=pandas.core.arrays.categorical.Categorical, dtype=numpy.dtype)",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.ndarray)",3
"numpy.ndarray(int, dtype=str)",1
numpy.array(pandas.core.arrays.categorical.Categorical),11
"numpy.array(list, copy=builtins.bool)",4
"numpy.asarray(a=list, dtype=Type[builtins.object])",6
numpy.flexible,1
"numpy.ndarray(int, dtype=Type[builtins.str])",1
"numpy.ndarray(int, dtype=Type[builtins.bool])",1
"numpy.ndarray(int, dtype=Type[builtins.object])",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, str)",2
"numpy.empty(tuple[int, int], dtype=Type[numpy.int64])",7
"numpy.array(list, dtype=Type[builtins.object])",6
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.flexible])",1
numpy.bool_(),2
numpy.str_(),1
"numpy.array(numpy.ndarray, dtype=Type[builtins.object])",4
"numpy.array(numpy.ndarray, copy=Type[builtins.object], dtype=builtins.bool)",2
"numpy.zeros(tuple[int], dtype=Type[builtins.bool])",5
"numpy.ndarray[slilist[slice[NoneType, int, int]]e[NoneType, NoneType, NoneType]] = list[slice[NoneType, int, int]]",1
"numpy.where(numpy.ndarray, str, numpy.ndarray)",2
"numpy.asarray(a=list[numpy.ndarray], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[NoneType, float, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, float, str]]",1
"numpy.ndarray[slilist[numpy.str_]e[NoneType, NoneType, NoneType]] = list[numpy.str_]",1
"numpy.array(list[Union[float, str]], dtype=Type[numpy.object_])",2
"numpy.array(list[Union[NoneType, builtins.bool, datetime.datetime, float, int, str]], dtype=Type[builtins.object])",2
"numpy.array(list[Union[builtins.bool, float]], dtype=Type[numpy.object_])",3
"numpy.array(list[str], dtype=Type[numpy.object_])",22
numpy.dtype == Type[builtins.object],39
numpy.bool_(builtins.bool),9
"numpy.array(list[Union[NoneType, builtins.bool, datetime.datetime, float, int, str]], dtype=Type[numpy.object_])",1
"numpy.ndarray[slilist[Union[NoneType, builtins.bool, datetime.datetime, float, int, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, builtins.bool, datetime.datetime, float, int, str]]",1
"numpy.ndarray[slilist[Union[NoneType, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, str]]",1
"numpy.asarray(a=list[Union[NoneType, str]], dtype=str)",1
numpy.ndarray[numpy.ndarray] = pandas._libs.missing.NAType,4
"numpy.asarray(a=pandas.core.arrays.string_.StringArray, dtype=NoneType)",1
"numpy.array(pandas.core.arrays.string_.StringArray, copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.asarray(a=list[Union[NoneType, int]], dtype=Type[builtins.object])",2
"numpy.asarray(a=list[Union[float, str]], dtype=str)",1
numpy.asarray(a=pandas.core.arrays.string_.StringArray),3
"numpy.asarray(a=list[Union[builtins.bool, float]], dtype=Type[builtins.object])",2
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.object], copy=builtins.bool)",1
numpy.str_,4
"numpy.ndarray.reshape(numpy.ndarray, int)",2
"numpy.array(list, copy=numpy.dtype, dtype=builtins.bool)",2
"numpy.ndarray[slilist[Union[float, list, list[str]]]e[NoneType, NoneType, NoneType]] = list[Union[float, list, list[str]]]",1
"numpy.ndarray[slilist[Union[float, list[str]]]e[NoneType, NoneType, NoneType]] = list[Union[float, list[str]]]",1
"numpy.ndarray[slilist[list[str]]e[NoneType, NoneType, NoneType]] = list[list[str]]",1
int == numpy.int64,32
numpy.isnan(int),2
"numpy.ndarray[slilist[Union[NoneType, float, tuple[str, str, str]]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, float, tuple[str, str, str]]]",1
"numpy.ndarray[slilist[Union[float, tuple[str, str, str]]]e[NoneType, NoneType, NoneType]] = list[Union[float, tuple[str, str, str]]]",1
"numpy.array(list[Union[NoneType, float, tuple[str, str, str]]], dtype=Type[builtins.object])",1
"numpy.array(list[tuple[str, str, str]])",1
"numpy.ndarray[slilist[Union[builtins.set, dict, list[int], tuple[int, int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.set, dict, list[int], tuple[int, int, int]]]",1
"numpy.ndarray[slilist[tuple[tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[tuple[tuple[int, int]]]",1
numpy.dtype(Type[numpy.bool_]),4
"Type[numpy.tuple[Type[builtins.object], Type[numpy.object_], str, str]ool_] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
"numpy.array(list[builtins.bool], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.ndarray[slilist[Union[tuple[int, int, int], tuple[int, int], tuple[int]]]e[NoneType, NoneType, NoneType]] = list[Union[tuple[int, int, int], tuple[int, int], tuple[int]]]",1
"numpy.ndarray[slilist[builtins.bytes]e[NoneType, NoneType, NoneType]] = list[builtins.bytes]",1
"numpy.ndarray[slilist[datetime.timedelta]e[NoneType, NoneType, NoneType]] = list[datetime.timedelta]",1
"numpy.asarray(a=numpy.ndarray, dtype=str)",4
pandas.core.arrays.numpy.dtypeoolean.BooleanDtype == numpy.dtype,1
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.integer])",4
pandas.core.arrays.string_.StringDtype != numpy.dtype,2
numpy.datetime_data(numpy.dtype),1
"numpy.full(fill_value=builtins.bool, shape=int)",1
numpy.ndarray.__array_priority__,1
numpy.array(list[pandas.core.arrays.string_.StringDtype]),1
pandas.core.arrays.string_.StringDtype == numpy.dtype,1
"numpy.ndarray[slilist[numpy.dtype]e[NoneType, NoneType, NoneType]] = list[numpy.dtype]",1
numpy.ndarray &= pandas.core.series.Series,2
pandas.core.arrays.integer.Int64Dtype == numpy.dtype,2
"numpy.empty_like(numpy.ndarray, dtype=str)",2
numpy.ndarray | builtins.bool,3
numpy.empty_like,5
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int64], copy=builtins.bool)",4
"numpy.array(list[Union[NoneType, int]], copy=builtins.bool)",3
"numpy.asarray(a=list[Union[NoneType, builtins.bool]], dtype=Type[builtins.object])",2
"numpy.empty(int, dtype=Type[numpy.float64])",3
"numpy.ndarray.take(numpy.ndarray, list[int])",5
"numpy.empty(int, dtype=Type[numpy.float32])",2
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint64])",3
"numpy.empty(int, dtype=Type[numpy.uint64])",2
"numpy.ndarray.take(numpy.ndarray, numpy.ndarray, axis=numpy.ndarray, out=int)",1
"numpy.ndarray.take(numpy.ndarray, list[int], out=numpy.ndarray)",1
numpy.uint64(),2
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint32])",3
"numpy.empty(int, dtype=Type[numpy.uint32])",2
numpy.uint32(),2
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint16])",3
"numpy.empty(int, dtype=Type[numpy.uint16])",2
numpy.uint16(),1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint8])",3
"numpy.empty(int, dtype=Type[numpy.uint8])",2
numpy.uint8(),2
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int32])",7
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int16])",3
"numpy.empty(int, dtype=Type[numpy.int16])",1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int8])",6
"numpy.empty(int, dtype=Type[numpy.int8])",1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.object_])",4
"numpy.empty(int, dtype=Type[numpy.object_])",2
"numpy.empty(int, dtype=Type[builtins.bool])",2
numpy.int8(numpy.int16),1
numpy.ndarray.all,108
"numpy.can_cast(numpy.int16, numpy.dtype)",1
numpy.dtype == Type[numpy.int8],16
"numpy.promote_types(numpy.dtype, numpy.dtype)",3
numpy.int16(numpy.int16),1
numpy.int32 == int,3
numpy.int32(int),7
numpy.min_scalar_type(builtins.complex),2
numpy.complex128(real=builtins.complex),4
numpy.complex128 == builtins.complex,1
numpy.dtype == Type[numpy.complex128],16
numpy.ndarray[tuple[numpy.ndarray]] = numpy.complex128,1
numpy.complex128(real=int),1
numpy.complex128(real=float),1
numpy.complex128 == float,1
numpy.complex128(),1
"numpy.ndarray.take(numpy.ndarray, list[int], axis=int)",17
"numpy.ndarray[tuple[int, slifloate[NoneType, NoneType, NoneType]]] = float",2
"numpy.empty(tuple[int, int], dtype=Type[numpy.float32])",4
"numpy.empty(tuple[int, int], dtype=Type[numpy.uint64])",5
"numpy.ndarray.take(numpy.ndarray, list[int], axis=numpy.ndarray, out=int)",2
"numpy.empty(tuple[int, int], dtype=Type[numpy.uint32])",4
"numpy.empty(tuple[int, int], dtype=Type[numpy.uint16])",4
"numpy.empty(tuple[int, int], dtype=Type[numpy.uint8])",4
"numpy.empty(tuple[int, int], dtype=Type[numpy.int32])",4
"numpy.empty(tuple[int, int], dtype=Type[numpy.int16])",4
numpy.int16(),2
"numpy.empty(tuple[int, int], dtype=Type[numpy.int8])",4
numpy.int8(),2
numpy.ndarray != numpy.ndarray,10
"numpy.ndarray[tuple[list[int], slice[NoneType, NoneType, NoneType]]]",4
numpy.ndarray == numpy.int16,5
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], list[int]]]",5
numpy.min_scalar_type(numpy.int16),1
numpy.ndarray == float,5
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.complex128e[NoneType, NoneType, NoneType]]] = numpy.complex128",1
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType]]]",4
numpy.ndarray == builtins.complex,5
numpy.ndarray == str,9
"numpy.ndarray[tuple[slinumpy.complex128e[NoneType, NoneType, NoneType], numpy.ndarray]] = numpy.complex128",1
numpy.ndarray == builtins.bool,5
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.float64])",6
"numpy.prod(a=tuple[int, int, int])",1
"numpy.ndarray[tuple[numpy.ndarray, slifloate[NoneType, NoneType, NoneType], slifloate[NoneType, NoneType, NoneType]]] = float",1
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], numpy.ndarray, slifloate[NoneType, NoneType, NoneType]]] = float",1
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], slifloate[NoneType, NoneType, NoneType], numpy.ndarray]] = float",1
"numpy.ndarray[tuple[int, slifloate[NoneType, NoneType, NoneType], slifloate[NoneType, NoneType, NoneType]]] = float",1
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], int, slifloate[NoneType, NoneType, NoneType]]] = float",1
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], slifloate[NoneType, NoneType, NoneType], int]] = float",1
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, tuple[int, int, int])",2
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.uint64])",3
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.uint32])",3
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.uint16])",3
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.uint8])",3
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.int64])",3
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.int32])",3
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.int16])",3
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.int8])",3
"numpy.empty(tuple[int, int, int], dtype=Type[numpy.object_])",6
"numpy.empty(tuple[int, int, int], dtype=Type[builtins.bool])",3
"numpy.ndarray[tuple[list[int], slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2
"numpy.empty(tuple[int, int, int], dtype=numpy.dtype)",1
"numpy.ndarray[tuple[slinumpy.int8e[NoneType, NoneType, NoneType], numpy.ndarray, slinumpy.int8e[NoneType, NoneType, NoneType]]] = numpy.int8",1
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], list[int], slice[NoneType, NoneType, NoneType]]]",2
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], int, slice[NoneType, NoneType, NoneType]]]",1
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], list[int]]]",2
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.int32e[NoneType, NoneType, NoneType], slinumpy.int32e[NoneType, NoneType, NoneType]]] = numpy.int32",1
"numpy.ndarray[tuple[int, slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",1
"numpy.ndarray[tuple[slinumpy.int32e[NoneType, NoneType, NoneType], slinumpy.int32e[NoneType, NoneType, NoneType], numpy.ndarray]] = numpy.int32",1
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType], int]]",1
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.float64e[NoneType, NoneType, NoneType], slinumpy.float64e[NoneType, NoneType, NoneType]]] = numpy.float64",1
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, NoneType, NoneType], numpy.ndarray, slinumpy.float64e[NoneType, NoneType, NoneType]]] = numpy.float64",1
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, NoneType, NoneType], slinumpy.float64e[NoneType, NoneType, NoneType], numpy.ndarray]] = numpy.float64",1
"numpy.ndarray[tuple[slinumpy.complex128e[NoneType, NoneType, NoneType], numpy.ndarray, slinumpy.complex128e[NoneType, NoneType, NoneType]]] = numpy.complex128",1
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, NoneType, NoneType], numpy.ndarray, slibuiltins.boole[NoneType, NoneType, NoneType]]] = builtins.bool",1
"numpy.ndarray[tuple[slistre[NoneType, NoneType, NoneType], numpy.ndarray, slistre[NoneType, NoneType, NoneType]]] = str",1
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.complex128e[NoneType, NoneType, NoneType], slinumpy.complex128e[NoneType, NoneType, NoneType]]] = numpy.complex128",1
"numpy.ndarray[tuple[slinumpy.complex128e[NoneType, NoneType, NoneType], slinumpy.complex128e[NoneType, NoneType, NoneType], numpy.ndarray]] = numpy.complex128",1
"numpy.ndarray[tuple[numpy.ndarray, slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, NoneType, NoneType]]] = builtins.bool",1
"numpy.ndarray[tuple[slibuiltins.boole[NoneType, NoneType, NoneType], slibuiltins.boole[NoneType, NoneType, NoneType], numpy.ndarray]] = builtins.bool",1
"numpy.ndarray[tuple[numpy.ndarray, slistre[NoneType, NoneType, NoneType], slistre[NoneType, NoneType, NoneType]]] = str",1
"numpy.ndarray[tuple[slistre[NoneType, NoneType, NoneType], slistre[NoneType, NoneType, NoneType], numpy.ndarray]] = str",1
"numpy.ndarray[tuple[numpy.ndarray, sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], numpy.ndarray]] = int",1
"numpy.ndarray[tuple[numpy.ndarray, slibuiltins.complexe[NoneType, NoneType, NoneType], slibuiltins.complexe[NoneType, NoneType, NoneType]]] = builtins.complex",1
"numpy.ndarray[tuple[slibuiltins.complexe[NoneType, NoneType, NoneType], slibuiltins.complexe[NoneType, NoneType, NoneType], numpy.ndarray]] = builtins.complex",1
"numpy.array(list[int], dtype=Type[builtins.bool])",2
"numpy.array(list[list[int]], dtype=Type[builtins.bool])",1
numpy.float32,40
numpy.empty_like(numpy.ndarray),7
"numpy.ndarray[tuple[list[int], sliinte[NoneType, NoneType, NoneType]]] = int",1
numpy.datetime64(numpy.datetime64),1
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], list[int]]] = int",1
numpy.array(list[list[int]]),21
"numpy.asarray(a=list[int], dtype=Type[numpy.int64])",9
"numpy.asarray(a=list, dtype=Type[numpy.int64])",3
"numpy.arange(int, int)",50
numpy.array(numpy.datetime64),5
numpy.bool_uiltins.numpy.bool_ool | numpy.bool_,1
numpy.any(a=builtins.bool),7
"numpy.array(list[pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",16
numpy.array(pandas._libs.tslibs.timestamps.Timestamp),2
numpy.array(list[pandas.core.dtypes.dtypes.DatetimeTZDtype]),1
"numpy.zeros(tuple[int], dtype=Type[numpy.bool_])",1
"numpy.ones(dtype=Type[builtins.bool], shape=tuple[int])",3
"numpy.zeros(tuple[int, int], dtype=Type[numpy.bool_])",1
numpy.ndim(a=builtins.object),1
"numpy.ndarray.astype(numpy.ndarray, numpy.dtype, casting=builtins.bool, copy=str)",1
pandas.core.arrays.datetimes.DatetimeArray == numpy.ndarray,3
numpy.ndarray == pandas.core.arrays.datetimes.DatetimeArray,2
pandas.core.arrays.datetimes.DatetimeArray > numpy.ndarray,2
numpy.ndarray <= pandas.core.arrays.datetimes.DatetimeArray,1
numpy.ndarray >= pandas.core.arrays.datetimes.DatetimeArray,1
pandas.core.arrays.datetimes.DatetimeArray != numpy.ndarray,2
numpy.ndarray != pandas.core.arrays.datetimes.DatetimeArray,1
pandas.core.arrays.datetimes.DatetimeArray <= numpy.ndarray,3
pandas.core.arrays.datetimes.DatetimeArray >= numpy.ndarray,3
numpy.ndarray > pandas.core.arrays.datetimes.DatetimeArray,2
numpy.ndim(a=list[pandas._libs.tslibs.timedeltas.Timedelta]),2
"numpy.array(list[pandas._libs.tslibs.timedeltas.Timedelta], copy=builtins.bool)",3
"numpy.array(list[Union[int, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]])",2
numpy.array(pandas.core.series.Series),15
numpy.ndarray[numpy.ndarray] = builtins.bool,24
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]",1
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]]",1
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]]",1
numpy.ndim(a=pandas.core.frame.DataFrame),1
"numpy.asarray(a=pandas.core.series.Series, dtype=NoneType)",2
numpy.array(list[pandas.core.dtypes.dtypes.PeriodDtype]),1
numpy.asarray(a=pandas.core.arrays.period.PeriodArray),6
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]], dtype=Type[builtins.object])",2
"numpy.array(pandas.core.arrays.timedeltas.TimedeltaArray, copy=builtins.bool)",3
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.timestamps.Timestamp, str]]",1
numpy.ndim(a=pandas._libs.tslibs.nattype.NaTType),1
numpy.ndim(a=pandas.core.series.Series),1
"numpy.datetime64(str, str)",15
numpy.array(pandas.core.indexes.datetimes.DatetimeIndex),7
pandas.core.indexes.datetimes.DatetimeIndex > numpy.datetime64,1
pandas.core.indexes.datetimes.DatetimeIndex <= numpy.datetime64,1
"numpy.ndim(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]])",1
"numpy.asarray(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]])",1
"numpy.ndim(a=list[Union[pandas._libs.tslibs.nattype.NaTType, str]])",2
numpy.ndarray >= pandas.core.indexes.datetimes.DatetimeIndex,1
pandas.core.indexes.datetimes.DatetimeIndex == numpy.ndarray,5
pandas.core.indexes.datetimes.DatetimeIndex != numpy.ndarray,2
numpy.asarray(a=list[pandas._libs.tslibs.timestamps.Timestamp]),5
numpy.ndarray == pandas.core.indexes.datetimes.DatetimeIndex,2
numpy.all(a=pandas.core.series.Series),7
pandas.core.series.Series == numpy.ndarray,7
numpy.ndarray == pandas.core.series.Series,2
numpy.all(a=pandas.core.frame.DataFrame),6
numpy.bool_.dtype,4
numpy.ndarray == pandas.core.frame.DataFrame,2
pandas.core.frame.DataFrame == numpy.ndarray,6
"numpy.asarray(a=list[Union[pandas._libs.tslibs.nattype.NaTType, str]])",2
pandas.core.indexes.datetimes.DatetimeIndex > numpy.ndarray,1
"numpy.array(list[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]])",2
pandas.core.indexes.datetimes.DatetimeIndex >= numpy.ndarray,1
numpy.ndarray[str],30
numpy.int64 % int,5
"numpy.broadcast_to(array=int, shape=tuple[int, int])",1
pandas.core.indexes.datetimes.DatetimeIndex + numpy.timedelta64,5
pandas.core.series.Series + numpy.timedelta64,6
pandas.core.frame.DataFrame + numpy.timedelta64,7
pandas.core.arrays.datetimes.DatetimeArray + numpy.timedelta64,3
pandas.core.indexes.datetimes.DatetimeIndex += numpy.timedelta64,1
pandas.core.arrays.datetimes.DatetimeArray += numpy.timedelta64,1
"numpy.ndarray[slice[NoneType, NoneType, NoneType]]",11
"numpy.ndarray[slinumpy.ndarraye[NoneType, NoneType, NoneType]] = numpy.ndarray",11
pandas.core.series.Series += numpy.timedelta64,1
pandas.core.frame.DataFrame += numpy.timedelta64,1
pandas.core.series.Series - numpy.timedelta64,7
pandas.core.arrays.datetimes.DatetimeArray - numpy.timedelta64,3
-numpy.timedelta64,2
pandas.core.indexes.datetimes.DatetimeIndex - numpy.timedelta64,2
pandas.core.frame.DataFrame - numpy.timedelta64,4
pandas.core.indexes.datetimes.DatetimeIndex -= numpy.timedelta64,1
pandas.core.frame.DataFrame -= numpy.timedelta64,2
pandas.core.arrays.datetimes.DatetimeArray -= numpy.timedelta64,1
pandas.core.series.Series -= numpy.timedelta64,2
numpy.timedelta64 + pandas.core.indexes.datetimes.DatetimeIndex,2
"numpy.timedelta64(int, str)",97
numpy.timedelta64 + pandas.core.series.Series,7
numpy.timedelta64 + pandas.core.frame.DataFrame,5
"numpy.empty(tuple[int], dtype=str)",6
"numpy.ndarray[sliinte[NoneType, NoneType, NoneType]] = int",4
numpy.timedelta64.dtype,6
Type[numpy.timedelta64].__name__,3
numpy.timedelta64 - pandas.core.indexes.datetimes.DatetimeIndex,1
numpy.timedelta64(str),20
"numpy.broadcast_to(array=numpy.timedelta64, shape=tuple[int])",1
"numpy.generic.astype(numpy.timedelta64, str)",8
numpy.timedelta64 - pandas.core.series.Series,4
"numpy.broadcast_to(array=numpy.timedelta64, shape=tuple[int, int])",1
numpy.timedelta64 - pandas.core.frame.DataFrame,4
numpy.timedelta64 - pandas.core.arrays.datetimes.DatetimeArray,1
numpy.timedelta64 + pandas.core.arrays.datetimes.DatetimeArray,1
numpy.ndarray + pandas.core.indexes.datetimes.DatetimeIndex,5
"numpy.linspace(dtype=str, num=int, start=int, stop=int)",1
numpy.ndarray - pandas.core.indexes.datetimes.DatetimeIndex,4
pandas.core.series.Series + numpy.ndarray,10
numpy.ndarray + pandas.core.series.Series,8
pandas.core.series.Series - numpy.ndarray,5
numpy.ndarray - pandas.core.series.Series,9
pandas.core.frame.DataFrame + numpy.ndarray,9
numpy.ndarray[int] = pandas.core.arrays.datetimes.DatetimeArray,1
numpy.ndarray + pandas.core.frame.DataFrame,7
pandas.core.frame.DataFrame - numpy.ndarray,8
numpy.ndarray - pandas.core.frame.DataFrame,9
pandas.core.arrays.datetimes.DatetimeArray + numpy.ndarray,9
numpy.ndarray - pandas.core.arrays.datetimes.DatetimeArray,5
pandas.core.indexes.datetimes.DatetimeIndex - numpy.ndarray,6
numpy.dtype(pandas._libs.tslibs.timedeltas.Timedelta),1
pandas.core.indexes.datetimes.DatetimeIndex + numpy.ndarray,8
numpy.ndarray + pandas.core.arrays.datetimes.DatetimeArray,5
pandas.core.arrays.datetimes.DatetimeArray - numpy.ndarray,9
pandas.core.frame.DataFrame - numpy.datetime64,3
pandas.core.arrays.datetimes.DatetimeArray - numpy.datetime64,1
numpy.datetime64.dtype,7
pandas.core.indexes.datetimes.DatetimeIndex - numpy.datetime64,5
numpy.datetime64 - pandas.core.indexes.datetimes.DatetimeIndex,1
pandas.core.series.Series - numpy.datetime64,2
numpy.datetime64 - pandas.core.series.Series,4
numpy.dtype(pandas._libs.tslibs.timestamps.Timestamp),1
numpy.datetime64 - pandas.core.frame.DataFrame,4
numpy.datetime64 - pandas.core.arrays.datetimes.DatetimeArray,1
"numpy.zeros(tuple[int], dtype=Type[numpy.int64])",2
"numpy.array(list[pandas._libs.tslibs.nattype.NaTType], copy=builtins.bool)",2
numpy.ndarray[int] = pandas.core.arrays.timedeltas.TimedeltaArray,1
numpy.dtype(pandas._libs.tslibs.period.Period),1
numpy.dtype(datetime.time),1
"numpy.ndarray[slilist[datetime.time]e[NoneType, NoneType, NoneType]] = list[datetime.time]",1
numpy.array(list[datetime.time]),3
numpy.dtype(pandas.tseries.offsets.Second),1
numpy.dtype(pandas.tseries.offsets.DateOffset),1
numpy.dtype(pandas.tseries.offsets.YearBegin),1
numpy.dtype(pandas.tseries.offsets.YearEnd),1
numpy.dtype(pandas.tseries.offsets.MonthBegin),1
"numpy.where(numpy.ndarray, int, int)",12
pandas.core.arrays.datetimes.DatetimeArray += numpy.ndarray,1
numpy.dtype(pandas.tseries.offsets.Week),1
numpy.dtype(pandas.tseries.offsets.BusinessDay),1
numpy.dtype(pandas.tseries.offsets.QuarterEnd),1
numpy.datetime64(datetime.date),1
"numpy.busday_offset(numpy.datetime64, int, busdaycal=str, roll=numpy.busdaycalendar)",1
numpy.busday_offset,1
"numpy.generic.astype(numpy.datetime64, Type[datetime.datetime])",1
numpy.ndarray + pandas.tseries.offsets.CustomBusinessDay,1
numpy.dtype(pandas.tseries.offsets.CustomBusinessDay),1
"numpy.is_busday(numpy.datetime64, busdaycal=numpy.busdaycalendar)",1
numpy.is_busday,1
numpy.ndarray + pandas.tseries.offsets.CustomBusinessMonthEnd,1
numpy.dtype(pandas.tseries.offsets.CustomBusinessMonthEnd),1
numpy.ndarray + pandas.tseries.offsets.CustomBusinessMonthBegin,1
numpy.dtype(pandas.tseries.offsets.CustomBusinessMonthBegin),1
numpy.dtype(pandas.tseries.offsets.BusinessMonthBegin),1
numpy.dtype(pandas.tseries.offsets.BusinessHour),1
numpy.ndarray + pandas.tseries.offsets.BusinessHour,1
numpy.dtype(pandas.tseries.offsets.BYearBegin),1
numpy.dtype(pandas.tseries.offsets.BQuarterBegin),1
numpy.ndarray + pandas.tseries.offsets.Easter,1
numpy.ndarray + pandas.tseries.offsets.DateOffset,1
numpy.dtype(pandas.tseries.offsets.SemiMonthBegin),1
numpy.dtype(pandas.tseries.offsets.BusinessMonthEnd),1
numpy.dtype(pandas.tseries.offsets.BYearEnd),1
numpy.ndarray + pandas.tseries.offsets.LastWeekOfMonth,1
numpy.dtype(pandas.tseries.offsets.LastWeekOfMonth),1
numpy.ndarray + pandas.tseries.offsets.FY5253Quarter,1
numpy.ndarray + pandas.tseries.offsets.FY5253,1
numpy.dtype(pandas.tseries.offsets.FY5253),1
numpy.ndarray + pandas.tseries.offsets.WeekOfMonth,1
numpy.dtype(pandas.tseries.offsets.Easter),1
numpy.dtype(pandas.tseries.offsets.MonthEnd),1
numpy.dtype(pandas.tseries.offsets.SemiMonthEnd),1
numpy.dtype(pandas.tseries.offsets.QuarterBegin),1
numpy.dtype(pandas.tseries.offsets.FY5253Quarter),1
numpy.dtype(pandas.tseries.offsets.WeekOfMonth),1
"numpy.array(list[Union[pandas.tseries.offsets.Day, pandas.tseries.offsets.MonthEnd]])",2
"numpy.ndarray[slilist[pandas._libs.tslibs.nattype.NaTType]e[NoneType, NoneType, NoneType]] = list[pandas._libs.tslibs.nattype.NaTType]",1
numpy.ndim(a=list[pandas._libs.tslibs.nattype.NaTType]),2
numpy.ndarray[int] = numpy.datetime64,2
"numpy.array(list[Union[pandas._libs.tslibs.timestamps.Timestamp, str]], dtype=str)",1
"numpy.generic.astype(numpy.datetime64, str)",11
numpy.ndim(a=pandas._libs.tslibs.timedeltas.Timedelta),2
"numpy.array(list[pandas._libs.tslibs.timestamps.Timestamp], dtype=str)",2
numpy.array(numpy.timedelta64),3
numpy.ndarray[int] = numpy.timedelta64,3
"numpy.timedelta64(str, str)",9
numpy.ndarray * pandas.core.arrays.datetimes.DatetimeArray,1
numpy.ndarray / pandas.core.arrays.datetimes.DatetimeArray,1
pandas.core.series.Series / numpy.ndarray,7
numpy.ndarray / pandas.core.series.Series,6
numpy.int64 / pandas.core.arrays.datetimes.DatetimeArray,1
numpy.dtype(int),2
pandas.core.indexes.datetimes.DatetimeIndex -= numpy.ndarray,2
pandas.core.indexes.datetimes.DatetimeIndex += numpy.ndarray,2
numpy.ndarray -= pandas.core.indexes.datetimes.DatetimeIndex,1
pandas.core.indexes.datetimes.DatetimeIndex + numpy.datetime64,1
numpy.datetime64 + pandas.core.indexes.datetimes.DatetimeIndex,1
pandas.core.series.Series + numpy.datetime64,2
numpy.datetime64 + pandas.core.series.Series,7
pandas.core.frame.DataFrame + numpy.datetime64,5
numpy.datetime64 + pandas.core.frame.DataFrame,3
Type[numpy.datetime64].__name__,4
"numpy.ndim(a=list[Union[float, str]])",2
numpy.sum(a=list[numpy.timedelta64]),1
numpy.ndarray[tuple[numpy.ndarray]] = numpy.timedelta64,1
"numpy.add(pandas.core.indexes.datetimes.DatetimeIndex, numpy.timedelta64)",1
"numpy.subtract(pandas.core.indexes.datetimes.DatetimeIndex, numpy.timedelta64)",1
numpy.array(list[numpy.timedelta64]),12
"numpy.add(pandas.core.indexes.datetimes.DatetimeIndex, numpy.ndarray)",1
"numpy.ndarray[slilist[Union[pandas.tseries.offsets.Day, pandas.tseries.offsets.MonthEnd]]e[NoneType, NoneType, NoneType]] = list[Union[pandas.tseries.offsets.Day, pandas.tseries.offsets.MonthEnd]]",1
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas.tseries.offsets.MonthEnd]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas.tseries.offsets.MonthEnd]]",1
"numpy.array(list[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas.tseries.offsets.MonthEnd]])",1
numpy.array(list[list[pandas.tseries.offsets.Day]]),2
numpy.ndim(a=numpy.int64),2
numpy.asarray(a=numpy.int64),4
pandas.core.indexes.numeric.Float64Index == numpy.float64,4
pandas.core.indexes.numeric.Int64Index == numpy.int64,4
numpy.asarray(a=int),12
"numpy.ndarray[slibuiltins.rangee[NoneType, NoneType, NoneType]] = builtins.range",1
numpy.asarray(a=numpy.bool_),2
"numpy.array(list[Union[builtins.bool, pandas._libs.missing.NAType]])",1
numpy.asarray(a=pandas._libs.missing.NAType),2
"numpy.round_(a=float, decimals=int)",3
pandas.core.dtypes.dtypes.DatetimeTZDtype == Type[numpy.object_],2
"numpy.empty(tuple[int], dtype=numpy.dtype)",2
numpy.int64 == pandas._libs.tslibs.timedeltas.Timedelta,1
"numpy.ndarray[slilist[Union[float, int, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[float, int, pandas._libs.tslibs.timestamps.Timestamp]]",1
"numpy.asarray(a=tuple[int, float, pandas._libs.tslibs.timestamps.Timestamp, float], dtype=NoneType)",1
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp, str]]",1
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timedeltas.Timedelta, str, pandas._libs.tslibs.nattype.NaTType], dtype=NoneType)",1
"numpy.ndarray[slilist[pandas._libs.interval.Interval]e[NoneType, NoneType, NoneType]] = list[pandas._libs.interval.Interval]",1
"numpy.ndarray[slituple[pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval]e[NoneType, NoneType, NoneType]] = tuple[pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval]",1
"numpy.asarray(a=tuple[pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval], dtype=NoneType)",1
"numpy.asarray(a=list[NoneType], dtype=NoneType)",1
"numpy.asarray(a=list[float], dtype=NoneType)",3
"numpy.asarray(a=list[pandas._libs.tslibs.nattype.NaTType], dtype=NoneType)",1
"numpy.ndarray[slilist[pandas._libs.missing.NAType]e[NoneType, NoneType, NoneType]] = list[pandas._libs.missing.NAType]",1
"numpy.asarray(a=list[pandas._libs.missing.NAType], dtype=NoneType)",1
"numpy.array(list[Union[builtins.bool, numpy.bool_]])",1
"numpy.asarray(a=pandas.core.arrays.string_.StringArray, dtype=str)",1
pandas.core.arrays.interval.IntervalArray == numpy.ndarray,1
numpy.float64 > pandas.core.series.Series,1
int / numpy.ndarray,3
pandas.core.indexes.range.RangeIndex * numpy.ndarray,1
numpy.ndarray * pandas.core.indexes.numeric.Int64Index,2
numpy.ndarray * pandas.core.series.Series,4
pandas.core.arrays.timedeltas.TimedeltaArray * numpy.ndarray,5
"numpy.array(pandas.core.indexes.timedeltas.TimedeltaIndex, copy=NoneType, dtype=builtins.bool)",1
numpy.ndarray * pandas.core.arrays.timedeltas.TimedeltaArray,5
pandas.core.series.Series * numpy.ndarray,4
pandas.core.indexes.numeric.Int64Index * numpy.ndarray,3
pandas.core.indexes.numeric.UInt64Index * numpy.ndarray,2
numpy.ndarray * pandas.core.indexes.numeric.UInt64Index,1
numpy.ndarray * pandas.core.indexes.numeric.Float64Index,1
pandas.core.indexes.numeric.Float64Index * numpy.ndarray,2
numpy.ndarray / pandas.core.indexes.range.RangeIndex,1
pandas.core.indexes.range.RangeIndex / numpy.ndarray,2
pandas.core.indexes.range.RangeIndex // numpy.ndarray,2
numpy.ndarray // numpy.ndarray,2
numpy.ndarray / pandas.core.arrays.timedeltas.TimedeltaArray,7
numpy.ndarray // pandas.core.arrays.timedeltas.TimedeltaArray,1
pandas.core.arrays.timedeltas.TimedeltaArray / numpy.ndarray,4
numpy.ndarray // pandas.core.series.Series,2
pandas.core.arrays.timedeltas.TimedeltaArray // numpy.ndarray,1
pandas.core.indexes.numeric.Int64Index / numpy.ndarray,2
pandas.core.indexes.numeric.Int64Index // numpy.ndarray,3
pandas.core.series.Series // numpy.ndarray,2
numpy.ndarray / pandas.core.indexes.numeric.Int64Index,1
numpy.ndarray // pandas.core.indexes.numeric.Int64Index,1
pandas.core.indexes.numeric.UInt64Index / numpy.ndarray,2
pandas.core.indexes.numeric.UInt64Index // numpy.ndarray,2
numpy.ndarray / pandas.core.indexes.numeric.UInt64Index,1
numpy.ndarray // pandas.core.indexes.numeric.UInt64Index,1
numpy.ndarray // pandas.core.indexes.numeric.Float64Index,1
pandas.core.indexes.numeric.Float64Index / numpy.ndarray,2
numpy.ndarray / pandas.core.indexes.numeric.Float64Index,1
pandas.core.indexes.numeric.Float64Index // numpy.ndarray,2
pandas.core.indexes.numeric.Float64Index * numpy.timedelta64,1
numpy.timedelta64 * pandas.core.series.Series,3
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta * numpy.ndarray,2
pandas.core.frame.DataFrame * numpy.timedelta64,2
numpy.timedelta64 * pandas.core.frame.DataFrame,3
numpy.asarray(a=pandas.core.indexes.numeric.UInt64Index),8
pandas.core.series.Series * numpy.timedelta64,3
numpy.timedelta64 * pandas.core.indexes.range.RangeIndex,1
numpy.timedelta64 * pandas.core.indexes.numeric.Int64Index,1
pandas.tseries.offsets.Day / numpy.ndarray,1
pandas.tseries.offsets.Hour / numpy.ndarray,1
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta / numpy.ndarray,3
pandas.core.indexes.numeric.Float64Index / numpy.timedelta64,1
numpy.timedelta64 / pandas.core.series.Series,6
pandas.core.series.Series / numpy.timedelta64,4
pandas.core.frame.DataFrame / numpy.timedelta64,4
numpy.timedelta64 / pandas.core.indexes.numeric.Int64Index,2
pandas.core.indexes.numeric.Int64Index / numpy.timedelta64,1
numpy.timedelta64 / pandas.core.frame.DataFrame,4
numpy.timedelta64 / pandas.core.indexes.numeric.UInt64Index,1
pandas.core.indexes.numeric.UInt64Index / numpy.timedelta64,1
numpy.timedelta64 / pandas.core.indexes.numeric.Float64Index,1
numpy.timedelta64 / pandas.core.indexes.range.RangeIndex,1
pandas.core.indexes.range.RangeIndex / numpy.timedelta64,1
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta - numpy.ndarray,3
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta + numpy.ndarray,3
pandas.core.indexes.numeric.Float64Index + numpy.timedelta64,1
numpy.timedelta64 + pandas.core.indexes.numeric.Float64Index,1
numpy.timedelta64 - pandas.core.indexes.numeric.Float64Index,1
pandas.core.indexes.numeric.Float64Index - numpy.timedelta64,1
pandas.core.arrays.timedeltas.TimedeltaArray + numpy.ndarray,9
pandas.core.arrays.timedeltas.TimedeltaArray - numpy.ndarray,10
pandas.tseries.offsets.Minute + numpy.ndarray,1
pandas.tseries.offsets.Minute - numpy.ndarray,1
pandas.tseries.offsets.Second + numpy.ndarray,1
numpy.timedelta64 + pandas.core.indexes.numeric.Int64Index,2
pandas.core.indexes.numeric.Int64Index - numpy.timedelta64,1
numpy.timedelta64 - pandas.core.indexes.numeric.Int64Index,2
pandas.core.indexes.numeric.Int64Index + numpy.timedelta64,1
pandas.core.indexes.numeric.UInt64Index + numpy.timedelta64,1
numpy.timedelta64 + pandas.core.indexes.numeric.UInt64Index,1
pandas.core.indexes.numeric.UInt64Index - numpy.timedelta64,1
numpy.timedelta64 - pandas.core.indexes.numeric.UInt64Index,1
pandas.core.indexes.range.RangeIndex + numpy.timedelta64,1
numpy.timedelta64 + pandas.core.indexes.range.RangeIndex,1
pandas.core.indexes.range.RangeIndex - numpy.timedelta64,1
numpy.timedelta64 - pandas.core.indexes.range.RangeIndex,1
numpy.dtype(pandas.tseries.offsets.Minute),1
datetime.datetime + numpy.ndarray,1
datetime.datetime - numpy.ndarray,1
pandas.core.indexes.numeric.Float64Index + numpy.datetime64,1
numpy.datetime64 + pandas.core.indexes.numeric.Float64Index,1
pandas.core.indexes.numeric.Float64Index - numpy.datetime64,1
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timestamps.Timestamp - numpy.ndarray,3
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timestamps.Timestamp + numpy.ndarray,2
numpy.datetime64 + pandas.core.indexes.numeric.Int64Index,2
pandas.core.indexes.numeric.UInt64Index + numpy.datetime64,1
pandas.core.indexes.numeric.UInt64Index - numpy.datetime64,1
numpy.datetime64 - pandas.core.indexes.numeric.UInt64Index,1
numpy.dtype(datetime.datetime),1
pandas.core.indexes.range.RangeIndex + numpy.datetime64,1
numpy.datetime64 + pandas.core.indexes.range.RangeIndex,1
numpy.datetime64 + int,1
numpy.datetime64 - int,1
int == numpy.datetime64,1
numpy.dtype(pandas._libs.tslibs.nattype.NaTType),1
pandas._linumpy.ndarrays.tslinumpy.ndarrays.nattype.NaTType + numpy.ndarray,1
pandas._linumpy.ndarrays.tslinumpy.ndarrays.nattype.NaTType - numpy.ndarray,1
numpy.signbit(numpy.ndarray),3
numpy.array(pandas.core.indexes.numeric.Int64Index),11
numpy.array(pandas.core.indexes.numeric.UInt64Index),9
numpy.signbit,1
numpy.uint64.dtype,5
numpy.bool_.all,1
numpy.array(int),20
numpy.array(numpy.int64),4
numpy.numpy.ndarrayool_ & numpy.ndarray,4
~numpy.bool_,1
pandas.core.indexes.numeric.Int64Index // numpy.int64,1
numpy.array(numpy.uint64),2
pandas.core.indexes.numeric.Int64Index // numpy.uint64,1
numpy.array(numpy.float64),3
pandas.core.indexes.numeric.Int64Index // numpy.float64,1
pandas.core.series.Series % numpy.ndarray,1
pandas.core.indexes.numeric.Float64Index % numpy.ndarray,1
pandas.core.indexes.range.RangeIndex % numpy.ndarray,1
pandas.core.indexes.numeric.Int64Index % numpy.ndarray,1
pandas.core.indexes.numeric.UInt64Index % numpy.ndarray,1
numpy.uint64 != int,1
"numpy.ndarray[slifloate[int, int, NoneType]] = float",7
numpy.ndarray % numpy.ndarray,3
"numpy.ndarray[slilist[decimal.Decimal]e[NoneType, NoneType, NoneType]] = list[decimal.Decimal]",2
numpy.array(decimal.Decimal),1
numpy.array(pandas.core.indexes.range.RangeIndex),5
"numpy.array(int, dtype=str)",4
numpy.ndarray + float,19
float ** numpy.ndarray,1
numpy.ndarray * float,13
pandas.core.frame.DataFrame / numpy.ndarray,5
numpy.ndarray * pandas.core.frame.DataFrame,3
numpy.int64 - numpy.ndarray,1
numpy.ndarray / float,12
float - numpy.ndarray,2
int % numpy.ndarray,1
"numpy.empty(tuple[int], dtype=str, order=Type[numpy.float64])",1
float == numpy.float64,15
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=float)",2
"numpy.empty(tuple[int, int], dtype=Type[builtins.float])",2
numpy.float64 // numpy.float64,1
numpy.float64 ** numpy.float64,1
numpy.float64 % numpy.float64,1
"numpy.remainder(numpy.ndarray, int)",1
"numpy.floor_divide(numpy.ndarray, int)",1
int + numpy.ndarray,19
numpy.dtype.base,1
float - numpy.float64,1
float / numpy.float64,3
float // numpy.float64,1
float ** numpy.float64,1
float % numpy.float64,1
int + numpy.float64,3
int - numpy.float64,3
int / numpy.float64,4
int // numpy.ndarray,1
int // numpy.float64,1
numpy.int64 ** pandas.core.series.Series,1
numpy.int64 ** numpy.ndarray,1
numpy.int64 ** numpy.float64,1
int % numpy.float64,1
"numpy.ndarray[slilist[numpy.bool_]e[NoneType, NoneType, NoneType]] = list[numpy.bool_]",1
numpy.sin(pandas.core.indexes.numeric.UInt64Index),1
numpy.sin(numpy.ndarray),2
"numpy.array(numpy.ndarray, copy=Type[numpy.float64], dtype=builtins.bool)",2
numpy.sin(pandas.core.indexes.numeric.Float64Index),1
numpy.sqrt(pandas.core.indexes.numeric.Int64Index),2
"numpy.true_divide(pandas.core.indexes.numeric.UInt64Index, float)",1
"numpy.true_divide(pandas.core.indexes.numeric.Float64Index, float)",1
"numpy.true_divide(pandas.core.series.Series, float)",1
numpy.modf(pandas.core.indexes.numeric.Int64Index),1
numpy.add,7
"numpy.ufunc.at(numpy.ufunc, numpy.ndarray, list[int], int)",1
float + numpy.ndarray,2
float / numpy.ndarray,1
float // numpy.ndarray,1
"numpy.issubdtype(arg1=Type[numpy.float64], arg2=Type[numpy.integer])",1
numpy.ndarray ** numpy.ndarray,2
numpy.ndarray + numpy.int64,1
pandas.core.indexes.numeric.Int64Index + numpy.int64,1
pandas.core.indexes.numeric.Int64Index - numpy.int64,1
numpy.ndarray - numpy.int64,3
pandas.core.indexes.numeric.Float64Index + numpy.float64,1
numpy.ndarray + numpy.float64,2
pandas.core.indexes.numeric.Float64Index - numpy.float64,1
"numpy.ndarray[slilist[Union[list[Union[float, int]], numpy.ndarray]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[float, int]], numpy.ndarray]]",1
"numpy.roll(a=numpy.ndarray, axis=int, shift=numpy.ndarray)",1
"numpy.ndarray[tuple[slifloate[NoneType, int, NoneType]]] = float",2
numpy.ndarray + pandas.core.indexes.base.Index,1
numpy.int64 + numpy.ndarray,1
"numpy.array(pandas.core.indexes.base.Index, copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.array(int, dtype=Type[numpy.int64])",1
numpy.ndarray - str,1
numpy.ndarray - pandas.core.indexes.base.Index,2
list[str] - numpy.ndarray,1
"numpy.array(list[Union[int, str]])",2
numpy.array(list[decimal.Decimal]),2
str - numpy.ndarray,1
"numpy.array(list[datetime.date], dtype=Type[builtins.object])",2
numpy.array(pandas._libs.tslibs.period.Period),1
numpy.ndarray == pandas.core.indexes.period.PeriodIndex,1
pandas.core.indexes.period.PeriodIndex != numpy.ndarray,2
pandas.core.indexes.period.PeriodIndex <= numpy.ndarray,3
numpy.ndarray > pandas.core.indexes.period.PeriodIndex,1
numpy.ndarray >= pandas.core.indexes.period.PeriodIndex,1
pandas.core.indexes.period.PeriodIndex == numpy.ndarray,4
numpy.ndarray != pandas.core.indexes.period.PeriodIndex,1
pandas.core.indexes.period.PeriodIndex > numpy.ndarray,3
pandas.core.indexes.period.PeriodIndex >= numpy.ndarray,2
numpy.ndarray <= pandas.core.indexes.period.PeriodIndex,1
pandas.core.series.Series != numpy.ndarray,1
pandas.core.series.Series <= numpy.ndarray,2
numpy.ndarray > pandas.core.series.Series,1
pandas.core.frame.DataFrame > numpy.ndarray,3
Type[numpy.int64].__name__,2
numpy.ndarray <= pandas.core.frame.DataFrame,1
numpy.ndarray >= pandas.core.frame.DataFrame,1
pandas.core.frame.DataFrame != numpy.ndarray,3
pandas.core.frame.DataFrame <= numpy.ndarray,3
Type[numpy.float64].__name__,3
numpy.ndarray > pandas.core.frame.DataFrame,1
numpy.ndarray == pandas.core.arrays.period.PeriodArray,1
pandas.core.arrays.period.PeriodArray != numpy.ndarray,2
pandas.core.arrays.period.PeriodArray <= numpy.ndarray,2
numpy.ndarray > pandas.core.arrays.period.PeriodArray,1
numpy.ndarray >= pandas.core.arrays.period.PeriodArray,1
pandas.core.arrays.period.PeriodArray == numpy.ndarray,3
numpy.ndarray != pandas.core.arrays.period.PeriodArray,1
pandas.core.arrays.period.PeriodArray > numpy.ndarray,2
pandas.core.arrays.period.PeriodArray >= numpy.ndarray,1
numpy.ndarray <= pandas.core.arrays.period.PeriodArray,1
numpy.array(pandas.core.indexes.period.PeriodIndex),9
pandas.core.frame.DataFrame >= numpy.ndarray,2
"numpy.asarray(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]])",1
pandas.tseries.offsets.MonthEnd * numpy.int64,2
numpy.array(list[pandas.tseries.offsets.MonthEnd]),2
"numpy.ndarray[slilist[pandas.tseries.offsets.Day]e[NoneType, NoneType, NoneType]] = list[pandas.tseries.offsets.Day]",1
pandas.tseries.offsets.Day * numpy.int64,2
numpy.array(list[pandas.tseries.offsets.Day]),2
numpy.ndarray[numpy.ndarray] = pandas._libs.tslibs.nattype.NaTType,3
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas.tseries.offsets.Day]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas.tseries.offsets.Day]]",1
pandas.tseries.offsets.Hour * numpy.int64,1
numpy.array(list[pandas.tseries.offsets.Hour]),1
pandas.tseries.offsets.Minute * numpy.int64,1
numpy.array(list[pandas.tseries.offsets.Minute]),1
pandas.tseries.offsets.Second * numpy.int64,1
numpy.array(list[pandas.tseries.offsets.Second]),1
pandas.tseries.offsets.Milli * numpy.int64,1
numpy.array(list[pandas.tseries.offsets.Milli]),1
pandas.tseries.offsets.Micro * numpy.int64,1
numpy.array(list[pandas.tseries.offsets.Micro]),1
pandas.tseries.offsets.Nano * numpy.int64,1
numpy.array(list[pandas.tseries.offsets.Nano]),1
pandas.tseries.offsets.YearEnd * numpy.int64,1
numpy.array(list[pandas.tseries.offsets.YearEnd]),1
pandas.tseries.offsets.QuarterEnd * numpy.int64,1
numpy.array(list[pandas.tseries.offsets.QuarterEnd]),2
pandas.tseries.offsets.Week * numpy.int64,1
numpy.array(list[pandas.tseries.offsets.Week]),1
numpy.ndarray - pandas.core.indexes.period.PeriodIndex,3
pandas.core.arrays.period.PeriodArray - numpy.ndarray,1
numpy.ndarray + pandas.core.arrays.period.PeriodArray,2
numpy.ndarray - pandas.core.arrays.period.PeriodArray,1
numpy.datetime64 - pandas.core.indexes.period.PeriodIndex,1
pandas.core.arrays.period.PeriodArray + numpy.datetime64,1
numpy.datetime64 + pandas.core.arrays.period.PeriodArray,1
pandas.core.arrays.period.PeriodArray - numpy.datetime64,2
numpy.ndarray + pandas.core.indexes.period.PeriodIndex,5
pandas.core.indexes.period.PeriodIndex + numpy.ndarray,7
pandas.core.indexes.period.PeriodIndex - numpy.ndarray,5
"numpy.array(list[Union[pandas.tseries.offsets.Hour, pandas.tseries.offsets.Minute]])",3
numpy.int64 * int,2
-numpy.int64,2
pandas.core.indexes.period.PeriodIndex + numpy.int64,1
numpy.all(a=builtins.bool),2
numpy.dtype(datetime.timedelta),1
pandas.core.indexes.period.PeriodIndex + numpy.timedelta64,7
numpy.timedelta64 + pandas.core.indexes.period.PeriodIndex,3
pandas.core.indexes.period.PeriodIndex - numpy.timedelta64,5
numpy.timedelta64 - pandas.core.indexes.period.PeriodIndex,2
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.period.Period + numpy.timedelta64,7
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.period.Period - numpy.timedelta64,3
pandas.core.indexes.period.PeriodIndex += numpy.timedelta64,4
pandas.core.indexes.period.PeriodIndex -= numpy.timedelta64,3
pandas.core.arrays.period.PeriodArray + numpy.timedelta64,2
"numpy.array(list[pandas._libs.tslibs.nattype.NaTType], dtype=Type[builtins.object])",4
numpy.timedelta64 - pandas.core.arrays.period.PeriodArray,1
numpy.timedelta64 + pandas.core.arrays.period.PeriodArray,1
pandas.core.arrays.period.PeriodArray - numpy.timedelta64,1
pandas.core.arrays.period.PeriodArray + numpy.ndarray,1
"numpy.add(pandas.core.series.Series, str)",1
"numpy.add(pandas.core.series.Series, float)",1
"numpy.add(str, pandas.core.series.Series)",1
"numpy.add(float, pandas.core.series.Series)",1
"numpy.subtract(pandas.core.series.Series, str)",1
"numpy.subtract(float, pandas.core.series.Series)",1
"numpy.add(pandas.core.frame.DataFrame, float)",1
"numpy.add(float, pandas.core.frame.DataFrame)",1
"numpy.subtract(pandas.core.frame.DataFrame, float)",1
"numpy.subtract(float, pandas.core.frame.DataFrame)",1
"numpy.add(pandas.core.arrays.period.PeriodArray, str)",1
"numpy.add(str, pandas.core.arrays.period.PeriodArray)",1
"numpy.subtract(pandas.core.arrays.period.PeriodArray, str)",1
"numpy.subtract(str, pandas.core.arrays.period.PeriodArray)",1
"numpy.add(pandas.core.series.Series, int)",3
"numpy.subtract(pandas.core.series.Series, numpy.ndarray)",1
"numpy.ndarray[slilist[pandas.tseries.offsets.MonthEnd]e[NoneType, NoneType, NoneType]] = list[pandas.tseries.offsets.MonthEnd]",1
numpy.ndim(a=list[float]),3
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas.tseries.offsets.MonthEnd]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas.tseries.offsets.MonthEnd]]",1
pandas.core.frame.DataFrame > numpy.timedelta64,1
pandas.core.arrays.timedeltas.TimedeltaArray > numpy.timedelta64,1
pandas.core.arrays.timedeltas.TimedeltaArray == numpy.ndarray,1
numpy.ndarray == pandas.core.arrays.timedeltas.TimedeltaArray,1
pandas.core.arrays.timedeltas.TimedeltaArray > numpy.ndarray,1
numpy.ndarray <= pandas.core.arrays.timedeltas.TimedeltaArray,1
numpy.ndarray >= pandas.core.arrays.timedeltas.TimedeltaArray,1
pandas.core.arrays.timedeltas.TimedeltaArray != numpy.ndarray,1
numpy.ndarray != pandas.core.arrays.timedeltas.TimedeltaArray,1
pandas.core.arrays.timedeltas.TimedeltaArray <= numpy.ndarray,1
pandas.core.arrays.timedeltas.TimedeltaArray >= numpy.ndarray,2
numpy.ndarray > pandas.core.arrays.timedeltas.TimedeltaArray,1
"numpy.ndim(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]])",1
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]], copy=builtins.bool)",1
numpy.timedelta64 + numpy.timedelta64,3
numpy.ndarray > pandas.core.indexes.timedeltas.TimedeltaIndex,1
pandas.core.indexes.timedeltas.TimedeltaIndex == numpy.ndarray,3
"numpy.multiply(pandas.core.indexes.timedeltas.TimedeltaIndex, int)",1
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, str]], copy=builtins.bool)",1
pandas.core.indexes.timedeltas.TimedeltaIndex += numpy.timedelta64,1
pandas.core.arrays.timedeltas.TimedeltaArray + numpy.timedelta64,3
pandas.core.indexes.timedeltas.TimedeltaIndex -= numpy.timedelta64,1
pandas.core.arrays.timedeltas.TimedeltaArray -= numpy.timedelta64,1
pandas.core.arrays.timedeltas.TimedeltaArray - numpy.timedelta64,1
pandas.core.indexes.timedeltas.TimedeltaIndex + numpy.datetime64,1
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, str]], dtype=Type[builtins.object])",2
"numpy.ndarray[tuple[sliinte[NoneType, int, NoneType]]] = int",2
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta + numpy.timedelta64,1
numpy.timedelta64(datetime.timedelta),2
numpy.datetime64 - pandas.core.indexes.timedeltas.TimedeltaIndex,1
numpy.datetime64 + pandas.core.indexes.timedeltas.TimedeltaIndex,2
pandas.core.arrays.timedeltas.TimedeltaArray + numpy.datetime64,2
numpy.datetime64 + pandas.core.arrays.timedeltas.TimedeltaArray,1
pandas.core.arrays.timedeltas.TimedeltaArray - numpy.datetime64,1
pandas.core.indexes.timedeltas.TimedeltaIndex - numpy.ndarray,5
pandas.core.indexes.timedeltas.TimedeltaIndex + numpy.ndarray,6
numpy.ndarray + pandas.core.arrays.timedeltas.TimedeltaArray,5
numpy.ndarray + numpy.datetime64,1
"numpy.broadcast_to(array=numpy.datetime64, shape=tuple[int])",1
"numpy.broadcast_to(array=numpy.datetime64, shape=tuple[int, int])",1
numpy.int64 + pandas.core.arrays.timedeltas.TimedeltaArray,1
pandas.core.arrays.timedeltas.TimedeltaArray + numpy.int64,1
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.float])",26
numpy.ndarray + pandas.core.indexes.timedeltas.TimedeltaIndex,2
numpy.ndarray - pandas.core.indexes.timedeltas.TimedeltaIndex,4
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.int])",13
numpy.ndarray - pandas.core.arrays.timedeltas.TimedeltaArray,5
"numpy.find_common_type(array_types=list[numpy.dtype], scalar_types=list)",3
pandas.core.indexes.timedeltas.TimedeltaIndex += numpy.ndarray,1
numpy.int64 - pandas.core.arrays.timedeltas.TimedeltaArray,1
pandas.core.frame.DataFrame -= numpy.ndarray,1
pandas.core.arrays.timedeltas.TimedeltaArray -= numpy.ndarray,1
pandas.core.indexes.timedeltas.TimedeltaIndex + numpy.timedelta64,2
pandas.core.indexes.timedeltas.TimedeltaIndex - numpy.timedelta64,1
numpy.timedelta64 - pandas.core.indexes.timedeltas.TimedeltaIndex,1
numpy.timedelta64 - pandas.core.arrays.timedeltas.TimedeltaArray,1
"numpy.zeros(tuple[int, int], dtype=Type[numpy.int64])",1
numpy.timedelta64 + pandas.core.arrays.timedeltas.TimedeltaArray,1
numpy.timedelta64 + pandas.core.indexes.timedeltas.TimedeltaIndex,1
numpy.dtype(pandas.tseries.offsets.Hour),1
"numpy.ndarray[slilist[Union[pandas.tseries.offsets.Hour, pandas.tseries.offsets.Minute]]e[NoneType, NoneType, NoneType]] = list[Union[pandas.tseries.offsets.Hour, pandas.tseries.offsets.Minute]]",1
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]]",1
"numpy.array(list[Union[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp, pandas.tseries.offsets.Day]])",1
numpy.ndarray * pandas.tseries.offsets.Hour,1
numpy.ndarray * pandas.tseries.offsets.Minute,2
numpy.ndarray * datetime.timedelta,1
numpy.ndarray * pandas._libs.tslibs.timedeltas.Timedelta,4
pandas.core.indexes.timedeltas.TimedeltaIndex * numpy.timedelta64,1
pandas.core.arrays.timedeltas.TimedeltaArray * numpy.timedelta64,1
numpy.ndarray * numpy.timedelta64,2
pandas.core.indexes.timedeltas.TimedeltaIndex * numpy.ndarray,2
pandas.core.frame.DataFrame * numpy.ndarray,3
numpy.ndarray / pandas._libs.tslibs.nattype.NaTType,1
pandas.core.indexes.timedeltas.TimedeltaIndex / numpy.timedelta64,4
pandas.core.arrays.timedeltas.TimedeltaArray / numpy.timedelta64,4
numpy.ndarray / pandas._libs.tslibs.timedeltas.Timedelta,5
numpy.timedelta64 / pandas.core.indexes.timedeltas.TimedeltaIndex,3
numpy.timedelta64 / pandas.core.arrays.timedeltas.TimedeltaArray,2
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta / numpy.timedelta64,1
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.nattype.NaTType / numpy.timedelta64,1
"numpy.asarray(a=list[Union[float, int]], dtype=NoneType)",2
pandas.core.indexes.timedeltas.TimedeltaIndex / numpy.ndarray,5
numpy.ndarray / pandas.core.frame.DataFrame,4
numpy.ndarray / pandas.core.indexes.timedeltas.TimedeltaIndex,4
pandas.core.indexes.timedeltas.TimedeltaIndex // numpy.timedelta64,2
pandas.core.series.Series // numpy.timedelta64,2
pandas.core.frame.DataFrame // numpy.timedelta64,1
pandas.core.arrays.timedeltas.TimedeltaArray // numpy.timedelta64,2
pandas.core.indexes.timedeltas.TimedeltaIndex % numpy.timedelta64,1
pandas.core.frame.DataFrame % numpy.timedelta64,1
pandas.core.arrays.timedeltas.TimedeltaArray % numpy.timedelta64,1
numpy.timedelta64 % pandas.core.indexes.timedeltas.TimedeltaIndex,1
numpy.timedelta64 // pandas.core.indexes.timedeltas.TimedeltaIndex,1
numpy.timedelta64 % pandas.core.series.Series,1
numpy.timedelta64 % pandas.core.frame.DataFrame,1
numpy.timedelta64 % pandas.core.arrays.timedeltas.TimedeltaArray,1
numpy.timedelta64 // pandas.core.arrays.timedeltas.TimedeltaArray,1
pandas.core.indexes.timedeltas.TimedeltaIndex * numpy.int64,2
pandas.core.series.Series * numpy.int64,5
numpy.int64 * pandas.core.series.Series,1
numpy.int64 * pandas.core.arrays.timedeltas.TimedeltaArray,1
pandas.core.frame.DataFrame * numpy.int64,1
numpy.int64 * pandas.core.frame.DataFrame,1
pandas.core.arrays.timedeltas.TimedeltaArray * numpy.int64,2
numpy.int64 / pandas.core.arrays.timedeltas.TimedeltaArray,1
numpy.float64 / pandas.core.arrays.timedeltas.TimedeltaArray,1
numpy.ndarray / numpy.int64,1
numpy.ndarray * pandas.core.indexes.timedeltas.TimedeltaIndex,1
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]])",2
pandas._linumpy.float32s.tslinumpy.float32s.timedeltas.Timedelta / numpy.float32,2
pandas._linumpy.float32s.tslinumpy.float32s.nattype.NaTType / numpy.float32,2
pandas._linumpy.uint8s.tslinumpy.uint8s.timedeltas.Timedelta / numpy.uint8,2
pandas._linumpy.uint8s.tslinumpy.uint8s.nattype.NaTType / numpy.uint8,2
pandas._linumpy.uint16s.tslinumpy.uint16s.timedeltas.Timedelta / numpy.uint16,2
pandas._linumpy.uint16s.tslinumpy.uint16s.nattype.NaTType / numpy.uint16,2
pandas._linumpy.uint32s.tslinumpy.uint32s.timedeltas.Timedelta / numpy.uint32,2
pandas._linumpy.uint32s.tslinumpy.uint32s.nattype.NaTType / numpy.uint32,2
pandas._linumpy.uint64s.tslinumpy.uint64s.timedeltas.Timedelta / numpy.uint64,2
pandas._linumpy.uint64s.tslinumpy.uint64s.nattype.NaTType / numpy.uint64,2
pandas._linumpy.int8s.tslinumpy.int8s.timedeltas.Timedelta / numpy.int8,2
pandas._linumpy.int8s.tslinumpy.int8s.nattype.NaTType / numpy.int8,2
pandas._linumpy.int16s.tslinumpy.int16s.timedeltas.Timedelta / numpy.int16,2
pandas._linumpy.int16s.tslinumpy.int16s.nattype.NaTType / numpy.int16,2
pandas._linumpy.int32s.tslinumpy.int32s.timedeltas.Timedelta / numpy.int32,2
pandas._linumpy.int32s.tslinumpy.int32s.nattype.NaTType / numpy.int32,2
pandas._linumpy.int64s.tslinumpy.int64s.timedeltas.Timedelta / numpy.int64,2
pandas._linumpy.int64s.tslinumpy.int64s.nattype.NaTType / numpy.int64,2
pandas._linumpy.float64s.tslinumpy.float64s.timedeltas.Timedelta / numpy.float64,4
pandas._linumpy.float64s.tslinumpy.float64s.nattype.NaTType / numpy.float64,1
"numpy.array(list[Union[float, int]], copy=numpy.dtype, dtype=builtins.bool)",2
numpy.timedelta64 ** pandas.core.indexes.timedeltas.TimedeltaIndex,1
numpy.timedelta64 ** pandas.core.frame.DataFrame,1
pandas.core.frame.DataFrame ** numpy.timedelta64,1
numpy.timedelta64 ** pandas.core.arrays.timedeltas.TimedeltaArray,1
"numpy.array(pandas.core.arrays.numpy_.PandasArray, copy=Type[builtins.object], dtype=builtins.bool)",1
"numpy.asarray(a=list[pandas._libs.tslibs.period.Period], dtype=Type[builtins.object])",1
numpy.ndim(a=list[int]),3
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=Type[builtins.object], dtype=builtins.bool)",1
"numpy.result_type(numpy.dtype, Type[builtins.bool])",1
"numpy.full(dtype=numpy.dtype, fill_value=builtins.bool, shape=tuple[int])",2
numpy.asarray(a=pandas.core.arrays.sparse.array.SparseArray),21
numpy.full,5
"numpy.arange(int, dtype=Type[numpy.int32])",2
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.int32])",1
"numpy.result_type(numpy.ndarray, Type[builtins.int])",1
numpy.ndarray.item(numpy.ndarray),8
"numpy.asarray(a=list[decimal.Decimal], dtype=Type[builtins.object])",1
"numpy.asarray(a=pandas.tests.extension.decimal.array.DecimalArray, dtype=Type[builtins.object])",3
numpy.shares_memory,5
"numpy.shares_memory(numpy.ndarray, numpy.ndarray)",7
numpy.asarray(a=list[datetime.datetime]),2
numpy.ndim(a=list[datetime.datetime]),1
"numpy.ndarray[slilist[Union[NoneType, int]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, int]]",1
"numpy.ndarray[slilist[Union[int, pandas._libs.missing.NAType]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.missing.NAType]]",1
"numpy.array(list[Union[int, pandas._libs.missing.NAType]], copy=builtins.bool)",2
"numpy.asarray(a=list[builtins.bool], dtype=Type[builtins.object])",2
"numpy.asarray(a=list[pandas._libs.tslibs.period.Period], dtype=NoneType)",2
"numpy.asarray(a=list[list[int]], dtype=str)",1
"numpy.asarray(a=pandas.tests.arrays.test_array.DecimalArray2, dtype=Type[builtins.object])",1
"numpy.ndarray.searchsorted(numpy.ndarray, str, side=NoneType, sorter=str)",1
"numpy.asarray(a=list[int], dtype=Type[builtins.float])",1
"numpy.ndarray.searchsorted(numpy.ndarray, int, side=NoneType, sorter=str)",2
"numpy.ndarray.searchsorted(numpy.ndarray, list[int], side=NoneType, sorter=str)",1
numpy.iinfo(int_type=Type[numpy.uint16]),1
numpy.uint16(int),4
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint16, side=NoneType, sorter=str)",2
numpy.iinfo(int_type=Type[numpy.uint64]),3
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint64, side=NoneType, sorter=str)",2
numpy.iinfo(int_type=Type[numpy.int8]),2
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int8, side=NoneType, sorter=str)",3
numpy.iinfo(int_type=Type[numpy.int32]),2
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int32, side=NoneType, sorter=str)",2
"numpy.asarray(a=list[int], dtype=Type[builtins.int])",1
"numpy.ndarray.argsort(numpy.ndarray, kind=NoneType)",1
"numpy.ndarray.searchsorted(numpy.ndarray, list[int], side=numpy.ndarray, sorter=str)",1
"numpy.random.mtrand.RandomState.shuffle(numpy.random.mtrand.RandomState, numpy.ndarray)",3
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.ndarray, side=NoneType, sorter=str)",3
"numpy.ndarray[tuple[slice[NoneType, int, NoneType], int]]",2
"numpy.ndarray[slinumpy.ndarraye[NoneType, int, NoneType]] = numpy.ndarray",7
"numpy.asarray(a=pandas.core.arrays.integer.IntegerArray, dtype=Type[numpy.int64])",1
numpy.dtype == pandas.core.arrays.string_.StringDtype,1
"numpy.ndarray[slinumpy.ndarraye[int, NoneType, NoneType]] = numpy.ndarray",2
"numpy.array(pandas.core.arrays.datetimes.DatetimeArray, copy=builtins.bool)",2
"numpy.array(pandas.core.arrays.datetimes.DatetimeArray, copy=str, dtype=builtins.bool)",4
"numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray, dtype=str)",4
"numpy.may_share_memory(pandas.core.arrays.datetimes.DatetimeArray, numpy.ndarray)",1
"numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray, dtype=Type[builtins.str])",1
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.str])",11
"numpy.array(pandas.core.arrays.datetimes.DatetimeArray, dtype=str)",4
"numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray, dtype=Type[builtins.object])",3
numpy.may_share_memory,1
numpy.array(list[pandas._libs.tslibs.timestamps.Timestamp]),13
"numpy.array(pandas.core.arrays.datetimes.DatetimeArray, dtype=Type[builtins.object])",1
"numpy.array(pandas.core.indexes.datetimes.DatetimeIndex, dtype=Type[builtins.object])",1
"numpy.array(pandas.core.arrays.datetimes.DatetimeArray, dtype=Type[numpy.int64])",1
numpy.float64 / int,4
"numpy.array(numpy.ndarray, dtype=numpy.dtype)",2
"numpy.array(pandas.core.indexes.numeric.Int64Index, dtype=numpy.dtype)",1
numpy.ndarray[int] = numpy.int64,6
"numpy.array(pandas.core.arrays.string_.StringArray, copy=Type[numpy.object_], dtype=builtins.bool)",1
"numpy.array(pandas.core.arrays.timedeltas.TimedeltaArray, copy=str, dtype=builtins.bool)",1
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]], dtype=Type[builtins.object])",2
"numpy.asarray(a=pandas.core.arrays.timedeltas.TimedeltaArray, dtype=str)",2
"numpy.may_share_memory(pandas.core.arrays.timedeltas.TimedeltaArray, numpy.ndarray)",1
"numpy.asarray(a=pandas.core.arrays.timedeltas.TimedeltaArray, dtype=Type[builtins.str])",1
"numpy.asarray(a=pandas.core.arrays.string_.StringArray, dtype=Type[builtins.object])",2
numpy.roll,1
"numpy.asarray(a=pandas.core.arrays.period.PeriodArray, dtype=str)",4
"numpy.asarray(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]], dtype=Type[builtins.object])",2
numpy.isnan(numpy.datetime64),1
numpy.ndarray[numpy.ndarray] = numpy.datetime64,2
numpy.datetime64 == numpy.datetime64,3
numpy.timedelta64 == numpy.timedelta64,2
numpy.ndarray[numpy.ndarray] = numpy.timedelta64,2
"numpy.array(list[int], dtype=numpy.dtype)",40
numpy.array(pandas.core.arrays.datetimes.DatetimeArray),3
numpy.array(pandas.core.indexes.timedeltas.TimedeltaIndex),7
numpy.array(pandas.core.arrays.timedeltas.TimedeltaArray),2
numpy.array(pandas.core.arrays.period.PeriodArray),3
numpy.ndarray.squeeze(numpy.ndarray),11
"numpy.array(pandas.core.arrays.integer.IntegerArray, dtype=Type[numpy.object_])",1
"numpy.ones(dtype=Type[builtins.bool], shape=int)",9
"numpy.ndarray[slinumpy.datetime64e[NoneType, NoneType, NoneType]] = numpy.datetime64",1
numpy.ndarray.repeat,1
"numpy.ndarray.repeat(numpy.ndarray, list[int], axis=NoneType)",1
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]], dtype=Type[builtins.object])",1
numpy.ndim(a=list),2
numpy.ndarray[int] = str,10
numpy.ndarray[int] = numpy.complex128,2
numpy.ndarray[int] = numpy.bool_,7
"numpy.add(pandas.core.arrays.numpy_.PandasArray, int)",1
"numpy.add(numpy.ndarray, int)",3
"numpy.array(list[str], dtype=NoneType)",1
"numpy.asarray(a=list[Union[NoneType, pandas._libs.tslibs.period.Period]])",1
"numpy.asarray(a=list[Union[NoneType, str]])",2
"numpy.array(list[int], copy=str, dtype=builtins.bool)",1
numpy.sum(a=pandas.core.arrays.timedeltas.TimedeltaArray),2
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta == numpy.timedelta64,29
"numpy.array(list[Union[int, str]], dtype=str)",6
numpy.fabs(float),1
numpy.sum(a=pandas.core.indexes.timedeltas.TimedeltaIndex),1
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timestamps.Timestamp * numpy.ndarray,1
str // numpy.ndarray,1
str / numpy.ndarray,1
str ** numpy.ndarray,1
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timestamps.Timestamp % numpy.ndarray,1
numpy.ndarray % pandas.core.arrays.boolean.BooleanArray,1
"numpy.asarray(a=list[pandas._libs.missing.NAType], dtype=Type[builtins.object])",1
numpy.ndarray[numpy.ndarray] = numpy.bool_,4
numpy.dtype == pandas.core.arrays.boolean.BooleanDtype,1
"numpy.asarray(a=list[NoneType], dtype=Type[builtins.object])",2
numpy.ones_like(a=numpy.ndarray),3
"numpy.asarray(a=list[Union[dict, float]], dtype=Type[builtins.object])",1
"numpy.array(list[Union[NoneType, int]])",2
numpy.array(pandas.core.arrays.boolean.BooleanArray),3
"numpy.array(pandas.core.arrays.boolean.BooleanArray, dtype=str)",2
"numpy.array(list[Union[builtins.bool, pandas._libs.missing.NAType]], dtype=str)",2
numpy.ndarray[numpy.ndarray] = NoneType,3
"numpy.array(list[Union[NoneType, builtins.bool]], dtype=str)",1
"numpy.add(pandas.core.arrays.boolean.BooleanArray, pandas.core.arrays.boolean.BooleanArray)",1
"numpy.add(numpy.ndarray, numpy.ndarray)",8
"numpy.add(pandas.core.series.Series, pandas.core.arrays.boolean.BooleanArray)",1
"numpy.add(pandas.core.arrays.boolean.BooleanArray, numpy.ndarray)",1
"numpy.add(numpy.ndarray, pandas.core.arrays.boolean.BooleanArray)",1
numpy.dtype(builtins.bool),1
"numpy.add(builtins.bool, pandas.core.arrays.boolean.BooleanArray)",1
"numpy.add(pandas.core.arrays.boolean.BooleanArray, str)",1
"numpy.logical_or(numpy.ndarray, numpy.ndarray)",3
"numpy.logical_or(numpy.ndarray, builtins.bool)",1
"numpy.logical_or(builtins.bool, numpy.ndarray)",1
"numpy.logical_and(pandas.core.arrays.boolean.BooleanArray, pandas.core.arrays.boolean.BooleanArray)",1
"numpy.logical_and(pandas.core.series.Series, pandas.core.arrays.boolean.BooleanArray)",1
"numpy.logical_and(pandas.core.arrays.boolean.BooleanArray, numpy.ndarray)",1
"numpy.logical_and(numpy.ndarray, pandas.core.arrays.boolean.BooleanArray)",1
"numpy.logical_and(pandas.core.arrays.boolean.BooleanArray, builtins.bool)",1
"numpy.logical_and(builtins.bool, pandas.core.arrays.boolean.BooleanArray)",1
"numpy.logical_and(pandas.core.arrays.boolean.BooleanArray, str)",1
"numpy.logical_xor(numpy.ndarray, numpy.ndarray)",3
"numpy.logical_xor(numpy.ndarray, builtins.bool)",1
"numpy.logical_xor(builtins.bool, numpy.ndarray)",1
numpy.logical_not(pandas.core.arrays.boolean.BooleanArray),1
"numpy.ufunc.reduce(numpy.ufunc, pandas.core.arrays.boolean.BooleanArray)",1
"numpy.asarray(a=list[Union[builtins.bool, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1
"numpy.ndarray[slipandas.core.series.Seriese[NoneType, int, NoneType]] = pandas.core.series.Series",1
numpy.ndarray ^ numpy.ndarray,5
numpy.ndarray & builtins.bool,4
"numpy.ndarray[slibuiltins.boole[NoneType, NoneType, NoneType]] = builtins.bool",1
numpy.ndarray ^ builtins.bool,1
"numpy.asarray(a=list[builtins.bool], dtype=str)",3
pandas.core.arrays.numpy.bool_oolean.BooleanArray | numpy.bool_,1
numpy.generic.item(numpy.bool_),12
numpy.pandas.core.arrays.boolean.BooleanArrayool_ | pandas.core.arrays.boolean.BooleanArray,1
numpy.pandas.core.arrays.boolean.BooleanArrayool_ & pandas.core.arrays.boolean.BooleanArray,1
pandas.core.arrays.numpy.bool_oolean.BooleanArray ^ numpy.bool_,1
numpy.all(a=numpy.bool_),2
numpy.any,3
numpy.any(a=numpy.bool_),3
numpy.array(list[pandas.core.arrays.boolean.BooleanDtype]),1
numpy.asarray(a=pandas.core.arrays.boolean.BooleanArray),4
"numpy.array(list[Union[NoneType, str]], copy=builtins.bool)",2
"numpy.asarray(a=list[Union[NoneType, str]], dtype=Type[builtins.object])",2
numpy.asarray(a=pandas.core.arrays.categorical.Categorical),20
"numpy.ndarray[tuple[slice[int, NoneType, NoneType]]]",6
numpy.int16,27
numpy.ndarray.nbytes,10
"numpy.ndarray[slilist[Union[numpy.str_, str]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.str_, str]]",1
"numpy.array(list[int], dtype=Type[numpy.int8])",11
"numpy.unique(ar=numpy.ndarray, return_inverse=builtins.bool)",1
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[str], int)",4
"numpy.asanyarray(a=list[int], dtype=Type[numpy.int8])",2
"numpy.array(list[Union[tuple[int, int], tuple[int]]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[tuple[int, int], tuple[int]]]e[NoneType, NoneType, NoneType]] = list[Union[tuple[int, int], tuple[int]]]",1
"numpy.array(list[Union[tuple[pandas._libs.tslibs.timestamps.Timestamp], tuple[str, str]]], dtype=Type[builtins.object])",1
"numpy.array(builtins.range, copy=builtins.bool)",1
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]], copy=builtins.bool)",1
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]], copy=builtins.bool)",2
numpy.str_(str),3
"numpy.asarray(a=list[Union[float, int]])",9
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.int], copy=builtins.bool)",1
"numpy.ndarray[slilist[Union[builtins.complex, int]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, int]]",1
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=Type[builtins.float], dtype=builtins.bool)",1
"numpy.array(pandas.core.arrays.categorical.Categorical, dtype=Type[builtins.object])",1
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=Type[builtins.int], dtype=builtins.bool)",1
numpy.int,2
"numpy.array(pandas.core.arrays.categorical.Categorical, dtype=Type[builtins.float])",1
"numpy.array(list[pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",2
"numpy.array(list[NoneType], copy=builtins.bool)",3
numpy.asanyarray(a=list[builtins.bool]),1
"numpy.array(list[builtins.bool], copy=builtins.bool)",2
"numpy.asarray(a=pandas.core.arrays.categorical.Categorical, dtype=Type[builtins.bool])",1
"numpy.asarray(a=pandas.core.indexes.base.Index, dtype=Type[builtins.bool])",2
"numpy.array(list[Union[NoneType, builtins.bool]], copy=builtins.bool)",1
"numpy.array(pandas.core.indexes.numeric.Int64Index, copy=Type[numpy.float64], dtype=builtins.bool)",1
numpy.ndarray[tuple[numpy.ndarray]],2
numpy.ndarray[tuple[numpy.ndarray]] = numpy.ndarray,3
"numpy.asarray(a=list[Union[int, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1
numpy.ndarray <= str,1
numpy.ndarray >= str,1
numpy.array(str),5
numpy.str_ in pandas.core.indexes.base.Index,2
numpy.array(list[pandas.core.dtypes.dtypes.CategoricalDtype]),1
pandas.core.arrays.categorical.Categorical > numpy.int64,1
numpy.int64 in pandas._libs.index.Int64Engine,1
numpy.int64 <= pandas.core.arrays.categorical.Categorical,1
pandas.core.series.Series > numpy.ndarray,2
numpy.ndarray <= pandas.core.series.Series,2
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.CategoricalDtype]])",1
numpy.log(pandas.core.series.Series),4
numpy.int64 in numpy.ndarray,1
numpy.ndarray.argmax(numpy.ndarray),7
numpy.ndim(a=int),2
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int])",1
"numpy.argsort(a=pandas.core.arrays.categorical.Categorical, kind=str)",2
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int8], casting=builtins.bool, copy=str)",1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int8], copy=builtins.bool)",1
pandas.core.arrays.Type[numpy.object_]oolean.BooleanDtype == Type[numpy.object_],1
numpy.ndarray[numpy.ndarray] = numpy.int8,2
"numpy.array(list[pandas._libs.missing.NAType], copy=builtins.bool)",1
pandas.core.arrays.integer.Int8Dtype == numpy.dtype,1
numpy.ndarray[int] = numpy.int16,1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int16], casting=builtins.bool, copy=str)",1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int16], copy=builtins.bool)",1
numpy.empty(int),3
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int32], casting=builtins.bool, copy=str)",1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.int32], copy=builtins.bool)",1
numpy.ndarray[numpy.ndarray] = numpy.int32,2
pandas.core.arrays.integer.Int32Dtype == numpy.dtype,1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint8], casting=builtins.bool, copy=str)",1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint8], copy=builtins.bool)",1
numpy.ndarray[numpy.ndarray] = numpy.uint8,2
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint16], casting=builtins.bool, copy=str)",1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint16], copy=builtins.bool)",1
numpy.ndarray[numpy.ndarray] = numpy.uint16,2
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint32], casting=builtins.bool, copy=str)",1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint32], copy=builtins.bool)",1
numpy.ndarray[numpy.ndarray] = numpy.uint32,2
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint64], casting=builtins.bool, copy=str)",1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.uint64], copy=builtins.bool)",1
numpy.ndarray[numpy.ndarray] = numpy.uint64,2
numpy.ndarray[numpy.ndarray] = numpy.int16,2
pandas.core.arrays.integer.Int16Dtype == numpy.dtype,1
numpy.ndarray[numpy.ndarray] = numpy.int64,5
numpy.ndarray[int] = numpy.uint16,1
numpy.ndarray[int] = numpy.uint64,1
pandas.core.arrays.integer.UInt8Dtype == numpy.dtype,1
pandas.core.arrays.integer.UInt32Dtype == numpy.dtype,1
"numpy.asarray(a=pandas.core.arrays.boolean.BooleanArray, dtype=NoneType)",1
"numpy.where(numpy.ndarray, builtins.bool, numpy.ndarray)",6
"numpy.where(pandas.core.series.Series, builtins.bool, pandas.core.series.Series)",1
numpy.dtype == pandas.core.arrays.integer.Int8Dtype,1
numpy.dtype == pandas.core.arrays.integer.Int16Dtype,1
numpy.dtype == pandas.core.arrays.integer.Int32Dtype,1
numpy.dtype == pandas.core.arrays.integer.Int64Dtype,1
numpy.dtype == pandas.core.arrays.integer.UInt8Dtype,1
numpy.dtype == pandas.core.arrays.integer.UInt16Dtype,1
numpy.dtype == pandas.core.arrays.integer.UInt32Dtype,1
numpy.dtype == pandas.core.arrays.integer.UInt64Dtype,1
pandas.core.arrays.integer.UInt16Dtype == numpy.dtype,1
pandas.core.arrays.integer.UInt64Dtype == numpy.dtype,1
"numpy.where(builtins.bool, builtins.bool, numpy.ndarray)",2
"numpy.where(builtins.bool, builtins.bool, pandas.core.series.Series)",1
int ** numpy.ndarray,2
"numpy.ones(dtype=Type[numpy.int8], shape=int)",1
"numpy.ones(dtype=Type[numpy.int16], shape=int)",1
"numpy.ones(dtype=Type[numpy.int32], shape=int)",2
"numpy.ones(dtype=Type[numpy.int64], shape=int)",1
"numpy.ones(dtype=Type[numpy.uint8], shape=int)",1
"numpy.ones(dtype=Type[numpy.uint16], shape=int)",1
"numpy.ones(dtype=Type[numpy.uint32], shape=int)",1
numpy.ndarray + pandas.core.arrays.integer.IntegerArray,1
numpy.ndarray - pandas.core.arrays.integer.IntegerArray,1
numpy.ndarray * pandas.core.arrays.integer.IntegerArray,1
numpy.ndarray // pandas.core.arrays.integer.IntegerArray,1
"numpy.where(numpy.ndarray, builtins.bool, pandas.core.series.Series)",1
numpy.ndarray ** pandas.core.arrays.integer.IntegerArray,2
numpy.ndarray % pandas.core.arrays.integer.IntegerArray,1
numpy.isinf(pandas.core.series.Series),1
numpy.isnan(pandas.core.series.Series),11
float % numpy.ndarray,1
numpy.float64 + pandas.core.arrays.integer.IntegerArray,1
numpy.float64 + numpy.ndarray,1
numpy.float64 * pandas.core.arrays.integer.IntegerArray,1
numpy.float64 / pandas.core.arrays.integer.IntegerArray,1
numpy.float64 / numpy.ndarray,1
"numpy.where(numpy.bool_, builtins.bool, numpy.ndarray)",2
numpy.float64 % pandas.core.arrays.integer.IntegerArray,1
numpy.float64 % numpy.ndarray,1
pandas.core.arrays.integer.IntegerArray + numpy.ndarray,1
numpy.ndarray / pandas.core.arrays.integer.IntegerArray,1
"numpy.zeros(tuple[int], dtype=str)",5
"numpy.ones(dtype=str, shape=tuple[int])",1
numpy.dtype(Type[numpy.uint16]),6
numpy.dtype(Type[numpy.uint32]),7
numpy.dtype(Type[numpy.int8]),8
"numpy.array(list[Union[NoneType, int]], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.array(list[Union[float, int]], dtype=Type[builtins.object])",1
"numpy.array(list[Union[int, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1
"numpy.array(str, copy=builtins.bool)",1
"numpy.array(pandas.core.indexes.datetimes.DatetimeIndex, copy=builtins.bool)",2
"numpy.array(list[float], dtype=str)",9
"numpy.array(numpy.ndarray, copy=Type[builtins.int], dtype=builtins.bool)",1
"numpy.asarray(a=pandas.core.arrays.integer.IntegerArray, dtype=Type[builtins.object])",1
numpy.array(pandas.core.arrays.integer.IntegerArray),4
numpy.asarray(a=pandas.core.arrays.integer.IntegerArray),4
numpy.absolute(pandas.core.arrays.integer.IntegerArray),1
numpy.sign(pandas.core.arrays.integer.IntegerArray),1
numpy.log(pandas.core.arrays.integer.IntegerArray),1
numpy.exp(numpy.ndarray),5
numpy.sin(pandas.core.arrays.integer.IntegerArray),1
numpy.sin(pandas.core.series.Series),2
numpy.cos(numpy.ndarray),2
numpy.sqrt(pandas.core.arrays.integer.IntegerArray),1
"numpy.add(pandas.core.arrays.integer.IntegerArray, numpy.ndarray)",1
"numpy.subtract(numpy.ndarray, numpy.ndarray)",3
"numpy.subtract(pandas.core.arrays.integer.IntegerArray, numpy.ndarray)",1
"numpy.subtract(numpy.ndarray, int)",1
"numpy.ufunc.reduce(numpy.ufunc, pandas.core.arrays.integer.IntegerArray)",1
"numpy.array(list[pandas._libs.missing.NAType], dtype=Type[builtins.object])",2
numpy.sum(a=pandas.core.arrays.integer.IntegerArray),1
"numpy.sum(a=numpy.ndarray, where=numpy.ndarray)",1
numpy.array(list[pandas.core.arrays.integer.Int8Dtype]),1
numpy.array(list[pandas.core.arrays.integer.Int16Dtype]),1
numpy.array(list[pandas.core.arrays.integer.Int32Dtype]),1
numpy.array(list[pandas.core.arrays.integer.Int64Dtype]),1
numpy.array(list[pandas.core.arrays.integer.UInt8Dtype]),1
numpy.array(list[pandas.core.arrays.integer.UInt16Dtype]),1
numpy.array(list[pandas.core.arrays.integer.UInt32Dtype]),1
numpy.array(list[pandas.core.arrays.integer.UInt64Dtype]),1
"numpy.ndarray[slilist[Union[float, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[float, pandas._libs.tslibs.timestamps.Timestamp]]",1
"numpy.ndarray[slilist[Union[float, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[float, pandas._libs.tslibs.timedeltas.Timedelta]]",1
"numpy.concatenate(list[Union[pandas.core.indexes.numeric.Float64Index, pandas.core.indexes.numeric.Int64Index]])",1
numpy.concatenate(list[pandas.core.indexes.datetimes.DatetimeIndex]),2
"numpy.ndarray[slice[numpy.int32, numpy.int32, NoneType]]",2
numpy.eye,3
numpy.dtype == pandas.core.arrays.sparse.dtype.SparseDtype,1
numpy.ndarray != float,1
numpy.int32 >= int,3
numpy.int32 <= int,4
"numpy.result_type(numpy.dtype, Type[builtins.int])",3
"numpy.full(dtype=numpy.dtype, fill_value=int, shape=tuple[int])",2
"numpy.result_type(numpy.dtype, Type[builtins.float])",3
"numpy.full(dtype=numpy.dtype, fill_value=float, shape=tuple[int])",3
"numpy.result_type(numpy.ndarray, Type[builtins.float])",1
"numpy.eye(N=int, dtype=str)",1
numpy.matrix.dtype,1
numpy.asarray(a=numpy.matrix),1
numpy.result_type(Type[builtins.float]),1
numpy.array(list[pandas.core.arrays.sparse.dtype.SparseDtype]),1
"numpy.repeat(a=int, repeats=int)",4
numpy.asarray(a=pandas.core.frame.DataFrame),6
"numpy.asarray(a=pandas.core.arrays.sparse.array.SparseArray, dtype=numpy.dtype)",3
numpy.mean(a=list[float]),1
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1
"numpy.asarray(a=float, dtype=numpy.dtype)",1
"numpy.full(dtype=numpy.dtype, fill_value=numpy.float64, shape=tuple[int])",2
"numpy.asarray(a=int, dtype=numpy.dtype)",1
numpy.ndarray + pandas.core.arrays.sparse.array.SparseArray,1
numpy.ndarray - pandas.core.arrays.sparse.array.SparseArray,1
numpy.ndarray * pandas.core.arrays.sparse.array.SparseArray,1
numpy.ndarray / pandas.core.arrays.sparse.array.SparseArray,1
numpy.ndarray // pandas.core.arrays.sparse.array.SparseArray,1
numpy.ndarray % pandas.core.arrays.sparse.array.SparseArray,1
numpy.ndarray ** pandas.core.arrays.sparse.array.SparseArray,1
numpy.ndarray >= numpy.ndarray,2
pandas.core.arrays.sparse.array.SparseArray != numpy.ndarray,2
pandas.core.arrays.sparse.array.SparseArray > numpy.ndarray,2
pandas.core.arrays.sparse.array.SparseArray == numpy.ndarray,2
pandas.core.arrays.sparse.array.SparseArray >= numpy.ndarray,2
pandas.core.arrays.sparse.array.SparseArray <= numpy.ndarray,2
"numpy.asarray(a=builtins.bool, dtype=numpy.dtype)",1
numpy.ndarray != builtins.bool,1
pandas.core.arrays.sparse.array.SparseArray & numpy.ndarray,1
pandas.core.arrays.sparse.array.SparseArray | numpy.ndarray,2
"numpy.full(dtype=numpy.dtype, fill_value=numpy.int64, shape=tuple[int])",1
pandas.core.arrays.sparse.array.SparseArray * numpy.ndarray,1
numpy.ndarray != numpy.int64,1
numpy.exp(pandas.core.arrays.sparse.array.SparseArray),2
numpy.exp(int),1
numpy.exp(float),1
"numpy.add(pandas.core.arrays.sparse.array.SparseArray, numpy.ndarray)",1
"numpy.greater(numpy.ndarray, numpy.ndarray)",1
"numpy.greater(pandas.core.arrays.sparse.array.SparseArray, numpy.ndarray)",1
numpy.ndarray += pandas.core.arrays.sparse.array.SparseArray,1
"numpy.result_type(numpy.ndarray, Type[builtins.bool])",1
numpy.generic.item(numpy.float64),1
"numpy.ndarray[slilist[Union[builtins.bool, float, int]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, float, int]]",1
"numpy.array(list[Union[builtins.bool, float, int]], dtype=Type[builtins.object])",1
"numpy.asarray(a=pandas.core.indexes.datetimes.DatetimeIndex, dtype=str)",1
"numpy.array(int, dtype=numpy.dtype)",2
"numpy.take(a=numpy.ndarray, indices=list[int])",4
"numpy.asarray(a=list[int], dtype=Type[numpy.int32])",1
numpy.ndarray += int,9
"numpy.result_type(int, numpy.dtype)",1
"numpy.result_type(float, numpy.dtype)",1
"numpy.ndarray[sliinte[NoneType, int, NoneType]] = int",3
"numpy.issubdtype(arg1=Type[numpy.bool_], arg2=Type[numpy.integer])",1
numpy.isnan(builtins.bool),1
"numpy.full(dtype=numpy.dtype, fill_value=str, shape=tuple[int])",1
"numpy.ndarray[tuple[slice[int, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2
"numpy.ndarray[slifloate[NoneType, NoneType, int]] = float",5
"numpy.ndarray[sliinte[NoneType, NoneType, int]] = int",3
numpy.all(a=float),1
numpy.all(a=pandas.core.arrays.sparse.array.SparseArray),4
numpy.all(a=int),1
numpy.any(a=int),1
numpy.any(a=pandas.core.arrays.sparse.array.SparseArray),3
"numpy.any(a=pandas.core.arrays.sparse.array.SparseArray, out=builtins.bool)",1
numpy.any(a=float),1
numpy.sum(a=pandas.core.arrays.sparse.array.SparseArray),3
"numpy.sum(a=pandas.core.arrays.sparse.array.SparseArray, out=numpy.float64)",1
numpy.cumsum(a=pandas.core.arrays.sparse.array.SparseArray),1
numpy.cumsum,5
"numpy.cumsum(a=pandas.core.arrays.sparse.array.SparseArray, out=pandas.core.arrays.sparse.array.SparseArray)",1
numpy.mean(a=pandas.core.arrays.sparse.array.SparseArray),2
"numpy.mean(a=pandas.core.arrays.sparse.array.SparseArray, dtype=Type[numpy.int64])",1
numpy.absolute(pandas.core.arrays.sparse.array.SparseArray),3
numpy.sin(list[int]),1
numpy.ndarray != numpy.float64,1
numpy.sin(pandas.core.arrays.sparse.array.SparseArray),1
numpy.sin(int),1
"numpy.add(pandas.core.arrays.sparse.array.SparseArray, int)",1
numpy.modf(pandas.core.arrays.sparse.array.SparseArray),2
numpy.modf(numpy.ndarray),1
"numpy.result_type(numpy.dtype, Type[numpy.datetime64])",1
"numpy.full(dtype=numpy.dtype, fill_value=numpy.datetime64, shape=tuple[int])",1
"numpy.asarray(a=pandas.core.arrays.sparse.array.SparseArray, dtype=Type[builtins.bool])",3
numpy.ndarray[pandas.builtins.boolore.arrays.sparse.array.SparseArray] = builtins.bool,1
numpy.int32 > int,2
"numpy.searchsorted(a=numpy.ndarray, v=int)",1
"numpy.ndarray[slilist[Union[float, numpy.float64]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.float64]]",1
"numpy.ndarray[slilist[Union[int, numpy.float64]]e[NoneType, NoneType, NoneType]] = list[Union[int, numpy.float64]]",1
"numpy.array(list[int], dtype=Type[numpy.int32])",36
"numpy.array(list, dtype=Type[numpy.int32])",8
"numpy.arange(int, int, int, dtype=Type[numpy.int32])",2
"numpy.array(list[list[str]], dtype=Type[builtins.object])",2
pandas._linumpy.ndarrays.missing.NAType + numpy.ndarray,1
"numpy.array(list[Union[builtins.bool, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",2
"numpy.empty_like(pandas.core.arrays.string_.StringArray, dtype=str)",1
"numpy.asarray(a=list[Union[pandas._libs.missing.NAType, str]], dtype=str)",1
numpy.amin(a=pandas.core.arrays.string_.StringArray),1
numpy.amax(a=pandas.core.arrays.string_.StringArray),1
numpy.ndarray % float,1
"numpy.array_equal(a1=list, a2=numpy.ndarray)",1
numpy.dtype(Type[builtins.complex]),3
numpy.dtype(Type[builtins.bytes]),18
"numpy.asarray(a=pandas.core.arrays.sparse.array.SparseArray, dtype=Type[builtins.object])",1
numpy.ndarray[numpy.ndarray] = pandas._libs.tslibs.timestamps.Timestamp,2
"numpy.lexsort(tuple[pandas.core.indexes.numeric.Float64Index, pandas.core.indexes.numeric.Float64Index])",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.float64)",2
numpy.float16.dtype,1
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.float16)",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.float32)",1
"numpy.ndarray[slistre[int, int, NoneType]] = str",1
"numpy.ndarray[sliinte[int, int, NoneType]] = int",10
"numpy.ndarray[slinumpy.datetime64e[int, int, NoneType]] = numpy.datetime64",2
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.datetime64)",2
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.timedelta64)",2
"numpy.ndarray[slinumpy.float64e[int, int, NoneType]] = numpy.float64",3
"numpy.ndarray[sliNoneTypee[int, int, NoneType]] = NoneType",5
"numpy.ndarray[slinumpy.ndarraye[int, int, NoneType]] = numpy.ndarray",2
pandas.core.dtypes.dtypes.IntervalDtype == numpy.dtype,1
"numpy.putmask(pandas.core.arrays.interval.IntervalArray, numpy.ndarray, pandas._libs.interval.Interval)",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, pandas._libs.interval.Interval)",1
"numpy.ndarray[slinumpy.float16e[int, int, NoneType]] = numpy.float16",1
"numpy.ndarray[slinumpy.float32e[int, int, NoneType]] = numpy.float32",1
"numpy.searchsorted(a=pandas.core.indexes.base.Index, v=str)",1
numpy.searchsorted,3
"numpy.ndarray.searchsorted(numpy.ndarray, str, side=numpy.ndarray, sorter=str)",1
"numpy.searchsorted(a=pandas.core.indexes.datetimes.DatetimeIndex, v=pandas._libs.tslibs.timestamps.Timestamp)",1
"numpy.searchsorted(a=pandas.core.indexes.datetimes.DatetimeIndex, sorter=builtins.range, v=pandas._libs.tslibs.timestamps.Timestamp)",1
"numpy.ndarray.searchsorted(numpy.ndarray, int, side=builtins.range, sorter=str)",1
"numpy.searchsorted(a=pandas.core.indexes.period.PeriodIndex, sorter=builtins.range, v=pandas._libs.tslibs.period.Period)",1
"numpy.searchsorted(a=pandas.core.indexes.timedeltas.TimedeltaIndex, v=pandas._libs.tslibs.timedeltas.Timedelta)",1
"numpy.searchsorted(a=pandas.core.indexes.numeric.Int64Index, v=int)",1
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int64, side=NoneType, sorter=str)",2
"numpy.searchsorted(a=pandas.core.indexes.numeric.Int64Index, sorter=builtins.range, v=int)",1
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int64, side=numpy.ndarray, sorter=str)",2
"numpy.searchsorted(a=pandas.core.indexes.numeric.UInt64Index, v=int)",1
"numpy.searchsorted(a=pandas.core.indexes.numeric.UInt64Index, sorter=builtins.range, v=int)",1
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint64, side=numpy.ndarray, sorter=str)",2
"numpy.ndarray.searchsorted(numpy.ndarray, builtins.bool, side=NoneType, sorter=str)",1
"numpy.searchsorted(a=pandas.core.indexes.base.Index, sorter=builtins.range, v=builtins.bool)",1
"numpy.searchsorted(a=pandas.core.indexes.base.Index, sorter=builtins.range, v=int)",1
"numpy.searchsorted(a=pandas.core.series.Series, v=float)",1
"numpy.ndarray.searchsorted(numpy.ndarray, float, side=NoneType, sorter=str)",1
"numpy.searchsorted(a=pandas.core.series.Series, sorter=builtins.range, v=float)",1
"numpy.ndarray.searchsorted(numpy.ndarray, float, side=numpy.ndarray, sorter=str)",1
"numpy.searchsorted(a=pandas.core.series.Series, v=int)",1
"numpy.searchsorted(a=pandas.core.series.Series, sorter=builtins.range, v=int)",1
"numpy.ndarray.searchsorted(numpy.ndarray, int, side=numpy.ndarray, sorter=str)",2
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int8, side=numpy.ndarray, sorter=str)",2
numpy.iinfo(int_type=Type[numpy.int16]),2
numpy.int16(int),6
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int16, side=NoneType, sorter=str)",2
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int16, side=numpy.ndarray, sorter=str)",2
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int32, side=numpy.ndarray, sorter=str)",2
numpy.iinfo(int_type=Type[numpy.uint8]),1
numpy.uint8(int),6
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint8, side=NoneType, sorter=str)",2
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint8, side=numpy.ndarray, sorter=str)",2
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint16, side=numpy.ndarray, sorter=str)",2
numpy.uint32(int),5
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint32, side=NoneType, sorter=str)",2
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.uint32, side=numpy.ndarray, sorter=str)",2
numpy.uint64 == numpy.uint64,21
numpy.ndim(a=str),2
numpy.transpose,2
numpy.transpose(a=pandas.core.indexes.base.Index),1
"numpy.transpose(a=pandas.core.indexes.base.Index, axes=int)",1
"numpy.transpose(a=pandas.core.indexes.datetimes.DatetimeIndex, axes=int)",1
"numpy.transpose(a=pandas.core.indexes.period.PeriodIndex, axes=int)",1
"numpy.transpose(a=pandas.core.indexes.timedeltas.TimedeltaIndex, axes=int)",1
numpy.transpose(a=pandas.core.indexes.numeric.UInt64Index),1
"numpy.transpose(a=pandas.core.indexes.numeric.UInt64Index, axes=int)",1
"numpy.transpose(a=pandas.core.indexes.range.RangeIndex, axes=int)",1
numpy.transpose(a=pandas.core.indexes.interval.IntervalIndex),1
"numpy.transpose(a=pandas.core.indexes.interval.IntervalIndex, axes=int)",1
numpy.transpose(a=pandas.core.indexes.multi.MultiIndex),1
"numpy.transpose(a=pandas.core.indexes.multi.MultiIndex, axes=int)",1
numpy.transpose(a=pandas.core.indexes.numeric.Int64Index),1
"numpy.transpose(a=pandas.core.indexes.numeric.Int64Index, axes=int)",1
"numpy.transpose(a=pandas.core.series.Series, axes=int)",2
numpy.transpose(a=pandas.core.series.Series),1
"numpy.repeat(a=pandas.core.indexes.base.Index, repeats=builtins.range)",3
"numpy.repeat(a=pandas.core.indexes.datetimes.DatetimeIndex, repeats=builtins.range)",3
numpy.ndim(a=list[numpy.datetime64]),1
"numpy.ndarray.repeat(numpy.ndarray, builtins.range, axis=NoneType)",1
numpy.asarray(a=list[numpy.datetime64]),3
"numpy.repeat(a=pandas.core.indexes.period.PeriodIndex, repeats=builtins.range)",3
"numpy.repeat(a=pandas.core.indexes.numeric.Int64Index, repeats=builtins.range)",2
"numpy.repeat(a=pandas.core.indexes.category.CategoricalIndex, repeats=builtins.range)",3
"numpy.repeat(a=pandas.core.indexes.interval.IntervalIndex, repeats=builtins.range)",3
"numpy.repeat(a=pandas.core.indexes.multi.MultiIndex, repeats=builtins.range)",3
"numpy.ndarray.repeat(numpy.ndarray, builtins.range)",1
"numpy.repeat(a=pandas.core.series.Series, repeats=builtins.range)",3
numpy.array(list[numpy.float16]),1
numpy.array(list[numpy.int16]),1
"numpy.repeat(a=numpy.ndarray, repeats=builtins.range)",5
"numpy.asarray(a=list[Union[float, numpy.datetime64]])",1
"numpy.ndim(a=list[Union[NoneType, numpy.datetime64]])",1
"numpy.ndim(a=list[Union[float, numpy.datetime64]])",1
"numpy.asarray(a=list[Union[float, pandas._libs.tslibs.period.Period]])",1
"numpy.ndim(a=list[Union[float, numpy.timedelta64]])",1
"numpy.array(list[Union[float, numpy.timedelta64]], copy=builtins.bool)",1
"numpy.repeat(a=pandas.core.arrays.interval.IntervalArray, repeats=builtins.range)",2
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.interval.Interval]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.interval.Interval]]",1
"numpy.array(list[Union[float, numpy.float64]], dtype=numpy.dtype)",1
"numpy.array(list[Union[float, numpy.float16]], dtype=numpy.dtype)",1
"numpy.array(list[Union[float, numpy.float32]], dtype=numpy.dtype)",1
"numpy.repeat(a=pandas.core.indexes.timedeltas.TimedeltaIndex, repeats=builtins.range)",1
"numpy.repeat(a=pandas.core.indexes.numeric.UInt64Index, repeats=builtins.range)",1
"numpy.repeat(a=pandas.core.arrays.categorical.Categorical, repeats=builtins.range)",2
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1
numpy.asanyarray(a=pandas.core.arrays.datetimes.DatetimeArray),1
"numpy.asarray(a=tuple[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period], dtype=Type[builtins.object])",1
numpy.asanyarray(a=pandas.core.arrays.timedeltas.TimedeltaArray),1
"numpy.repeat(a=pandas.core.indexes.range.RangeIndex, repeats=builtins.range)",1
"numpy.repeat(a=pandas.core.indexes.numeric.Float64Index, repeats=builtins.range)",1
"numpy.asarray(a=tuple[builtins.bool, builtins.bool], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval], dtype=Type[builtins.object])",1
"numpy.array(tuple[str, str, str], copy=builtins.bool)",1
"numpy.array(tuple[int, int, int, int, int, int, int, int, int, int, int, int], copy=builtins.bool)",1
"numpy.array(tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",1
"numpy.array(tuple[str, str, str, str, str, str], copy=builtins.bool)",1
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[float, float, float, float, float, float], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int, int, int, int], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[float, float, float, float], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1
numpy.unique(ar=numpy.ndarray),4
"numpy.asarray(a=tuple[pandas._libs.interval.Interval], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[numpy.datetime64, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.datetime64, pandas._libs.tslibs.nattype.NaTType]]",1
"numpy.asarray(a=list[Union[int, pandas._libs.tslibs.nattype.NaTType]])",1
numpy.result_type,1
"numpy.result_type(Type[builtins.int], Type[builtins.int])",1
numpy.random.mtrand.RandomState.randn(numpy.random.mtrand.RandomState),7
numpy.float32.ndim,1
numpy.float32.values,1
numpy.float_,13
"numpy.dtype in list[Type[Union[numpy.float32, numpy.float64]]]",1
"numpy.result_type(Type[builtins.int], numpy.dtype)",1
numpy.float64.values,1
Type[numpy.dtypeuiltins.int] == numpy.dtype,1
"numpy.result_type(numpy.dtype, numpy.dtype)",1
numpy.unicode_,2
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.timestamps.Timestamp]]",1
Type[numpy.Type[builtins.object]ool_] == Type[builtins.object],1
numpy.ndarray.values,1
numpy.random.randn,3
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int)",3
numpy.dtype(Type[pandas._libs.tslibs.timestamps.Timestamp]),1
numpy.dtype(Type[builtins.list]),1
numpy.dtype == Type[builtins.float],3
"numpy.array(list, dtype=Type[builtins.int])",3
"numpy.array(list, dtype=Type[numpy.datetime64])",3
numpy.dtype(Type[numpy.datetime64]),3
numpy.dtype(Type[numpy.timedelta64]),1
"numpy.array(list, dtype=Type[numpy.timedelta64])",1
numpy.dtype(pandas.core.frame.DataFrame),1
Type[numpy.float64] == Type[numpy.float64],2
Type[numpy.str_] == Type[numpy.str_],1
Type[numpy.oType[numpy.object_]ject_] == Type[numpy.object_],10
Type[numpy.int64] == Type[numpy.int64],3
Type[numpy.datetime64] == Type[numpy.datetime64],3
"Type[numpy.uint8] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
"numpy.dtype in tuple[numpy.dtype, numpy.dtype]",1
"Type[numpy.uint16] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
"Type[numpy.uint32] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
"Type[numpy.int8] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
numpy.dtype(Type[numpy.float16]),4
"Type[numpy.float16] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
"numpy.ndarray[slilist[tuple[int, str]]e[NoneType, NoneType, NoneType]] = list[tuple[int, str]]",2
"numpy.array(list[Union[builtins.bool, str]], copy=builtins.bool)",1
"numpy.asarray(a=list[Union[builtins.bool, str]], dtype=Type[builtins.object])",1
numpy.dtype(pandas.core.dtypes.dtypes.DatetimeTZDtype),1
pandas.core.dtypes.dtypes.DatetimeTZDtype == Type[numpy.str_],1
Type[numpy.str_] == pandas.core.dtypes.dtypes.DatetimeTZDtype,1
numpy.dtype(pandas.core.dtypes.dtypes.PeriodDtype),1
pandas.core.dtypes.dtypes.PeriodDtype == Type[numpy.str_],1
Type[numpy.str_] == pandas.core.dtypes.dtypes.PeriodDtype,1
"numpy.ndarray[slilist[Union[builtins.bool, float, int, str]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, float, int, str]]",1
numpy.float64 > numpy.float64,4
"numpy.ndarray[slilist[list]e[NoneType, NoneType, NoneType]] = list[list]",1
"numpy.ndarray[slilist[tuple[int]]e[NoneType, NoneType, NoneType]] = list[tuple[int]]",1
"numpy.ndarray[slilist[dict]e[NoneType, NoneType, NoneType]] = list[dict]",1
"numpy.ndarray[slilist[pandas.core.strings.StringMethods]e[NoneType, NoneType, NoneType]] = list[pandas.core.strings.StringMethods]",1
"numpy.array(list[tuple[int, int]])",1
numpy.array(list[builtins.set]),1
numpy.array(list[builtins.generator]),1
"numpy.ndarray[slilist[Union[builtins.bytes, float]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bytes, float]]",1
"numpy.array(list[Union[float, list[Union[float, int]], str]], dtype=Type[builtins.object])",1
"numpy.array(list[Union[int, numpy.int32, numpy.int64]], dtype=str)",1
"numpy.array(list[Union[int, numpy.int32, numpy.int64, str]], dtype=str)",1
"numpy.array(list[Union[builtins.bool, float]], dtype=str)",1
"numpy.array(list[Union[float, numpy.float32, numpy.float64]], dtype=str)",1
"numpy.array(list[Union[int, numpy.float32, numpy.float64, str]], dtype=str)",1
"numpy.array(list[Union[decimal.Decimal, float]])",1
"numpy.array(list[Union[decimal.Decimal, float]], dtype=str)",1
"numpy.array(list[Union[builtins.complex, float]], dtype=str)",5
numpy.complex64,1
"numpy.array(list[Union[builtins.complex, float]])",1
"numpy.array(list[Union[builtins.complex, float, int]])",1
"numpy.array(list[Union[builtins.complex, float]], dtype=Type[numpy.complex64])",1
"numpy.array(list[float], dtype=Type[builtins.float])",8
"numpy.array(list[NoneType], dtype=Type[builtins.object])",1
"numpy.array(list[Union[float, pandas._libs.tslibs.timestamps.Timestamp]])",1
"numpy.array(list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]])",1
"numpy.array(list[Union[datetime.datetime, float]])",1
"numpy.array(list[Union[float, pandas._libs.tslibs.timedeltas.Timedelta]])",1
"numpy.array(list[Union[numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]])",3
"numpy.array(list[Union[float, numpy.timedelta64]])",2
"numpy.array(list[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType]])",1
"numpy.array(list[Union[datetime.timedelta, float]])",1
numpy.array(list[pandas._libs.tslibs.period.Period]),3
"numpy.array(list[Union[numpy.datetime64, pandas._libs.tslibs.period.Period]], dtype=Type[builtins.object])",1
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]])",5
"numpy.array(list[Union[float, pandas._libs.tslibs.period.Period]])",1
"numpy.array(list[Union[NoneType, float]])",1
"numpy.array(list[Union[float, pandas._libs.tslibs.nattype.NaTType]])",4
"numpy.array(list[Union[float, numpy.datetime64]])",1
"numpy.array(list[Union[float, numpy.datetime64, pandas._libs.tslibs.nattype.NaTType]])",1
"numpy.array(list[Union[numpy.datetime64, pandas._libs.tslibs.nattype.NaTType]])",2
"numpy.array(list[Union[NoneType, numpy.datetime64]])",1
"numpy.array(list[Union[NoneType, numpy.datetime64, pandas._libs.tslibs.nattype.NaTType]])",1
"numpy.array(list[Union[float, numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]])",2
"numpy.array(list[Union[NoneType, numpy.timedelta64]])",1
"numpy.array(list[Union[NoneType, numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]])",1
"numpy.array(list[Union[float, numpy.datetime64, numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]])",2
"numpy.array(list[Union[numpy.datetime64, numpy.timedelta64]], dtype=Type[builtins.object])",2
"numpy.ndarray[slilist[Union[datetime.date, float]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.date, float]]",1
"numpy.array(list[NoneType], dtype=str)",2
"numpy.array(list[list[int]], dtype=Type[builtins.object])",3
"numpy.array(list[list[Union[NoneType, int]]], dtype=Type[builtins.object])",1
numpy.complex64(int),1
numpy.object_(str),1
numpy.bytes_(builtins.bytes),1
numpy.array(list[list]),1
numpy.matrix(data=str),1
"numpy.ndarray[tuple[slifloate[int, int, NoneType]]] = float",1
"numpy.empty(tuple, dtype=Type[builtins.bool])",1
"numpy.ndarray.reshape(numpy.ndarray, tuple)",2
not numpy.ndarray,1
"numpy.array(int, dtype=Type[builtins.object])",1
"numpy.asarray(a=list[list[builtins.bool]], dtype=Type[builtins.object])",1
numpy.array(list[list[builtins.bool]]),2
"numpy.asarray(a=list[pandas._libs.tslibs.nattype.NaTType], dtype=Type[builtins.object])",2
"numpy.array(list[Union[NoneType, float]], dtype=str)",2
"numpy.array(list[Union[NoneType, numpy.ndarray]], dtype=str)",1
"numpy.ndim(a=list[Union[float, int]])",2
"numpy.array(list[numpy.datetime64], dtype=Type[builtins.object])",1
numpy.datetime64 != pandas._libs.tslibs.timestamps.Timestamp,1
"numpy.array(list[datetime.datetime], dtype=Type[builtins.object])",5
"numpy.array(list[tuple[int, int]], dtype=list[tuple[str, Type[Union[builtins.float, builtins.int]]]])",6
"numpy.array(list[numpy.ndarray], dtype=Type[builtins.object])",3
numpy.empty_like(list[NoneType]),1
"numpy.ndarray[slilist[Union[int, list[int]]]e[NoneType, NoneType, NoneType]] = list[Union[int, list[int]]]",1
"numpy.ndarray[slilist[Union[float, list[int]]]e[NoneType, NoneType, NoneType]] = list[Union[float, list[int]]]",1
"numpy.ndarray[slilist[Union[list[int], str]]e[NoneType, NoneType, NoneType]] = list[Union[list[int], str]]",1
"numpy.ndarray[slilist[Union[int, tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[int, tuple[int, int]]]",1
"numpy.ndarray[slilist[Union[list[int], tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[list[int], tuple[int, int]]]",1
"numpy.ndarray[slilist[Union[NoneType, list[int]]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, list[int]]]",1
numpy.ndarray.round(numpy.ndarray),1
numpy.array(list[numpy.uint8]),1
numpy.array(list[numpy.uint16]),1
numpy.array(list[numpy.uint32]),1
numpy.array(list[numpy.uint64]),2
"numpy.array(list[float], dtype=Type[builtins.int])",1
numpy.array(list[numpy.float32]),1
"numpy.array(list, dtype=Type[builtins.float])",1
Type[numpy.uint64] == Type[numpy.uint64],1
"numpy.find_common_type(array_types=list[Type[Union[numpy.int32, numpy.uint32]]], scalar_types=list)",1
numpy.dtype == Type[numpy.uint64],3
"numpy.find_common_type(array_types=list[Type[Union[numpy.float16, numpy.float32]]], scalar_types=list)",1
"numpy.find_common_type(array_types=list[Type[Union[numpy.float32, numpy.int16]]], scalar_types=list)",1
"numpy.find_common_type(array_types=list[Type[Union[numpy.float64, numpy.int16]]], scalar_types=list)",1
numpy.dtype(Type[numpy.complex128]),3
"numpy.find_common_type(array_types=list[Type[Union[numpy.complex128, numpy.int32]]], scalar_types=list)",1
"numpy.find_common_type(array_types=list[Type[Union[builtins.object, numpy.int16]]], scalar_types=list)",1
"numpy.array(list[list[Union[int, pandas._libs.tslibs.nattype.NaTType, str]]])",1
numpy.dtype == Type[numpy.uint16],2
numpy.complex_,4
"numpy.ndarray.fill(numpy.ndarray, pandas._libs.tslibs.timestamps.Timestamp)",1
"numpy.empty(tuple[int, int], dtype=Type[builtins.object])",5
"numpy.ndarray.fill(numpy.ndarray, pandas._libs.tslibs.period.Period)",1
numpy.min_scalar_type(int),1
numpy.int8.dtype,3
numpy.int8 == numpy.int8,22
numpy.int16 == numpy.int16,16
numpy.int32 == numpy.int32,22
numpy.uint8.dtype,3
numpy.uint8 == numpy.uint8,22
numpy.uint16.dtype,5
numpy.uint16 == numpy.uint16,18
numpy.uint32.dtype,3
numpy.uint32 == numpy.uint32,22
numpy.ulonglong(int),1
numpy.ulonglong.dtype,2
numpy.ulonglong == numpy.uint64,1
numpy.float64(x=numpy.float64),2
numpy.float64(x=numpy.float32),1
"numpy.array(list[numpy.uint16], dtype=numpy.dtype)",1
numpy.float64(x=numpy.uint16),1
"numpy.array(list[numpy.uint64], dtype=numpy.dtype)",1
numpy.float64(x=numpy.uint64),1
"numpy.array(list[numpy.int8], dtype=numpy.dtype)",1
numpy.float64(x=numpy.int8),1
"numpy.array(list[numpy.int32], dtype=numpy.dtype)",1
numpy.float64(x=numpy.int32),1
"numpy.array(list[numpy.uint8], dtype=numpy.dtype)",1
numpy.float32(numpy.uint8),1
numpy.float32 == numpy.float32,1
"numpy.array(list[numpy.uint32], dtype=numpy.dtype)",1
numpy.float32(numpy.uint32),1
"numpy.array(list[numpy.int64], dtype=numpy.dtype)",3
"numpy.array(list[numpy.int16], dtype=numpy.dtype)",1
numpy.float32(numpy.int16),1
"numpy.array(list[numpy.float64], dtype=numpy.dtype)",1
numpy.complex64(builtins.complex),1
numpy.complex64.dtype,2
numpy.complex64 == numpy.complex64,1
"numpy.array(list[numpy.complex128], dtype=numpy.dtype)",1
numpy.complex128 == numpy.complex128,1
numpy.bool_(numpy.bool_),1
numpy.dtype != Type[builtins.bool],3
numpy.str_.dtype,4
numpy.str_ == numpy.str_,1
"numpy.array(list[builtins.bool], dtype=numpy.dtype)",1
"numpy.array(list[builtins.bytes], dtype=numpy.dtype)",1
numpy.bytes_.dtype,2
numpy.numpy.bytes_ytes_ == numpy.bytes_,1
"numpy.array(list[datetime.datetime], copy=builtins.bool)",2
"numpy.array(list[datetime.date], copy=builtins.bool)",1
"numpy.array(list[numpy.datetime64], copy=builtins.bool)",1
numpy.isnan(numpy.float32),2
numpy.timedelta64(numpy.timedelta64),2
numpy.dtype != Type[builtins.object],2
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=numpy.datetime64)",1
numpy.numpy.bool_ool_ != numpy.bool_,4
"numpy.asarray(a=list[numpy.bool_], dtype=Type[builtins.object])",1
"numpy.asarray(a=list[Union[numpy.bool_, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1
"numpy.asarray(a=pandas.core.arrays.boolean.BooleanArray, dtype=numpy.dtype)",2
"numpy.asarray(a=pandas.core.arrays.boolean.BooleanArray, dtype=Type[builtins.object])",2
list[pandas.core.arrays.numpy.int64oolean.BooleanArray] * numpy.int64,1
numpy.array(list[pandas.core.arrays.boolean.BooleanArray]),1
"numpy.ndarray[slinumpy.bool_e[NoneType, int, NoneType]] = numpy.bool_",3
"numpy.ndarray[slinumpy.bool_e[int, int, NoneType]] = numpy.bool_",3
pandas.core.arrays.integer.Int64Dtype == Type[numpy.object_],1
pandas.core.arrays.numpy.bool_oolean.BooleanArray == numpy.bool_,1
"numpy.ndarray[slibuiltins.boole[NoneType, int, NoneType]] = builtins.bool",3
"numpy.array(pandas.core.arrays.boolean.BooleanArray, copy=builtins.bool)",2
numpy.pandas.core.arrays.boolean.BooleanArrayool_ + pandas.core.arrays.boolean.BooleanArray,1
numpy.numpy.ndarrayool_ - numpy.ndarray,1
numpy.pandas.core.arrays.boolean.BooleanArrayool_ * pandas.core.arrays.boolean.BooleanArray,1
"numpy.asarray(a=list[Union[numpy.int8, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1
numpy.pandas.core.arrays.boolean.BooleanArrayool_ // pandas.core.arrays.boolean.BooleanArray,1
numpy.pandas.core.arrays.boolean.BooleanArrayool_ / pandas.core.arrays.boolean.BooleanArray,1
"numpy.asarray(a=list[Union[numpy.float64, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1
numpy.pandas.core.arrays.boolean.BooleanArrayool_ ** pandas.core.arrays.boolean.BooleanArray,1
numpy.pandas.core.arrays.boolean.BooleanArrayool_ % pandas.core.arrays.boolean.BooleanArray,1
"numpy.ndarray[slilist[Union[numpy.float64, pandas._libs.missing.NAType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.float64, pandas._libs.missing.NAType]]",1
"numpy.asarray(a=list[Union[numpy.bool_, numpy.int8]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[numpy.bool_, numpy.int8]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.bool_, numpy.int8]]",1
numpy.bool_.index,1
numpy.numpy.ndarrayool_ + numpy.ndarray,1
numpy.pandas.core.arrays.boolean.BooleanArrayool_ - pandas.core.arrays.boolean.BooleanArray,1
numpy.numpy.ndarrayool_ * numpy.ndarray,1
numpy.numpy.ndarrayool_ / numpy.ndarray,1
"numpy.asarray(a=tuple[int, int])",1
"numpy.asarray(a=tuple[int, int, int])",1
"numpy.asarray(a=tuple[int, int, int, int, int, int])",1
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int])",1
"numpy.ndarray.fill(numpy.ndarray, numpy.int64)",3
"numpy.asarray(a=tuple[int, int, int, int])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
numpy.transpose(a=pandas.core.frame.DataFrame),3
"numpy.ndarray.astype(numpy.ndarray, str, casting=str)",2
numpy.numpy.bool_ool_ + numpy.bool_,4
pandas._linumpy.bool_s.missing.NAType + numpy.bool_,2
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], slifloate[int, NoneType, NoneType]]] = float",2
"numpy.repeat(a=pandas.core.series.Series, repeats=int)",1
"numpy.repeat(a=pandas.core.series.Series, repeats=list[int])",1
"numpy.repeat(a=pandas.core.arrays.boolean.BooleanArray, repeats=int)",2
"numpy.repeat(a=pandas.core.arrays.boolean.BooleanArray, repeats=list[int])",2
"numpy.ndarray.repeat(numpy.ndarray, list[int])",5
"numpy.repeat(a=pandas.core.arrays.boolean.BooleanArray, axis=int, repeats=int)",1
"numpy.repeat(pandas.core.arrays.boolean.BooleanArray, int, foo=str)",1
pandas.core.arrays.numpy.ndarrayoolean.BooleanArray | numpy.ndarray,1
Type[pandas.core.arrays.Type[numpy.bool_]oolean.BooleanArray] == Type[numpy.bool_],1
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.bool_, side=NoneType, sorter=str)",1
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.bool_, side=numpy.ndarray, sorter=str)",1
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.arrays.boolean.BooleanArray, side=NoneType, sorter=str)",1
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.boolean.BooleanDtype]])",1
"numpy.repeat(a=numpy.int64, repeats=int)",2
"numpy.ndarray[slilist[pandas.core.arrays.boolean.BooleanArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.boolean.BooleanArray]",1
numpy.int64 <= float,4
"numpy.array(pandas.core.indexes.base.Index, copy=Type[builtins.object], dtype=builtins.bool)",1
list[pandas.core.arrays.categorical.Categorical] * numpy.int64,1
numpy.array(list[pandas.core.arrays.categorical.Categorical]),1
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=str, dtype=builtins.bool)",1
"numpy.where(numpy.ndarray, numpy.ndarray, numpy.ndarray)",4
"numpy.asarray(a=pandas.core.arrays.integer.IntegerArray, dtype=NoneType)",2
"numpy.asarray(a=list[Union[int, pandas._libs.missing.NAType]])",1
"numpy.asarray(a=list[Union[int, pandas._libs.missing.NAType]], dtype=NoneType)",1
numpy.ndim(a=pandas.core.arrays.categorical.Categorical),1
numpy.asarray(a=list[float]),8
"numpy.all(a=tuple[int, int])",2
"numpy.ndarray[tuple[sliinte[int, NoneType, NoneType]]] = int",1
"numpy.ndarray.repeat(numpy.ndarray, int, axis=NoneType)",1
"numpy.repeat(a=pandas.core.arrays.categorical.Categorical, repeats=int)",2
"numpy.repeat(a=pandas.core.arrays.categorical.Categorical, repeats=list[int])",2
"numpy.repeat(a=pandas.core.arrays.categorical.Categorical, axis=int, repeats=int)",1
"numpy.repeat(pandas.core.arrays.categorical.Categorical, int, foo=str)",1
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=Type[builtins.str], dtype=builtins.bool)",1
"numpy.asarray(a=pandas.core.arrays.categorical.Categorical, dtype=Type[builtins.object])",1
"numpy.array(pandas.core.arrays.categorical.Categorical, copy=builtins.bool)",1
"numpy.array(pandas.tests.extension.test_common.DummyArray, copy=Type[builtins.object], dtype=builtins.bool)",1
"numpy.array(pandas.tests.extension.test_common.DummyArray, copy=str, dtype=builtins.bool)",1
pandas.core.dtypes.dtypes.DatetimeTZDtype != numpy.dtype,1
numpy.asarray(a=list[pandas._libs.tslibs.nattype.NaTType]),3
list[pandas.core.arrays.datetimes.DatetimeArray] * numpy.int64,1
numpy.array(list[pandas.core.arrays.datetimes.DatetimeArray]),1
"numpy.asarray(a=list, dtype=NoneType)",3
"numpy.argsort(a=pandas.core.arrays.datetimes.DatetimeArray, kind=str)",1
numpy.asarray(a=list[builtins.bool]),6
numpy.ndim(a=list[builtins.bool]),1
"numpy.ndarray[tuple[slifloate[int, NoneType, NoneType], slifloate[NoneType, NoneType, NoneType]]] = float",1
"numpy.ndarray[tuple[slifloate[int, NoneType, NoneType]]] = float",2
"numpy.ndarray[tuple[slifloate[NoneType, int, NoneType], slifloate[NoneType, NoneType, NoneType]]] = float",1
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], slifloate[NoneType, int, NoneType]]] = float",2
"numpy.repeat(a=pandas.core.arrays.datetimes.DatetimeArray, repeats=int)",1
"numpy.repeat(a=pandas.core.arrays.datetimes.DatetimeArray, repeats=list[int])",2
numpy.repeat,5
numpy.asarray(a=list[pandas._libs.tslibs.timedeltas.Timedelta]),2
numpy.ndim(a=pandas.core.arrays.datetimes.DatetimeArray),1
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.DatetimeTZDtype]])",1
"numpy.ndarray[slilist[pandas.core.arrays.datetimes.DatetimeArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.datetimes.DatetimeArray]",1
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.Int16Dtype]])",1
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.Int64Dtype]])",1
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.UInt16Dtype]])",1
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.UInt64Dtype]])",1
"numpy.array(list[Union[numpy.int8, pandas._libs.missing.NAType]], copy=builtins.bool)",1
"numpy.array(list[Union[numpy.int16, pandas._libs.missing.NAType]], copy=builtins.bool)",1
"numpy.array(list[Union[numpy.int32, pandas._libs.missing.NAType]], copy=builtins.bool)",1
"numpy.array(list[Union[numpy.int64, pandas._libs.missing.NAType]], copy=builtins.bool)",1
"numpy.array(list[Union[numpy.uint8, pandas._libs.missing.NAType]], copy=builtins.bool)",1
"numpy.array(list[Union[numpy.uint16, pandas._libs.missing.NAType]], copy=builtins.bool)",1
"numpy.array(list[Union[numpy.uint32, pandas._libs.missing.NAType]], copy=builtins.bool)",1
"numpy.array(list[Union[numpy.uint64, pandas._libs.missing.NAType]], copy=builtins.bool)",1
numpy.int8 + pandas.core.arrays.integer.IntegerArray,1
numpy.int8 + numpy.ndarray,1
numpy.int16 + pandas.core.arrays.integer.IntegerArray,1
numpy.int16 + numpy.ndarray,1
numpy.int32 + pandas.core.arrays.integer.IntegerArray,1
numpy.int32 + numpy.ndarray,1
numpy.int64 + pandas.core.arrays.integer.IntegerArray,1
numpy.uint8 + pandas.core.arrays.integer.IntegerArray,1
numpy.uint8 + numpy.ndarray,1
numpy.uint16 + pandas.core.arrays.integer.IntegerArray,1
numpy.uint16 + numpy.ndarray,1
numpy.uint32 + pandas.core.arrays.integer.IntegerArray,1
numpy.uint32 + numpy.ndarray,1
numpy.uint64 + pandas.core.arrays.integer.IntegerArray,1
numpy.uint64 + numpy.ndarray,1
numpy.int8 - pandas.core.arrays.integer.IntegerArray,1
numpy.int8 - numpy.ndarray,1
numpy.int16 - pandas.core.arrays.integer.IntegerArray,1
numpy.int16 - numpy.ndarray,1
numpy.int32 - pandas.core.arrays.integer.IntegerArray,1
numpy.int32 - numpy.ndarray,1
numpy.int64 - pandas.core.arrays.integer.IntegerArray,1
numpy.int8 * pandas.core.arrays.integer.IntegerArray,1
numpy.int8 * numpy.ndarray,1
numpy.int16 * pandas.core.arrays.integer.IntegerArray,1
numpy.int16 * numpy.ndarray,1
numpy.int32 * pandas.core.arrays.integer.IntegerArray,1
numpy.int32 * numpy.ndarray,1
numpy.int64 * pandas.core.arrays.integer.IntegerArray,1
numpy.uint8 * pandas.core.arrays.integer.IntegerArray,1
numpy.uint8 * numpy.ndarray,1
numpy.uint16 * pandas.core.arrays.integer.IntegerArray,1
numpy.uint16 * numpy.ndarray,1
numpy.uint32 * pandas.core.arrays.integer.IntegerArray,1
numpy.uint32 * numpy.ndarray,1
numpy.uint64 * pandas.core.arrays.integer.IntegerArray,1
numpy.uint64 * numpy.ndarray,1
numpy.int8 // pandas.core.arrays.integer.IntegerArray,1
numpy.int8 // numpy.ndarray,1
numpy.int16 // pandas.core.arrays.integer.IntegerArray,1
numpy.int16 // numpy.ndarray,1
numpy.int32 // pandas.core.arrays.integer.IntegerArray,1
numpy.int32 // numpy.ndarray,1
numpy.int64 // pandas.core.arrays.integer.IntegerArray,1
numpy.int64 // numpy.ndarray,1
numpy.uint8 // pandas.core.arrays.integer.IntegerArray,1
numpy.uint8 // numpy.ndarray,1
numpy.uint16 // pandas.core.arrays.integer.IntegerArray,1
numpy.uint16 // numpy.ndarray,1
numpy.uint32 // pandas.core.arrays.integer.IntegerArray,1
numpy.uint32 // numpy.ndarray,1
numpy.uint64 // pandas.core.arrays.integer.IntegerArray,1
numpy.uint64 // numpy.ndarray,1
numpy.int8 / pandas.core.arrays.integer.IntegerArray,1
numpy.int8 / numpy.ndarray,1
numpy.int16 / pandas.core.arrays.integer.IntegerArray,1
numpy.int16 / numpy.ndarray,1
numpy.int32 / pandas.core.arrays.integer.IntegerArray,1
numpy.int32 / numpy.ndarray,1
numpy.int64 / pandas.core.arrays.integer.IntegerArray,1
numpy.uint8 / pandas.core.arrays.integer.IntegerArray,1
numpy.uint8 / numpy.ndarray,1
numpy.uint16 / pandas.core.arrays.integer.IntegerArray,1
numpy.uint16 / numpy.ndarray,1
numpy.uint32 / pandas.core.arrays.integer.IntegerArray,1
numpy.uint32 / numpy.ndarray,1
numpy.uint64 / pandas.core.arrays.integer.IntegerArray,1
numpy.uint64 / numpy.ndarray,1
numpy.int8 ** pandas.core.arrays.integer.IntegerArray,1
numpy.int8 ** numpy.ndarray,1
"numpy.array(list[numpy.int8], copy=builtins.bool)",1
"numpy.generic.astype(numpy.int16, numpy.dtype)",1
numpy.int32 ** pandas.core.arrays.integer.IntegerArray,1
numpy.int32 ** numpy.ndarray,1
"numpy.array(list[numpy.int32], copy=builtins.bool)",1
"numpy.generic.astype(numpy.int64, numpy.dtype)",1
numpy.uint8 ** pandas.core.arrays.integer.IntegerArray,1
numpy.uint8 == int,1
numpy.uint8 ** numpy.ndarray,1
"numpy.array(list[numpy.uint8], copy=builtins.bool)",1
"numpy.generic.astype(numpy.uint16, numpy.dtype)",1
numpy.uint32 ** pandas.core.arrays.integer.IntegerArray,1
numpy.uint32 == int,1
numpy.uint32 ** numpy.ndarray,1
"numpy.array(list[numpy.uint32], copy=builtins.bool)",1
"numpy.generic.astype(numpy.uint64, numpy.dtype)",1
numpy.int8 % pandas.core.arrays.integer.IntegerArray,1
numpy.int8 % numpy.ndarray,1
numpy.int16 % pandas.core.arrays.integer.IntegerArray,1
numpy.int16 % numpy.ndarray,1
numpy.int32 % pandas.core.arrays.integer.IntegerArray,1
numpy.int32 % numpy.ndarray,1
numpy.int64 % pandas.core.arrays.integer.IntegerArray,1
numpy.int64 % numpy.ndarray,1
numpy.uint8 % pandas.core.arrays.integer.IntegerArray,1
numpy.uint8 % numpy.ndarray,1
numpy.uint16 % pandas.core.arrays.integer.IntegerArray,1
numpy.uint16 % numpy.ndarray,1
numpy.uint32 % pandas.core.arrays.integer.IntegerArray,1
numpy.uint32 % numpy.ndarray,1
numpy.uint64 % pandas.core.arrays.integer.IntegerArray,1
numpy.uint64 % numpy.ndarray,1
"numpy.ndarray[slilist[numpy.int16]e[NoneType, NoneType, NoneType]] = list[numpy.int16]",1
"numpy.ndarray[slilist[numpy.uint8]e[NoneType, NoneType, NoneType]] = list[numpy.uint8]",1
"numpy.ndarray[slilist[numpy.uint32]e[NoneType, NoneType, NoneType]] = list[numpy.uint32]",1
"numpy.ndarray[slilist[numpy.int8]e[NoneType, NoneType, NoneType]] = list[numpy.int8]",1
"numpy.ndarray[slilist[numpy.int32]e[NoneType, NoneType, NoneType]] = list[numpy.int32]",1
"numpy.ndarray[slilist[numpy.uint16]e[NoneType, NoneType, NoneType]] = list[numpy.uint16]",1
"numpy.ndarray[slilist[numpy.uint64]e[NoneType, NoneType, NoneType]] = list[numpy.uint64]",1
"numpy.array(list[Union[numpy.float32, pandas._libs.missing.NAType]], copy=builtins.bool)",1
"numpy.array(list[Union[numpy.float64, pandas._libs.missing.NAType]], copy=builtins.bool)",1
"numpy.ndarray[slilist[Union[numpy.float32, pandas._libs.missing.NAType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.float32, pandas._libs.missing.NAType]]",1
"numpy.array(list[numpy.int64], copy=builtins.bool)",3
"numpy.array(list[numpy.uint16], copy=builtins.bool)",1
"numpy.array(list[numpy.uint64], copy=builtins.bool)",1
"numpy.array(list[Union[numpy.bool_, pandas._libs.missing.NAType]], copy=builtins.bool)",1
"numpy.ndarray[slilist[Union[numpy.bool_, pandas._libs.missing.NAType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.bool_, pandas._libs.missing.NAType]]",1
"numpy.array(list[Union[numpy.int8, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1
int == numpy.int16,2
"numpy.array(pandas.core.arrays.integer.IntegerArray, dtype=Type[builtins.object])",1
"numpy.array(list[Union[numpy.int32, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1
"numpy.array(list[Union[numpy.uint8, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1
int == numpy.uint16,2
"numpy.array(list[Union[numpy.uint32, pandas._libs.missing.NAType]], dtype=Type[builtins.object])",1
int == numpy.uint64,2
numpy.int8 != numpy.int8,3
numpy.int16 != numpy.int16,2
"numpy.array(list[numpy.int16], copy=builtins.bool)",1
numpy.int32 != numpy.int32,3
numpy.int64 != numpy.int64,5
numpy.uint8 != numpy.uint8,3
numpy.uint16 != numpy.uint16,2
numpy.uint32 != numpy.uint32,3
numpy.uint64 != numpy.uint64,2
numpy.ndarray[tuple[numpy.ndarray]] = numpy.uint8,1
numpy.ndarray[tuple[numpy.ndarray]] = numpy.uint16,1
numpy.ndarray[tuple[numpy.ndarray]] = numpy.uint32,1
numpy.ndarray[tuple[numpy.ndarray]] = numpy.uint64,1
"numpy.ndarray[slilist[pandas.core.arrays.integer.IntegerArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.integer.IntegerArray]",1
"numpy.can_cast(numpy.int8, numpy.dtype)",1
"numpy.can_cast(numpy.int32, numpy.dtype)",1
numpy.int64(numpy.int64),4
"numpy.can_cast(numpy.uint8, numpy.dtype)",1
"numpy.can_cast(numpy.uint16, numpy.dtype)",1
"numpy.can_cast(numpy.uint32, numpy.dtype)",1
"numpy.can_cast(numpy.uint64, numpy.dtype)",1
numpy.int8(numpy.int8),1
numpy.int32(numpy.int32),1
numpy.uint8(numpy.uint8),1
numpy.uint32(numpy.uint32),1
numpy.ndarray[int] = numpy.int8,2
numpy.ndarray[int] = numpy.int32,1
numpy.ndarray[int] = numpy.uint8,1
numpy.ndarray[int] = numpy.uint32,1
pandas.core.series.Series == numpy.int16,1
pandas.core.series.Series == numpy.int64,6
pandas.core.series.Series == numpy.uint16,1
pandas.core.series.Series == numpy.uint64,1
pandas.core.arrays.integer.IntegerArray == numpy.int8,1
pandas.core.arrays.integer.IntegerArray == numpy.int32,1
pandas.core.arrays.integer.IntegerArray == numpy.uint8,1
pandas.core.arrays.integer.IntegerArray == numpy.uint32,1
numpy.ndim(a=pandas.core.arrays.integer.IntegerArray),1
"numpy.array(pandas.core.arrays.integer.IntegerArray, copy=builtins.bool)",2
"numpy.ndarray[slinumpy.int8e[NoneType, int, NoneType]] = numpy.int8",1
"numpy.ndarray[slinumpy.int32e[NoneType, int, NoneType]] = numpy.int32",1
"numpy.ndarray[slinumpy.uint8e[NoneType, int, NoneType]] = numpy.uint8",1
"numpy.ndarray[slinumpy.uint32e[NoneType, int, NoneType]] = numpy.uint32",1
"numpy.ndarray[slinumpy.int16e[int, int, NoneType]] = numpy.int16",1
"numpy.ndarray[slinumpy.int64e[int, int, NoneType]] = numpy.int64",1
"numpy.ndarray[slinumpy.uint16e[int, int, NoneType]] = numpy.uint16",1
"numpy.ndarray[slinumpy.uint64e[int, int, NoneType]] = numpy.uint64",1
"numpy.argsort(a=pandas.core.arrays.integer.IntegerArray, kind=str)",1
numpy.int8 - int,1
numpy.int32 - int,1
numpy.uint8 - int,1
numpy.uint32 - int,1
numpy.ndarray[numpy.ndarray] = numpy.float64,6
numpy.int16 - int,1
numpy.uint16 - int,1
numpy.uint64 - int,1
numpy.int8 + numpy.int8,4
pandas._linumpy.int8s.missing.NAType + numpy.int8,1
numpy.int16 + numpy.int16,4
pandas._linumpy.int16s.missing.NAType + numpy.int16,2
numpy.int32 + numpy.int32,4
pandas._linumpy.int32s.missing.NAType + numpy.int32,1
pandas._linumpy.int64s.missing.NAType + numpy.int64,2
numpy.uint8 + numpy.uint8,4
pandas._linumpy.uint8s.missing.NAType + numpy.uint8,1
numpy.uint16 + numpy.uint16,4
pandas._linumpy.uint16s.missing.NAType + numpy.uint16,2
numpy.uint32 + numpy.uint32,4
pandas._linumpy.uint32s.missing.NAType + numpy.uint32,1
numpy.uint64 + numpy.uint64,6
pandas._linumpy.uint64s.missing.NAType + numpy.uint64,2
"numpy.asarray(a=pandas.core.arrays.integer.IntegerArray, dtype=numpy.dtype)",1
Type[pandas.core.arrays.integer.IntegerArray] == Type[numpy.int8],1
Type[pandas.core.arrays.integer.IntegerArray] == Type[numpy.int16],1
Type[pandas.core.arrays.integer.IntegerArray] == Type[numpy.int32],1
Type[pandas.core.arrays.integer.IntegerArray] == Type[numpy.int64],1
Type[pandas.core.arrays.integer.IntegerArray] == Type[numpy.uint8],1
Type[pandas.core.arrays.integer.IntegerArray] == Type[numpy.uint32],1
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.Int8Dtype]])",1
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.Int32Dtype]])",1
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.UInt8Dtype]])",1
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.integer.UInt32Dtype]])",1
"numpy.prod(a=numpy.ndarray, where=numpy.ndarray)",1
numpy.isnan(numpy.bool_),1
numpy.int64 /= float,1
pandas.core.dtypes.dtypes.IntervalDtype != numpy.dtype,1
"numpy.asarray(a=pandas.core.arrays.interval.IntervalArray, dtype=NoneType)",3
numpy.array(list[pandas.core.dtypes.dtypes.IntervalDtype]),1
numpy.ndarray[numpy.ndarray] = list[pandas.core.arrays.interval.IntervalArray],1
"numpy.ndarray[slilist[Union[float, pandas._libs.interval.Interval]]e[NoneType, NoneType, NoneType]] = list[Union[float, pandas._libs.interval.Interval]]",1
pandas.core.dtypes.dtypes.IntervalDtype == Type[numpy.object_],2
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.IntervalDtype]])",1
numpy.concatenate(list[pandas.core.indexes.numeric.Float64Index]),2
"numpy.ndarray[slilist[pandas.core.arrays.interval.IntervalArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.interval.IntervalArray]",1
"numpy.array(list[pandas._libs.interval.Interval], dtype=Type[builtins.object])",3
"numpy.ndarray[slilist[Union[builtins.bool, numpy.bool_]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, numpy.bool_]]",1
numpy.ndarray[numpy.ndarray] = pandas.core.indexes.numeric.Float64Index,2
"numpy.ndarray.searchsorted(numpy.ndarray, pandas._libs.interval.Interval, side=NoneType, sorter=str)",1
"numpy.repeat(a=pandas.core.arrays.interval.IntervalArray, repeats=int)",1
"numpy.repeat(a=pandas.core.arrays.interval.IntervalArray, repeats=list[int])",2
numpy.ndarray[numpy.ndarray] = pandas.core.indexes.numeric.Int64Index,2
"numpy.ndarray[slinumpy.float64e[NoneType, int, NoneType]] = numpy.float64",3
"numpy.ndarray[slipandas.core.indexes.numeric.Float64Indexe[NoneType, int, NoneType]] = pandas.core.indexes.numeric.Float64Index",2
pandas.core.arrays.numpy_.PandasDtype == numpy.dtype,1
"numpy.array(pandas.core.arrays.numpy_.PandasArray, copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.asarray(a=list[float], dtype=numpy.dtype)",1
numpy.array(list[pandas.core.arrays.numpy_.PandasDtype]),1
"numpy.asarray(a=list[numpy.float64], dtype=NoneType)",2
"numpy.asarray(a=list[numpy.float64], dtype=numpy.dtype)",2
"numpy.asarray(a=list[Union[float, tuple[int]]], dtype=numpy.dtype)",1
"numpy.asarray(a=pandas.core.arrays.numpy_.PandasArray, dtype=Type[builtins.object])",1
"numpy.array(pandas.core.arrays.numpy_.PandasArray, copy=builtins.bool)",2
"numpy.ndarray[slilist[pandas.core.arrays.numpy_.PandasArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.numpy_.PandasArray]",1
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.numpy_.PandasDtype]])",1
numpy.concatenate(list[pandas.core.arrays.numpy_.PandasArray]),1
"numpy.array(pandas.core.arrays.numpy_.PandasArray, copy=pandas.core.arrays.numpy_.PandasDtype, dtype=builtins.bool)",1
"numpy.asarray(a=tuple[int], dtype=numpy.dtype)",1
numpy.float64 != numpy.float64,8
numpy.ndarray == tuple[int],4
numpy.array(pandas.core.arrays.numpy_.PandasArray),3
"numpy.array(list[numpy.float64], dtype=Type[builtins.object])",1
"numpy.argsort(a=pandas.core.arrays.numpy_.PandasArray, kind=str)",2
numpy.array(list[numpy.int64]),5
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.arrays.numpy_.PandasArray, side=NoneType, sorter=str)",1
"numpy.asarray(a=list[Union[float, numpy.float64]], dtype=numpy.dtype)",1
"numpy.repeat(a=pandas.core.arrays.numpy_.PandasArray, repeats=int)",1
"numpy.repeat(a=pandas.core.arrays.numpy_.PandasArray, repeats=list[int])",1
pandas.core.arrays.numpy_.PandasArray | numpy.ndarray,1
Type[pandas.core.arrays.numpy_.PandasArray] == Type[numpy.float64],1
numpy.float64 + pandas.core.arrays.numpy_.PandasArray,1
numpy.float64 * pandas.core.arrays.numpy_.PandasArray,1
numpy.float64 / pandas.core.arrays.numpy_.PandasArray,1
numpy.float64 % pandas.core.arrays.numpy_.PandasArray,1
pandas.core.arrays.numpy_.PandasDtype == Type[numpy.object_],1
numpy.ndim(a=pandas.core.arrays.numpy_.PandasArray),1
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.PeriodDtype]])",1
"numpy.asarray(a=pandas.core.arrays.period.PeriodArray, dtype=numpy.dtype)",3
"numpy.asarray(a=pandas.core.arrays.period.PeriodArray, dtype=Type[builtins.object])",1
list[pandas.core.arrays.period.PeriodArray] * numpy.int64,1
numpy.array(list[pandas.core.arrays.period.PeriodArray]),1
numpy.ndarray[numpy.ndarray] = list[pandas.core.arrays.period.PeriodArray],1
"numpy.argsort(a=pandas.core.arrays.period.PeriodArray, kind=str)",1
"numpy.repeat(a=pandas.core.arrays.period.PeriodArray, repeats=int)",1
"numpy.repeat(a=pandas.core.arrays.period.PeriodArray, repeats=list[int])",2
"numpy.array(pandas.core.arrays.period.PeriodArray, dtype=Type[builtins.object])",1
"numpy.asarray(a=list[pandas.tseries.offsets.Day], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[pandas.core.arrays.period.PeriodArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.period.PeriodArray]",1
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.sparse.dtype.SparseDtype]])",1
numpy.array(pandas.core.arrays.sparse.array.SparseArray),4
"numpy.issubdtype(arg1=Type[numpy.int64], arg2=Type[numpy.integer])",1
"numpy.ndarray[slilist[Union[int, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[int, numpy.int64]]",1
pandas.core.arrays.sparse.dtype.SparseDtype == numpy.dtype,1
pandas.core.arrays.sparse.dtype.SparseDtype == Type[numpy.object_],1
"numpy.ndarray[slilist[pandas.core.arrays.sparse.array.SparseArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.sparse.array.SparseArray]",1
numpy.result_type(Type[builtins.int]),1
numpy.atleast_2d(arys=tuple[pandas.core.arrays.sparse.array.SparseArray]),1
"numpy.asarray(a=pandas.core.arrays.sparse.array.SparseArray, dtype=NoneType)",2
"numpy.where(numpy.ndarray, numpy.float64, numpy.ndarray)",1
"numpy.result_type(numpy.ndarray, Type[numpy.float64])",1
"numpy.argsort(a=pandas.core.arrays.sparse.array.SparseArray, kind=str)",1
"numpy.array(pandas.core.arrays.sparse.array.SparseArray, copy=builtins.bool)",1
"numpy.ndarray[sliinte[int, NoneType, int]] = int",1
numpy.random.uniform,2
"numpy.ndarray[slifloate[int, NoneType, int]] = float",2
"numpy.repeat(a=pandas.core.arrays.sparse.array.SparseArray, repeats=int)",2
"numpy.repeat(a=pandas.core.arrays.sparse.array.SparseArray, repeats=list[int])",2
"numpy.repeat(a=pandas.core.arrays.sparse.array.SparseArray, axis=int, repeats=int)",1
"numpy.repeat(pandas.core.arrays.sparse.array.SparseArray, int, foo=str)",1
"numpy.where(numpy.ndarray, pandas.core.arrays.sparse.array.SparseArray, float)",1
"numpy.where(numpy.ndarray, pandas.core.arrays.sparse.array.SparseArray, pandas.core.arrays.sparse.array.SparseArray)",1
"numpy.asarray(a=pandas.core.arrays.sparse.array.SparseArray, dtype=Type[numpy.bool_])",1
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.ndarray, str, NoneType)",1
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.ndarray, str, numpy.ndarray)",1
"numpy.result_type(numpy.dtype, Type[builtins.str])",1
"numpy.result_type(numpy.ndarray, Type[builtins.str])",1
"numpy.result_type(numpy.ndarray, Type[numpy.int64])",1
numpy.float64 + pandas.core.arrays.sparse.array.SparseArray,1
numpy.float64 * pandas.core.arrays.sparse.array.SparseArray,1
numpy.float64 // numpy.ndarray,1
numpy.float64 / pandas.core.arrays.sparse.array.SparseArray,1
numpy.float64 ** numpy.ndarray,1
numpy.float64 % pandas.core.arrays.sparse.array.SparseArray,1
numpy.ndarray[pandas.floatore.arrays.sparse.array.SparseArray] = float,1
"numpy.array(list[Union[numpy.dtype, pandas.core.arrays.string_.StringDtype]])",1
numpy.array(pandas.core.arrays.string_.StringArray),2
"numpy.array(pandas.core.arrays.string_.StringArray, dtype=Type[builtins.object])",1
"numpy.asarray(a=list[pandas._libs.missing.NAType], dtype=str)",1
"numpy.asarray(a=list, dtype=str)",3
list[pandas.core.arrays.string_.StringArray] * numpy.int64,1
numpy.array(list[pandas.core.arrays.string_.StringArray]),1
numpy.ndarray[numpy.ndarray] = list[pandas.core.arrays.string_.StringArray],1
numpy.concatenate(list[pandas.core.arrays.string_.StringArray]),1
"numpy.array(pandas.core.arrays.string_.StringArray, copy=builtins.bool)",2
"numpy.argsort(a=pandas.core.arrays.string_.StringArray, kind=str)",2
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.arrays.string_.StringArray, side=NoneType, sorter=str)",2
"numpy.repeat(a=pandas.core.arrays.string_.StringArray, repeats=int)",2
"numpy.repeat(a=pandas.core.arrays.string_.StringArray, repeats=list[int])",2
"numpy.repeat(a=pandas.core.arrays.string_.StringArray, axis=int, repeats=int)",1
"numpy.repeat(pandas.core.arrays.string_.StringArray, int, foo=str)",1
"numpy.ndarray[slilist[pandas.core.arrays.string_.StringArray]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.string_.StringArray]",1
"numpy.array(list[Union[numpy.dtype, pandas.tests.extension.decimal.array.DecimalDtype]])",1
numpy.ndarray[int] = decimal.Decimal,2
"numpy.array(list, dtype=Type[builtins.bool])",5
numpy.array(list[pandas.tests.extension.decimal.array.DecimalDtype]),1
pandas.tests.extension.decimal.array.DecimalDtype == numpy.dtype,1
"numpy.asarray(a=pandas.tests.extension.decimal.array.DecimalArray, dtype=numpy.dtype)",1
"numpy.ndarray[slilist[pandas.tests.extension.decimal.array.DecimalArray]e[NoneType, NoneType, NoneType]] = list[pandas.tests.extension.decimal.array.DecimalArray]",1
numpy.asarray(a=pandas.tests.extension.decimal.array.DecimalArray),1
numpy.ndarray[numpy.ndarray] = decimal.Decimal,1
"numpy.ndarray.sum(numpy.ndarray, axis=int)",1
"numpy.asarray(a=pandas.tests.extension.decimal.array.DecimalArray, dtype=NoneType)",2
"numpy.ndarray.max(numpy.ndarray, axis=int)",1
"numpy.ndarray.min(numpy.ndarray, axis=int)",1
"numpy.ndarray.mean(numpy.ndarray, axis=int)",1
"numpy.ndarray.prod(numpy.ndarray, axis=int)",1
"numpy.ndarray.std(numpy.ndarray, axis=int)",1
"numpy.ndarray.var(numpy.ndarray, axis=int)",1
"numpy.ndarray.all(numpy.ndarray, axis=int)",1
"numpy.ndarray.any(numpy.ndarray, axis=int)",1
"numpy.argsort(a=pandas.tests.extension.decimal.array.DecimalArray, kind=str)",1
numpy.array(pandas.tests.extension.decimal.array.DecimalArray),2
"numpy.asarray(a=list[decimal.Decimal], dtype=NoneType)",2
"numpy.ndarray.searchsorted(numpy.ndarray, decimal.Decimal, side=NoneType, sorter=str)",1
numpy.ndarray[numpy.ndarray] = list[decimal.Decimal],1
"numpy.asarray(a=list[builtins.bool], dtype=Type[builtins.bool])",2
"numpy.asarray(a=list, dtype=Type[builtins.bool])",1
"numpy.array(pandas.tests.extension.decimal.array.DecimalArray, copy=builtins.bool)",1
"numpy.sum(a=pandas.core.series.Series, axis=int)",2
numpy.ndarray[numpy.ndarray] = list,1
"numpy.ndarray[slidecimal.Decimale[NoneType, int, NoneType]] = decimal.Decimal",1
"numpy.ndarray[slilist[decimal.Decimal]e[NoneType, int, NoneType]] = list[decimal.Decimal]",1
"numpy.asarray(a=tuple[decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal], dtype=Type[builtins.object])",1
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[int], int)",1
numpy.asarray(a=list[decimal.Decimal]),2
"numpy.array(list[decimal.Decimal], dtype=str)",2
"numpy.asarray(a=tuple[decimal.Decimal, decimal.Decimal, decimal.Decimal, decimal.Decimal], dtype=Type[builtins.object])",1
numpy.exp(pandas.core.series.Series),2
"numpy.add(pandas.core.series.Series, decimal.Decimal)",1
"numpy.add(pandas.tests.extension.decimal.array.DecimalArray, decimal.Decimal)",1
"numpy.add(pandas.core.series.Series, pandas.tests.extension.decimal.array.DecimalArray)",1
"numpy.array(list[Union[numpy.dtype, pandas.tests.extension.json.array.JSONDtype]])",1
numpy.array(pandas.tests.extension.json.array.JSONArray),1
"numpy.asarray(a=list[collections.UserDict], dtype=Type[builtins.object])",1
"numpy.array(list[dict], copy=Type[builtins.object], dtype=builtins.bool)",1
numpy.array(list[pandas.tests.extension.json.array.JSONDtype]),1
"numpy.asarray(a=pandas.tests.extension.json.array.JSONArray, dtype=numpy.dtype)",2
"numpy.asarray(a=list[collections.UserDict], dtype=numpy.dtype)",1
"numpy.asarray(a=pandas.tests.extension.json.array.JSONArray, dtype=Type[builtins.object])",2
list[pandas.tests.extension.json.array.JSONArray] * numpy.int64,1
numpy.array(list[pandas.tests.extension.json.array.JSONArray]),1
numpy.ndarray[numpy.ndarray] = list[pandas.tests.extension.json.array.JSONArray],1
"numpy.array(list, copy=Type[builtins.object], dtype=builtins.bool)",1
pandas.tests.extension.json.array.JSONDtype == numpy.dtype,1
"numpy.array(list[dict], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.array(list[dict], copy=str, dtype=builtins.bool)",1
"numpy.array(list[Union[tuple, tuple[tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int]], tuple[tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int]]]], dtype=Type[builtins.object])",1
"numpy.array(list[Union[tuple, tuple[tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int], tuple[str, int]]]], dtype=Type[builtins.object])",1
numpy.asarray(a=pandas.tests.extension.json.array.JSONArray),1
"numpy.array(list[Union[tuple, tuple[tuple[str, int]]]], dtype=Type[builtins.object])",1
"numpy.array(list[Union[tuple, tuple[tuple[str, int], tuple[str, int]], tuple[tuple[str, int]]]], dtype=Type[builtins.object])",1
"numpy.array(list[tuple], dtype=Type[builtins.object])",1
"numpy.repeat(a=pandas.tests.extension.json.array.JSONArray, repeats=int)",2
"numpy.repeat(a=pandas.tests.extension.json.array.JSONArray, repeats=list[int])",2
"numpy.repeat(a=pandas.tests.extension.json.array.JSONArray, axis=int, repeats=int)",1
"numpy.repeat(pandas.tests.extension.json.array.JSONArray, int, foo=str)",1
"numpy.argsort(a=pandas.tests.extension.json.array.JSONArray, kind=str)",1
"numpy.asarray(a=pandas.tests.extension.json.array.JSONArray, dtype=NoneType)",1
"numpy.ndarray[slilist[pandas.tests.extension.json.array.JSONArray]e[NoneType, NoneType, NoneType]] = list[pandas.tests.extension.json.array.JSONArray]",1
"numpy.ndarray[slilist[collections.UserDict]e[NoneType, NoneType, NoneType]] = list[collections.UserDict]",1
"numpy.array(builtins.bool, copy=NoneType, dtype=builtins.bool)",2
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, int)",7
numpy.int64 in dict,1
"numpy.asarray(a=tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[numpy.float64, str]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.float64, str]]",1
numpy.nansum(a=numpy.ndarray),1
numpy.prod(a=numpy.ndarray),2
numpy.nanprod(a=numpy.ndarray),1
"numpy.var(a=pandas.core.series.Series, ddof=int)",4
"numpy.std(a=pandas.core.series.Series, ddof=int)",10
numpy.sqrt(int),7
"numpy.ndarray[slilist[Union[numpy.int64, str]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.int64, str]]",1
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, tuple[int, int])",8
"numpy.asarray(a=tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64], dtype=Type[builtins.object])",1
numpy.ndarray.any,12
numpy.timedelta64(),1
"numpy.ndarray.fill(numpy.ndarray, numpy.datetime64)",3
"numpy.ndarray[slilist[Union[float, int, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[float, int, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp, str]]",1
numpy.float64 != float,1
"numpy.ndarray[slilist[Union[float, numpy.float64, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.float64, numpy.int64]]",1
"numpy.ndarray[slilist[Union[numpy.float64, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.float64, numpy.int64]]",1
"numpy.ndarray[slilist[Union[float, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.int64]]",1
numpy.isnan(pandas.core.frame.DataFrame),3
numpy.ndarray.mean,1
"numpy.asarray(a=tuple[numpy.int64], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[numpy.datetime64, numpy.float64, numpy.timedelta64]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.datetime64, numpy.float64, numpy.timedelta64]]",1
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]]",2
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, size=tuple[int, int])",5
"numpy.array(list[numpy.bool_], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.asarray(a=tuple[numpy.int64, numpy.int64, numpy.int64], dtype=Type[builtins.object])",1
numpy.bool_.item,2
builtins.function.__name__,3
numpy.any(a=pandas.core.frame.DataFrame),2
numpy.bool_(pandas._libs.tslibs.timedeltas.Timedelta),1
"numpy.dot(numpy.ndarray, numpy.ndarray)",14
numpy.transpose(a=numpy.ndarray),2
numpy.transpose(a=list[list[float]]),2
"numpy.ndarray.round(numpy.ndarray, int)",6
"numpy.full(dtype=numpy.dtype, fill_value=pandas._libs.tslibs.nattype.NaTType, shape=tuple[int])",1
float != numpy.float64,1
numpy.ndarray[int] = pandas._libs.tslibs.timestamps.Timestamp,4
"numpy.ndarray[slilist[builtins.set]e[NoneType, NoneType, NoneType]] = list[builtins.set]",1
"numpy.ndarray[slituple[float, float, float, float]e[NoneType, NoneType, NoneType]] = tuple[float, float, float, float]",1
"numpy.ndarray[slilist[Union[builtins.range, numpy.ndarray]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.range, numpy.ndarray]]",1
numpy.ndarray == numpy.int64,2
numpy.asarray(a=dict),1
numpy.sqrt,11
"numpy.array(list[numpy.float64], copy=builtins.bool)",1
"numpy.array(numpy.bool_, copy=NoneType, dtype=builtins.bool)",1
"numpy.ndarray.fill(numpy.ndarray, numpy.bool_)",1
"numpy.ndarray.fill(numpy.ndarray, numpy.float64)",3
"numpy.ndarray[tuple[slilist[int]e[NoneType, NoneType, NoneType], int]] = list[int]",1
"numpy.ndarray[tuple[slipandas.core.series.Seriese[NoneType, NoneType, NoneType], int]] = pandas.core.series.Series",1
"numpy.isclose(a=numpy.ndarray, b=numpy.ndarray)",1
numpy.str_ + str,1
numpy.percentile,14
"numpy.percentile(a=numpy.ndarray, axis=str, interpolation=int, q=numpy.ndarray)",1
"numpy.repeat(a=str, repeats=int)",4
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.DatetimeTZDtype, pandas.core.dtypes.dtypes.PeriodDtype]])",1
"numpy.ndarray[slilist[list[float]]e[NoneType, NoneType, NoneType]] = list[list[float]]",1
numpy.fft.fft,1
numpy.fft.rfft,1
"numpy.ndarray[slilist[tuple[float, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[tuple[float, pandas._libs.tslibs.timestamps.Timestamp]]",1
"numpy.ndarray[slilist[Union[list, list[str]]]e[NoneType, NoneType, NoneType]] = list[Union[list, list[str]]]",1
"numpy.ndarray[slituple[int, int]e[NoneType, NoneType, NoneType]] = tuple[int, int]",1
numpy.abs,3
"numpy.ndarray[slilist[Union[numpy.float64, pandas.core.series.Series]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.float64, pandas.core.series.Series]]",1
numpy.cumprod,1
numpy.maximum,5
numpy.minimum,6
"numpy.cumsum(a=numpy.ndarray, axis=int)",2
"numpy.ndarray[slilist[Union[float, int, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[float, int, pandas._libs.tslibs.timestamps.Timestamp, str]]",1
numpy.ufunc.accumulate,4
"numpy.cumprod(a=numpy.ndarray, axis=int)",2
"numpy.ones(shape=tuple[int, int, int, int])",2
"numpy.ndarray[tuple[int, int]] = float",3
"numpy.array(list[Union[NoneType, builtins.complex, float, int]])",1
"numpy.array(list[Union[NoneType, builtins.complex, float]])",1
numpy.ndarray > builtins.complex,1
"numpy.ndarray[slilist[Union[datetime.datetime, str]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.datetime, str]]",1
"numpy.generic.view(numpy.timedelta64, str)",6
"numpy.ones(shape=tuple[int, int, int])",2
"numpy.ones(shape=tuple[int, int, int, int, int])",2
numpy.common_type,1
"numpy.common_type(arrays=tuple[numpy.ndarray, numpy.ndarray])",1
"numpy.array(collections.deque, copy=builtins.bool)",1
numpy.ndarray + list[float],1
numpy.random.rand,1
"numpy.linspace(num=int, start=float, stop=float)",3
numpy.int64 in pandas._libs.index.Int8Engine,1
"numpy.asarray(a=pandas.core.indexes.numeric.Int64Index, dtype=Type[numpy.int64])",2
"numpy.ndarray[slilist[Union[NoneType, float, int]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, float, int]]",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, NoneType)",1
"numpy.ones(dtype=str, shape=tuple[int, int])",2
"numpy.ndarray[tuple[numpy.ndarray, slifloate[NoneType, NoneType, NoneType]]] = float",1
pandas.core.series.Series + numpy.float64,2
pandas.core.series.Series == numpy.dtype,2
"numpy.ndarray[slituple[int, int, int]e[NoneType, NoneType, NoneType]] = tuple[int, int, int]",1
"numpy.zeros(tuple[int, int, int])",2
"numpy.ndarray[slilist[Union[NoneType, float]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, float]]",1
"numpy.ndarray[slilist[Union[str, tuple[str, str]]]e[NoneType, NoneType, NoneType]] = list[Union[str, tuple[str, str]]]",1
"numpy.ones(dtype=Type[builtins.int], shape=tuple[int, int])",2
"numpy.arange(int, int, int)",23
numpy.ndarray + builtins.complex,1
"numpy.ndarray[tuple[numpy.int64, numpy.int64]]",1
"numpy.ndarray[tuple[int, int]] = numpy.complex128",1
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1
numpy.float32(),1
numpy.float16(),1
numpy.dtype == Type[numpy.float16],3
numpy.dtype == Type[numpy.uint8],2
"numpy.asarray(a=list[Union[builtins.bool, datetime.datetime]], dtype=Type[numpy.object_])",1
"numpy.asarray(a=list[Union[builtins.bool, builtins.complex]], dtype=Type[numpy.object_])",1
"numpy.asarray(a=list[Union[builtins.complex, float]], dtype=Type[numpy.complex128])",1
"numpy.ndarray[slilist[Union[NoneType, builtins.bool, float, int]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, builtins.bool, float, int]]",1
"numpy.ndarray[slilist[Union[NoneType, datetime.datetime, float, int]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, datetime.datetime, float, int]]",1
"numpy.dtype(list[tuple[str, str]])",3
numpy.pi,3
numpy.e,1
numpy.ndarray[tuple[numpy.ndarray]] = str,1
numpy.ndarray[list[numpy.int64]],2
"numpy.issubdtype(arg1=Type[numpy.int32], arg2=Type[numpy.integer])",1
"numpy.ndarray[slilist[list[Union[datetime.datetime, float, int, str]]]e[NoneType, NoneType, NoneType]] = list[list[Union[datetime.datetime, float, int, str]]]",1
"numpy.array(list[Union[NoneType, int]], dtype=Type[builtins.object])",2
"numpy.full(fill_value=int, shape=int)",1
"numpy.array(tuple[str, str], copy=builtins.bool)",1
"numpy.array(list[str], copy=Type[builtins.object], dtype=builtins.bool)",1
NoneType == Type[numpy.object_],1
numpy.array(list[pandas.core.frame.DataFrame]),1
"numpy.ndarray.astype(numpy.ndarray, Type[numpy.complex64])",1
"numpy.array(list[Union[NoneType, str]], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.array(list[Union[float, str]], copy=numpy.dtype, dtype=builtins.bool)",1
numpy.core.records.fromarrays,3
numpy.recarray.dtype,11
numpy.recarray[str],2
"numpy.zeros(tuple[int], dtype=list[tuple[str, str]])",1
"numpy.asarray(a=tuple[int, float, int], dtype=Type[builtins.object])",1
"numpy.array(tuple[numpy.int64, numpy.int64, float], copy=builtins.bool)",1
"numpy.asarray(a=list[Union[float, numpy.int64]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[pandas.core.frame.DataFrame]e[NoneType, NoneType, NoneType]] = list[pandas.core.frame.DataFrame]",1
"numpy.ndarray[slifloate[NoneType, int, NoneType]] = float",5
numpy.array(list[list[float]]),6
"numpy.asarray(a=tuple[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period], dtype=Type[builtins.object])",1
"numpy.ones(dtype=Type[builtins.float], shape=tuple[int, int])",1
numpy.ma.masked_all,6
numpy.ma.core.getmaskarray(arr=numpy.ma.core.MaskedArray),3
numpy.ma.core.MaskedArray.dtype,19
numpy.ma.core._arraymethod.<locals>.wrapped_method(self=numpy.ma.core.MaskedArray),3
numpy.ma.floatore.MaskedArray[numpy.ndarray] = float,2
numpy.asarray(a=numpy.ma.core.MaskedArray),3
numpy.ma.mrecords.MaskedRecords,1
numpy.ma.core.MaskedArray.soften_mask(self=numpy.ma.core.MaskedArray),2
"numpy.ma.extras.masked_all(shape=tuple[int, int, int])",1
"numpy.ma.extras.masked_all(shape=tuple[int, int])",1
"numpy.ma.extras.masked_all(dtype=Type[builtins.float], shape=tuple[int, int])",2
"numpy.ma.floatore.MaskedArray[tuple[int, int]] = float",1
"numpy.ma.intore.MaskedArray[tuple[int, int]] = int",2
int == numpy.float64,4
"numpy.ma.extras.masked_all(dtype=str, shape=tuple[int, int])",1
numpy.ma.numpy.datetime64ore.MaskedArray[numpy.ndarray] = numpy.datetime64,2
"numpy.ma.extras.masked_all(dtype=Type[builtins.bool], shape=tuple[int, int])",1
"numpy.ndarray.astype(numpy.ma.core.MaskedArray, numpy.dtype)",1
"numpy.ma.builtins.boolore.MaskedArray[tuple[int, int]] = builtins.bool",1
numpy.ma.core.MaskedArray.harden_mask(self=numpy.ma.core.MaskedArray),2
numpy.ma.ones,1
numpy.ma,7
"numpy.ma.core.<numpy.ma.core._convert2ma object at 0x7fa8c8089670>(args=tuple[int], params=dict)",1
numpy.ma.mrecords.mrecarray,1
numpy.ma.mrecords.MaskedRecords.fill_value,1
*numpy.recarray,1
numpy.recarray[int],5
numpy.ma.mrecords.MaskedRecords[str],1
"numpy.zeros(tuple[int, int], dtype=Type[builtins.int])",3
numpy.ma.masked_array,1
"numpy.ma.core.MaskedArray(data=numpy.ndarray, mask=list[builtins.bool])",1
"numpy.ma.core.MaskedArray(data=list[float], mask=builtins.bool)",1
"numpy.ma.mrecords.fromarrays(arraylist=tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], names=tuple[str, str, str])",1
"numpy.ma.mrecords.fromarrays(arraylist=tuple[numpy.ndarray, numpy.ndarray, numpy.ma.core.MaskedArray], names=tuple[str, str, str])",1
numpy.ma.core.getdata(a=numpy.ma.mrecords.MaskedRecords),1
numpy.ma.mrecords.fromarrays,1
numpy.ma.core.MaskedArray.filled(self=numpy.ma.core.MaskedArray),1
"numpy.can_cast(numpy.int64, numpy.dtype)",1
numpy.ndarray[numpy.ndarray] = numpy.str_,1
"numpy.ma.mrecords.fromarrays(arraylist=tuple[numpy.ndarray, numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray], names=tuple[str, str, str])",1
"numpy.ma.mrecords.fromarrays(arraylist=tuple[numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray], names=tuple[str, str, str])",1
"numpy.array(list[builtins.complex], copy=builtins.bool)",1
"numpy.ones(dtype=Type[numpy.float64], shape=int)",1
"numpy.array(array.array, copy=NoneType, dtype=builtins.bool)",1
"numpy.ndarray[slilist[tuple[str]]e[NoneType, NoneType, NoneType]] = list[tuple[str]]",1
"numpy.ndarray[slilist[Union[numpy.ndarray, pandas.core.series.Series]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.ndarray, pandas.core.series.Series]]",1
numpy.dtype(Type[numpy.str_]),1
"Type[numpy.str_] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
"numpy.array(str, copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.array(float, dtype=str)",1
"numpy.array(list[numpy.ndarray], copy=builtins.bool)",1
"numpy.ndarray[slilist[datetime.date]e[NoneType, NoneType, NoneType]] = list[datetime.date]",1
"numpy.asanyarray(a=list[numpy.int64], dtype=str)",1
"numpy.ndarray[slilist[tuple[int, float, str]]e[NoneType, NoneType, NoneType]] = list[tuple[int, float, str]]",2
"numpy.array(list[tuple[float, float, int, int]], dtype=list[tuple[str, Type[Union[numpy.float32, numpy.float64, numpy.int32, numpy.int64]]]])",1
"numpy.ndarray[slilist[list[Union[float, int, str]]]e[NoneType, NoneType, NoneType]] = list[list[Union[float, int, str]]]",1
numpy.core,2
"numpy.array(numpy.ndarray, dtype=Type[numpy.float64])",3
"numpy.array(numpy.ndarray, dtype=Type[numpy.int64])",3
"numpy.array(numpy.ndarray, dtype=Type[numpy.float32])",2
"numpy.array(numpy.ndarray, dtype=Type[numpy.int32])",1
numpy.dtype.descr,1
"numpy.array(list[tuple[numpy.float64, numpy.float64, numpy.float32, numpy.float32, numpy.int64, numpy.int32, numpy.bool_, str]], dtype=list[tuple[str, str]])",1
"numpy.ndarray.view(numpy.ndarray, Type[numpy.recarray])",1
numpy.rec,5
"numpy.core.records.fromarrays(arrayList=list[numpy.ndarray], dtype=dict)",1
builtins.float.is_integer(self=numpy.float64),1
"numpy.ndarray[slilist[tuple[datetime.date, datetime.date]]e[NoneType, NoneType, NoneType]] = list[tuple[datetime.date, datetime.date]]",1
"numpy.array(tuple[datetime.date], copy=builtins.bool)",1
"numpy.array(list[tuple[datetime.datetime, datetime.datetime]], dtype=list[tuple[str, str]])",1
"numpy.ndarray[tuple[slifloate[int, int, NoneType], int]] = float",1
"numpy.ndarray[tuple[slifloate[int, NoneType, NoneType], int]] = float",1
numpy.shape(a=pandas.core.frame.DataFrame),1
numpy.shape,3
"numpy.ufunc.accumulate(numpy.ufunc, numpy.ndarray, axis=int)",3
"numpy.array(Type[builtins.object], copy=NoneType, dtype=builtins.bool)",1
"numpy.ndarray.fill(numpy.ndarray, Type[builtins.object])",1
"numpy.array(numpy.dtype, copy=NoneType, dtype=builtins.bool)",1
"numpy.ndarray.fill(numpy.ndarray, numpy.dtype)",1
numpy.dtype != Type[numpy.float64],2
"numpy.ndarray[slilist[Union[numpy.dtype, pandas.core.dtypes.dtypes.DatetimeTZDtype]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.dtype, pandas.core.dtypes.dtypes.DatetimeTZDtype]]",1
"numpy.ndarray[slilist[Type[numpy.float64]]e[NoneType, NoneType, NoneType]] = list[Type[numpy.float64]]",1
"numpy.array(list[pandas._libs.tslibs.timestamps.Timestamp], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.asarray(a=list[pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",2
"numpy.array(list[pandas._libs.interval.Interval], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.asarray(a=list[pandas._libs.interval.Interval], dtype=Type[builtins.object])",2
"numpy.array(list[Union[NoneType, float]], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.asarray(a=list[Union[NoneType, float]], dtype=Type[builtins.object])",2
"numpy.array(list[list[int]], dtype=str)",12
"numpy.compress(a=list[str], condition=numpy.ndarray)",1
"numpy.ndarray[slilist[Union[NoneType, datetime.datetime, float]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, datetime.datetime, float]]",1
numpy.ndarray[tuple[numpy.ndarray]] = float,1
"numpy.broadcast_to(array=builtins.bool, shape=tuple[int])",1
"numpy.ndarray.cumsum(numpy.ndarray, int)",1
numpy.ndim(a=float),2
"numpy.ndarray[slifloate[int, NoneType, NoneType]] = float",2
"numpy.ndarray[tuple[slifloate[NoneType, NoneType, NoneType], slifloate[NoneType, NoneType, int]]] = float",1
"numpy.asanyarray(a=list[int], dtype=str)",1
numpy.generic,1
"numpy.tile(A=pandas.core.indexes.base.Index, reps=tuple[int, int])",1
"numpy.arange(numpy.int64, numpy.int64, NoneType, dtype=str)",1
"numpy.tile(A=numpy.ndarray, reps=tuple[int, int])",2
"numpy.where(numpy.ndarray, numpy.ndarray, float)",4
numpy.arange(float),15
"numpy.array(list[list[Union[int, str]]], dtype=Type[builtins.object])",2
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], int]] = int",1
"numpy.zeros(tuple[int, int], dtype=str)",2
str + numpy.str_,1
"builtins.str.ljust(self=numpy.str_, width=int)",1
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[str], size=int)",6
"numpy.result_type(numpy.dtype, numpy.dtype, numpy.dtype)",1
"numpy.array(list[Union[pandas.core.dtypes.dtypes.DatetimeTZDtype, pandas.core.dtypes.dtypes.PeriodDtype]])",1
numpy.isnat(numpy.timedelta64),1
numpy.isnat(numpy.datetime64),1
numpy.isnat(float),1
numpy.arange(numpy.int64),1
numpy.float,5
"numpy.ndarray.fill(numpy.ndarray, numpy.timedelta64)",3
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.tslibs.period.Period]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.tslibs.period.Period]]",1
"numpy.asarray(a=tuple[float, float, float], dtype=Type[builtins.object])",1
"numpy.array(tuple[int, int, int, int, int, int, int, int, int], copy=builtins.bool)",1
"numpy.array(list[list[Union[builtins.bool, float]]], dtype=Type[builtins.object])",1
"numpy.array(list[list[Union[float, int]]], dtype=Type[numpy.float64])",1
"numpy.array(list[Union[float, int, str]], copy=builtins.bool)",1
"numpy.asarray(a=list[Union[float, int, str]], dtype=Type[builtins.object])",1
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[NoneType, NoneType, NoneType]]]",2
"numpy.array(tuple[pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",1
"numpy.array(tuple[str], copy=builtins.bool)",1
"numpy.array(tuple[int, int, int, int], copy=builtins.bool)",1
numpy.asarray(a=list[numpy.ndarray]),2
"numpy.ndarray[slilist[Union[pandas.core.arrays.integer.Int64Dtype, pandas.core.dtypes.dtypes.CategoricalDtype]]e[NoneType, NoneType, NoneType]] = list[Union[pandas.core.arrays.integer.Int64Dtype, pandas.core.dtypes.dtypes.CategoricalDtype]]",1
"numpy.array(list[Union[pandas.core.arrays.integer.Int64Dtype, pandas.core.dtypes.dtypes.CategoricalDtype]])",1
"numpy.arange(numpy.int64, numpy.int64, dtype=str)",1
int != numpy.int64,5
"numpy.asarray(a=pandas._testing.SubclassedSeries, dtype=Type[builtins.bool])",1
"numpy.ndarray.ravel(numpy.ndarray, str)",1
numpy.asanyarray(a=pandas.core.indexes.base.Index),1
numpy.issubdtype,3
"numpy.array(list[Union[NoneType, float]], copy=builtins.bool)",1
numpy.array(list[list[pandas._libs.tslibs.timestamps.Timestamp]]),1
"numpy.zeros(tuple[int, int])",6
"numpy.array(pandas.core.indexes.base.Index, copy=Type[numpy.object_], dtype=builtins.bool)",1
numpy.isinf(pandas.core.frame.DataFrame),2
"numpy.asarray(a=list[Union[int, str]])",1
"numpy.asarray(a=list[Union[int, str]], dtype=NoneType)",1
"numpy.asarray(a=tuple[int, int, tuple[str, str, str, str], tuple[str, str, str, str], tuple[str, str, str, str]], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int, tuple[str, str, str, str], tuple[str, str, str, str], tuple[str, str, str, str]], dtype=Type[builtins.object])",1
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, size=tuple[int, int])",1
"numpy.asarray(a=tuple[int, tuple[str, str], tuple[str, str], tuple[str, str]], dtype=Type[builtins.object])",1
"numpy.ndarray[tuple[slifloate[int, int, NoneType], slifloate[int, int, NoneType]]] = float",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.array(pandas._libs.tslibs.timestamps.Timestamp, copy=NoneType, dtype=builtins.bool)",1
"numpy.array(pandas.core.indexes.range.RangeIndex, copy=Type[builtins.object], dtype=builtins.bool)",1
numpy.iterable(y=builtins.range),1
numpy.asarray(a=builtins.range),4
"numpy.ndarray[slilist[Union[numpy.dtype, pandas.core.dtypes.dtypes.CategoricalDtype]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.dtype, pandas.core.dtypes.dtypes.CategoricalDtype]]",1
"numpy.ndim(a=list[list[Union[int, str]]])",1
"numpy.ndim(a=list[Union[int, str]])",1
"numpy.ndarray[tuple[slilist[int]e[int, int, NoneType]]] = list[int]",1
"numpy.ndarray[tuple[slipandas.core.arrays.categorical.Categoricale[int, int, NoneType], int]] = pandas.core.arrays.categorical.Categorical",1
numpy.uint64 == int,2
"numpy.array(int, copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.ndarray[tuple[int, numpy.ndarray]] = list[str]",1
"numpy.ndarray[slilist[tuple[float, float]]e[NoneType, NoneType, NoneType]] = list[tuple[float, float]]",1
numpy.array(builtins.function),1
"numpy.array(list[numpy.bool_], dtype=Type[builtins.bool])",1
numpy.ndarray[tuple[numpy.ndarray]] = int,4
"numpy.ndarray[slilist[Union[list[int], tuple[float, float, float, float]]]e[NoneType, NoneType, NoneType]] = list[Union[list[int], tuple[float, float, float, float]]]",1
"numpy.ndarray[tuple[int, int]] = int",3
"numpy.ix_(args=tuple[numpy.ndarray, numpy.ndarray])",1
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1
numpy.ix_,1
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]] = int",1
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[numpy.int64, int, NoneType]]]",1
"numpy.ndim(a=tuple[str, str])",1
"numpy.array(tuple[str, str])",1
numpy.datetime64 != datetime.datetime,1
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], numpy.ndarray]] = numpy.ndarray",1
numpy.ndarray[tuple[numpy.ndarray]] = list[float],1
"numpy.ndarray[tuple[numpy.ndarray, numpy.ndarray]] = numpy.ndarray",1
"numpy.ndarray[tuple[numpy.ndarray, int]] = int",2
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.number])",1
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.indexes.base.Index, side=NoneType, sorter=str)",1
numpy.ndarray -= int,3
numpy.absolute(pandas.core.arrays.timedeltas.TimedeltaArray),2
"numpy.hstack(tup=tuple[list[builtins.bool], numpy.ndarray, list[builtins.bool]])",1
"numpy.array(str, dtype=numpy.dtype)",1
"numpy.ndarray.fill(numpy.ndarray, NoneType)",2
"numpy.ndarray[tuple[numpy.ndarray, int]] = numpy.ndarray",2
numpy.ndim(a=pandas.core.indexes.datetimes.DatetimeIndex),1
"numpy.ndarray[tuple[slinumpy.ndarraye[NoneType, NoneType, NoneType], numpy.ndarray]] = numpy.ndarray",1
int == numpy.ndarray,2
numpy.asarray(a=list[tuple[int]]),1
"numpy.asarray(a=list[tuple[int]], dtype=NoneType)",1
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], numpy.int64]]",1
numpy.array(pandas._libs.tslibs.nattype.NaTType),2
numpy.ndarray[int] = pandas._libs.tslibs.nattype.NaTType,2
numpy.ndarray[int] = pandas._libs.tslibs.timedeltas.Timedelta,3
numpy.asanyarray(a=int),1
numpy.asanyarray(a=list[list[builtins.bool]]),1
"numpy.asanyarray(a=tuple[list[builtins.bool], list[builtins.bool], list[builtins.bool]])",1
"numpy.asanyarray(a=list[list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]])",1
numpy.asanyarray(a=list[list[str]]),1
"numpy.asanyarray(a=list[list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp]]])",1
"numpy.where(numpy.ndarray, numpy.ndarray, numpy.datetime64)",1
numpy.ndarray[tuple[numpy.ndarray]] = numpy.datetime64,1
"numpy.empty(int, dtype=NoneType)",1
"numpy.array(list[Union[float, pandas._libs.tslibs.timestamps.Timestamp]], copy=builtins.bool)",1
numpy.concatenate(list[pandas.core.indexes.numeric.Int64Index]),2
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.ndarray, side=str)",2
numpy.ndarray <= numpy.datetime64,1
"numpy.ndarray[sliinte[int, NoneType, NoneType]] = int",3
int <= numpy.int64,2
numpy.round_(a=pandas.core.frame.DataFrame),1
"numpy.issubdtype(arg1=Type[numpy.float32], arg2=Type[numpy.integer])",1
"numpy.ndarray[slilist[Type[builtins.str]]e[NoneType, NoneType, NoneType]] = list[Type[builtins.str]]",1
"numpy.array(list[list[int]], dtype=Type[numpy.int64])",3
"numpy.array(list[list[int]], dtype=Type[numpy.float64])",1
"numpy.ndarray[tuple[int, int]] = numpy.datetime64",1
"numpy.where(numpy.ndarray, numpy.ndarray, numpy.float64)",1
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=numpy.ndarray)",1
"numpy.ndarray[tuple[int, int]] = numpy.timedelta64",1
"numpy.add(pandas.core.series.Series, pandas.core.series.Series)",3
"numpy.ndarray[slilist[Union[NoneType, datetime.datetime]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, datetime.datetime]]",1
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.timedelta64e[NoneType, NoneType, NoneType]]] = numpy.timedelta64",1
numpy.cov(m=numpy.ndarray),2
"numpy.ndarray[tuple[int, int]] = numpy.float64",3
numpy.random.normal,2
numpy.random.random,3
"numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState, size=tuple[int, int])",8
"numpy.ndarray[slilist[Union[builtins.bool, int, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, int, numpy.int64]]",1
"numpy.ndarray[slilist[Union[builtins.bool, int]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, int]]",1
"numpy.ndarray[slilist[Union[int, numpy.int64, str]]e[NoneType, NoneType, NoneType]] = list[Union[int, numpy.int64, str]]",1
"numpy.ndarray[slilist[Union[float, int, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[float, int, numpy.int64]]",1
"numpy.ndarray[slilist[list[Union[int, numpy.float64]]]e[NoneType, NoneType, NoneType]] = list[list[Union[int, numpy.float64]]]",1
"numpy.ndarray[slilist[Union[NoneType, int, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, int, str]]",1
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.timedeltas.Timedelta]]",1
"numpy.ndarray[slilist[Union[numpy.int64, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.int64, pandas._libs.tslibs.timedeltas.Timedelta]]",1
"numpy.generic.view(numpy.datetime64, str)",3
"numpy.ndarray[slilist[Union[numpy.int64, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.int64, pandas._libs.tslibs.timestamps.Timestamp]]",1
"numpy.linspace(num=int, start=int, stop=int)",13
"numpy.delete(arr=numpy.ndarray, obj=list[numpy.int64])",1
"numpy.ndarray[slilist[tuple[str, str, str]]e[NoneType, NoneType, NoneType]] = list[tuple[str, str, str]]",1
"numpy.asarray(a=tuple[float, float], dtype=Type[builtins.object])",1
"numpy.asarray(a=list[pandas._libs.tslibs.timestamps.Timestamp], dtype=NoneType)",1
numpy.iterable(y=list[str]),1
numpy.iterable(y=str),1
str in numpy.ndarray,2
"numpy.iterable(y=tuple[str, str])",1
"numpy.asarray(a=tuple[tuple[str, str], str], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[float, list, list[int], tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[float, list, list[int], tuple[int, int]]]",1
"numpy.array(list[Union[float, list, list[int], tuple[int, int]]], dtype=Type[builtins.object])",1
"numpy.ndarray[slice[NoneType, numpy.int64, NoneType]]",2
"numpy.ndarray[slice[int, numpy.int64, NoneType]]",4
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, numpy.int64, NoneType]]]",1
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[numpy.int64, NoneType, NoneType]]]",1
numpy.flatnonzero(a=numpy.ndarray),4
numpy.ndarray[list] = float,2
"numpy.interp(fp=numpy.ndarray, x=numpy.ndarray, xp=numpy.ndarray)",2
numpy.flagsobj.writeable,4
numpy.ndarray[list[int]] = float,3
"numpy.ndarray[tuple[int, int]] = builtins.bool",2
"numpy.asanyarray(a=pandas.core.indexes.numeric.Int64Index, dtype=str)",1
"numpy.lislice[NoneType, NoneType, int].index_tricks.IndexExpression[slice[NoneType, NoneType, int]]",1
numpy.s_,1
"numpy.lislice[NoneType, NoneType, NoneType].index_tricks.IndexExpression[slice[NoneType, NoneType, NoneType]]",1
"numpy.ndarray[tuple[builtins.ellipsis, int]]",1
"numpy.percentile(a=pandas.core.series.Series, q=int)",7
"numpy.percentile(a=numpy.ndarray, interpolation=str, q=numpy.ndarray)",1
"numpy.array(list[numpy.ndarray], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.arange(int, float)",1
"numpy.arange(float, float)",5
"numpy.array(list[float], dtype=numpy.dtype)",1
"numpy.apply_along_axis(args=tuple[str], arr=numpy.ndarray, axis=int, func1d=builtins.function)",1
"numpy.array(tuple[int], copy=builtins.bool)",1
numpy.<numpy.vectorize object at 0x7fa97ab525e0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab52520>(args=tuple[numpy.ndarray]),1
numpy.vectorize,1
"numpy.vectorize(otypes=list[numpy.dtype], pyfunc=builtins.function)",1
numpy.<numpy.vectorize object at 0x7fa97ab52160>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab5d2b0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab5d160>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab5d370>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab5d940>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab5d910>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab5dd30>(args=tuple[numpy.ndarray]),1
"numpy.reshape(a=numpy.ndarray, newshape=tuple[int, int])",2
numpy.<numpy.vectorize object at 0x7fa97ab52e50>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab5db80>(args=tuple[numpy.ndarray]),1
numpy.vectorize(pyfunc=builtins.function),5
numpy.asarray(a=str),4
numpy.<numpy.vectorize object at 0x7fa97ab644f0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab64b20>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab649a0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab64a00>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab64a30>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab64e50>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab64d60>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab692b0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab69340>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab698b0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab69310>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab69a60>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab69a30>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab69ca0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab69940>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab69e20>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab69a90>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab69dc0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab6f5b0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab6f610>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab6f640>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab6f8b0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab6f9a0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab6f7c0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab6fc40>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab6fd30>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab6f220>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab6fca0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab6ffa0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab780d0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab78250>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab78340>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab78610>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab78130>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab787f0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab78760>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab78970>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab78f70>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab7d220>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab7d550>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab7da00>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab7dd60>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab7df10>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab7d670>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab82190>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab82520>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab826a0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab823a0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab82310>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab82dc0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab82fa0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab8c2e0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab8c3d0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab8c640>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab8c730>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab8c9d0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab8cf70>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab92280>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab92490>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa97ab92a60>(args=tuple[numpy.ndarray]),1
numpy.ndarray == numpy.float64,2
Type[numpy.int64] != numpy.dtype,1
numpy.ndim(a=builtins.bool),1
"numpy.can_cast(numpy.ndarray, Type[builtins.bool])",1
numpy.asarray(a=list[builtins.complex]),1
numpy.ndarray == numpy.complex128,1
numpy.ndim(a=datetime.datetime),1
"numpy.array(list[str], dtype=numpy.dtype)",1
"numpy.asarray(a=list[Union[float, int, str]])",1
"numpy.array(list[Union[float, int, str]], dtype=numpy.dtype)",1
numpy.atleast_1d(arys=tuple[builtins.bool]),1
numpy.ndarray == numpy.bool_,1
"builtins.str.startswith(numpy.str_, str)",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.str_)",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, pandas._libs.tslibs.period.Period)",2
"numpy.array(list[list[int]], dtype=numpy.dtype)",2
"numpy.array(list[tuple[int, int]], dtype=numpy.dtype)",1
"numpy.array(list[list[str]], dtype=numpy.dtype)",1
pandas.core.dtypes.dtypes.CategoricalDtype != numpy.dtype,1
"numpy.putmask(numpy.ndarray, numpy.ndarray, numpy.int8)",1
"numpy.issubdtype(arg1=Type[numpy.int16], arg2=Type[numpy.integer])",1
"numpy.asarray(a=pandas.core.arrays.boolean.BooleanArray, dtype=Type[numpy.bool_])",1
"numpy.asarray(a=list[Union[NoneType, float]])",1
"numpy.array(list[Union[NoneType, float]], dtype=numpy.dtype)",1
numpy.eye(N=int),1
pandas.core.arrays.numpy.ndarrayoolean.BooleanArray |= numpy.ndarray,1
"numpy.putmask(numpy.ndarray, numpy.ndarray, pandas._libs.missing.NAType)",1
numpy.ndim(a=pandas._libs.missing.NAType),1
"numpy.round_(a=pandas.core.frame.DataFrame, decimals=int)",2
"numpy.ndarray.round(numpy.ndarray, float)",1
"numpy.ndarray.round(numpy.ndarray, str)",1
"numpy.ndarray.round(numpy.ndarray, list[int])",1
numpy.round,3
numpy.int8(numpy.int64),1
"numpy.arange(float, float, dtype=str)",8
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.CategoricalDtype, pandas.core.dtypes.dtypes.DatetimeTZDtype, pandas.core.dtypes.dtypes.PeriodDtype]])",1
"numpy.ndarray[slilist[pandas.core.dtypes.dtypes.DatetimeTZDtype]e[NoneType, NoneType, NoneType]] = list[pandas.core.dtypes.dtypes.DatetimeTZDtype]",1
"numpy.ndarray[tuple[slice[NoneType, int, NoneType]]]",4
numpy.random.mtrand.RandomState.random(numpy.random.mtrand.RandomState),2
"numpy.asarray(a=list[tuple[str, str, str]], dtype=str)",1
"tuple[builtins.builtin_function_or_method, Type[builtins.list], Type[builtins.tuple], builtins.builtin_function_or_method]uiltins.tuple[builtins.builtin_function_or_method, Type[builtins.list], Type[builtins.tuple], builtins.builtin_function_or_method]uiltin_function_or_method in tuple[builtins.builtin_function_or_method, Type[builtins.list], Type[builtins.tuple], builtins.builtin_function_or_method]",1
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, tuple[int])",1
"numpy.ndarray[slilist[pandas.tests.frame.methods.test_set_index.TestSetIndexCustomLabelType.test_set_index_custom_label_type.<locals>.Thing]e[NoneType, NoneType, NoneType]] = list[pandas.tests.frame.methods.test_set_index.TestSetIndexCustomLabelType.test_set_index_custom_label_type.<locals>.Thing]",1
numpy.int64 in pandas.core.indexes.numeric.Int64Index,3
"numpy.lexsort(tuple[pandas.core.series.Series, pandas.core.series.Series])",2
numpy.longlong + int,1
float * numpy.longlong,1
"numpy.argsort(a=numpy.ndarray, kind=str)",3
"numpy.repeat(a=list[int], repeats=int)",2
"numpy.ndarray[slilist[tuple[Union[float, int], Union[float, int]]]e[NoneType, NoneType, NoneType]] = list[tuple[Union[float, int], Union[float, int]]]",1
"numpy.ndarray[slituple[float, float]e[NoneType, NoneType, NoneType]] = tuple[float, float]",1
"numpy.ndarray[slilist[Union[list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]], tuple[float, float]]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]], tuple[float, float]]]",1
numpy.array(list[list[str]]),1
numpy.dtype[str],1
numpy.dtype.fields,1
numpy.core.records.array,1
Type[numpy.recarray] != Type[numpy.recarray],1
numpy.asarray(a=numpy.recarray),1
"numpy.core.records.array(dtype=dict, obj=list[tuple[int, float]])",1
"numpy.core.records.array(dtype=list[tuple[str, str]], obj=list[tuple[int, str]])",1
numpy.recarray,1
"numpy.core.records.array(dtype=list[tuple[str, str]], obj=list[tuple[str, str, str, str]])",1
numpy.asarray(a=list[pandas.core.dtypes.dtypes.DatetimeTZDtype]),1
"numpy.ndarray[slice[numpy.int64, int, NoneType]]",3
"numpy.ndarray[slifloate[NoneType, NoneType, NoneType]] = float",2
"numpy.where(numpy.ndarray, pandas.core.arrays.datetimes.DatetimeArray, pandas.core.arrays.datetimes.DatetimeArray)",1
pandas.core.series.Series /= numpy.int64,1
numpy.ndarray[list],2
numpy.int64.attrs,1
pandas.core.series.Series - numpy.int64,2
"numpy.empty(tuple[int, int], dtype=NoneType)",1
numpy.random.mtrand.RandomState.choice,1
pandas.core.series.Series / numpy.float64,10
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, int, p=int, replace=builtins.bool, size=numpy.ndarray)",1
numpy.array_split,2
"numpy.empty(list[int], dtype=str)",1
numpy.squeeze(a=pandas.core.series.Series),1
"numpy.ndarray[tuple[slifloate[int, int, int]]] = float",1
"numpy.ndarray[tuple[slinumpy.datetime64e[int, int, int]]] = numpy.datetime64",1
"numpy.empty(tuple[int], dtype=NoneType)",1
"numpy.array_split(ary=pandas.core.series.Series, indices_or_sections=int)",2
"numpy.ndarray[slilist[list[Union[float, str]]]e[NoneType, NoneType, NoneType]] = list[list[Union[float, str]]]",1
"numpy.lituple[builtins.bool, numpy.ndarray].index_tricks.RClass[tuple[builtins.bool, numpy.ndarray]]",4
"numpy.lituple[numpy.ndarray, int].index_tricks.RClass[tuple[numpy.ndarray, int]]",1
numpy.ndarray -= numpy.ndarray,1
numpy.int64 != NoneType,1
"numpy.int64 != slice[NoneType, NoneType, NoneType]",1
"numpy.tile(A=list[Union[float, int]], reps=int)",2
"numpy.tile(A=list[str], reps=int)",2
"numpy.arange(numpy.int64, numpy.int64)",1
"numpy.ndarray[slilist[Union[datetime.datetime, int]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.datetime, int]]",1
pandas.core.series.Series / numpy.int64,5
"numpy.ndarray[slilist[pandas.core.indexes.numeric.Int64Index]e[NoneType, NoneType, NoneType]] = list[pandas.core.indexes.numeric.Int64Index]",1
numpy.ndarray[numpy.int64] = str,3
"numpy.ndarray[slilist[Union[Type[Union[builtins.object, numpy.int64]], numpy.dtype]]e[NoneType, NoneType, NoneType]] = list[Union[Type[Union[builtins.object, numpy.int64]], numpy.dtype]]",1
numpy.ndarray.flatten(numpy.ndarray),2
numpy.ndarray != list[float],1
numpy.array(list[list[numpy.float32]]),1
"numpy.zeros(tuple[int, int], str)",1
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.float64])",1
numpy.iterable(y=list[int]),1
numpy.isfinite(numpy.int64),1
numpy.modf(numpy.int64),1
"numpy.around(a=numpy.int64, decimals=int)",1
"numpy.array(numpy.int64, copy=NoneType, dtype=builtins.bool)",1
numpy.amax(a=pandas.core.frame.DataFrame),1
numpy.generic.squeeze(numpy.bool_),1
numpy.asarray(a=list[numpy.int64]),5
numpy.sum(a=pandas.core.frame.DataFrame),1
"numpy.array(numpy.float64, copy=NoneType, dtype=builtins.bool)",1
numpy.mean(a=pandas.core.frame.DataFrame),1
numpy.iterable(y=numpy.ndarray),1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval, pandas._libs.interval.Interval], dtype=Type[builtins.object])",1
"numpy.lituple[numpy.ndarray, builtins.bool].index_tricks.RClass[tuple[numpy.ndarray, builtins.bool]]",2
numpy.random.mtrand.RandomState.randint,2
"numpy.ndarray[slilist[Union[list[int], pandas.core.arrays.categorical.Categorical]]e[NoneType, NoneType, NoneType]] = list[Union[list[int], pandas.core.arrays.categorical.Categorical]]",1
"numpy.amin(a=pandas.core.series.Series, axis=int)",1
"numpy.amax(a=pandas.core.series.Series, axis=int)",2
"numpy.ndarray[slilist[list[Union[datetime.datetime, int]]]e[NoneType, NoneType, NoneType]] = list[list[Union[datetime.datetime, int]]]",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.ufunc.reduceat(numpy.ufunc, numpy.ndarray, numpy.ndarray)",1
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, pandas.core.indexes.datetimes.DatetimeIndex, int)",3
"numpy.tile(A=numpy.ndarray, reps=list[int])",1
"numpy.outer(a=pandas.core.frame.DataFrame, b=pandas.core.frame.DataFrame)",1
"numpy.round_(a=int, decimals=int)",1
"numpy.array(list[numpy.bool_], copy=builtins.bool)",1
numpy.float64 > float,11
numpy.array(list[numpy.bool_]),2
numpy.ndarray[tuple[list[int]]] = float,1
"numpy.prod(a=pandas.core.series.Series, axis=int)",1
numpy.size(a=pandas.core.series.Series),1
numpy.array(numpy.float32),1
"numpy.ndarray[tuple[numpy.ndarray, int]] = numpy.float32",1
"numpy.ndarray[tuple[numpy.ndarray, int]] = numpy.float64",1
"numpy.ndarray[slilist[tuple[int, int, int]]e[NoneType, NoneType, NoneType]] = list[tuple[int, int, int]]",1
pandas.core.series.Series * numpy.float64,1
numpy.float32 == int,1
pandas.core.series.Series * numpy.float32,1
numpy.float32 / numpy.float32,1
int + numpy.float32,1
numpy.ndarray[int] = numpy.float32,1
NoneType != numpy.int64,1
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.tslibs.timestamps.Timestamp]]",1
"numpy.percentile(a=pandas.core.series.Series, axis=int, q=int)",5
"numpy.percentile(a=int, q=pandas.core.series.Series)",1
numpy.percentile(pandas.core.series.Series),1
"numpy.percentile(a=int, q=pandas.core.frame.DataFrame)",1
"numpy.percentile(a=pandas.core.frame.DataFrame, axis=int, q=int)",2
numpy.ndarray * builtins.complex,1
"numpy.ndarray.astype(numpy.ndarray, Type[builtins.complex])",1
"numpy.asarray(a=list[tuple[str, int, int]], dtype=NoneType)",1
"numpy.asarray(a=list[tuple[str, int, int]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[tuple[str, int, int]]e[NoneType, NoneType, NoneType]] = list[tuple[str, int, int]]",1
"numpy.asarray(a=list[tuple[int, str, int]], dtype=NoneType)",1
"numpy.asarray(a=list[tuple[int, str, int]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[tuple[int, str, int]]e[NoneType, NoneType, NoneType]] = list[tuple[int, str, int]]",1
"numpy.asarray(a=list[tuple[int, int, str]], dtype=NoneType)",1
"numpy.asarray(a=list[tuple[int, int, str]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[tuple[int, int, str]]e[NoneType, NoneType, NoneType]] = list[tuple[int, int, str]]",1
"numpy.asarray(a=list[tuple[numpy.int64, numpy.int64]], dtype=NoneType)",1
"numpy.ndarray[slilist[tuple[numpy.int64, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[tuple[numpy.int64, numpy.int64]]",1
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, NoneType, NoneType], slinumpy.float64e[int, NoneType, NoneType]]] = numpy.float64",1
"numpy.random.mtrand.RandomState.random_sample(numpy.random.mtrand.RandomState, int)",1
"numpy.array_equal(a1=pandas.core.indexes.base.Index, a2=pandas.core.indexes.numeric.Int64Index)",1
"numpy.array(list[list[int]], Type[builtins.int])",2
"numpy.array(list[int], Type[numpy.int64])",1
numpy.ndim(a=tuple),1
"numpy.sum(a=pandas.core.frame.DataFrame, axis=int)",1
numpy.int64 <= numpy.int64,1
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.nattype.NaTType]]",1
"numpy.array(list[Union[NoneType, int]], dtype=numpy.dtype)",1
"numpy.array(list[Union[float, int]], dtype=numpy.dtype)",1
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, numpy.int64)",1
numpy.array(NoneType),1
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[str], numpy.int64)",1
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, pandas.core.indexes.datetimes.DatetimeIndex, numpy.int64)",1
"numpy.ndarray[tuple[sliNoneTypee[int, int, int]]] = NoneType",1
"numpy.ndarray[slilist[Union[datetime.date, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.date, pandas._libs.tslibs.nattype.NaTType]]",1
numpy.array(list[NoneType]),1
"numpy.ndarray.reshape(numpy.ndarray, list[int])",1
"numpy.array(list[Union[NoneType, str]])",1
"numpy.repeat(a=list[str], repeats=int)",4
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, int, tuple[int, int])",1
"numpy.ndarray[slilist[tuple[tuple[str, str], str]]e[NoneType, NoneType, NoneType]] = list[tuple[tuple[str, str], str]]",1
"numpy.percentile(a=pandas.core.series.Series, q=float)",2
numpy.ndarray[int] = list[int],2
numpy.asarray(a=tuple[int]),1
"numpy.array(list[tuple[int, int, int]])",1
numpy.ndarray[int] = list[str],1
"numpy.ndarray[slilist[Union[list[Union[float, int]], pandas.core.indexes.datetimes.DatetimeIndex]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[float, int]], pandas.core.indexes.datetimes.DatetimeIndex]]",1
"numpy.ndarray[tuple[slinumpy.ndarraye[int, NoneType, NoneType]]] = numpy.ndarray",2
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, int, NoneType]]] = int",1
"numpy.array(list[list[int]], dtype=Type[numpy.float32])",1
"numpy.array(list[list[int]], dtype=Type[numpy.uint8])",1
"numpy.array(list[list[int]], dtype=Type[numpy.uint16])",1
"numpy.array(list[list[int]], dtype=Type[numpy.uint32])",1
"numpy.array(list[list[int]], dtype=Type[numpy.uint64])",1
"numpy.array(list[list[int]], dtype=Type[numpy.int8])",1
"numpy.array(list[list[int]], dtype=Type[numpy.int16])",1
"numpy.array(list[list[int]], dtype=Type[numpy.int32])",1
"numpy.array(list[numpy.timedelta64], dtype=str)",1
numpy.zeros_like,1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.ndarray[tuple[sliinte[int, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1
"numpy.ndarray[slilist[Union[list[Union[float, int, str]], pandas.core.indexes.datetimes.DatetimeIndex, pandas.core.indexes.timedeltas.TimedeltaIndex, pandas.core.series.Series]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[float, int, str]], pandas.core.indexes.datetimes.DatetimeIndex, pandas.core.indexes.timedeltas.TimedeltaIndex, pandas.core.series.Series]]",1
"numpy.ndarray[tuple[sliinte[NoneType, int, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1
"numpy.allclose(a=pandas.core.series.Series, b=pandas.core.series.Series, rtol=int)",1
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1
"numpy.array(pandas.core.indexes.numeric.Int64Index, copy=numpy.dtype, dtype=builtins.bool)",2
"numpy.array(pandas.core.indexes.numeric.UInt64Index, copy=numpy.dtype, dtype=builtins.bool)",2
numpy.array(pandas.core.indexes.interval.IntervalIndex),8
numpy.argsort(a=pandas.core.indexes.base.Index),1
"numpy.ndarray.argsort(numpy.ndarray, axis=int, kind=NoneType, order=NoneType)",2
numpy.argsort(a=pandas.core.indexes.datetimes.DatetimeIndex),1
numpy.argsort(a=pandas.core.indexes.period.PeriodIndex),1
numpy.argsort(a=pandas.core.indexes.numeric.Int64Index),1
numpy.argsort(a=pandas.core.indexes.range.RangeIndex),1
numpy.argsort(a=pandas.core.indexes.interval.IntervalIndex),1
numpy.argsort(a=pandas.core.indexes.multi.MultiIndex),2
"numpy.where(list[builtins.bool], numpy.ndarray, float)",3
"numpy.where(tuple[builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool], numpy.ndarray, float)",1
"numpy.where(pandas.core.series.Series, numpy.ndarray, float)",1
"numpy.array(tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",1
"numpy.array(tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], copy=builtins.bool)",1
"numpy.array(tuple[str, str, str, str, str, str, str, str, str, str, str, str], copy=builtins.bool)",1
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1
"numpy.array(tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",1
"numpy.delete(arr=numpy.ndarray, obj=int)",7
"numpy.array(pandas.core.indexes.numeric.Float64Index, copy=numpy.dtype, dtype=builtins.bool)",1
numpy.array(pandas.core.indexes.multi.MultiIndex),4
"numpy.array(pandas.core.indexes.multi.MultiIndex, copy=numpy.dtype, dtype=builtins.bool)",1
pandas.core.indexes.numpy.ndarrayase.Index == numpy.ndarray,2
"numpy.empty(int, dtype=Type[numpy.bool_])",1
"numpy.putmask(numpy.ndarray, str, int)",1
numpy.asarray(a=pandas.tests.indexes.test_base.TestIndex.test_constructor_ndarray_like.<locals>.ArrayLike),1
numpy.array(list[pandas._libs.tslibs.nattype.NaTType]),3
numpy.ndim(a=list[numpy.int64]),2
"numpy.array(builtins.list_iterator, copy=builtins.bool)",1
"numpy.array(builtins.generator, copy=builtins.bool)",1
numpy.ndim(a=builtins.list_iterator),1
numpy.ndim(a=builtins.generator),1
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, str]]",1
"numpy.ndarray[slilist[Union[pandas._libs.missing.NAType, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.missing.NAType, str]]",1
numpy.array(builtins.range),3
"numpy.array(list, dtype=Type[numpy.bool_])",2
"numpy.array(list, dtype=Type[numpy.float64])",2
"numpy.append(arr=pandas.core.indexes.base.Index, values=pandas.core.indexes.base.Index)",1
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1
"numpy.asarray(a=list[pandas._libs.tslibs.timedeltas.Timedelta], dtype=NoneType)",1
"numpy.asarray(a=list[pandas._libs.interval.Interval], dtype=NoneType)",1
"numpy.asarray(a=tuple[float, float, float])",1
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.tslibs.nattype.NaTType, str]]",1
"numpy.array(list[Union[float, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[float, pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[float, pandas._libs.tslibs.nattype.NaTType, str]]",1
"numpy.asarray(a=list[Union[float, str]], dtype=NoneType)",2
"numpy.asarray(a=list[Union[str, tuple[str, str]]], dtype=str)",1
"numpy.asarray(a=list[tuple[str, str]], dtype=str)",1
"numpy.array(list[tuple[int, str]], dtype=list[tuple[str, Union[Type[builtins.int], str]]])",2
numpy.ndarray._values,1
"numpy.asarray(a=list[Union[NoneType, float]], dtype=NoneType)",1
"numpy.where(tuple[builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool], numpy.ndarray, float)",1
"numpy.asarray(a=tuple[int, str, int, str, int, str], dtype=Type[builtins.object])",1
"numpy.ones(dtype=Type[numpy.int64], shape=tuple[int])",3
numpy.ndarray.argmin(numpy.ndarray),4
pandas.core.indexes.numeric.UInt64Index == numpy.uint64,1
numpy.asarray(a=numpy.uint64),1
numpy.uint64(numpy.uint64),1
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.float64, side=NoneType, sorter=str)",1
numpy.datetime64 in pandas._libs.index.DatetimeEngine,1
numpy.timedelta64 in pandas._libs.index.TimedeltaEngine,1
"numpy.array(list[int], dtype=Type[numpy.int16])",2
"numpy.array(list[int], dtype=Type[numpy.uint32])",4
"numpy.array(list[int], dtype=Type[numpy.uint16])",2
"numpy.array(list[int], dtype=Type[numpy.uint8])",4
"numpy.array(list[int], dtype=Type[numpy.float64])",9
"numpy.array(list[int], dtype=Type[numpy.float32])",4
"numpy.array(tuple[int, float], copy=builtins.bool)",1
"numpy.ndarray[slilist[Union[NoneType, numpy.datetime64]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, numpy.datetime64]]",1
"numpy.array(list[Union[NoneType, numpy.datetime64]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[NoneType, numpy.timedelta64]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, numpy.timedelta64]]",1
"numpy.array(list[Union[NoneType, numpy.timedelta64]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[float, numpy.datetime64]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.datetime64]]",1
"numpy.array(list[Union[float, numpy.datetime64]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[float, numpy.timedelta64]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.timedelta64]]",1
"numpy.array(list[Union[float, numpy.timedelta64]], dtype=Type[builtins.object])",1
"numpy.array(list[Union[numpy.datetime64, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]]",1
"numpy.array(list[Union[numpy.timedelta64, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[pandas._libs.missing.NAType, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.missing.NAType, pandas._libs.tslibs.nattype.NaTType]]",1
"numpy.ndarray[slilist[Union[numpy.datetime64, pandas._libs.missing.NAType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.datetime64, pandas._libs.missing.NAType]]",1
"numpy.ndarray[slilist[Union[numpy.timedelta64, pandas._libs.missing.NAType]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.timedelta64, pandas._libs.missing.NAType]]",1
"numpy.ndarray[slilist[Union[numpy.datetime64, numpy.timedelta64]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.datetime64, numpy.timedelta64]]",1
"numpy.array(pandas.core.indexes.numeric.Float64Index, copy=Type[numpy.float64], dtype=builtins.bool)",1
numpy.argsort(a=pandas.core.indexes.numeric.Float64Index),1
"numpy.repeat(a=pandas.core.indexes.numeric.Float64Index, repeats=int)",1
"numpy.repeat(a=pandas.core.indexes.numeric.Float64Index, axis=int, repeats=int)",1
pandas.core.indexes.numeric.Float64Index == numpy.ndarray,3
"numpy.asarray(a=tuple[float, float, float, float, float], dtype=Type[builtins.object])",1
numpy.ndarray - pandas.core.indexes.numeric.Float64Index,1
"numpy.ndim(a=list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]])",1
"numpy.asarray(a=list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]])",1
"numpy.repeat(a=pandas.core.indexes.numeric.Int64Index, axis=int, repeats=int)",1
pandas.core.indexes.numeric.Int64Index == numpy.ndarray,3
pandas.core.indexes.numeric.Float64Index - numpy.ndarray,2
"numpy.arange(int, float, float)",3
"numpy.asarray(a=list[Union[float, int, numpy.int64]], dtype=NoneType)",1
"numpy.concatenate(tuple[pandas.core.indexes.numeric.Int64Index, pandas.core.indexes.base.Index])",1
"numpy.concatenate(tuple[pandas.core.indexes.base.Index, pandas.core.indexes.numeric.Int64Index])",1
"numpy.array_equal(a1=pandas.core.series.Series, a2=pandas.core.series.Series)",1
"numpy.intersect1d(ar1=numpy.ndarray, ar2=numpy.ndarray)",5
numpy.argsort(a=pandas.core.indexes.numeric.UInt64Index),1
"numpy.repeat(a=pandas.core.indexes.numeric.UInt64Index, axis=int, repeats=int)",1
"numpy.ndarray[slilist[numpy.ulonglong]e[NoneType, NoneType, NoneType]] = list[numpy.ulonglong]",1
numpy.ulonglong(),1
pandas.core.indexes.numeric.UInt64Index == numpy.ndarray,1
"numpy.asarray(a=list[Union[float, int, numpy.uint64]], dtype=NoneType)",1
"numpy.concatenate(tuple[pandas.core.indexes.base.Index, pandas.core.indexes.numeric.UInt64Index])",1
numpy.exp2(pandas.core.indexes.base.Index),1
numpy.log(pandas.core.indexes.base.Index),1
numpy.log10(pandas.core.indexes.base.Index),1
numpy.sqrt(pandas.core.indexes.base.Index),1
numpy.cos(pandas.core.indexes.base.Index),1
numpy.arcsin(pandas.core.indexes.base.Index),1
numpy.arctan(pandas.core.indexes.base.Index),1
numpy.cosh(pandas.core.indexes.base.Index),1
numpy.arcsinh(pandas.core.indexes.base.Index),1
numpy.arctanh(pandas.core.indexes.base.Index),1
numpy.rad2deg(pandas.core.indexes.base.Index),1
numpy.exp2(pandas.core.indexes.period.PeriodIndex),1
numpy.log(pandas.core.indexes.period.PeriodIndex),1
numpy.log10(pandas.core.indexes.period.PeriodIndex),1
numpy.sqrt(pandas.core.indexes.period.PeriodIndex),1
numpy.cos(pandas.core.indexes.period.PeriodIndex),1
numpy.arcsin(pandas.core.indexes.period.PeriodIndex),1
numpy.arctan(pandas.core.indexes.period.PeriodIndex),1
numpy.cosh(pandas.core.indexes.period.PeriodIndex),1
numpy.arcsinh(pandas.core.indexes.period.PeriodIndex),1
numpy.arctanh(pandas.core.indexes.period.PeriodIndex),1
numpy.rad2deg(pandas.core.indexes.period.PeriodIndex),1
numpy.exp2(pandas.core.indexes.numeric.Int64Index),1
numpy.exp2(numpy.ndarray),1
numpy.log(pandas.core.indexes.numeric.Int64Index),1
numpy.log(numpy.ndarray),1
numpy.log10(pandas.core.indexes.numeric.Int64Index),1
numpy.log10(numpy.ndarray),1
numpy.cos(pandas.core.indexes.numeric.Int64Index),1
numpy.arcsin(pandas.core.indexes.numeric.Int64Index),1
numpy.arcsin(numpy.ndarray),1
numpy.arctan(pandas.core.indexes.numeric.Int64Index),1
numpy.arctan(numpy.ndarray),1
numpy.cosh(pandas.core.indexes.numeric.Int64Index),1
numpy.cosh(numpy.ndarray),1
numpy.arcsinh(pandas.core.indexes.numeric.Int64Index),1
numpy.arcsinh(numpy.ndarray),1
numpy.arctanh(pandas.core.indexes.numeric.Int64Index),1
numpy.arctanh(numpy.ndarray),1
numpy.rad2deg(pandas.core.indexes.numeric.Int64Index),1
numpy.rad2deg(numpy.ndarray),1
numpy.exp2(pandas.core.indexes.numeric.UInt64Index),1
numpy.log(pandas.core.indexes.numeric.UInt64Index),1
numpy.log10(pandas.core.indexes.numeric.UInt64Index),1
numpy.sqrt(pandas.core.indexes.numeric.UInt64Index),1
numpy.cos(pandas.core.indexes.numeric.UInt64Index),1
numpy.arcsin(pandas.core.indexes.numeric.UInt64Index),1
numpy.arctan(pandas.core.indexes.numeric.UInt64Index),1
numpy.cosh(pandas.core.indexes.numeric.UInt64Index),1
numpy.arcsinh(pandas.core.indexes.numeric.UInt64Index),1
numpy.arctanh(pandas.core.indexes.numeric.UInt64Index),1
numpy.rad2deg(pandas.core.indexes.numeric.UInt64Index),1
numpy.expm1(numpy.ndarray),1
numpy.log2(numpy.ndarray),1
numpy.log1p(numpy.ndarray),1
numpy.tan(numpy.ndarray),1
numpy.arccos(numpy.ndarray),1
numpy.sinh(numpy.ndarray),1
numpy.tanh(numpy.ndarray),1
numpy.arccosh(numpy.ndarray),1
numpy.deg2rad(numpy.ndarray),1
numpy.exp2(pandas.core.indexes.numeric.Float64Index),1
numpy.log(pandas.core.indexes.numeric.Float64Index),1
numpy.log10(pandas.core.indexes.numeric.Float64Index),1
numpy.sqrt(pandas.core.indexes.numeric.Float64Index),1
numpy.cos(pandas.core.indexes.numeric.Float64Index),1
numpy.arcsin(pandas.core.indexes.numeric.Float64Index),1
numpy.arctan(pandas.core.indexes.numeric.Float64Index),1
numpy.cosh(pandas.core.indexes.numeric.Float64Index),1
numpy.arcsinh(pandas.core.indexes.numeric.Float64Index),1
numpy.arctanh(pandas.core.indexes.numeric.Float64Index),1
numpy.rad2deg(pandas.core.indexes.numeric.Float64Index),1
numpy.exp(pandas.core.indexes.category.CategoricalIndex),1
numpy.exp2(pandas.core.indexes.category.CategoricalIndex),1
numpy.expm1(pandas.core.indexes.category.CategoricalIndex),1
numpy.log(pandas.core.indexes.category.CategoricalIndex),1
numpy.log2(pandas.core.indexes.category.CategoricalIndex),1
numpy.log10(pandas.core.indexes.category.CategoricalIndex),1
numpy.log1p(pandas.core.indexes.category.CategoricalIndex),1
numpy.sqrt(pandas.core.indexes.category.CategoricalIndex),1
numpy.sin(pandas.core.indexes.category.CategoricalIndex),1
numpy.cos(pandas.core.indexes.category.CategoricalIndex),1
numpy.tan(pandas.core.indexes.category.CategoricalIndex),1
numpy.arcsin(pandas.core.indexes.category.CategoricalIndex),1
numpy.arccos(pandas.core.indexes.category.CategoricalIndex),1
numpy.arctan(pandas.core.indexes.category.CategoricalIndex),1
numpy.sinh(pandas.core.indexes.category.CategoricalIndex),1
numpy.cosh(pandas.core.indexes.category.CategoricalIndex),1
numpy.tanh(pandas.core.indexes.category.CategoricalIndex),1
numpy.arcsinh(pandas.core.indexes.category.CategoricalIndex),1
numpy.arccosh(pandas.core.indexes.category.CategoricalIndex),1
numpy.arctanh(pandas.core.indexes.category.CategoricalIndex),1
numpy.deg2rad(pandas.core.indexes.category.CategoricalIndex),1
numpy.rad2deg(pandas.core.indexes.category.CategoricalIndex),1
numpy.exp2(pandas.core.indexes.multi.MultiIndex),2
numpy.log(pandas.core.indexes.multi.MultiIndex),2
numpy.log10(pandas.core.indexes.multi.MultiIndex),2
numpy.sqrt(pandas.core.indexes.multi.MultiIndex),2
numpy.cos(pandas.core.indexes.multi.MultiIndex),2
numpy.arcsin(pandas.core.indexes.multi.MultiIndex),2
numpy.arctan(pandas.core.indexes.multi.MultiIndex),2
numpy.cosh(pandas.core.indexes.multi.MultiIndex),2
numpy.arcsinh(pandas.core.indexes.multi.MultiIndex),2
numpy.arctanh(pandas.core.indexes.multi.MultiIndex),2
numpy.rad2deg(pandas.core.indexes.multi.MultiIndex),2
numpy.isinf(pandas.core.indexes.base.Index),1
numpy.signbit(pandas.core.indexes.base.Index),1
numpy.isinf,3
"numpy.ufunc in tuple[numpy.ufunc, numpy.ufunc, numpy.ufunc]",1
numpy.isfinite,4
numpy.isinf(pandas.core.indexes.datetimes.DatetimeIndex),1
numpy.signbit(pandas.core.indexes.datetimes.DatetimeIndex),1
numpy.isfinite(pandas.core.indexes.period.PeriodIndex),1
numpy.isnan(pandas.core.indexes.period.PeriodIndex),1
numpy.isfinite(pandas.core.indexes.timedeltas.TimedeltaIndex),1
numpy.isnan(pandas.core.indexes.timedeltas.TimedeltaIndex),1
numpy.ufunc in tuple[numpy.ufunc],1
numpy.isinf(pandas.core.indexes.range.RangeIndex),1
numpy.signbit(pandas.core.indexes.range.RangeIndex),1
numpy.isfinite(pandas.core.indexes.category.CategoricalIndex),1
numpy.isinf(pandas.core.indexes.category.CategoricalIndex),1
numpy.isnan(pandas.core.indexes.category.CategoricalIndex),1
numpy.signbit(pandas.core.indexes.category.CategoricalIndex),1
numpy.isinf(pandas.core.indexes.multi.MultiIndex),2
numpy.signbit(pandas.core.indexes.multi.MultiIndex),2
"numpy.ndarray[slilist[Union[builtins.bool, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, pandas._libs.tslibs.timestamps.Timestamp]]",1
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.period.Period]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.period.Period]]",1
"numpy.ndarray[slilist[Union[builtins.bool, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, pandas._libs.tslibs.timedeltas.Timedelta]]",1
"numpy.ndarray[slilist[Union[builtins.bool, str]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, str]]",1
"numpy.ndarray[slilist[Union[str, tuple[str, int]]]e[NoneType, NoneType, NoneType]] = list[Union[str, tuple[str, int]]]",1
"numpy.asarray(a=pandas.core.indexes.base.Index, dtype=numpy.dtype)",1
"numpy.concatenate(list[Union[numpy.ndarray, pandas.core.arrays.categorical.Categorical]])",1
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.int8])",1
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.int16])",1
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.int32])",1
"numpy.issubdtype(arg1=numpy.dtype, arg2=Type[numpy.int64])",1
"numpy.repeat(a=pandas.core.indexes.category.CategoricalIndex, axis=int, repeats=int)",1
"numpy.where(list[builtins.bool], pandas.core.arrays.categorical.Categorical, float)",1
"numpy.where(tuple[builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool], pandas.core.arrays.categorical.Categorical, float)",1
"numpy.where(numpy.ndarray, pandas.core.arrays.categorical.Categorical, float)",1
"numpy.where(pandas.core.series.Series, pandas.core.arrays.categorical.Categorical, float)",1
pandas.core.indexes.category.CategoricalIndex == numpy.ndarray,4
"numpy.putmask(pandas.core.arrays.categorical.Categorical, numpy.ndarray, int)",1
numpy.datetime64 in pandas.core.arrays.categorical.Categorical,2
numpy.timedelta64 in pandas.core.arrays.categorical.Categorical,1
numpy.timedelta64 in pandas.core.indexes.category.CategoricalIndex,2
numpy.datetime64 in pandas.core.indexes.category.CategoricalIndex,1
numpy.asarray(a=pandas._libs.tslibs.timedeltas.Timedelta),3
"numpy.array(builtins.map, copy=builtins.bool)",1
"numpy.array(list[Union[builtins.bool, float]], copy=builtins.bool)",1
"numpy.empty(tuple[int], dtype=Type[builtins.object])",1
numpy.ndarray[numpy.ndarray] = pandas.core.indexes.base.Index,1
"numpy.asarray(a=list[Union[float, pandas._libs.tslibs.nattype.NaTType, str]])",2
"numpy.ndim(a=list[Union[float, pandas._libs.tslibs.nattype.NaTType, str]])",2
"numpy.asarray(a=list[Union[float, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]])",1
"numpy.array(list[Union[float, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]])",1
"numpy.ndim(a=list[Union[datetime.datetime, str]])",1
"numpy.ndim(a=list[Union[pandas._libs.tslibs.timestamps.Timestamp, str]])",1
"numpy.arange(numpy.int64, int, int, dtype=Type[numpy.int64])",1
numpy.uint64 > numpy.uint64,1
"numpy.arange(int, numpy.uint64, int, dtype=Type[numpy.int64])",1
"numpy.array(list[numpy.int64], dtype=Type[numpy.int64])",1
pandas._linumpy.datetime64s.tslinumpy.datetime64s.timestamps.Timestamp == numpy.datetime64,3
numpy.ndim(a=list[datetime.date]),1
numpy.asarray(a=list[datetime.date]),1
"numpy.ndim(a=list[Union[int, pandas._libs.tslibs.timestamps.Timestamp]])",1
"numpy.asarray(a=pandas.core.indexes.datetimes.DatetimeIndex, dtype=Type[builtins.object])",1
"numpy.ndarray.repeat(numpy.ndarray, numpy.ndarray, axis=NoneType)",1
"numpy.repeat(a=pandas.core.indexes.datetimes.DatetimeIndex, axis=int, repeats=int)",1
"numpy.where(list[builtins.bool], numpy.ndarray, int)",1
"numpy.where(tuple[builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool], numpy.ndarray, int)",1
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1
"numpy.delete(arr=numpy.ndarray, obj=tuple[int, int, int])",1
"numpy.array(tuple[int, int, int])",1
"numpy.delete(arr=numpy.ndarray, obj=slice[int, int, NoneType])",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, pandas._libs.tslibs.timestamps.Timestamp)",2
numpy.ndarray[builtins.ellipsis],1
"numpy.ndarray.view(numpy.ndarray, dtype=Type[numpy.ndarray])",1
"numpy.where(list[builtins.bool], numpy.ndarray, numpy.ndarray)",1
numpy.asarray(a=pandas._libs.tslibs.timestamps.Timestamp),4
numpy.asarray(a=numpy.timedelta64),1
"numpy.array(list[numpy.timedelta64], dtype=Type[builtins.object])",1
numpy.timedelta64(pandas._libs.tslibs.timedeltas.Timedelta),2
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.timestamps.Timestamp]]",1
numpy.intool_ == int,2
pandas.core.arrays.integer.UInt32Dtype != numpy.dtype,1
"numpy.repeat(a=pandas.core.indexes.datetimes.DatetimeIndex, repeats=int)",4
"numpy.array(list[Union[pandas._libs.tslibs.nattype.NaTType, str]], dtype=str)",1
numpy.ndarray == list[datetime.time],1
numpy.ndarray == list[datetime.date],1
numpy.floor(numpy.ndarray),2
"numpy.asarray(a=list[Union[float, str]])",2
"numpy.hstack(tup=tuple[list[int], list[int]])",1
"numpy.array(list[Union[datetime.date, pandas._libs.tslibs.nattype.NaTType]])",1
"numpy.array(list[Union[datetime.time, pandas._libs.tslibs.nattype.NaTType]])",2
numpy.ndim(a=numpy.uint64),2
"numpy.ndarray.astype(numpy.ndarray, pandas.core.dtypes.dtypes.PeriodDtype, copy=builtins.bool)",1
"numpy.ndarray.astype(numpy.ndarray, pandas.core.dtypes.dtypes.DatetimeTZDtype, copy=builtins.bool)",1
"numpy.array(tuple[float, float, float, float, float, float, float, float, float, float], copy=builtins.bool)",1
"numpy.asarray(a=tuple[float, float, float, float, float, float, float, float, float], dtype=Type[builtins.object])",1
pandas.core.indexes.interval.IntervalIndex == numpy.ndarray,1
"numpy.putmask(pandas.core.arrays.interval.IntervalArray, numpy.ndarray, int)",1
"numpy.putmask(pandas.core.arrays.interval.IntervalArray, str, int)",1
"numpy.where(numpy.ndarray, pandas.core.arrays.interval.IntervalArray, float)",1
"numpy.where(pandas.core.series.Series, pandas.core.arrays.interval.IntervalArray, float)",1
"numpy.ndarray[slituple[str, str, str, str, str, str, str, str, str]e[NoneType, NoneType, NoneType]] = tuple[str, str, str, str, str, str, str, str, str]",1
pandas.core.dtypes.dtypes.PeriodDtype == Type[numpy.object_],2
"numpy.arange(int, dtype=Type[numpy.float64])",2
"numpy.arange(int, int, dtype=Type[numpy.int64])",2
"numpy.asarray(a=list[tuple[int, int]], dtype=NoneType)",1
"numpy.asarray(a=list[tuple[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta]], dtype=NoneType)",1
"numpy.ndarray[slilist[tuple[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[tuple[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta]]",1
"numpy.asarray(a=list[tuple[float, float]], dtype=NoneType)",1
"numpy.asarray(a=list[tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp]], dtype=NoneType)",1
"numpy.ndarray[slilist[tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp]]",1
"numpy.array(list[tuple[int, int]], copy=builtins.bool)",1
"numpy.asarray(a=list[tuple[int, int]], dtype=Type[builtins.object])",1
"numpy.asarray(a=list[tuple[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period]], dtype=NoneType)",1
"numpy.ndarray[slilist[tuple[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period]]e[NoneType, NoneType, NoneType]] = list[tuple[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period]]",1
numpy.array(list[pandas._libs.interval.Interval]),4
numpy.concatenate(list[pandas.core.indexes.timedeltas.TimedeltaIndex]),2
"numpy.ndarray[slituple[int, int, float]e[NoneType, NoneType, NoneType]] = tuple[int, int, float]",1
"numpy.ndarray[slituple[float]e[NoneType, NoneType, NoneType]] = tuple[float]",1
"numpy.ndarray[slituple[float, int]e[NoneType, NoneType, NoneType]] = tuple[float, int]",1
"numpy.repeat(a=builtins.bool, repeats=int)",2
pandas.core.indexes.interval.IntervalIndex > numpy.ndarray,1
"numpy.lexsort(tuple[pandas.core.indexes.numeric.Int64Index, pandas.core.indexes.numeric.Int64Index])",1
"numpy.asarray(a=list[tuple[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp], Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]], dtype=NoneType)",1
"numpy.ndarray[slilist[tuple[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp], Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]]e[NoneType, NoneType, NoneType]] = list[tuple[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp], Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]]",1
"numpy.ndarray.searchsorted(numpy.ndarray, list[pandas._libs.interval.Interval], side=NoneType, sorter=str)",1
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.arrays.interval.IntervalArray, side=NoneType, sorter=str)",1
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.arrays.integer.IntegerArray, side=NoneType, sorter=str)",1
"numpy.ndarray.searchsorted(numpy.ndarray, pandas.core.arrays.datetimes.DatetimeArray, side=NoneType, sorter=str)",1
"numpy.arange(int, step=int)",1
"numpy.arange(int, step=float)",1
"numpy.linspace(num=int, start=int, stop=float)",1
"numpy.linspace(num=int, start=float, stop=int)",1
"numpy.array(tuple[int, int, int, int, int, int, int, int, int, int], copy=builtins.bool)",1
numpy.ndarray[numpy.int64] = builtins.bool,1
"numpy.ndarray[slilist[Union[int, pandas._libs.interval.Interval]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.interval.Interval]]",1
numpy.exp(pandas.core.indexes.multi.MultiIndex),1
numpy.expm1(pandas.core.indexes.multi.MultiIndex),1
numpy.log2(pandas.core.indexes.multi.MultiIndex),1
numpy.log1p(pandas.core.indexes.multi.MultiIndex),1
numpy.sin(pandas.core.indexes.multi.MultiIndex),1
numpy.tan(pandas.core.indexes.multi.MultiIndex),1
numpy.arccos(pandas.core.indexes.multi.MultiIndex),1
numpy.sinh(pandas.core.indexes.multi.MultiIndex),1
numpy.tanh(pandas.core.indexes.multi.MultiIndex),1
numpy.arccosh(pandas.core.indexes.multi.MultiIndex),1
numpy.deg2rad(pandas.core.indexes.multi.MultiIndex),1
numpy.isfinite(pandas.core.indexes.multi.MultiIndex),1
numpy.isnan(pandas.core.indexes.multi.MultiIndex),1
"numpy.ndarray[slilist[Union[NoneType, float, int, pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, float, int, pandas._libs.tslibs.nattype.NaTType, str]]",1
numpy.int8 == numpy.int64,1
"numpy.array(tuple[int, int], copy=builtins.bool)",1
"numpy.repeat(a=numpy.ndarray, repeats=numpy.int64)",1
"numpy.ndarray[slilist[tuple[int, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[tuple[int, pandas._libs.tslibs.timestamps.Timestamp]]",1
"numpy.array(list[Union[numpy.dtype, pandas.core.dtypes.dtypes.CategoricalDtype, pandas.core.dtypes.dtypes.DatetimeTZDtype]])",1
"numpy.tile(A=pandas.core.indexes.datetimes.DatetimeIndex, reps=int)",1
"numpy.delete(arr=numpy.ndarray, obj=list)",1
numpy.ndarray << numpy.ndarray,2
"numpy.random.mtrand.RandomState.permutation(numpy.random.mtrand.RandomState, list[tuple[int, int]])",1
pandas.core.indexes.multi.MultiIndex == numpy.ndarray,1
"numpy.ndim(a=list[Union[int, pandas._libs.tslibs.nattype.NaTType]])",1
numpy.int64 -= int,3
"numpy.ndarray.searchsorted(numpy.ndarray, numpy.int64, side=str)",1
numpy.ndarray == list[int],1
"numpy.ndarray[slilist[tuple[float, int]]e[NoneType, NoneType, NoneType]] = list[tuple[float, int]]",1
"numpy.ndarray[slilist[tuple[int, float]]e[NoneType, NoneType, NoneType]] = list[tuple[int, float]]",1
"numpy.asarray(a=tuple[int, int, int, int, int, int, int], dtype=Type[builtins.object])",1
"numpy.array(list[int], dtype=Type[builtins.float])",2
"numpy.array(list[Union[NoneType, int]], dtype=Type[builtins.NoneType])",1
"numpy.array(list[Union[float, int]], dtype=Type[builtins.float])",2
"numpy.array(list[Union[int, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[pandas._libs.tslibs.nattype.NaTType])",1
"numpy.array(list[Union[int, pandas._libs.missing.NAType]], dtype=Type[pandas._libs.missing.NAType])",1
"numpy.arange(numpy.int64, int, NoneType)",1
"numpy.in1d(ar1=numpy.ndarray, ar2=numpy.ndarray, assume_unique=builtins.bool)",1
"numpy.ndarray[slilist[tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]]e[NoneType, NoneType, NoneType]] = list[tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]]",1
"numpy.ndarray[slilist[tuple[Union[float, int], Union[float, int], Union[float, int], Union[float, int], Union[float, int], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]]e[NoneType, NoneType, NoneType]] = list[tuple[Union[float, int], Union[float, int], Union[float, int], Union[float, int], Union[float, int], int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]]",1
"numpy.asarray(a=tuple[float, float, float, float, float, float, float], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[tuple[int, Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]]e[NoneType, NoneType, NoneType]] = list[tuple[int, Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]]",1
"numpy.repeat(a=builtins.range, repeats=int)",1
"numpy.any(a=list[numpy.ndarray], axis=int)",1
"numpy.all(a=list[numpy.ndarray], axis=int)",1
"numpy.array(tuple[float, float, str], copy=builtins.bool)",1
"numpy.asarray(a=tuple[float, float, str], dtype=Type[builtins.object])",1
numpy.in1d,1
"numpy.arange(numpy.int64, numpy.int64, NoneType)",1
"numpy.ndarray[slibuiltins.boole[numpy.int64, numpy.int64, NoneType]] = builtins.bool",2
"numpy.ndarray[slilist[tuple[str, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[tuple[str, numpy.int64]]",1
"numpy.ndarray[slilist[Union[float, tuple[float, datetime.datetime]]]e[NoneType, NoneType, NoneType]] = list[Union[float, tuple[float, datetime.datetime]]]",1
"numpy.concatenate(tuple[numpy.ndarray, numpy.ndarray])",4
"numpy.array(list[Union[int, pandas._libs.tslibs.timestamps.Timestamp]], copy=builtins.bool)",1
"numpy.asarray(a=list[Union[int, pandas._libs.tslibs.timestamps.Timestamp]], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int, int, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, int, int], dtype=Type[builtins.object])",1
"numpy.array(tuple[int, int, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",1
"numpy.where(tuple[builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool, builtins.bool], numpy.ndarray, float)",1
"numpy.asarray(a=list[Union[float, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period]])",1
"numpy.asarray(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period, str]])",1
numpy.asarray(a=pandas._libs.tslibs.period.Period),1
"numpy.ndarray[slice[str, NoneType, NoneType]]",1
"numpy.repeat(a=pandas.core.indexes.period.PeriodIndex, axis=int, repeats=int)",1
"numpy.repeat(a=pandas.core.indexes.period.PeriodIndex, repeats=int)",1
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.period.Period, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.period.Period, str]]",1
"numpy.array(pandas.core.arrays.period.PeriodArray, dtype=str)",1
"numpy.array(pandas.core.arrays.period.PeriodArray, dtype=Type[numpy.int64])",1
"numpy.asarray(a=pandas.core.indexes.period.PeriodIndex, dtype=str)",1
"numpy.array(pandas.core.indexes.period.PeriodIndex, dtype=str)",2
"numpy.asarray(a=pandas.core.indexes.period.PeriodIndex, dtype=Type[numpy.int64])",1
"numpy.array(pandas.core.indexes.period.PeriodIndex, dtype=Type[numpy.float64])",1
"numpy.array(pandas.core.indexes.period.PeriodIndex, dtype=Type[numpy.int32])",1
"numpy.array(pandas.core.indexes.period.PeriodIndex, dtype=Type[numpy.uint64])",1
"numpy.repeat(a=pandas.core.indexes.range.RangeIndex, repeats=int)",1
pandas.core.indexes.range.RangeIndex == numpy.ndarray,3
numpy.bool_uiltins.numpy.bool_ool == numpy.bool_,1
"numpy.concatenate(tuple[pandas.core.indexes.range.RangeIndex, pandas.core.indexes.base.Index])",1
"numpy.concatenate(tuple[pandas.core.indexes.base.Index, pandas.core.indexes.range.RangeIndex])",1
"numpy.ndim(a=list[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType]])",1
"numpy.array(list[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType]], copy=builtins.bool)",2
"numpy.array(list[Union[float, pandas._libs.tslibs.nattype.NaTType, str]], copy=builtins.bool)",1
"numpy.ndim(a=list[Union[float, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]])",1
"numpy.array(list[Union[float, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]], copy=builtins.bool)",1
"numpy.array(list[Union[float, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta]])",1
"numpy.ndim(a=list[Union[datetime.timedelta, numpy.timedelta64, pandas.tseries.offsets.Second, str]])",1
"numpy.array(list[Union[datetime.timedelta, numpy.timedelta64, pandas.tseries.offsets.Second, str]], copy=builtins.bool)",1
"numpy.array(list[datetime.timedelta], copy=builtins.bool)",1
numpy.ndim(a=list[datetime.timedelta]),1
"numpy.ndim(a=list[Union[NoneType, str]])",2
"numpy.putmask(numpy.ndarray, numpy.ndarray, pandas._libs.tslibs.timedeltas.Timedelta)",2
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.timedeltas.Timedelta, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.timedeltas.Timedelta, str]]",1
"numpy.repeat(a=pandas.core.indexes.timedeltas.TimedeltaIndex, repeats=int)",2
numpy.argsort(a=pandas.core.indexes.timedeltas.TimedeltaIndex),1
"numpy.where(pandas.core.series.Series, numpy.ndarray, int)",1
"numpy.asarray(a=pandas.core.arrays.timedeltas.TimedeltaArray, dtype=numpy.dtype)",2
"numpy.asarray(a=tuple[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta], dtype=Type[builtins.object])",1
numpy.ndarray[tuple[numpy.ndarray]] = list[int],1
numpy.ndarray[tuple[list[int]]] = int,1
numpy.ndarray[tuple[list[int]]] = list[int],1
"numpy.eye(N=int, dtype=numpy.dtype)",1
"numpy.ndarray[tuple[numpy.ndarray, int]] = list[str]",1
numpy.uint64 == numpy.uint8,1
"numpy.ndarray[tuple[slilist[str]e[int, int, NoneType], int]] = list[str]",1
numpy.uint64 == numpy.uint16,1
numpy.uint64 == numpy.uint32,1
numpy.int64 == numpy.int16,1
numpy.asarray(a=list[pandas._libs.interval.Interval]),1
pandas.core.arrays.integer.UInt8Dtype == Type[numpy.object_],1
pandas.core.arrays.integer.UInt16Dtype == Type[numpy.object_],1
pandas.core.arrays.integer.UInt32Dtype == Type[numpy.object_],1
pandas.core.arrays.integer.UInt64Dtype == Type[numpy.object_],1
int == numpy.int8,1
pandas.core.arrays.integer.Int8Dtype == Type[numpy.object_],1
pandas.core.arrays.integer.Int16Dtype == Type[numpy.object_],1
int == numpy.int32,2
pandas.core.arrays.integer.Int32Dtype == Type[numpy.object_],1
int == numpy.uint8,1
int == numpy.uint32,1
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], int]] = numpy.ndarray",1
"numpy.core.records.fromarrays(arrayList=list[list[str]], names=list[str])",1
numpy.ndarray[int] = builtins.complex,1
"numpy.array_equal(a1=list[Union[int, numpy.int32]], a2=numpy.ndarray)",1
"numpy.array(list[Union[int, numpy.int16]], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.asarray(a=list[Union[int, numpy.int16]])",1
"numpy.ndarray[slilist[Union[builtins.complex, float]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, float]]",1
"numpy.ndarray[slilist[builtins.complex]e[NoneType, NoneType, NoneType]] = list[builtins.complex]",1
"numpy.ndim(a=list[Union[datetime.date, str]])",1
"numpy.asarray(a=list[Union[datetime.date, str]])",1
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, int)",1
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, float)",1
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, pandas.core.indexes.numeric.Float64Index)",1
"numpy.ndarray[slilist[Union[builtins.complex, str]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, str]]",1
numpy.dtype(builtins.complex),1
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, pandas.core.indexes.base.Index)",1
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, builtins.bool)",1
"numpy.where(numpy.ndarray, numpy.ndarray, builtins.complex)",1
numpy.complex128uiltins.complex != numpy.complex128,1
"numpy.where(numpy.ndarray, numpy.ndarray, builtins.bool)",1
"numpy.ndarray[slilist[Union[numpy.bool_, str]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.bool_, str]]",1
numpy.bool_uiltins.numpy.bool_ool != numpy.bool_,1
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, pandas.core.indexes.numeric.Int64Index)",1
"numpy.ndarray[slilist[Union[int, numpy.complex128]]e[NoneType, NoneType, NoneType]] = list[Union[int, numpy.complex128]]",1
"numpy.ndarray[slilist[Union[float, numpy.bool_]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.bool_]]",1
"numpy.ndarray[slilist[Union[builtins.complex, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, numpy.int64]]",1
"numpy.ndarray[slilist[Union[builtins.complex, numpy.float64]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, numpy.float64]]",1
"numpy.ndarray[slilist[Union[builtins.complex, numpy.complex128]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, numpy.complex128]]",1
"numpy.ndarray[slilist[Union[builtins.complex, numpy.bool_]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, numpy.bool_]]",1
"numpy.ndarray[slilist[Union[builtins.bool, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, numpy.int64]]",1
"numpy.ndarray[slilist[Union[builtins.bool, numpy.float64]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, numpy.float64]]",1
"numpy.where(numpy.ndarray, numpy.ndarray, pandas.core.arrays.datetimes.DatetimeArray)",1
"numpy.where(pandas.core.indexes.base.Index, numpy.ndarray, numpy.ndarray)",1
"numpy.asarray(a=list[Union[numpy.datetime64, pandas._libs.tslibs.timestamps.Timestamp]])",1
"numpy.asarray(a=list[Union[datetime.datetime, pandas._libs.tslibs.timestamps.Timestamp]])",1
"numpy.ndim(a=list[Union[datetime.timedelta, str]])",1
"numpy.array(list[Union[datetime.timedelta, str]], copy=builtins.bool)",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, builtins.complex)",1
Type[numpy.float64] == Type[numpy.complex128],1
Type[numpy.complex128] == Type[numpy.complex128],1
Type[Type[numpy.complex128]uiltins.oType[numpy.complex128]ject] == Type[numpy.complex128],1
"numpy.issubdtype(arg1=Type[numpy.complex128], arg2=Type[numpy.integer])",1
numpy.asarray(a=builtins.complex),1
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1
numpy.ndarray[numpy.ndarray] = pandas.core.indexes.datetimes.DatetimeIndex,1
numpy.datetime64(pandas._libs.tslibs.timestamps.Timestamp),4
numpy.ndarray[float] = int,1
numpy.float64 in pandas.core.indexes.numeric.Float64Index,1
numpy.float64 in pandas._libs.index.Float64Engine,1
"numpy.ndarray[sliinte[float, int, NoneType]] = int",1
"numpy.ndarray[sliinte[int, float, NoneType]] = int",1
"numpy.ndarray[sliinte[float, float, NoneType]] = int",1
"numpy.ndarray[sliinte[numpy.int64, numpy.int64, NoneType]] = int",2
"numpy.random.mtrand.RandomState.random_sample(numpy.random.mtrand.RandomState, tuple[int, int])",2
"numpy.ndarray[tuple[slice[int, int, NoneType], slice[int, int, NoneType]]]",3
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[int, int, NoneType]]] = int",1
"numpy.ndarray[slilist[int]e[int, NoneType, int]] = list[int]",1
numpy.asarray(a=list[list[int]]),1
numpy.str_ == str,3
numpy.array(numpy.str_),1
numpy.ndarray[int] = numpy.str_,1
"numpy.ndarray[slilist[int]e[NoneType, int, NoneType]] = list[int]",1
"numpy.zeros(int, dtype=Type[builtins.complex])",1
"numpy.zeros(int, dtype=Type[numpy.float64])",1
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, size=tuple[int, int, int])",3
"numpy.asarray(a=numpy.ndarray, dtype=Type[numpy.uint64])",1
"numpy.ndarray[tuple[int, int]] = list[int]",1
"numpy.ndarray[tuple[int, int]] = pandas.tests.indexing.test_indexing.TestFancy.test_setitem_list.<locals>.TO",1
numpy.array(pandas.tests.indexing.test_indexing.TestFancy.test_setitem_list.<locals>.TO),1
"numpy.ix_(args=tuple[list[int], list[int]])",1
"numpy.ndarray[tuple[slinumpy.ndarraye[int, int, NoneType], slinumpy.ndarraye[int, int, NoneType]]] = numpy.ndarray",1
numpy.ndarray[list[int]] = int,1
numpy.ndarray[int] = NoneType,2
"numpy.ndarray[slilist[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]]",1
"numpy.ndarray[tuple[int, numpy.ndarray]] = numpy.datetime64",1
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=builtins.range)",1
"Type[numpy.uint64] in tuple[Type[numpy.object_], Type[builtins.object]]",1
"numpy.asarray(a=list[int], dtype=Type[numpy.uint64])",1
"numpy.asarray(a=list[tuple[int, int]])",1
"numpy.delete(arr=numpy.ndarray, axis=int, obj=int)",1
"numpy.ndarray[slistre[NoneType, NoneType, NoneType]] = str",3
"numpy.asarray(a=tuple[int, int, int, tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str]], dtype=Type[builtins.object])",1
"numpy.array(pandas.core.series.Series, copy=builtins.bool)",1
numpy.ndim(a=pandas.core.arrays.timedeltas.TimedeltaArray),1
numpy.ndarray[tuple[numpy.ndarray]] = pandas.core.arrays.datetimes.DatetimeArray,1
numpy.str_ in pandas.core.frame.DataFrame,1
numpy.str_ in pandas._libs.index.ObjectEngine,1
numpy.int64 // int,1
numpy.ndim(a=list[list[int]]),1
"numpy.ndarray[tuple[slilist[int]e[int, numpy.int64, NoneType]]] = list[int]",1
numpy.ndarray[numpy.ndarray] = pandas.core.indexes.timedeltas.TimedeltaIndex,1
"numpy.ndarray[tuple[int, slinumpy.ndarraye[NoneType, NoneType, NoneType]]] = numpy.ndarray",1
numpy.ndarray[tuple[int]],1
"numpy.ndarray[tuple[int, sliinte[numpy.int64, numpy.int64, NoneType]]] = int",1
numpy.int64 in pandas.core.indexes.range.RangeIndex,1
"numpy.array(list[Union[int, pandas._libs.tslibs.nattype.NaTType]], copy=builtins.bool)",1
numpy.ndarray[numpy.ndarray] = pandas.core.arrays.timedeltas.TimedeltaArray,1
"numpy.array(numpy.int64, ndmin=int)",1
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1
numpy.int64 += int,2
"numpy.asarray(a=list[tuple[int, int, int]])",1
"numpy.asarray(a=list[tuple[int, int, int]], dtype=NoneType)",1
"numpy.arange(int, int, NoneType)",1
Type[Type[numpy.ndarray]uiltins.tuple] == Type[numpy.ndarray],1
Type[Type[numpy.ndarray]uiltins.list] == Type[numpy.ndarray],1
Type[numpy.ndarray] == Type[numpy.ndarray],1
Type[pandas.core.indexes.Type[numpy.ndarray]ase.Index] == Type[numpy.ndarray],1
Type[Type[numpy.ndarray]uiltins.slice] == Type[numpy.ndarray],1
Type[Type[numpy.ndarray]uiltins.set] == Type[numpy.ndarray],1
Type[pandas.core.series.Series] == Type[numpy.ndarray],1
builtins.functionuiltins.function == builtins.function,1
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, int, int]]]",2
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1
numpy.ndarray[list[int]] = numpy.ndarray,1
"numpy.ndarray[tuple[slinumpy.ndarraye[numpy.int64, numpy.int64, NoneType]]] = numpy.ndarray",1
"numpy.ndarray[slilist[tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64]]e[NoneType, NoneType, NoneType]] = list[tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64]]",1
"numpy.ndarray[slinumpy.ndarraye[numpy.int64, numpy.int64, NoneType]] = numpy.ndarray",1
pandas.core.series.Series > numpy.float64,3
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], numpy.ndarray]]",3
"numpy.asarray(a=list[tuple[str, str, str, str]])",1
"numpy.asarray(a=list[tuple[str, str, str, str]], dtype=NoneType)",1
"numpy.asarray(a=list[tuple[str, str, str, str]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[tuple[str, str, str, str]]e[NoneType, NoneType, NoneType]] = list[tuple[str, str, str, str]]",1
"numpy.array(pandas.core.series.Series, copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.asarray(a=tuple[str, str], dtype=NoneType)",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.ndarray[tuple[sliinte[NoneType, NoneType, NoneType], sliinte[NoneType, NoneType, NoneType]]] = int",1
"numpy.ndarray[tuple[sliinte[int, int, NoneType]]] = int",1
numpy.ndarray[tuple[list[int]]] = numpy.ndarray,1
"numpy.ndarray[slice[numpy.int64, int, int]]",3
"numpy.ndarray[slice[int, numpy.int64, int]]",2
"numpy.ndarray[slice[NoneType, int, int]]",3
"numpy.ndarray[slice[numpy.int64, numpy.int64, int]]",2
"numpy.ndarray[slice[NoneType, numpy.int32, NoneType]]",1
"numpy.array(tuple[str, str, str, str, str, str, str, str, str, str, str])",1
"numpy.array(tuple[str, str, str, str, str, str, str, str])",1
numpy.lib.stride_tricks,2
numpy.ndarray.itemsize,1
numpy.lib,2
numpy.lib.stride_tricks.as_strided,2
"numpy.lib.stride_tricks.as_strided(shape=tuple[int, int], strides=numpy.ndarray, x=tuple[int, int])",1
"numpy.ones(dtype=Type[numpy.bool_], shape=tuple[int, int])",1
Type[numpy.float16] == numpy.dtype,3
Type[numpy.float32] == numpy.dtype,3
Type[numpy.float64] == numpy.dtype,3
Type[numpy.int32] == numpy.dtype,4
"numpy.reshape(a=list[str], newshape=tuple[int, int])",1
Type[numpy.int64] == numpy.dtype,4
numpy.ndarrayuiltins.complex * numpy.ndarray,1
"numpy.array(list[builtins.bool], dtype=Type[numpy.object_])",1
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType]]]",1
"numpy.ndarray[tuple[slice[int, int, NoneType]]]",1
"numpy.ndarray[tuple[slice[int, int, int]]]",1
"numpy.ones(dtype=Type[numpy.bool_], shape=int)",1
numpy.ndarray[tuple[list]],1
numpy.ndarray[tuple[list[int]]],1
"numpy.array(list[builtins.bool], dtype=Type[numpy.bool_])",1
"numpy.asanyarray(a=list[int], dtype=Type[numpy.int64])",1
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], list]]",2
"numpy.asanyarray(a=list, dtype=Type[numpy.int64])",1
"numpy.asanyarray(a=list, dtype=str)",1
"numpy.take(a=numpy.ndarray, axis=int, indices=list[int])",1
"numpy.take(a=numpy.ndarray, axis=int, indices=list)",1
"numpy.array(list[builtins.complex], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.array(list[numpy.timedelta64], copy=builtins.bool)",2
numpy.float32(float),6
numpy.frombuffer,5
"numpy.where(list[Type[Union[numpy.float32, numpy.int32]]])",1
pandas.core.series.Series > numpy.float32,1
pandas.core.series.Series <= numpy.float32,1
"numpy.logical_or(pandas.core.series.Series, pandas.core.series.Series)",1
"numpy.asarray(a=list[builtins.bytes], dtype=numpy.dtype)",1
"numpy.asarray(a=pandas.core.series.Series, dtype=Type[numpy.float64])",1
"numpy.zeros(tuple[int, int], dtype=Type[numpy.uint8])",1
numpy.ndarray | pandas.core.series.Series,1
numpy.uint16,3
numpy.dtype == Type[numpy.uint32],1
"numpy.dtype in tuple[Type[numpy.float32], Type[numpy.float64]]",3
Type[numpy.int32] == Type[numpy.object_],4
numpy.ndarray.tobytes(numpy.recarray),2
numpy.array(list[datetime.datetime]),5
Type[numpy.int64] == Type[numpy.object_],1
"numpy.dtype(str, int, int)",1
"numpy.core.multiarray._reconstruct(Type[numpy.ndarray], tuple[int], builtins.bytes)",1
"numpy.core.multiarray._reconstruct(Type[pandas.core.arrays.sparse.array.SparseArray], tuple[int], builtins.bytes)",1
"numpy.ndarray.__setstate__(numpy.ndarray, tuple[int, tuple[int], numpy.dtype, builtins.bool, builtins.bytes])",1
numpy.int16 == int,2
"numpy.core.multiarray._reconstruct(Type[numpy.ndarray], tuple[int], str)",1
"numpy.issubdtype(arg1=Type[numpy.bytes_], arg2=Type[numpy.integer])",1
"numpy.frombuffer(builtins.bytes, count=numpy.dtype, dtype=int)",2
numpy.where(list[builtins.bool]),1
"numpy.where(list[Type[Union[numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int8]]])",1
numpy.dtype != Type[numpy.float32],1
numpy.dtype != Type[numpy.int8],1
numpy.dtype != Type[numpy.int16],1
numpy.dtype != Type[numpy.int32],1
pandas.core.series.Series <= numpy.float64,1
"numpy.where(list[Type[Union[numpy.float64, numpy.int16, numpy.int8]]])",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, pandas._libs.tslibs.nattype.NaTType)",1
numpy.ones_like(a=pandas.core.series.Series),3
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.where(list[Type[Union[numpy.float32, numpy.int16, numpy.int8]]])",1
numpy.min_scalar_type(numpy.float32),1
"numpy.frombuffer(builtins.bytes, count=str, dtype=int)",2
"numpy.where(list[Type[Union[numpy.float32, numpy.int16, numpy.int32, numpy.int8]]])",1
"numpy.where(list[Union[Type[Union[numpy.float32, numpy.uint8]], str]])",1
numpy.isinf(float),1
"numpy.where(list[Type[Union[numpy.float64, numpy.int32]]])",1
"numpy.where(list[Union[Type[Union[numpy.float64, numpy.int32]], str]])",1
numpy.ndarray[int] = numpy.dtype,1
numpy.where(list[str]),1
numpy.where(list[Type[numpy.int32]]),1
numpy.int16 > int,1
Type[numpy.int16] == Type[numpy.object_],4
"numpy.where(list[Type[Union[numpy.float64, numpy.int16, numpy.int32]]])",1
numpy.float32 > float,1
Type[numpy.float32] == Type[numpy.object_],4
"numpy.where(list[Union[Type[Union[numpy.float32, numpy.float64, numpy.int32]], str]])",1
"numpy.where(list[Union[Type[Union[numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int8]], str]])",1
numpy.isinf(numpy.float32),1
"numpy.where(list[Type[Union[numpy.float32, numpy.float64, numpy.int32]]])",1
Type[numpy.int8] == Type[numpy.object_],4
numpy.uint8 in dict,1
"numpy.where(list[Union[Type[numpy.int32], str]])",1
"numpy.array(list[Union[builtins.bool, int]], copy=numpy.dtype, dtype=builtins.bool)",2
Type[numpy.int8] == Type[numpy.float64],1
Type[numpy.int8] == Type[numpy.uint8],1
Type[numpy.int8] == Type[numpy.uint32],1
Type[numpy.int8] == Type[numpy.int8],1
Type[numpy.int16] == Type[numpy.float64],1
Type[numpy.int16] == Type[numpy.uint16],1
Type[numpy.int32] == Type[numpy.float64],1
Type[numpy.int32] == Type[numpy.uint32],1
Type[numpy.int32] == Type[numpy.int8],1
Type[numpy.int32] == Type[numpy.int16],1
Type[numpy.int32] == Type[numpy.int64],1
Type[numpy.int64] == Type[numpy.float64],1
numpy.ndarray.byteswap(numpy.ndarray),1
"numpy.where(list[Type[Union[numpy.float64, numpy.int16, numpy.int32, numpy.int8]]])",1
Type[numpy.int8] == Type[numpy.uint16],1
numpy.int8 > int,1
Type[numpy.int16] == Type[numpy.uint32],1
Type[numpy.int16] == Type[numpy.int8],2
Type[numpy.int16] == Type[numpy.int16],2
"Type[numpy.int32] in tuple[Type[numpy.float32], Type[numpy.float64]]",1
Type[numpy.int64] == Type[numpy.int8],1
Type[numpy.int64] == Type[numpy.int16],1
numpy.ndarray.newbyteorder(numpy.ndarray),1
"numpy.unique(ar=pandas.core.series.Series, return_inverse=builtins.bool)",1
numpy.array(pandas.io.stata.StataMissingValue),1
numpy.ndarray[numpy.ndarray] = pandas.io.stata.StataMissingValue,1
numpy.float32 == float,1
numpy.where(list[Type[numpy.float64]]),1
"numpy.putmask(numpy.ndarray, numpy.ndarray, datetime.datetime)",1
numpy.ndarray - datetime.datetime,1
numpy.<numpy.vectorize object at 0x7fa91cd0b880>(args=tuple[numpy.ndarray]),1
numpy.float16,1
"numpy.dtype in tuple[Type[numpy.float16], Type[numpy.float32]]",1
"numpy.dtype in tuple[Type[numpy.int8], Type[numpy.int16], Type[numpy.int32]]",1
"numpy.where(list[Type[Union[numpy.int16, numpy.int32, numpy.int8]]])",1
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.uint16],1
"numpy.where(list[Type[Union[numpy.int32, numpy.int8]]])",1
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.uint8],1
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.uint32],1
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.int8],1
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.int16],1
pandas.core.dtypes.dtypes.CategoricalDtype == Type[numpy.int64],1
"numpy.array(list[numpy.int64], dtype=Type[numpy.int32])",1
"numpy.array(numpy.ndarray, dtype=Type[numpy.int16])",1
"numpy.where(list[Type[Union[numpy.float32, numpy.int8]]])",1
"numpy.where(list[Union[Type[Union[numpy.float32, numpy.int32]], str]])",1
"numpy.where(list[Union[Type[numpy.float64], str]])",1
Type[numpy.complex128] == Type[numpy.object_],1
pandas.core.dtypes.dtypes.DatetimeTZDtype == Type[numpy.uint16],1
Type[pandas._liType[numpy.object_]s.tsliType[numpy.object_]s.timestamps.Timestamp] == Type[numpy.object_],1
numpy.finfo(dtype=Type[numpy.float64]),2
numpy.double,1
numpy.finfo.eps,2
numpy.finfo(dtype=Type[numpy.float32]),2
numpy.float32 / float,1
numpy.finfo.max,3
"numpy.ndarray[slilist[Union[float, numpy.float32, numpy.float64]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.float32, numpy.float64]]",1
"numpy.ndarray[slilist[Union[float, numpy.float32]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.float32]]",1
"numpy.where(list[Union[Type[Union[numpy.float32, numpy.float64, numpy.int16, numpy.int32, numpy.int8, numpy.uint8]], str]])",1
"numpy.where(list[Union[Type[numpy.uint8], str]])",1
"numpy.where(list[Type[Union[numpy.int32, numpy.uint8]]])",1
"numpy.where(list[Union[Type[Union[numpy.float64, numpy.int32, numpy.int8, numpy.uint8]], str]])",1
"numpy.where(list[Union[Type[Union[numpy.float64, numpy.int32, numpy.int8]], str]])",1
"numpy.zeros(tuple[int, int], dtype=Type[numpy.int8])",1
-numpy.float64,1
"numpy.empty(int, dtype=list[tuple[str, Type[builtins.object]]])",1
int -= numpy.int64,1
int += numpy.int64,1
numpy.int64 += numpy.int64,1
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.timestamps.Timestamp, str]]",1
numpy.array(list[list[list[builtins.bool]]]),1
numpy.asarray(a=pandas.tests.io.formats.test_format.TestGenericArrayFormatter.test_2d_extension_type.<locals>.ExtTypeStub),1
"numpy.array(list[Union[int, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[builtins.object])",1
"numpy.array(list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]], dtype=str)",1
numpy.ediff1d,1
"numpy.empty_like(numpy.ndarray, dtype=Type[builtins.object])",1
numpy.size(a=numpy.ndarray),1
numpy.int64 > float,2
numpy.nanmin(a=numpy.ndarray),8
numpy.nanmax(a=numpy.ndarray),8
"numpy.asarray(a=numpy.ndarray, dtype=Type[builtins.float])",1
"numpy.array(numpy.ndarray, copy=Type[builtins.float], dtype=builtins.bool)",1
float > numpy.float64,1
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]",1
numpy.unique(ar=list[str]),1
"numpy.asarray(a=list[tuple[str, int]])",1
"numpy.asarray(a=list[tuple[str, int]], dtype=NoneType)",1
"numpy.asarray(a=list[tuple[str, int]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[pandas.core.arrays.integer.Int64Dtype]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.integer.Int64Dtype]",1
"numpy.append(arr=numpy.ndarray, values=str)",2
"numpy.ndarray[slilist[Union[builtins.bool, tuple[int, int]]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, tuple[int, int]]]",1
"numpy.array(list[float], dtype=Type[numpy.float16])",1
"numpy.issubdtype(arg1=Type[numpy.datetime64], arg2=Type[numpy.integer])",1
"numpy.ndarray[slilist[list[Union[int, str]]]e[NoneType, NoneType, NoneType]] = list[list[Union[int, str]]]",1
"numpy.array(list[dict], dtype=Type[builtins.object])",1
Type[numpy.float64] == str,1
"numpy.ndarray[slilist[pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_nonprintable_bytes.<locals>.BinaryThing]e[NoneType, NoneType, NoneType]] = list[pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_nonprintable_bytes.<locals>.BinaryThing]",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[datetime.date, pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.date, pandas._libs.tslibs.nattype.NaTType, str]]",1
"numpy.ndarray[slilist[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType, str]]",1
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp, str]]",1
str != numpy.int64,1
"numpy.ndarray[slilist[Union[datetime.timedelta, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.timedelta, pandas._libs.tslibs.timestamps.Timestamp]]",1
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta, str]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timedeltas.Timedelta, str]]",1
"numpy.ndarray[slilist[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType, str]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType, str]]",1
"numpy.ndarray[slilist[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.timedelta, pandas._libs.tslibs.nattype.NaTType]]",1
"numpy.ndarray[slilist[Union[builtins.object, int]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.object, int]]",1
"numpy.ndarray[slilist[Union[builtins.complex, int, str]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.complex, int, str]]",1
"numpy.ndarray[slilist[list[Union[NoneType, builtins.complex, float, float, int]]]e[NoneType, NoneType, NoneType]] = list[list[Union[NoneType, builtins.complex, float, float, int]]]",1
"numpy.prod(a=tuple[int, int, int, int])",1
"numpy.arange(int, dtype=Type[builtins.int])",1
numpy.iinfo(int_type=str),5
numpy.iinfo(int_type=Type[builtins.int]),2
numpy.finfo(dtype=str),2
numpy.float32 / int,1
numpy.array(list[list[list[list[list[list[int]]]]]]),1
"numpy.arange(float, float, int, dtype=Type[numpy.float32])",1
"numpy.array(list[Union[float, int]], dtype=Type[builtins.int])",1
pandas.core.series.Series == Type[numpy.int64],3
"numpy.asarray(a=list[Type[Union[builtins.float, builtins.int, builtins.object]]])",1
"numpy.asarray(a=list[Type[Union[builtins.float, builtins.object]]])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[list[Union[int, pandas._libs.tslibs.timestamps.Timestamp]]]e[NoneType, NoneType, NoneType]] = list[list[Union[int, pandas._libs.tslibs.timestamps.Timestamp]]]",1
"numpy.ndarray[slilist[pandas.core.arrays.categorical.Categorical]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.categorical.Categorical]",1
"numpy.ndarray[slilist[Union[numpy.ndarray, pandas.core.arrays.categorical.Categorical]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.ndarray, pandas.core.arrays.categorical.Categorical]]",1
"numpy.array(pandas.core.indexes.numeric.UInt64Index, copy=builtins.bool)",1
"numpy.asarray(a=tuple[int, tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str]], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int, tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str]], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int, int, tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, str]], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int, tuple[str, str], tuple[str, str]], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1
"numpy.array(list[Union[builtins.bool, float]], dtype=Type[builtins.object])",2
"numpy.asarray(a=tuple[int, str], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[numpy.ndarray, pandas.core.indexes.datetimes.DatetimeIndex]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.ndarray, pandas.core.indexes.datetimes.DatetimeIndex]]",1
"numpy.ndarray[tuple[slinumpy.datetime64e[int, int, NoneType]]] = numpy.datetime64",1
"numpy.array(tuple[datetime.datetime, datetime.datetime, datetime.datetime], copy=builtins.bool)",1
"numpy.asarray(a=tuple[tuple[str, str], tuple[str, str], str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int, int, str, str], dtype=Type[builtins.object])",1
numpy.ndarray[int] = datetime.date,2
numpy.ndarray + str,1
"numpy.ndarray[slilist[list[Union[float, int]]]e[NoneType, NoneType, NoneType]] = list[list[Union[float, int]]]",1
"numpy.ndarray[slituple[str, str]e[NoneType, NoneType, NoneType]] = tuple[str, str]",1
"numpy.ndarray[tuple[numpy.ndarray, int]] = float",1
numpy.ndarray &= numpy.ndarray,2
numpy.ndarray & int,7
numpy.ndarray >> numpy.ndarray,1
numpy.ndarray &= int,1
numpy.ndarray << int,1
numpy.ndarray[str] = numpy.ndarray,6
"numpy.ndarray.view(numpy.ndarray, dtype=numpy.dtype)",2
"numpy.zeros(int, dtype=Type[numpy.uint8])",1
numpy.ndarray >>= numpy.ndarray,1
"numpy.frombuffer(builtins.bytes, dtype=Type[numpy.uint64])",1
builtins.bytes.rstrip(self=numpy.bytes_),1
"numpy.zeros(int, numpy.dtype)",1
"numpy.take(a=list[str], indices=list[int])",1
numpy.array(list[matplotlib.axes._subplots.AxesSubplot]),1
numpy.ndarray[int] = matplotlib.axes._subplots.AxesSubplot,3
"numpy.ndarray[slilist[matplotlib.axes._subplots.AxesSubplot]e[NoneType, NoneType, NoneType]] = list[matplotlib.axes._subplots.AxesSubplot]",1
Type[numpy.datetime64] in dict,1
"numpy.asarray(a=list[datetime.date], dtype=NoneType)",1
"numpy.asarray(a=list[datetime.datetime], dtype=NoneType)",1
"numpy.zeros(int, dtype=list[tuple[str, Union[Type[Union[builtins.bool, builtins.int]], str]]])",2
"numpy.zeros(int, dtype=list[tuple[str, Union[Type[Union[builtins.bool, numpy.int64]], str]]])",1
numpy.nonzero(a=pandas.core.indexes.numeric.Int64Index),1
numpy.ndarray[str] = builtins.bool,2
"numpy.compress(a=numpy.ndarray, condition=numpy.ndarray)",4
numpy.ndarray[str] = str,1
numpy.ceil(numpy.float64),1
"numpy.arange(int, int, float)",3
numpy.ndarray - float,1
"numpy.ndarray[slilist[pandas.core.arrays.integer.UInt32Dtype]e[NoneType, NoneType, NoneType]] = list[pandas.core.arrays.integer.UInt32Dtype]",1
numpy.ravel(a=pandas.core.series.Series),1
"numpy.histogram(a=numpy.ndarray, bins=NoneType, range=int)",1
numpy.histogram,1
numpy.ravel(a=pandas.core.frame.DataFrame),1
numpy.ma.core.array(data=numpy.ndarray),1
"numpy.ma.core.masked_where(a=numpy.ma.core.MaskedArray, condition=numpy.ndarray)",1
numpy.nanmin,2
numpy.nanmax,2
numpy.float64 >= numpy.float64,5
"numpy.ndarray[tuple[list[int], list[int]]]",2
numpy.ma.core.MaskedArray.mask,2
*numpy.void,1
numpy.bytes_,1
"builtins.bytes.decode(encoding=str, self=numpy.bytes_)",1
numpy.float64 >= numpy.int64,2
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, int, int, int)",1
"numpy.array(tuple[float, float, float, float])",1
numpy.int64 - numpy.float64,1
"numpy.linspace(num=int, start=numpy.float64, stop=numpy.float64)",1
numpy.int64 + numpy.float64,2
"numpy.random.mtrand.RandomState.rand(numpy.random.mtrand.RandomState, int, int, int)",1
numpy.array(list[matplotlib.axes._axes.Axes]),1
"numpy.arange(float, int, float)",1
"numpy.random.mtrand.RandomState.normal(numpy.random.mtrand.RandomState, int, int, size=int)",2
"numpy.random.mtrand.RandomState.set_state(numpy.random.mtrand.RandomState, tuple[str, numpy.ndarray, int, int, float])",1
numpy.ndarray * numpy.float64,1
numpy.ndim(a=list[NoneType]),1
"numpy.asarray(a=list[Union[NoneType, datetime.datetime]])",1
"numpy.ndim(a=list[Union[NoneType, datetime.datetime]])",1
numpy.asarray(a=list[NoneType]),1
"numpy.array(list[NoneType], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.array(list[Union[NoneType, datetime.datetime]], copy=builtins.bool)",1
numpy.builtins.boolool_ == builtins.bool,3
"numpy.maximum(pandas.core.series.Series, pandas.core.series.Series)",1
numpy.amin(a=pandas.core.indexes.timedeltas.TimedeltaIndex),1
numpy.amax(a=pandas.core.indexes.timedeltas.TimedeltaIndex),1
"numpy.amin(a=pandas.core.indexes.timedeltas.TimedeltaIndex, out=int)",1
"numpy.amax(a=pandas.core.indexes.timedeltas.TimedeltaIndex, out=int)",1
numpy.argmin(a=pandas.core.indexes.timedeltas.TimedeltaIndex),1
numpy.argmax(a=pandas.core.indexes.timedeltas.TimedeltaIndex),1
numpy.amax(a=pandas.core.indexes.numeric.Int64Index),1
numpy.amin(a=pandas.core.indexes.numeric.Int64Index),1
"numpy.amin(a=pandas.core.indexes.numeric.Int64Index, out=int)",1
"numpy.amax(a=pandas.core.indexes.numeric.Int64Index, out=int)",1
numpy.argmax(a=pandas.core.indexes.numeric.Int64Index),1
"numpy.argmin(a=pandas.core.indexes.numeric.Int64Index, out=int)",1
"numpy.argmax(a=pandas.core.indexes.numeric.Int64Index, out=int)",1
numpy.amax(a=pandas.core.indexes.range.RangeIndex),1
"numpy.amin(a=pandas.core.indexes.range.RangeIndex, out=int)",1
"numpy.amax(a=pandas.core.indexes.range.RangeIndex, out=int)",1
numpy.amin(a=pandas.core.indexes.datetimes.DatetimeIndex),1
numpy.amax(a=pandas.core.indexes.datetimes.DatetimeIndex),1
"numpy.amin(a=pandas.core.indexes.datetimes.DatetimeIndex, out=int)",1
"numpy.amax(a=pandas.core.indexes.datetimes.DatetimeIndex, out=int)",1
numpy.argmin(a=pandas.core.indexes.datetimes.DatetimeIndex),1
numpy.argmax(a=pandas.core.indexes.datetimes.DatetimeIndex),1
"numpy.argmin(a=pandas.core.indexes.period.PeriodIndex, out=int)",1
"numpy.argmax(a=pandas.core.indexes.period.PeriodIndex, out=int)",1
numpy.int64 == float,14
"numpy.ndarray.sum(numpy.ndarray, dtype=str)",1
"numpy.allclose(a=float, b=numpy.float32)",1
"numpy.allclose(a=float, b=numpy.float64)",1
numpy.argmin(a=pandas.core.series.Series),1
numpy.argmax(a=pandas.core.series.Series),1
numpy.ndarray.tolist,2
"numpy.ones(dtype=Type[builtins.int], shape=int)",1
"numpy.std(a=numpy.ndarray, ddof=int)",4
"numpy.var(a=numpy.ndarray, ddof=int)",3
"numpy.arange(numpy.int64, numpy.int64, int)",1
numpy.std(a=pandas.core.series.Series),2
"numpy.searchsorted(a=numpy.ndarray, side=str, v=pandas.core.indexes.datetimes.DatetimeIndex)",1
numpy.product,1
builtins.frozensetuiltins.function in builtins.frozenset,1
numpy.product(args=tuple[pandas.core.series.Series]),1
numpy.ndarray += numpy.int64,1
numpy.zeros_like(a=pandas.core.indexes.datetimes.DatetimeIndex),1
"numpy.ndarray[tuple[slice[NoneType, NoneType, NoneType], slice[int, NoneType, int]]]",1
"numpy.array_equal(a1=list[Union[builtins.bool, int]], a2=numpy.ndarray)",1
"numpy.array(list[Union[builtins.bool, float]], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.ndarray[slilist[Union[builtins.bool, pandas._libs.tslibs.period.Period]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, pandas._libs.tslibs.period.Period]]",1
"numpy.ndarray[slilist[Union[float, pandas._libs.tslibs.period.Period]]e[NoneType, NoneType, NoneType]] = list[Union[float, pandas._libs.tslibs.period.Period]]",1
"numpy.ndarray[slilist[Union[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.timedeltas.Timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.timedeltas.Timedelta]]",1
"numpy.array(pandas.core.arrays.interval.IntervalArray, dtype=Type[numpy.object_])",1
"numpy.lituple[numpy.ndarray, numpy.ndarray].index_tricks.RClass[tuple[numpy.ndarray, numpy.ndarray]]",2
"numpy.ndarray[tuple[slistre[int, int, NoneType]]] = str",1
"numpy.sum(a=tuple[int, int])",1
"numpy.ndarray[slilist[Union[decimal.Decimal, int]]e[NoneType, NoneType, NoneType]] = list[Union[decimal.Decimal, int]]",1
"numpy.array(list[int], dtype=int, ndmin=Type[numpy.float16])",2
"numpy.array(list[float], dtype=int, ndmin=Type[numpy.float16])",1
numpy.float16(float),1
"numpy.array(list[int], dtype=int, ndmin=Type[numpy.float32])",2
"numpy.array(list[float], dtype=int, ndmin=Type[numpy.float32])",1
"numpy.ndarray.fill(numpy.ndarray, numpy.float32)",1
"numpy.array(list[int], dtype=int, ndmin=Type[numpy.float64])",2
"numpy.array(list[float], dtype=int, ndmin=Type[numpy.float64])",1
"numpy.array(list[int], dtype=int, ndmin=Type[numpy.float128])",2
"numpy.array(list[float], dtype=int, ndmin=Type[numpy.float128])",1
"numpy.ndarray.fill(numpy.ndarray, numpy.float128)",1
"numpy.array(list[float], ndmin=int)",1
"numpy.array(list[int], dtype=int, ndmin=Type[numpy.int16])",2
"numpy.array(list[int], dtype=int, ndmin=Type[numpy.int64])",2
"numpy.ndarray[slilist[list[Union[NoneType, int]]]e[NoneType, NoneType, NoneType]] = list[list[Union[NoneType, int]]]",1
"tuple[int, int] != numpy.int64",1
"numpy.array(tuple[datetime.date, datetime.date, datetime.date], copy=builtins.bool)",1
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, str], dtype=Type[builtins.object])",1
"numpy.repeat(a=pandas.core.indexes.base.Index, repeats=numpy.float64)",1
"numpy.asarray(a=tuple[int, int, str], dtype=Type[builtins.object])",1
"numpy.repeat(a=pandas.core.indexes.numeric.Int64Index, repeats=numpy.float64)",1
"numpy.repeat(a=pandas.core.indexes.numeric.Float64Index, repeats=numpy.float64)",1
pandas.core.frame.DataFrame / numpy.int64,1
pandas.core.frame.DataFrame / numpy.float64,1
numpy.size,2
"numpy.ones(dtype=str, shape=int)",1
numpy.iterable(y=pandas.core.indexes.interval.IntervalIndex),1
"numpy.iterable(y=list[Union[float, int]])",1
numpy.iterable(y=list[pandas._libs.tslibs.timestamps.Timestamp]),1
"numpy.ndarray.view(numpy.ndarray, dtype=Type[numpy.int64])",1
numpy.iterable(y=float),1
"numpy.where(numpy.ndarray, float, numpy.ndarray)",1
numpy.isfinite(float),1
numpy.modf(float),1
"numpy.around(a=float, decimals=int)",1
numpy.float64 -= float,1
numpy.float64 += float,1
"numpy.where(pandas.core.series.Series, pandas.core.series.Series, float)",1
numpy.iterable(y=pandas.core.indexes.datetimes.DatetimeIndex),1
"numpy.asarray(a=pandas.core.indexes.datetimes.DatetimeIndex, dtype=numpy.dtype)",1
numpy.int64 - float,1
"numpy.ones(dtype=numpy.dtype, shape=int)",1
"numpy.append(arr=pandas.core.indexes.base.Index, values=float)",1
"numpy.append(arr=pandas.core.indexes.numeric.Float64Index, values=float)",1
"numpy.asarray(a=list[Union[numpy.str_, str]])",1
"numpy.asarray(a=list[Union[numpy.str_, str]], dtype=NoneType)",1
"numpy.asarray(a=list[Union[numpy.str_, str]], dtype=Type[builtins.object])",1
numpy.str_ != str,1
"numpy.ndarray[slilist[Union[list[str], pandas.core.series.Series]]e[NoneType, NoneType, NoneType]] = list[Union[list[str], pandas.core.series.Series]]",1
"numpy.asarray(a=tuple[int, str, str, str], dtype=Type[builtins.object])",1
"numpy.array(tuple[str, str, str, str, str, str, str, str], copy=builtins.bool)",1
"numpy.asarray(a=tuple[builtins.bool, builtins.bool, builtins.bool, builtins.bool], dtype=Type[builtins.object])",1
"numpy.asarray(a=list[pandas.core.resample.TimeGrouper], dtype=str)",1
"numpy.asarray(a=tuple[pandas._libs.tslibs.period.Period, pandas._libs.tslibs.period.Period, str], dtype=Type[builtins.object])",1
"numpy.ndarray.repeat(numpy.ndarray, numpy.float64, axis=NoneType)",1
"numpy.dtype(list[tuple[str, Type[Union[builtins.float, builtins.int, builtins.object]]]])",1
"numpy.array(list[tuple[str, str]], dtype=list[tuple[str, Type[builtins.object]]])",1
numpy.ndarray[str] = pandas.core.indexes.numeric.Int64Index,2
"numpy.random.mtrand.RandomState.lognormal(numpy.random.mtrand.RandomState, float, float, int)",1
numpy.ndarray in pandas.core.frame.DataFrame,1
"numpy.repeat(a=pandas.core.indexes.category.CategoricalIndex, repeats=numpy.float64)",1
"numpy.asarray(a=tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], dtype=Type[builtins.object])",1
"numpy.asarray(a=list[Union[float, int]], dtype=Type[numpy.float64])",1
"numpy.allclose(a=numpy.ndarray, atol=float, b=numpy.ndarray)",1
"numpy.array(list[numpy.int64], dtype=Type[numpy.float64])",1
numpy.int64 * numpy.float64,1
"numpy.array(list[Union[numpy.float64, numpy.int64]], dtype=Type[numpy.float64])",1
"numpy.array(list[pandas._libs.interval.Interval], copy=builtins.bool)",1
numpy.loadtxt(fname=str),2
"numpy.ndarray[slinumpy.bool_e[NoneType, NoneType, int]] = numpy.bool_",1
"numpy.repeat(a=pandas.core.indexes.datetimes.DatetimeIndex, repeats=numpy.float64)",1
"numpy.repeat(a=list, repeats=numpy.int64)",1
"numpy.repeat(a=list[int], repeats=numpy.int64)",1
"numpy.array(list, dtype=numpy.dtype)",2
"numpy.ndarray[slilist[Union[list[int], numpy.ndarray]]e[NoneType, NoneType, NoneType]] = list[Union[list[int], numpy.ndarray]]",1
"numpy.asarray(a=pandas.core.arrays.datetimes.DatetimeArray, dtype=Type[numpy.int64])",2
"numpy.array(list[Union[pandas.core.arrays.integer.Int64Dtype, pandas.core.dtypes.dtypes.DatetimeTZDtype]])",1
"numpy.ndarray[slilist[Union[datetime.datetime, datetime.timedelta]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.datetime, datetime.timedelta]]",1
"numpy.issubdtype(arg1=Type[numpy.timedelta64], arg2=Type[numpy.integer])",1
"numpy.where(numpy.ndarray, pandas.core.arrays.categorical.Categorical, pandas.core.arrays.categorical.Categorical)",1
"numpy.array(float, dtype=numpy.dtype)",1
numpy.min_scalar_type(numpy.float16),1
"numpy.ndarray[tuple[numpy.ndarray, slinumpy.float16e[NoneType, NoneType, NoneType]]] = numpy.float16",1
"numpy.ndarray[slilist[Union[list[Union[float, int, str]], pandas.core.indexes.datetimes.DatetimeIndex]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[float, int, str]], pandas.core.indexes.datetimes.DatetimeIndex]]",1
"numpy.array(list[tuple[str, str]], list[tuple[str, numpy.dtype]])",1
"numpy.array(list[tuple[numpy.int64, str]], list[tuple[str, numpy.dtype]])",1
numpy.float64(x=pandas.core.series.Series),2
numpy.float32(pandas.core.series.Series),4
numpy.uint8(pandas.core.series.Series),4
numpy.uint16(pandas.core.series.Series),2
numpy.uint32(pandas.core.series.Series),4
numpy.uint64(pandas.core.series.Series),2
numpy.int64(pandas.core.series.Series),6
numpy.int8(pandas.core.series.Series),4
numpy.int16(pandas.core.series.Series),2
numpy.int32(pandas.core.series.Series),4
"numpy.array(list[tuple[numpy.int64, numpy.int8]], list[tuple[str, numpy.dtype]])",1
"numpy.array(list[tuple[numpy.datetime64, str]], list[tuple[str, numpy.dtype]])",1
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, list[str], tuple[int, int])",1
numpy.int64 + pandas._libs.missing.NAType,1
numpy.int64 * pandas._libs.missing.NAType,1
numpy.int64 // pandas._libs.missing.NAType,1
pandas._linumpy.int64s.missing.NAType != numpy.int64,1
pandas._linumpy.int64s.missing.NAType >= numpy.int64,1
numpy.int64 == pandas._libs.missing.NAType,1
numpy.int64 > pandas._libs.missing.NAType,1
numpy.int64 <= pandas._libs.missing.NAType,1
pandas._linumpy.bool_s.missing.NAType != numpy.bool_,1
pandas._linumpy.bool_s.missing.NAType >= numpy.bool_,1
numpy.pandas._libs.missing.NATypeool_ == pandas._libs.missing.NAType,1
numpy.pandas._libs.missing.NATypeool_ > pandas._libs.missing.NAType,1
numpy.pandas._libs.missing.NATypeool_ <= pandas._libs.missing.NAType,1
pandas._linumpy.ndarrays.missing.NAType ** numpy.ndarray,1
numpy.ndarray ** pandas._libs.missing.NAType,3
float == numpy.ndarray,1
numpy.ndarrayuiltins.numpy.ndarrayool == numpy.ndarray,1
numpy.pandas._libs.missing.NATypeool_ ** pandas._libs.missing.NAType,1
numpy.float64 ** pandas._libs.missing.NAType,2
"numpy.full(dtype=Type[builtins.object], fill_value=pandas._libs.missing.NAType, shape=tuple[int])",1
"numpy.full(dtype=Type[builtins.object], fill_value=pandas._libs.missing.NAType, shape=tuple[int, int])",1
"numpy.full(dtype=Type[builtins.object], fill_value=pandas._libs.missing.NAType, shape=tuple[int, int, int])",1
numpy.ndarray + pandas._libs.missing.NAType,1
numpy.zeros(tuple[int]),1
numpy.ndarray - pandas._libs.missing.NAType,1
numpy.ndarray * pandas._libs.missing.NAType,1
numpy.ndarray / pandas._libs.missing.NAType,1
numpy.ndarray // pandas._libs.missing.NAType,1
numpy.ndarray % pandas._libs.missing.NAType,1
numpy.log(pandas._libs.missing.NAType),1
"numpy.add(pandas._libs.missing.NAType, int)",1
numpy.frexp(pandas._libs.missing.NAType),1
"numpy.ufunc.at(numpy.ufunc, pandas._libs.missing.NAType, int)",1
"numpy.logaddexp(numpy.ndarray, pandas._libs.missing.NAType)",1
"numpy.logaddexp(pandas._libs.missing.NAType, numpy.ndarray)",1
numpy.logaddexp,1
"numpy.modf(pandas._libs.missing.NAType, pandas._libs.missing.NAType)",1
"numpy.divmod(numpy.ndarray, pandas._libs.missing.NAType)",1
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta // numpy.timedelta64,2
numpy.ndarray - pandas._libs.tslibs.nattype.NaTType,1
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.nattype.NaTType + numpy.timedelta64,1
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.nattype.NaTType - numpy.timedelta64,1
numpy.timedelta64 + pandas._libs.tslibs.nattype.NaTType,1
numpy.timedelta64 + pandas._libs.interval.Interval,1
numpy.timedelta64 + pandas._libs.tslibs.period.Period,6
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timestamps.Timestamp + numpy.timedelta64,8
numpy.datetime64 + pandas._libs.tslibs.timedeltas.Timedelta,1
numpy.timedelta64 - pandas._libs.tslibs.timedeltas.Timedelta,2
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta - numpy.timedelta64,1
pandas._linumpy.int64s.tslinumpy.int64s.timedeltas.Timedelta + numpy.int64,1
pandas._linumpy.int64s.tslinumpy.int64s.timedeltas.Timedelta - numpy.int64,1
pandas._linumpy.float64s.tslinumpy.float64s.timedeltas.Timedelta + numpy.float64,1
pandas._linumpy.float64s.tslinumpy.float64s.timedeltas.Timedelta - numpy.float64,1
numpy.ndarray - pandas._libs.tslibs.timedeltas.Timedelta,3
"numpy.array(list[Union[numpy.timedelta64, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timestamps.Timestamp]])",2
numpy.ndarray + pandas._libs.tslibs.timedeltas.Timedelta,2
numpy.timedelta64 * pandas._libs.tslibs.timedeltas.Timedelta,1
numpy.float64 * pandas._libs.tslibs.timedeltas.Timedelta,1
numpy.timedelta64 / pandas._libs.tslibs.timedeltas.Timedelta,2
numpy.datetime64 / pandas._libs.tslibs.timedeltas.Timedelta,1
pandas._linumpy.datetime64s.tslinumpy.datetime64s.timedeltas.Timedelta // numpy.datetime64,1
pandas._linumpy.int32s.tslinumpy.int32s.timedeltas.Timedelta // numpy.int32,1
numpy.uint8(float),1
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta // numpy.ndarray,2
numpy.int32(float),1
numpy.float64 // pandas._libs.tslibs.timedeltas.Timedelta,1
numpy.uint8 // pandas._libs.tslibs.timedeltas.Timedelta,1
numpy.int32 // pandas._libs.tslibs.timedeltas.Timedelta,1
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta % numpy.timedelta64,2
numpy.timedelta64 % pandas._libs.tslibs.timedeltas.Timedelta,1
numpy.ndarray % pandas._libs.tslibs.timedeltas.Timedelta,1
"numpy.array(list[list[pandas._libs.tslibs.timedeltas.Timedelta]], dtype=Type[builtins.object])",1
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta == numpy.ndarray,1
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timedeltas.Timedelta != numpy.ndarray,1
numpy.ndarray != pandas._libs.tslibs.timedeltas.Timedelta,1
numpy.float16(int),1
numpy.ndim(a=list[numpy.timedelta64]),1
numpy.timedelta64.astype,4
numpy.datetime64 - pandas._libs.tslibs.timestamps.Timestamp,1
numpy.timedelta64 + pandas._libs.tslibs.timestamps.Timestamp,1
pandas._linumpy.int64s.tslinumpy.int64s.timestamps.Timestamp + numpy.int64,1
pandas._linumpy.int64s.tslinumpy.int64s.timestamps.Timestamp - numpy.int64,1
numpy.ndarray + pandas._libs.tslibs.timestamps.Timestamp,1
"numpy.array(list[numpy.datetime64], dtype=str)",4
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timestamps.Timestamp == numpy.ndarray,1
"numpy.array(list[list[builtins.bool]], dtype=Type[builtins.bool])",2
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timestamps.Timestamp != numpy.ndarray,1
numpy.ndarray != pandas._libs.tslibs.timestamps.Timestamp,1
pandas._linumpy.ndarrays.tslinumpy.ndarrays.timestamps.Timestamp <= numpy.ndarray,1
numpy.ndarray >= pandas._libs.tslibs.timestamps.Timestamp,1
"numpy.array(list[list[pandas._libs.tslibs.timestamps.Timestamp]], dtype=Type[builtins.object])",1
pandas._linumpy.float64s.tslinumpy.float64s.timestamps.Timestamp == numpy.float64,1
pandas._linumpy.float64s.tslinumpy.float64s.timestamps.Timestamp != numpy.float64,1
numpy.datetime64(datetime.datetime),2
numpy.ndarray <= pandas._libs.tslibs.timestamps.Timestamp,1
numpy.datetime64 - numpy.timedelta64,1
numpy.datetime64.view,2
numpy.round_(a=float),1
"numpy.datetime64(int, str)",4
numpy.ptp,1
"numpy.ufunc.reduce(numpy.ufunc, numpy.ndarray, axis=NoneType, dtype=NoneType, keepdims=builtins.bool)",1
numpy.ptp(a=numpy.ndarray),1
"numpy.all(a=pandas.core.series.Series, keepdims=builtins.bool)",1
"numpy.all(a=pandas.core.series.Series, out=builtins.object)",1
"numpy.asarray(a=tuple[pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta, pandas._libs.tslibs.timedeltas.Timedelta], dtype=Type[builtins.object])",1
numpy.unique(ar=pandas.core.series.Series),2
"numpy.isclose(a=numpy.float64, b=int, equal_nan=builtins.bool)",1
numpy.isclose,1
"numpy.isclose(a=float, b=float, equal_nan=builtins.bool)",1
"numpy.isclose(a=numpy.bool_, b=builtins.bool, equal_nan=builtins.bool)",1
"numpy.take(a=pandas.core.indexes.numeric.Float64Index, indices=numpy.ndarray)",1
"numpy.where(builtins.bool, int, int)",1
"numpy.asarray(a=tuple[int, int, float], dtype=Type[builtins.object])",1
"numpy.take(a=pandas.core.indexes.base.Index, indices=numpy.ndarray)",1
"numpy.array(tuple, copy=NoneType, dtype=builtins.bool)",1
"numpy.array(tuple, copy=builtins.bool)",1
numpy.ma.core.MaskedArray.ndim,2
numpy.ma.floatore.MaskedArray[int] = float,2
numpy.ma.intore.MaskedArray[int] = int,2
"numpy.array(numpy.ma.core.MaskedArray, copy=builtins.bool)",1
"numpy.ma.extras.masked_all(dtype=Type[builtins.bool], shape=tuple[int])",1
"numpy.array(numpy.ma.core.MaskedArray, copy=NoneType, dtype=builtins.bool)",1
numpy.ma.builtins.boolore.MaskedArray[int] = builtins.bool,1
"numpy.ma.core.MaskedArray.view(dtype=str, self=numpy.ma.core.MaskedArray)",1
numpy.ma.datetime.datetimeore.MaskedArray[int] = datetime.datetime,2
"numpy.array(list[Union[datetime.datetime, int]], copy=builtins.bool)",1
"numpy.ma.extras.masked_all(dtype=Type[builtins.float], shape=tuple[int])",1
numpy.dtype(NoneType),1
"numpy.ndarray[slilist[Union[float, pandas._libs.tslibs.nattype.NaTType]]e[NoneType, NoneType, NoneType]] = list[Union[float, pandas._libs.tslibs.nattype.NaTType]]",1
"numpy.array_equal(a1=list[Union[float, int]], a2=numpy.ndarray)",1
"numpy.array(list[Union[NoneType, datetime.datetime]])",1
"numpy.array(list[Union[datetime.datetime, float]], copy=builtins.bool)",1
"numpy.ndarray[slilist[Union[datetime.datetime, float]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.datetime, float]]",1
"numpy.array(list[Union[NoneType, pandas._libs.interval.Interval]])",1
"numpy.array(list[Union[NoneType, pandas._libs.tslibs.period.Period]])",1
"numpy.ndarray[slilist[list[list[int]]]e[NoneType, NoneType, NoneType]] = list[list[list[int]]]",1
"numpy.asarray(a=tuple[int, int, float, int], dtype=Type[builtins.object])",1
"numpy.array(tuple[int, float, float], copy=builtins.bool)",1
"numpy.asarray(a=tuple[int, NoneType, float, int], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[numpy.datetime64, numpy.datetime64, numpy.datetime64, numpy.datetime64], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime], dtype=Type[builtins.object])",1
"numpy.array(tuple[NoneType], copy=builtins.bool)",1
"numpy.ndarray[slituple[tuple[int, int], tuple[int, int], tuple[int, int]]e[NoneType, NoneType, NoneType]] = tuple[tuple[int, int], tuple[int, int], tuple[int, int]]",1
"numpy.array(tuple[int, NoneType], copy=builtins.bool)",1
"numpy.ndarray[slilist[Union[datetime.timedelta, numpy.timedelta64]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.timedelta, numpy.timedelta64]]",1
"numpy.array(list[Union[datetime.timedelta, float]], copy=builtins.bool)",1
"numpy.ndarray[slilist[Union[int, numpy.timedelta64]]e[NoneType, NoneType, NoneType]] = list[Union[int, numpy.timedelta64]]",1
"numpy.ndarray[slilist[Union[datetime.timedelta, str]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.timedelta, str]]",1
"numpy.issubdtype(arg1=numpy.dtype, arg2=numpy.dtype)",1
numpy.cumsum(a=pandas.core.series.Series),1
numpy.cumprod(a=pandas.core.series.Series),1
numpy.cumprod(a=numpy.ndarray),3
"numpy.ufunc.accumulate(numpy.ufunc, numpy.ndarray)",2
"numpy.ndarray[sliinte[NoneType, numpy.int64, NoneType]] = int",1
builtins.builtin_function_or_methoduiltins.builtins.builtin_function_or_methoduiltin_function_or_method == builtins.builtin_function_or_method,2
"numpy.ndarray[slilist[Union[datetime.time, float]]e[NoneType, NoneType, NoneType]] = list[Union[datetime.time, float]]",1
numpy.dtype(Type[pandas.core.arrays.categorical.Categorical]),1
"Type[numpy.datetime64] in tuple[Type[builtins.object], Type[numpy.object_], str, str]",1
"numpy.array(list[Union[NoneType, int]], dtype=str)",1
numpy.dtype == pandas.core.arrays.numpy_.PandasDtype,1
numpy.asarray(a=list[numpy.timedelta64]),1
"numpy.where(numpy.ndarray, numpy.ndarray, pandas._libs.tslibs.timestamps.Timestamp)",1
pandas.core.series.Series & numpy.ndarray,1
"numpy.array(list[Union[NoneType, builtins.bool, float]])",2
"numpy.ndarray[slilist[Union[NoneType, builtins.bool, float]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, builtins.bool, float]]",1
"numpy.array(list[numpy.int64], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.ndarray[sliNoneTypee[NoneType, NoneType, int]] = NoneType",1
"numpy.ndarray[slilist[pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_repr_unicode.<locals>.County]e[NoneType, NoneType, NoneType]] = list[pandas.tests.series.test_repr.TestCategoricalRepr.test_categorical_repr_unicode.<locals>.County]",1
"numpy.ndarray[slibuiltins.boole[int, int, NoneType]] = builtins.bool",1
"numpy.asarray(a=pandas.core.series.Series, dtype=str)",1
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, int, int, dtype=str)",1
numpy.positive(pandas.core.series.Series),1
numpy.positive(pandas.core.arrays.sparse.array.SparseArray),1
numpy.positive(numpy.ndarray),1
numpy.floor(pandas.core.series.Series),1
"numpy.logaddexp(pandas.core.arrays.sparse.array.SparseArray, pandas.core.arrays.sparse.array.SparseArray)",3
"numpy.logaddexp(numpy.ndarray, numpy.ndarray)",3
"numpy.add(pandas.core.series.Series, pandas.core.arrays.sparse.array.SparseArray)",1
"numpy.add(pandas.core.series.Series, numpy.ndarray)",2
"numpy.add(pandas.core.series.Series, pandas.core.indexes.numeric.Int64Index)",1
"numpy.logaddexp(pandas.core.series.Series, pandas.core.indexes.numeric.Int64Index)",1
"numpy.add(pandas.core.arrays.sparse.array.SparseArray, pandas.core.arrays.sparse.array.SparseArray)",1
"numpy.logaddexp(pandas.core.series.Series, pandas.core.series.Series)",1
"numpy.add(int, pandas.core.series.Series)",1
"numpy.logaddexp(int, pandas.core.arrays.sparse.array.SparseArray)",1
"numpy.logaddexp(int, pandas.core.series.Series)",1
"numpy.add(int, numpy.ndarray)",1
"numpy.logaddexp(pandas.core.arrays.sparse.array.SparseArray, int)",1
"numpy.logaddexp(pandas.core.series.Series, int)",1
"numpy.logaddexp(numpy.ndarray, int)",1
"numpy.divmod(pandas.core.series.Series, pandas.core.series.Series)",1
numpy.divmod,1
numpy.modf(pandas.core.series.Series),1
"numpy.add(pandas.core.series.Series, pandas.tests.series.test_ufunc.test_object_series_ok.<locals>.Dummy)",1
"numpy.ufunc.reduce(numpy.ufunc, pandas.core.arrays.sparse.array.SparseArray)",1
"numpy.ufunc.reduce(numpy.ufunc, int)",1
"numpy.ufunc.reduce(numpy.ufunc, pandas.core.series.Series)",1
"numpy.ufunc.reduce(numpy.ufunc, pandas.core.arrays.datetimes.DatetimeArray)",1
numpy.datetime64 == pandas._libs.tslibs.timestamps.Timestamp,1
"numpy.ufunc.reduce(numpy.ufunc, pandas.core.arrays.period.PeriodArray)",1
"numpy.add(pandas.core.series.Series, list[int])",1
"numpy.add(pandas.core.series.Series, collections.deque)",1
"numpy.add(pandas.core.series.Series, tuple[int, int, int])",1
"numpy.ndarray[slilist[pandas.tests.series.test_ufunc.test_object_dtype_ok.<locals>.Thing]e[NoneType, NoneType, NoneType]] = list[pandas.tests.series.test_ufunc.test_object_dtype_ok.<locals>.Thing]",1
"numpy.add(pandas.core.series.Series, pandas.tests.series.test_ufunc.test_object_dtype_ok.<locals>.Thing)",1
numpy.subtract,1
"numpy.ufunc.outer(numpy.ufunc, numpy.ndarray, numpy.ndarray)",1
"numpy.may_share_memory(pandas.core.indexes.base.Index, pandas.core.indexes.base.Index)",1
"numpy.repeat(a=builtins.function, repeats=int)",1
"numpy.ndarray[sliinte[int, numpy.int64, NoneType]] = int",1
"numpy.arange(float, dtype=str)",2
"numpy.where(numpy.ndarray, int, pandas.core.series.Series)",1
numpy.ndarray[numpy.int64] = int,1
numpy.fix(x=pandas.core.series.Series),1
"numpy.ndarray[slilist[Union[int, slice[NoneType, NoneType, NoneType]]]e[NoneType, NoneType, NoneType]] = list[Union[int, slice[NoneType, NoneType, NoneType]]]",1
"numpy.asarray(a=list[Union[int, slice[NoneType, NoneType, NoneType]]])",1
numpy.timedelta64 != pandas._libs.tslibs.nattype.NaTType,1
"numpy.ndarray[slilist[Union[numpy.timedelta64, str]]e[NoneType, NoneType, NoneType]] = list[Union[numpy.timedelta64, str]]",1
pandas._linumpy.timedelta64s.tslinumpy.timedelta64s.timedeltas.Timedelta != numpy.timedelta64,1
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=list[float])",1
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=list[int])",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, list[int])",1
numpy.asanyarray(a=list[int]),1
numpy.asanyarray(a=list[str]),1
"numpy.asanyarray(a=list[Union[pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]])",1
"numpy.ndarray[slilist[int]e[int, int, int]] = list[int]",1
"numpy.ndarray[slilist[int]e[int, int, NoneType]] = list[int]",1
"numpy.resize(a=list[builtins.bool], new_shape=int)",1
"numpy.arange(int, dtype=Type[builtins.float])",1
"numpy.where(numpy.ndarray, numpy.ndarray, list[float])",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, list[float])",2
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=list[numpy.float64])",1
"numpy.where(numpy.ndarray, numpy.ndarray, list[numpy.float64])",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, list[numpy.float64])",2
numpy.asarray(a=tuple[float]),1
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=tuple[float])",1
"numpy.where(numpy.ndarray, numpy.ndarray, tuple[float])",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, tuple[float])",2
numpy.asarray(a=tuple[numpy.float64]),1
"numpy.place(arr=numpy.ndarray, mask=numpy.ndarray, vals=tuple[numpy.float64])",1
"numpy.where(numpy.ndarray, numpy.ndarray, tuple[numpy.float64])",1
"numpy.putmask(numpy.ndarray, numpy.ndarray, tuple[numpy.float64])",2
"numpy.where(numpy.ndarray, numpy.ndarray, list[int])",1
"numpy.where(numpy.ndarray, pandas.core.arrays.sparse.array.SparseArray, int)",1
numpy.argsort(a=pandas.core.series.Series),3
"numpy.argsort(a=numpy.ndarray, kind=NoneType)",1
numpy.ndarray >= float,1
numpy.ndarray >= numpy.float64,1
"numpy.where(numpy.ndarray, numpy.ndarray, str)",1
numpy.isfinite(pandas.core.series.Series),1
"numpy.repeat(a=float, repeats=int)",1
"numpy.asarray(a=list[tuple[str]], dtype=str)",1
"numpy.ndarray[slilist[Union[NoneType, float, list[int], numpy.ndarray, pandas.core.series.Series]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, float, list[int], numpy.ndarray, pandas.core.series.Series]]",1
"numpy.ndarray[slilist[Union[int, list[Union[int, list[int]]]]]e[NoneType, NoneType, NoneType]] = list[Union[int, list[Union[int, list[int]]]]]",1
"numpy.ndarray[slilist[builtins.range]e[NoneType, NoneType, NoneType]] = list[builtins.range]",1
numpy.ndarray.strides,1
"numpy.lib.stride_tricks.as_strided(shape=tuple[int, int], strides=tuple[int, int], x=numpy.ndarray)",1
"numpy.ndarray[list[Union[int, numpy.int64]]] = float",1
numpy.ndarray[list[numpy.int64]] = float,1
numpy.finfo.min,1
numpy.nextafter,1
"numpy.nextafter(list[numpy.float32], int, dtype=str)",1
"numpy.array(list[numpy.float32], copy=numpy.dtype, dtype=builtins.bool)",1
"numpy.asarray(a=tuple[float, float])",1
"numpy.asarray(a=tuple[float, float], dtype=NoneType)",1
"numpy.percentile(a=numpy.ndarray, q=int)",1
numpy.int64 == numpy.float64,1
"numpy.random.mtrand.RandomState.choice(numpy.random.mtrand.RandomState, builtins.range, int)",1
"numpy.array(builtins.range, dtype=str)",1
"numpy.insert(arr=numpy.ndarray, obj=numpy.ndarray, values=int)",1
"numpy.insert(arr=numpy.ndarray, obj=numpy.ndarray, values=float)",1
"numpy.array(list[Union[pandas._libs.algos.Infinity, pandas._libs.algos.NegInfinity, str]], dtype=str)",1
"numpy.insert(arr=numpy.ndarray, obj=numpy.ndarray, values=NoneType)",1
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.algos.Infinity, pandas._libs.algos.NegInfinity]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.algos.Infinity, pandas._libs.algos.NegInfinity]]",1
numpy.float64 - pandas.core.series.Series,2
numpy.around(a=list[float]),1
numpy.fabs(numpy.ndarray),2
"numpy.array(list[Union[float, str]], dtype=numpy.dtype)",1
"numpy.array(list[list[float]], dtype=numpy.dtype)",1
"numpy.asarray(a=list[Union[float, pandas._libs.tslibs.nattype.NaTType]])",1
"numpy.ndarray[slilist[Union[float, list, list[int]]]e[NoneType, NoneType, NoneType]] = list[Union[float, list, list[int]]]",1
"numpy.ndarray[slilist[Union[builtins.bool, int, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[builtins.bool, int, pandas._libs.tslibs.timestamps.Timestamp, str]]",1
"numpy.round_(a=numpy.ndarray, decimals=int)",2
"numpy.round_(a=pandas.core.series.Series, decimals=pandas.core.series.Series, out=int)",1
"numpy.ndarray[tuple[slifloate[NoneType, numpy.int64, NoneType]]] = float",1
"numpy.ndarray[tuple[slinumpy.float64e[NoneType, int, NoneType]]] = numpy.float64",1
"numpy.ndarray[tuple[slidicte[NoneType, int, NoneType]]] = dict",1
"numpy.asarray(a=tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], dtype=Type[builtins.object])",1
"numpy.array(tuple[pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp, pandas._libs.tslibs.timestamps.Timestamp], copy=builtins.bool)",1
"numpy.array(tuple[float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float], copy=builtins.bool)",1
numpy.datetime64.astype,2
"numpy.generic.astype(numpy.datetime64, Type[numpy.int64])",2
numpy.generic.item(numpy.datetime64),1
numpy.array(list[Type[builtins.bool]]),1
"numpy.ndarray[slituple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]e[NoneType, NoneType, NoneType]] = tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]",1
numpy.dtype(collections.deque),1
"numpy.ndarray[slicollections.dequee[NoneType, NoneType, NoneType]] = collections.deque",1
"numpy.array(list[Union[datetime.datetime, pandas._libs.tslibs.nattype.NaTType]], dtype=Type[builtins.object])",1
"numpy.ndarray[slilist[Union[NoneType, pandas._libs.tslibs.timestamps.Timestamp, str]]e[NoneType, NoneType, NoneType]] = list[Union[NoneType, pandas._libs.tslibs.timestamps.Timestamp, str]]",1
"numpy.array(list[Union[float, int, pandas._libs.tslibs.nattype.NaTType, str]], dtype=str)",1
"numpy.ndarray[slilist[Union[int, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]e[NoneType, NoneType, NoneType]] = list[Union[int, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.timestamps.Timestamp]]",1
"numpy.array(list[Union[float, pandas._libs.tslibs.timestamps.Timestamp]], dtype=str)",1
"numpy.asarray(a=list[Union[pandas._libs.tslibs.timestamps.Timestamp, str]])",1
numpy.ndarray[int] = datetime.datetime,1
"numpy.array(list[Union[float, str]])",2
numpy.ndarray > numpy.float64,1
numpy.ndarray <= numpy.float64,1
numpy.datetime64 == str,1
NoneType == numpy.dtype,1
"numpy.array(list[pandas._libs.missing.NAType], dtype=str)",1
"numpy.ndarray[slilist[Union[decimal.Decimal, float, str]]e[NoneType, NoneType, NoneType]] = list[Union[decimal.Decimal, float, str]]",1
"numpy.ndarray[slilist[Union[float, list[float]]]e[NoneType, NoneType, NoneType]] = list[Union[float, list[float]]]",1
"numpy.ndarray[slilist[Union[float, numpy.ndarray]]e[NoneType, NoneType, NoneType]] = list[Union[float, numpy.ndarray]]",1
"numpy.ndarray[slilist[Union[float, list[Union[float, int]], str]]e[NoneType, NoneType, NoneType]] = list[Union[float, list[Union[float, int]], str]]",1
numpy.dtype.char,1
numpy.uint64 >= int,1
numpy.timedelta64 * int,2
"numpy.in1d(ar1=pandas.core.indexes.numeric.Int64Index, ar2=tuple[int, int, int, int])",1
numpy.ndarray * pandas.tseries.offsets.Day,1
pandas.tseries.offsets.Day * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.BusinessDay]]),1
numpy.ndarray * pandas.tseries.offsets.BusinessDay,1
pandas.tseries.offsets.BusinessDay * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.CustomBusinessDay]]),1
numpy.ndarray * pandas.tseries.offsets.CustomBusinessDay,1
pandas.tseries.offsets.CustomBusinessDay * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.CustomBusinessMonthBegin]]),1
numpy.ndarray * pandas.tseries.offsets.CustomBusinessMonthBegin,1
pandas.tseries.offsets.CustomBusinessMonthBegin * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.BusinessMonthBegin]]),1
numpy.ndarray * pandas.tseries.offsets.BusinessMonthBegin,1
pandas.tseries.offsets.BusinessMonthBegin * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.BusinessMonthEnd]]),1
numpy.ndarray * pandas.tseries.offsets.BusinessMonthEnd,1
pandas.tseries.offsets.BusinessMonthEnd * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.SemiMonthBegin]]),1
numpy.ndarray * pandas.tseries.offsets.SemiMonthBegin,1
pandas.tseries.offsets.SemiMonthBegin * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.CustomBusinessHour]]),1
numpy.ndarray * pandas.tseries.offsets.CustomBusinessHour,1
pandas.tseries.offsets.CustomBusinessHour * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.BYearBegin]]),1
numpy.ndarray * pandas.tseries.offsets.BYearBegin,1
pandas.tseries.offsets.BYearBegin * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.BYearEnd]]),1
numpy.ndarray * pandas.tseries.offsets.BYearEnd,1
pandas.tseries.offsets.BYearEnd * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.BQuarterBegin]]),1
numpy.ndarray * pandas.tseries.offsets.BQuarterBegin,1
pandas.tseries.offsets.BQuarterBegin * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.BQuarterEnd]]),1
numpy.ndarray * pandas.tseries.offsets.BQuarterEnd,1
pandas.tseries.offsets.BQuarterEnd * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.FY5253Quarter]]),1
numpy.ndarray * pandas.tseries.offsets.FY5253Quarter,1
pandas.tseries.offsets.FY5253Quarter * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.Week]]),1
numpy.ndarray * pandas.tseries.offsets.Week,1
pandas.tseries.offsets.Week * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.Easter]]),1
numpy.ndarray * pandas.tseries.offsets.Easter,1
pandas.tseries.offsets.Easter * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.Minute]]),1
pandas.tseries.offsets.Minute * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.Milli]]),1
numpy.ndarray * pandas.tseries.offsets.Milli,1
pandas.tseries.offsets.Milli * numpy.ndarray,1
numpy.array(list[list[pandas.tseries.offsets.Nano]]),1
numpy.ndarray * pandas.tseries.offsets.Nano,1
pandas.tseries.offsets.Nano * numpy.ndarray,1
numpy.ndarray + pandas.tseries.offsets.CustomBusinessHour,1
"numpy.ndim(a=tuple[datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime])",1
"numpy.asarray(a=tuple[datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime])",1
"numpy.ndim(a=tuple[datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime, datetime.datetime])",1
numpy.ndim(a=builtins.dict_keys),1
numpy.ndim(a=builtins.dict_values),1
pandas.tseries.offsets.Hour / numpy.timedelta64,1
pandas.tseries.offsets.Second / numpy.timedelta64,1
pandas.tseries.offsets.Micro / numpy.timedelta64,1
numpy.timedelta64 * float,1
int * numpy.timedelta64,1
numpy.ndarray / pandas.tseries.offsets.Hour,1
numpy.timedelta64 / pandas.tseries.offsets.Minute,1
numpy.ndarray / pandas.tseries.offsets.Second,1
numpy.timedelta64 / pandas.tseries.offsets.Milli,1
numpy.ndarray / pandas.tseries.offsets.Micro,1
numpy.timedelta64 / pandas.tseries.offsets.Nano,1
"numpy.array(list[datetime.date], dtype=str)",1
"numpy.array(list[pandas.tests.tslibs.test_array_to_datetime.SubDatetime], dtype=Type[builtins.object])",1
numpy.<numpy.vectorize object at 0x7fa94e3ac880>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e3ac7f0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e388190>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e388220>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e388490>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e388730>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e388d90>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e388d00>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e38f310>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e38f5b0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e38fc10>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e38fca0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e39e760>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e39e4c0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e39e640>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e39eb50>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e3a52b0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e3a5370>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e3a5580>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa94e3a59d0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa8a2332490>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa8a23323d0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa8a23321c0>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa8a2332850>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa8a2339130>(args=tuple[numpy.ndarray]),1
numpy.<numpy.vectorize object at 0x7fa8a23391c0>(args=tuple[numpy.ndarray]),1
numpy.asarray(a=numpy.int16),1
Type[numpy.ndarray] != Type[builtins.list],1
Type[Type[numpy.ndarray]uiltins.int] != Type[numpy.ndarray],1
numpy.str_ != numpy.str_,1
numpy.int64 * float,1
"numpy.round_(a=numpy.float64, decimals=int)",1
numpy.asarray(a=numpy.int8),1
numpy.asarray(a=numpy.str_),1
"numpy.array(list, dtype=Type[numpy.uint64])",1
numpy.uint64 in numpy.ndarray,2
numpy.geterr,1
numpy.Inf,1
"numpy.ndarray[slilist[Union[list[Union[float, int, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.timestamps.Timestamp, str]], pandas.core.indexes.datetimes.DatetimeIndex, pandas.core.indexes.timedeltas.TimedeltaIndex]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[float, int, pandas._libs.tslibs.nattype.NaTType, pandas._libs.tslibs.period.Period, pandas._libs.tslibs.timestamps.Timestamp, str]], pandas.core.indexes.datetimes.DatetimeIndex, pandas.core.indexes.timedeltas.TimedeltaIndex]]",1
numpy.ndarray.index,1
"numpy.full(dtype=str, fill_value=int, shape=int)",1
"numpy.array(list[Union[float, numpy.float64]], copy=numpy.dtype, dtype=builtins.bool)",1
numpy.log(float),1
numpy.exp(numpy.float64),1
"numpy.asarray(a=pandas.core.indexes.numeric.Int64Index, dtype=numpy.dtype)",1
"numpy.asarray(a=pandas.core.indexes.numeric.Float64Index, dtype=numpy.dtype)",1
NoneType != numpy.float64,1
numpy.float64 != NoneType,1
numpy.int64 == str,1
str == numpy.int64,1
str == numpy.float64,1
"numpy.asarray(a=tuple[int, int, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[float, float, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[int, str, str, str, str], dtype=Type[builtins.object])",1
"numpy.asarray(a=tuple[float, str, str, str], dtype=Type[builtins.object])",1
numpy.int64 == NoneType,1
NoneType == numpy.int64,1
NoneType == numpy.float64,1
"numpy.arange(float, float, int)",2
"numpy.append(arr=list[float], values=numpy.ndarray)",1
numpy.random.mtrand.RandomState(seed=int),1
"numpy.random.mtrand.RandomState.randint(numpy.random.mtrand.RandomState, int, high=int, size=int)",1
numpy.copy(a=numpy.ndarray),1
"numpy.ndarray[slilist[Union[list[Union[float, int]], pandas.core.series.Series]]e[NoneType, NoneType, NoneType]] = list[Union[list[Union[float, int]], pandas.core.series.Series]]",1
"numpy.concatenate(tuple[pandas.core.indexes.datetimes.DatetimeIndex, pandas.core.indexes.datetimes.DatetimeIndex])",1
numpy.nanstd,1
numpy.nanvar,1
"numpy.nanstd(a=numpy.ndarray, ddof=int)",1
"numpy.nanvar(a=numpy.ndarray, ddof=int)",1
